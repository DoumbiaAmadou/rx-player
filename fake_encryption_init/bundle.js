(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // <define:__ENVIRONMENT__>
  var PRODUCTION, DEV, CURRENT_ENV, define_ENVIRONMENT_default;
  var init_define_ENVIRONMENT = __esm({
    "<define:__ENVIRONMENT__>"() {
      PRODUCTION = 0;
      DEV = 1;
      CURRENT_ENV = 1;
      define_ENVIRONMENT_default = { PRODUCTION, DEV, CURRENT_ENV };
    }
  });

  // <define:__FEATURES__>
  var IS_DISABLED, IS_ENABLED, BIF_PARSER, DASH, DIRECTFILE, EME, HTML_SAMI, HTML_SRT, HTML_TTML, HTML_VTT, LOCAL_MANIFEST, METAPLAYLIST, NATIVE_SAMI, NATIVE_SRT, NATIVE_TTML, NATIVE_VTT, SMOOTH, define_FEATURES_default;
  var init_define_FEATURES = __esm({
    "<define:__FEATURES__>"() {
      IS_DISABLED = 0;
      IS_ENABLED = 1;
      BIF_PARSER = 1;
      DASH = 1;
      DIRECTFILE = 1;
      EME = 1;
      HTML_SAMI = 1;
      HTML_SRT = 1;
      HTML_TTML = 1;
      HTML_VTT = 1;
      LOCAL_MANIFEST = 1;
      METAPLAYLIST = 1;
      NATIVE_SAMI = 1;
      NATIVE_SRT = 1;
      NATIVE_TTML = 1;
      NATIVE_VTT = 1;
      SMOOTH = 1;
      define_FEATURES_default = { IS_DISABLED, IS_ENABLED, BIF_PARSER, DASH, DIRECTFILE, EME, HTML_SAMI, HTML_SRT, HTML_TTML, HTML_VTT, LOCAL_MANIFEST, METAPLAYLIST, NATIVE_SAMI, NATIVE_SRT, NATIVE_TTML, NATIVE_VTT, SMOOTH };
    }
  });

  // <define:__LOGGER_LEVEL__>
  var CURRENT_LEVEL, define_LOGGER_LEVEL_default;
  var init_define_LOGGER_LEVEL = __esm({
    "<define:__LOGGER_LEVEL__>"() {
      CURRENT_LEVEL = "INFO";
      define_LOGGER_LEVEL_default = { CURRENT_LEVEL };
    }
  });

  // node_modules/core-js/internals/global.js
  var require_global = __commonJS({
    "node_modules/core-js/internals/global.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var check = function(it) {
        return it && it.Math == Math && it;
      };
      module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
        return this;
      }() || Function("return this")();
    }
  });

  // node_modules/core-js/internals/fails.js
  var require_fails = __commonJS({
    "node_modules/core-js/internals/fails.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = function(exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
    }
  });

  // node_modules/core-js/internals/descriptors.js
  var require_descriptors = __commonJS({
    "node_modules/core-js/internals/descriptors.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      module.exports = !fails(function() {
        return Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1] != 7;
      });
    }
  });

  // node_modules/core-js/internals/function-bind-native.js
  var require_function_bind_native = __commonJS({
    "node_modules/core-js/internals/function-bind-native.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      module.exports = !fails(function() {
        var test = function() {
        }.bind();
        return typeof test != "function" || test.hasOwnProperty("prototype");
      });
    }
  });

  // node_modules/core-js/internals/function-call.js
  var require_function_call = __commonJS({
    "node_modules/core-js/internals/function-call.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var NATIVE_BIND = require_function_bind_native();
      var call = Function.prototype.call;
      module.exports = NATIVE_BIND ? call.bind(call) : function() {
        return call.apply(call, arguments);
      };
    }
  });

  // node_modules/core-js/internals/object-property-is-enumerable.js
  var require_object_property_is_enumerable = __commonJS({
    "node_modules/core-js/internals/object-property-is-enumerable.js"(exports) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $propertyIsEnumerable = {}.propertyIsEnumerable;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : $propertyIsEnumerable;
    }
  });

  // node_modules/core-js/internals/create-property-descriptor.js
  var require_create_property_descriptor = __commonJS({
    "node_modules/core-js/internals/create-property-descriptor.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
    }
  });

  // node_modules/core-js/internals/function-uncurry-this.js
  var require_function_uncurry_this = __commonJS({
    "node_modules/core-js/internals/function-uncurry-this.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var bind = FunctionPrototype.bind;
      var call = FunctionPrototype.call;
      var uncurryThis = NATIVE_BIND && bind.bind(call, call);
      module.exports = NATIVE_BIND ? function(fn) {
        return fn && uncurryThis(fn);
      } : function(fn) {
        return fn && function() {
          return call.apply(fn, arguments);
        };
      };
    }
  });

  // node_modules/core-js/internals/classof-raw.js
  var require_classof_raw = __commonJS({
    "node_modules/core-js/internals/classof-raw.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var toString = uncurryThis({}.toString);
      var stringSlice = uncurryThis("".slice);
      module.exports = function(it) {
        return stringSlice(toString(it), 8, -1);
      };
    }
  });

  // node_modules/core-js/internals/indexed-object.js
  var require_indexed_object = __commonJS({
    "node_modules/core-js/internals/indexed-object.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var classof = require_classof_raw();
      var Object2 = global2.Object;
      var split = uncurryThis("".split);
      module.exports = fails(function() {
        return !Object2("z").propertyIsEnumerable(0);
      }) ? function(it) {
        return classof(it) == "String" ? split(it, "") : Object2(it);
      } : Object2;
    }
  });

  // node_modules/core-js/internals/require-object-coercible.js
  var require_require_object_coercible = __commonJS({
    "node_modules/core-js/internals/require-object-coercible.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var TypeError2 = global2.TypeError;
      module.exports = function(it) {
        if (it == void 0)
          throw TypeError2("Can't call method on " + it);
        return it;
      };
    }
  });

  // node_modules/core-js/internals/to-indexed-object.js
  var require_to_indexed_object = __commonJS({
    "node_modules/core-js/internals/to-indexed-object.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var IndexedObject = require_indexed_object();
      var requireObjectCoercible = require_require_object_coercible();
      module.exports = function(it) {
        return IndexedObject(requireObjectCoercible(it));
      };
    }
  });

  // node_modules/core-js/internals/is-callable.js
  var require_is_callable = __commonJS({
    "node_modules/core-js/internals/is-callable.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = function(argument) {
        return typeof argument == "function";
      };
    }
  });

  // node_modules/core-js/internals/is-object.js
  var require_is_object = __commonJS({
    "node_modules/core-js/internals/is-object.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var isCallable = require_is_callable();
      module.exports = function(it) {
        return typeof it == "object" ? it !== null : isCallable(it);
      };
    }
  });

  // node_modules/core-js/internals/get-built-in.js
  var require_get_built_in = __commonJS({
    "node_modules/core-js/internals/get-built-in.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isCallable = require_is_callable();
      var aFunction = function(argument) {
        return isCallable(argument) ? argument : void 0;
      };
      module.exports = function(namespace, method) {
        return arguments.length < 2 ? aFunction(global2[namespace]) : global2[namespace] && global2[namespace][method];
      };
    }
  });

  // node_modules/core-js/internals/object-is-prototype-of.js
  var require_object_is_prototype_of = __commonJS({
    "node_modules/core-js/internals/object-is-prototype-of.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis({}.isPrototypeOf);
    }
  });

  // node_modules/core-js/internals/engine-user-agent.js
  var require_engine_user_agent = __commonJS({
    "node_modules/core-js/internals/engine-user-agent.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("navigator", "userAgent") || "";
    }
  });

  // node_modules/core-js/internals/engine-v8-version.js
  var require_engine_v8_version = __commonJS({
    "node_modules/core-js/internals/engine-v8-version.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var userAgent = require_engine_user_agent();
      var process3 = global2.process;
      var Deno = global2.Deno;
      var versions = process3 && process3.versions || Deno && Deno.version;
      var v8 = versions && versions.v8;
      var match;
      var version;
      if (v8) {
        match = v8.split(".");
        version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
      }
      if (!version && userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);
        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match)
            version = +match[1];
        }
      }
      module.exports = version;
    }
  });

  // node_modules/core-js/internals/native-symbol.js
  var require_native_symbol = __commonJS({
    "node_modules/core-js/internals/native-symbol.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var V8_VERSION = require_engine_v8_version();
      var fails = require_fails();
      module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
        var symbol = Symbol();
        return !String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
      });
    }
  });

  // node_modules/core-js/internals/use-symbol-as-uid.js
  var require_use_symbol_as_uid = __commonJS({
    "node_modules/core-js/internals/use-symbol-as-uid.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var NATIVE_SYMBOL = require_native_symbol();
      module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
    }
  });

  // node_modules/core-js/internals/is-symbol.js
  var require_is_symbol = __commonJS({
    "node_modules/core-js/internals/is-symbol.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var getBuiltIn = require_get_built_in();
      var isCallable = require_is_callable();
      var isPrototypeOf = require_object_is_prototype_of();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var Object2 = global2.Object;
      module.exports = USE_SYMBOL_AS_UID ? function(it) {
        return typeof it == "symbol";
      } : function(it) {
        var $Symbol = getBuiltIn("Symbol");
        return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object2(it));
      };
    }
  });

  // node_modules/core-js/internals/try-to-string.js
  var require_try_to_string = __commonJS({
    "node_modules/core-js/internals/try-to-string.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var String2 = global2.String;
      module.exports = function(argument) {
        try {
          return String2(argument);
        } catch (error) {
          return "Object";
        }
      };
    }
  });

  // node_modules/core-js/internals/a-callable.js
  var require_a_callable = __commonJS({
    "node_modules/core-js/internals/a-callable.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isCallable = require_is_callable();
      var tryToString = require_try_to_string();
      var TypeError2 = global2.TypeError;
      module.exports = function(argument) {
        if (isCallable(argument))
          return argument;
        throw TypeError2(tryToString(argument) + " is not a function");
      };
    }
  });

  // node_modules/core-js/internals/get-method.js
  var require_get_method = __commonJS({
    "node_modules/core-js/internals/get-method.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var aCallable = require_a_callable();
      module.exports = function(V, P) {
        var func = V[P];
        return func == null ? void 0 : aCallable(func);
      };
    }
  });

  // node_modules/core-js/internals/ordinary-to-primitive.js
  var require_ordinary_to_primitive = __commonJS({
    "node_modules/core-js/internals/ordinary-to-primitive.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var call = require_function_call();
      var isCallable = require_is_callable();
      var isObject2 = require_is_object();
      var TypeError2 = global2.TypeError;
      module.exports = function(input, pref) {
        var fn, val;
        if (pref === "string" && isCallable(fn = input.toString) && !isObject2(val = call(fn, input)))
          return val;
        if (isCallable(fn = input.valueOf) && !isObject2(val = call(fn, input)))
          return val;
        if (pref !== "string" && isCallable(fn = input.toString) && !isObject2(val = call(fn, input)))
          return val;
        throw TypeError2("Can't convert object to primitive value");
      };
    }
  });

  // node_modules/core-js/internals/is-pure.js
  var require_is_pure = __commonJS({
    "node_modules/core-js/internals/is-pure.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = false;
    }
  });

  // node_modules/core-js/internals/set-global.js
  var require_set_global = __commonJS({
    "node_modules/core-js/internals/set-global.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var defineProperty = Object.defineProperty;
      module.exports = function(key, value) {
        try {
          defineProperty(global2, key, { value, configurable: true, writable: true });
        } catch (error) {
          global2[key] = value;
        }
        return value;
      };
    }
  });

  // node_modules/core-js/internals/shared-store.js
  var require_shared_store = __commonJS({
    "node_modules/core-js/internals/shared-store.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var setGlobal = require_set_global();
      var SHARED = "__core-js_shared__";
      var store = global2[SHARED] || setGlobal(SHARED, {});
      module.exports = store;
    }
  });

  // node_modules/core-js/internals/shared.js
  var require_shared = __commonJS({
    "node_modules/core-js/internals/shared.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var IS_PURE = require_is_pure();
      var store = require_shared_store();
      (module.exports = function(key, value) {
        return store[key] || (store[key] = value !== void 0 ? value : {});
      })("versions", []).push({
        version: "3.21.1",
        mode: IS_PURE ? "pure" : "global",
        copyright: "\xA9 2014-2022 Denis Pushkarev (zloirock.ru)",
        license: "https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",
        source: "https://github.com/zloirock/core-js"
      });
    }
  });

  // node_modules/core-js/internals/to-object.js
  var require_to_object = __commonJS({
    "node_modules/core-js/internals/to-object.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var requireObjectCoercible = require_require_object_coercible();
      var Object2 = global2.Object;
      module.exports = function(argument) {
        return Object2(requireObjectCoercible(argument));
      };
    }
  });

  // node_modules/core-js/internals/has-own-property.js
  var require_has_own_property = __commonJS({
    "node_modules/core-js/internals/has-own-property.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var toObject = require_to_object();
      var hasOwnProperty = uncurryThis({}.hasOwnProperty);
      module.exports = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty(toObject(it), key);
      };
    }
  });

  // node_modules/core-js/internals/uid.js
  var require_uid = __commonJS({
    "node_modules/core-js/internals/uid.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var id = 0;
      var postfix = Math.random();
      var toString = uncurryThis(1 .toString);
      module.exports = function(key) {
        return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
      };
    }
  });

  // node_modules/core-js/internals/well-known-symbol.js
  var require_well_known_symbol = __commonJS({
    "node_modules/core-js/internals/well-known-symbol.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var shared = require_shared();
      var hasOwn = require_has_own_property();
      var uid = require_uid();
      var NATIVE_SYMBOL = require_native_symbol();
      var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
      var WellKnownSymbolsStore = shared("wks");
      var Symbol2 = global2.Symbol;
      var symbolFor = Symbol2 && Symbol2["for"];
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
      module.exports = function(name) {
        if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
          var description = "Symbol." + name;
          if (NATIVE_SYMBOL && hasOwn(Symbol2, name)) {
            WellKnownSymbolsStore[name] = Symbol2[name];
          } else if (USE_SYMBOL_AS_UID && symbolFor) {
            WellKnownSymbolsStore[name] = symbolFor(description);
          } else {
            WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
          }
        }
        return WellKnownSymbolsStore[name];
      };
    }
  });

  // node_modules/core-js/internals/to-primitive.js
  var require_to_primitive = __commonJS({
    "node_modules/core-js/internals/to-primitive.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var call = require_function_call();
      var isObject2 = require_is_object();
      var isSymbol = require_is_symbol();
      var getMethod = require_get_method();
      var ordinaryToPrimitive = require_ordinary_to_primitive();
      var wellKnownSymbol = require_well_known_symbol();
      var TypeError2 = global2.TypeError;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      module.exports = function(input, pref) {
        if (!isObject2(input) || isSymbol(input))
          return input;
        var exoticToPrim = getMethod(input, TO_PRIMITIVE);
        var result;
        if (exoticToPrim) {
          if (pref === void 0)
            pref = "default";
          result = call(exoticToPrim, input, pref);
          if (!isObject2(result) || isSymbol(result))
            return result;
          throw TypeError2("Can't convert object to primitive value");
        }
        if (pref === void 0)
          pref = "number";
        return ordinaryToPrimitive(input, pref);
      };
    }
  });

  // node_modules/core-js/internals/to-property-key.js
  var require_to_property_key = __commonJS({
    "node_modules/core-js/internals/to-property-key.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toPrimitive = require_to_primitive();
      var isSymbol = require_is_symbol();
      module.exports = function(argument) {
        var key = toPrimitive(argument, "string");
        return isSymbol(key) ? key : key + "";
      };
    }
  });

  // node_modules/core-js/internals/document-create-element.js
  var require_document_create_element = __commonJS({
    "node_modules/core-js/internals/document-create-element.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isObject2 = require_is_object();
      var document2 = global2.document;
      var EXISTS = isObject2(document2) && isObject2(document2.createElement);
      module.exports = function(it) {
        return EXISTS ? document2.createElement(it) : {};
      };
    }
  });

  // node_modules/core-js/internals/ie8-dom-define.js
  var require_ie8_dom_define = __commonJS({
    "node_modules/core-js/internals/ie8-dom-define.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      var createElement2 = require_document_create_element();
      module.exports = !DESCRIPTORS && !fails(function() {
        return Object.defineProperty(createElement2("div"), "a", {
          get: function() {
            return 7;
          }
        }).a != 7;
      });
    }
  });

  // node_modules/core-js/internals/object-get-own-property-descriptor.js
  var require_object_get_own_property_descriptor = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-descriptor.js"(exports) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var call = require_function_call();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var createPropertyDescriptor = require_create_property_descriptor();
      var toIndexedObject = require_to_indexed_object();
      var toPropertyKey = require_to_property_key();
      var hasOwn = require_has_own_property();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPropertyKey(P);
        if (IE8_DOM_DEFINE)
          try {
            return $getOwnPropertyDescriptor(O, P);
          } catch (error) {
          }
        if (hasOwn(O, P))
          return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
      };
    }
  });

  // node_modules/core-js/internals/v8-prototype-define-bug.js
  var require_v8_prototype_define_bug = __commonJS({
    "node_modules/core-js/internals/v8-prototype-define-bug.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      module.exports = DESCRIPTORS && fails(function() {
        return Object.defineProperty(function() {
        }, "prototype", {
          value: 42,
          writable: false
        }).prototype != 42;
      });
    }
  });

  // node_modules/core-js/internals/an-object.js
  var require_an_object = __commonJS({
    "node_modules/core-js/internals/an-object.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isObject2 = require_is_object();
      var String2 = global2.String;
      var TypeError2 = global2.TypeError;
      module.exports = function(argument) {
        if (isObject2(argument))
          return argument;
        throw TypeError2(String2(argument) + " is not an object");
      };
    }
  });

  // node_modules/core-js/internals/object-define-property.js
  var require_object_define_property = __commonJS({
    "node_modules/core-js/internals/object-define-property.js"(exports) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var DESCRIPTORS = require_descriptors();
      var IE8_DOM_DEFINE = require_ie8_dom_define();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var anObject = require_an_object();
      var toPropertyKey = require_to_property_key();
      var TypeError2 = global2.TypeError;
      var $defineProperty = Object.defineProperty;
      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var ENUMERABLE = "enumerable";
      var CONFIGURABLE = "configurable";
      var WRITABLE = "writable";
      exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
          var current = $getOwnPropertyDescriptor(O, P);
          if (current && current[WRITABLE]) {
            O[P] = Attributes.value;
            Attributes = {
              configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
              enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
              writable: false
            };
          }
        }
        return $defineProperty(O, P, Attributes);
      } : $defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPropertyKey(P);
        anObject(Attributes);
        if (IE8_DOM_DEFINE)
          try {
            return $defineProperty(O, P, Attributes);
          } catch (error) {
          }
        if ("get" in Attributes || "set" in Attributes)
          throw TypeError2("Accessors not supported");
        if ("value" in Attributes)
          O[P] = Attributes.value;
        return O;
      };
    }
  });

  // node_modules/core-js/internals/create-non-enumerable-property.js
  var require_create_non_enumerable_property = __commonJS({
    "node_modules/core-js/internals/create-non-enumerable-property.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = DESCRIPTORS ? function(object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function(object, key, value) {
        object[key] = value;
        return object;
      };
    }
  });

  // node_modules/core-js/internals/inspect-source.js
  var require_inspect_source = __commonJS({
    "node_modules/core-js/internals/inspect-source.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var isCallable = require_is_callable();
      var store = require_shared_store();
      var functionToString = uncurryThis(Function.toString);
      if (!isCallable(store.inspectSource)) {
        store.inspectSource = function(it) {
          return functionToString(it);
        };
      }
      module.exports = store.inspectSource;
    }
  });

  // node_modules/core-js/internals/native-weak-map.js
  var require_native_weak_map = __commonJS({
    "node_modules/core-js/internals/native-weak-map.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isCallable = require_is_callable();
      var inspectSource = require_inspect_source();
      var WeakMap2 = global2.WeakMap;
      module.exports = isCallable(WeakMap2) && /native code/.test(inspectSource(WeakMap2));
    }
  });

  // node_modules/core-js/internals/shared-key.js
  var require_shared_key = __commonJS({
    "node_modules/core-js/internals/shared-key.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var shared = require_shared();
      var uid = require_uid();
      var keys = shared("keys");
      module.exports = function(key) {
        return keys[key] || (keys[key] = uid(key));
      };
    }
  });

  // node_modules/core-js/internals/hidden-keys.js
  var require_hidden_keys = __commonJS({
    "node_modules/core-js/internals/hidden-keys.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = {};
    }
  });

  // node_modules/core-js/internals/internal-state.js
  var require_internal_state = __commonJS({
    "node_modules/core-js/internals/internal-state.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var NATIVE_WEAK_MAP = require_native_weak_map();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var isObject2 = require_is_object();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var hasOwn = require_has_own_property();
      var shared = require_shared_store();
      var sharedKey = require_shared_key();
      var hiddenKeys = require_hidden_keys();
      var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
      var TypeError2 = global2.TypeError;
      var WeakMap2 = global2.WeakMap;
      var set;
      var get;
      var has;
      var enforce = function(it) {
        return has(it) ? get(it) : set(it, {});
      };
      var getterFor = function(TYPE) {
        return function(it) {
          var state;
          if (!isObject2(it) || (state = get(it)).type !== TYPE) {
            throw TypeError2("Incompatible receiver, " + TYPE + " required");
          }
          return state;
        };
      };
      if (NATIVE_WEAK_MAP || shared.state) {
        store = shared.state || (shared.state = new WeakMap2());
        wmget = uncurryThis(store.get);
        wmhas = uncurryThis(store.has);
        wmset = uncurryThis(store.set);
        set = function(it, metadata) {
          if (wmhas(store, it))
            throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          wmset(store, it, metadata);
          return metadata;
        };
        get = function(it) {
          return wmget(store, it) || {};
        };
        has = function(it) {
          return wmhas(store, it);
        };
      } else {
        STATE = sharedKey("state");
        hiddenKeys[STATE] = true;
        set = function(it, metadata) {
          if (hasOwn(it, STATE))
            throw new TypeError2(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };
        get = function(it) {
          return hasOwn(it, STATE) ? it[STATE] : {};
        };
        has = function(it) {
          return hasOwn(it, STATE);
        };
      }
      var store;
      var wmget;
      var wmhas;
      var wmset;
      var STATE;
      module.exports = {
        set,
        get,
        has,
        enforce,
        getterFor
      };
    }
  });

  // node_modules/core-js/internals/function-name.js
  var require_function_name = __commonJS({
    "node_modules/core-js/internals/function-name.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var hasOwn = require_has_own_property();
      var FunctionPrototype = Function.prototype;
      var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
      var EXISTS = hasOwn(FunctionPrototype, "name");
      var PROPER = EXISTS && function something() {
      }.name === "something";
      var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
      module.exports = {
        EXISTS,
        PROPER,
        CONFIGURABLE
      };
    }
  });

  // node_modules/core-js/internals/redefine.js
  var require_redefine = __commonJS({
    "node_modules/core-js/internals/redefine.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isCallable = require_is_callable();
      var hasOwn = require_has_own_property();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var setGlobal = require_set_global();
      var inspectSource = require_inspect_source();
      var InternalStateModule = require_internal_state();
      var CONFIGURABLE_FUNCTION_NAME = require_function_name().CONFIGURABLE;
      var getInternalState = InternalStateModule.get;
      var enforceInternalState = InternalStateModule.enforce;
      var TEMPLATE = String(String).split("String");
      (module.exports = function(O, key, value, options) {
        var unsafe = options ? !!options.unsafe : false;
        var simple = options ? !!options.enumerable : false;
        var noTargetGet = options ? !!options.noTargetGet : false;
        var name = options && options.name !== void 0 ? options.name : key;
        var state;
        if (isCallable(value)) {
          if (String(name).slice(0, 7) === "Symbol(") {
            name = "[" + String(name).replace(/^Symbol\(([^)]*)\)/, "$1") + "]";
          }
          if (!hasOwn(value, "name") || CONFIGURABLE_FUNCTION_NAME && value.name !== name) {
            createNonEnumerableProperty(value, "name", name);
          }
          state = enforceInternalState(value);
          if (!state.source) {
            state.source = TEMPLATE.join(typeof name == "string" ? name : "");
          }
        }
        if (O === global2) {
          if (simple)
            O[key] = value;
          else
            setGlobal(key, value);
          return;
        } else if (!unsafe) {
          delete O[key];
        } else if (!noTargetGet && O[key]) {
          simple = true;
        }
        if (simple)
          O[key] = value;
        else
          createNonEnumerableProperty(O, key, value);
      })(Function.prototype, "toString", function toString() {
        return isCallable(this) && getInternalState(this).source || inspectSource(this);
      });
    }
  });

  // node_modules/core-js/internals/to-integer-or-infinity.js
  var require_to_integer_or_infinity = __commonJS({
    "node_modules/core-js/internals/to-integer-or-infinity.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ceil = Math.ceil;
      var floor = Math.floor;
      module.exports = function(argument) {
        var number = +argument;
        return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
      };
    }
  });

  // node_modules/core-js/internals/to-absolute-index.js
  var require_to_absolute_index = __commonJS({
    "node_modules/core-js/internals/to-absolute-index.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var max = Math.max;
      var min = Math.min;
      module.exports = function(index, length) {
        var integer = toIntegerOrInfinity(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
    }
  });

  // node_modules/core-js/internals/to-length.js
  var require_to_length = __commonJS({
    "node_modules/core-js/internals/to-length.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var min = Math.min;
      module.exports = function(argument) {
        return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
      };
    }
  });

  // node_modules/core-js/internals/length-of-array-like.js
  var require_length_of_array_like = __commonJS({
    "node_modules/core-js/internals/length-of-array-like.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toLength = require_to_length();
      module.exports = function(obj) {
        return toLength(obj.length);
      };
    }
  });

  // node_modules/core-js/internals/array-includes.js
  var require_array_includes = __commonJS({
    "node_modules/core-js/internals/array-includes.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toIndexedObject = require_to_indexed_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var createMethod = function(IS_INCLUDES) {
        return function($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = lengthOfArrayLike(O);
          var index = toAbsoluteIndex(fromIndex, length);
          var value;
          if (IS_INCLUDES && el != el)
            while (length > index) {
              value = O[index++];
              if (value != value)
                return true;
            }
          else
            for (; length > index; index++) {
              if ((IS_INCLUDES || index in O) && O[index] === el)
                return IS_INCLUDES || index || 0;
            }
          return !IS_INCLUDES && -1;
        };
      };
      module.exports = {
        includes: createMethod(true),
        indexOf: createMethod(false)
      };
    }
  });

  // node_modules/core-js/internals/object-keys-internal.js
  var require_object_keys_internal = __commonJS({
    "node_modules/core-js/internals/object-keys-internal.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var hasOwn = require_has_own_property();
      var toIndexedObject = require_to_indexed_object();
      var indexOf = require_array_includes().indexOf;
      var hiddenKeys = require_hidden_keys();
      var push = uncurryThis([].push);
      module.exports = function(object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;
        for (key in O)
          !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
        while (names.length > i)
          if (hasOwn(O, key = names[i++])) {
            ~indexOf(result, key) || push(result, key);
          }
        return result;
      };
    }
  });

  // node_modules/core-js/internals/enum-bug-keys.js
  var require_enum_bug_keys = __commonJS({
    "node_modules/core-js/internals/enum-bug-keys.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = [
        "constructor",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "toLocaleString",
        "toString",
        "valueOf"
      ];
    }
  });

  // node_modules/core-js/internals/object-get-own-property-names.js
  var require_object_get_own_property_names = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-names.js"(exports) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = enumBugKeys.concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
    }
  });

  // node_modules/core-js/internals/object-get-own-property-symbols.js
  var require_object_get_own_property_symbols = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-symbols.js"(exports) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      exports.f = Object.getOwnPropertySymbols;
    }
  });

  // node_modules/core-js/internals/own-keys.js
  var require_own_keys = __commonJS({
    "node_modules/core-js/internals/own-keys.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var getBuiltIn = require_get_built_in();
      var uncurryThis = require_function_uncurry_this();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var anObject = require_an_object();
      var concat3 = uncurryThis([].concat);
      module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? concat3(keys, getOwnPropertySymbols(it)) : keys;
      };
    }
  });

  // node_modules/core-js/internals/copy-constructor-properties.js
  var require_copy_constructor_properties = __commonJS({
    "node_modules/core-js/internals/copy-constructor-properties.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var hasOwn = require_has_own_property();
      var ownKeys = require_own_keys();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      module.exports = function(target, source, exceptions) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
            defineProperty(target, key, getOwnPropertyDescriptor(source, key));
          }
        }
      };
    }
  });

  // node_modules/core-js/internals/is-forced.js
  var require_is_forced = __commonJS({
    "node_modules/core-js/internals/is-forced.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var isCallable = require_is_callable();
      var replacement = /#|\.prototype\./;
      var isForced = function(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
      };
      var normalize = isForced.normalize = function(string) {
        return String(string).replace(replacement, ".").toLowerCase();
      };
      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = "N";
      var POLYFILL = isForced.POLYFILL = "P";
      module.exports = isForced;
    }
  });

  // node_modules/core-js/internals/export.js
  var require_export = __commonJS({
    "node_modules/core-js/internals/export.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefine = require_redefine();
      var setGlobal = require_set_global();
      var copyConstructorProperties = require_copy_constructor_properties();
      var isForced = require_is_forced();
      module.exports = function(options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;
        if (GLOBAL) {
          target = global2;
        } else if (STATIC) {
          target = global2[TARGET] || setGlobal(TARGET, {});
        } else {
          target = (global2[TARGET] || {}).prototype;
        }
        if (target)
          for (key in source) {
            sourceProperty = source[key];
            if (options.noTargetGet) {
              descriptor = getOwnPropertyDescriptor(target, key);
              targetProperty = descriptor && descriptor.value;
            } else
              targetProperty = target[key];
            FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
            if (!FORCED && targetProperty !== void 0) {
              if (typeof sourceProperty == typeof targetProperty)
                continue;
              copyConstructorProperties(sourceProperty, targetProperty);
            }
            if (options.sham || targetProperty && targetProperty.sham) {
              createNonEnumerableProperty(sourceProperty, "sham", true);
            }
            redefine(target, key, sourceProperty, options);
          }
      };
    }
  });

  // node_modules/core-js/internals/function-apply.js
  var require_function_apply = __commonJS({
    "node_modules/core-js/internals/function-apply.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var NATIVE_BIND = require_function_bind_native();
      var FunctionPrototype = Function.prototype;
      var apply = FunctionPrototype.apply;
      var call = FunctionPrototype.call;
      module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
        return call.apply(apply, arguments);
      });
    }
  });

  // node_modules/core-js/internals/is-array.js
  var require_is_array = __commonJS({
    "node_modules/core-js/internals/is-array.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var classof = require_classof_raw();
      module.exports = Array.isArray || function isArray4(argument) {
        return classof(argument) == "Array";
      };
    }
  });

  // node_modules/core-js/internals/to-string-tag-support.js
  var require_to_string_tag_support = __commonJS({
    "node_modules/core-js/internals/to-string-tag-support.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var test = {};
      test[TO_STRING_TAG] = "z";
      module.exports = String(test) === "[object z]";
    }
  });

  // node_modules/core-js/internals/classof.js
  var require_classof = __commonJS({
    "node_modules/core-js/internals/classof.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var isCallable = require_is_callable();
      var classofRaw = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var Object2 = global2.Object;
      var CORRECT_ARGUMENTS = classofRaw(function() {
        return arguments;
      }()) == "Arguments";
      var tryGet = function(it, key) {
        try {
          return it[key];
        } catch (error) {
        }
      };
      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
        var O, tag, result;
        return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object2(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
      };
    }
  });

  // node_modules/core-js/internals/to-string.js
  var require_to_string = __commonJS({
    "node_modules/core-js/internals/to-string.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var classof = require_classof();
      var String2 = global2.String;
      module.exports = function(argument) {
        if (classof(argument) === "Symbol")
          throw TypeError("Cannot convert a Symbol value to a string");
        return String2(argument);
      };
    }
  });

  // node_modules/core-js/internals/object-keys.js
  var require_object_keys = __commonJS({
    "node_modules/core-js/internals/object-keys.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var internalObjectKeys = require_object_keys_internal();
      var enumBugKeys = require_enum_bug_keys();
      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
    }
  });

  // node_modules/core-js/internals/object-define-properties.js
  var require_object_define_properties = __commonJS({
    "node_modules/core-js/internals/object-define-properties.js"(exports) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
      var definePropertyModule = require_object_define_property();
      var anObject = require_an_object();
      var toIndexedObject = require_to_indexed_object();
      var objectKeys = require_object_keys();
      exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var props = toIndexedObject(Properties);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;
        while (length > index)
          definePropertyModule.f(O, key = keys[index++], props[key]);
        return O;
      };
    }
  });

  // node_modules/core-js/internals/html.js
  var require_html = __commonJS({
    "node_modules/core-js/internals/html.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var getBuiltIn = require_get_built_in();
      module.exports = getBuiltIn("document", "documentElement");
    }
  });

  // node_modules/core-js/internals/object-create.js
  var require_object_create = __commonJS({
    "node_modules/core-js/internals/object-create.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var anObject = require_an_object();
      var definePropertiesModule = require_object_define_properties();
      var enumBugKeys = require_enum_bug_keys();
      var hiddenKeys = require_hidden_keys();
      var html = require_html();
      var documentCreateElement = require_document_create_element();
      var sharedKey = require_shared_key();
      var GT = ">";
      var LT = "<";
      var PROTOTYPE = "prototype";
      var SCRIPT = "script";
      var IE_PROTO = sharedKey("IE_PROTO");
      var EmptyConstructor = function() {
      };
      var scriptTag = function(content) {
        return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
      };
      var NullProtoObjectViaActiveX = function(activeXDocument2) {
        activeXDocument2.write(scriptTag(""));
        activeXDocument2.close();
        var temp = activeXDocument2.parentWindow.Object;
        activeXDocument2 = null;
        return temp;
      };
      var NullProtoObjectViaIFrame = function() {
        var iframe = documentCreateElement("iframe");
        var JS = "java" + SCRIPT + ":";
        var iframeDocument;
        iframe.style.display = "none";
        html.appendChild(iframe);
        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag("document.F=Object"));
        iframeDocument.close();
        return iframeDocument.F;
      };
      var activeXDocument;
      var NullProtoObject = function() {
        try {
          activeXDocument = new ActiveXObject("htmlfile");
        } catch (error) {
        }
        NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
        var length = enumBugKeys.length;
        while (length--)
          delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        return NullProtoObject();
      };
      hiddenKeys[IE_PROTO] = true;
      module.exports = Object.create || function create(O, Properties) {
        var result;
        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null;
          result[IE_PROTO] = O;
        } else
          result = NullProtoObject();
        return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
      };
    }
  });

  // node_modules/core-js/internals/create-property.js
  var require_create_property = __commonJS({
    "node_modules/core-js/internals/create-property.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toPropertyKey = require_to_property_key();
      var definePropertyModule = require_object_define_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = function(object, key, value) {
        var propertyKey = toPropertyKey(key);
        if (propertyKey in object)
          definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
        else
          object[propertyKey] = value;
      };
    }
  });

  // node_modules/core-js/internals/array-slice-simple.js
  var require_array_slice_simple = __commonJS({
    "node_modules/core-js/internals/array-slice-simple.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var createProperty = require_create_property();
      var Array2 = global2.Array;
      var max = Math.max;
      module.exports = function(O, start, end) {
        var length = lengthOfArrayLike(O);
        var k = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
        var result = Array2(max(fin - k, 0));
        for (var n = 0; k < fin; k++, n++)
          createProperty(result, n, O[k]);
        result.length = n;
        return result;
      };
    }
  });

  // node_modules/core-js/internals/object-get-own-property-names-external.js
  var require_object_get_own_property_names_external = __commonJS({
    "node_modules/core-js/internals/object-get-own-property-names-external.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var classof = require_classof_raw();
      var toIndexedObject = require_to_indexed_object();
      var $getOwnPropertyNames = require_object_get_own_property_names().f;
      var arraySlice2 = require_array_slice_simple();
      var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      var getWindowNames = function(it) {
        try {
          return $getOwnPropertyNames(it);
        } catch (error) {
          return arraySlice2(windowNames);
        }
      };
      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && classof(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
      };
    }
  });

  // node_modules/core-js/internals/array-slice.js
  var require_array_slice = __commonJS({
    "node_modules/core-js/internals/array-slice.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis([].slice);
    }
  });

  // node_modules/core-js/internals/well-known-symbol-wrapped.js
  var require_well_known_symbol_wrapped = __commonJS({
    "node_modules/core-js/internals/well-known-symbol-wrapped.js"(exports) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var wellKnownSymbol = require_well_known_symbol();
      exports.f = wellKnownSymbol;
    }
  });

  // node_modules/core-js/internals/path.js
  var require_path = __commonJS({
    "node_modules/core-js/internals/path.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      module.exports = global2;
    }
  });

  // node_modules/core-js/internals/define-well-known-symbol.js
  var require_define_well_known_symbol = __commonJS({
    "node_modules/core-js/internals/define-well-known-symbol.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var path = require_path();
      var hasOwn = require_has_own_property();
      var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      var defineProperty = require_object_define_property().f;
      module.exports = function(NAME) {
        var Symbol2 = path.Symbol || (path.Symbol = {});
        if (!hasOwn(Symbol2, NAME))
          defineProperty(Symbol2, NAME, {
            value: wrappedWellKnownSymbolModule.f(NAME)
          });
      };
    }
  });

  // node_modules/core-js/internals/set-to-string-tag.js
  var require_set_to_string_tag = __commonJS({
    "node_modules/core-js/internals/set-to-string-tag.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineProperty = require_object_define_property().f;
      var hasOwn = require_has_own_property();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      module.exports = function(target, TAG, STATIC) {
        if (target && !STATIC)
          target = target.prototype;
        if (target && !hasOwn(target, TO_STRING_TAG)) {
          defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
        }
      };
    }
  });

  // node_modules/core-js/internals/function-bind-context.js
  var require_function_bind_context = __commonJS({
    "node_modules/core-js/internals/function-bind-context.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var aCallable = require_a_callable();
      var NATIVE_BIND = require_function_bind_native();
      var bind = uncurryThis(uncurryThis.bind);
      module.exports = function(fn, that) {
        aCallable(fn);
        return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
          return fn.apply(that, arguments);
        };
      };
    }
  });

  // node_modules/core-js/internals/is-constructor.js
  var require_is_constructor = __commonJS({
    "node_modules/core-js/internals/is-constructor.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var isCallable = require_is_callable();
      var classof = require_classof();
      var getBuiltIn = require_get_built_in();
      var inspectSource = require_inspect_source();
      var noop2 = function() {
      };
      var empty = [];
      var construct = getBuiltIn("Reflect", "construct");
      var constructorRegExp = /^\s*(?:class|function)\b/;
      var exec = uncurryThis(constructorRegExp.exec);
      var INCORRECT_TO_STRING = !constructorRegExp.exec(noop2);
      var isConstructorModern = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        try {
          construct(noop2, empty, argument);
          return true;
        } catch (error) {
          return false;
        }
      };
      var isConstructorLegacy = function isConstructor(argument) {
        if (!isCallable(argument))
          return false;
        switch (classof(argument)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
        } catch (error) {
          return true;
        }
      };
      isConstructorLegacy.sham = true;
      module.exports = !construct || fails(function() {
        var called;
        return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
          called = true;
        }) || called;
      }) ? isConstructorLegacy : isConstructorModern;
    }
  });

  // node_modules/core-js/internals/array-species-constructor.js
  var require_array_species_constructor = __commonJS({
    "node_modules/core-js/internals/array-species-constructor.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isArray4 = require_is_array();
      var isConstructor = require_is_constructor();
      var isObject2 = require_is_object();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      var Array2 = global2.Array;
      module.exports = function(originalArray) {
        var C;
        if (isArray4(originalArray)) {
          C = originalArray.constructor;
          if (isConstructor(C) && (C === Array2 || isArray4(C.prototype)))
            C = void 0;
          else if (isObject2(C)) {
            C = C[SPECIES];
            if (C === null)
              C = void 0;
          }
        }
        return C === void 0 ? Array2 : C;
      };
    }
  });

  // node_modules/core-js/internals/array-species-create.js
  var require_array_species_create = __commonJS({
    "node_modules/core-js/internals/array-species-create.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var arraySpeciesConstructor = require_array_species_constructor();
      module.exports = function(originalArray, length) {
        return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
      };
    }
  });

  // node_modules/core-js/internals/array-iteration.js
  var require_array_iteration = __commonJS({
    "node_modules/core-js/internals/array-iteration.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var bind = require_function_bind_context();
      var uncurryThis = require_function_uncurry_this();
      var IndexedObject = require_indexed_object();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var arraySpeciesCreate = require_array_species_create();
      var push = uncurryThis([].push);
      var createMethod = function(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_REJECT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function($this, callbackfn, that, specificCreate) {
          var O = toObject($this);
          var self2 = IndexedObject(O);
          var boundFunction = bind(callbackfn, that);
          var length = lengthOfArrayLike(self2);
          var index = 0;
          var create = specificCreate || arraySpeciesCreate;
          var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
          var value, result;
          for (; length > index; index++)
            if (NO_HOLES || index in self2) {
              value = self2[index];
              result = boundFunction(value, index, O);
              if (TYPE) {
                if (IS_MAP)
                  target[index] = result;
                else if (result)
                  switch (TYPE) {
                    case 3:
                      return true;
                    case 5:
                      return value;
                    case 6:
                      return index;
                    case 2:
                      push(target, value);
                  }
                else
                  switch (TYPE) {
                    case 4:
                      return false;
                    case 7:
                      push(target, value);
                  }
              }
            }
          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };
      module.exports = {
        forEach: createMethod(0),
        map: createMethod(1),
        filter: createMethod(2),
        some: createMethod(3),
        every: createMethod(4),
        find: createMethod(5),
        findIndex: createMethod(6),
        filterReject: createMethod(7)
      };
    }
  });

  // node_modules/core-js/modules/es.symbol.js
  var require_es_symbol = __commonJS({
    "node_modules/core-js/modules/es.symbol.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var getBuiltIn = require_get_built_in();
      var apply = require_function_apply();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var IS_PURE = require_is_pure();
      var DESCRIPTORS = require_descriptors();
      var NATIVE_SYMBOL = require_native_symbol();
      var fails = require_fails();
      var hasOwn = require_has_own_property();
      var isArray4 = require_is_array();
      var isCallable = require_is_callable();
      var isObject2 = require_is_object();
      var isPrototypeOf = require_object_is_prototype_of();
      var isSymbol = require_is_symbol();
      var anObject = require_an_object();
      var toObject = require_to_object();
      var toIndexedObject = require_to_indexed_object();
      var toPropertyKey = require_to_property_key();
      var $toString = require_to_string();
      var createPropertyDescriptor = require_create_property_descriptor();
      var nativeObjectCreate = require_object_create();
      var objectKeys = require_object_keys();
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var definePropertyModule = require_object_define_property();
      var definePropertiesModule = require_object_define_properties();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var arraySlice2 = require_array_slice();
      var redefine = require_redefine();
      var shared = require_shared();
      var sharedKey = require_shared_key();
      var hiddenKeys = require_hidden_keys();
      var uid = require_uid();
      var wellKnownSymbol = require_well_known_symbol();
      var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      var setToStringTag = require_set_to_string_tag();
      var InternalStateModule = require_internal_state();
      var $forEach = require_array_iteration().forEach;
      var HIDDEN = sharedKey("hidden");
      var SYMBOL = "Symbol";
      var PROTOTYPE = "prototype";
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SYMBOL);
      var ObjectPrototype = Object[PROTOTYPE];
      var $Symbol = global2.Symbol;
      var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
      var TypeError2 = global2.TypeError;
      var QObject = global2.QObject;
      var $stringify = getBuiltIn("JSON", "stringify");
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
      var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
      var push = uncurryThis([].push);
      var AllSymbols = shared("symbols");
      var ObjectPrototypeSymbols = shared("op-symbols");
      var StringToSymbolRegistry = shared("string-to-symbol-registry");
      var SymbolToStringRegistry = shared("symbol-to-string-registry");
      var WellKnownSymbolsStore = shared("wks");
      var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
      var setSymbolDescriptor = DESCRIPTORS && fails(function() {
        return nativeObjectCreate(nativeDefineProperty({}, "a", {
          get: function() {
            return nativeDefineProperty(this, "a", { value: 7 }).a;
          }
        })).a != 7;
      }) ? function(O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor)
          delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);
        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
          nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
      } : nativeDefineProperty;
      var wrap = function(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
        setInternalState(symbol, {
          type: SYMBOL,
          tag,
          description
        });
        if (!DESCRIPTORS)
          symbol.description = description;
        return symbol;
      };
      var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype)
          $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPropertyKey(P);
        anObject(Attributes);
        if (hasOwn(AllSymbols, key)) {
          if (!Attributes.enumerable) {
            if (!hasOwn(O, HIDDEN))
              nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
            O[HIDDEN][key] = true;
          } else {
            if (hasOwn(O, HIDDEN) && O[HIDDEN][key])
              O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
          }
          return setSymbolDescriptor(O, key, Attributes);
        }
        return nativeDefineProperty(O, key, Attributes);
      };
      var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function(key) {
          if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key))
            $defineProperty(O, key, properties[key]);
        });
        return O;
      };
      var $create = function create(O, Properties) {
        return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
      };
      var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPropertyKey(V);
        var enumerable = call(nativePropertyIsEnumerable, this, P);
        if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P))
          return false;
        return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
      };
      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPropertyKey(P);
        if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key))
          return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);
        if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
          descriptor.enumerable = true;
        }
        return descriptor;
      };
      var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
          if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key))
            push(result, key);
        });
        return result;
      };
      var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function(key) {
          if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
            push(result, AllSymbols[key]);
          }
        });
        return result;
      };
      if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol2() {
          if (isPrototypeOf(SymbolPrototype, this))
            throw TypeError2("Symbol is not a constructor");
          var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
          var tag = uid(description);
          var setter = function(value) {
            if (this === ObjectPrototype)
              call(setter, ObjectPrototypeSymbols, value);
            if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
              this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
          };
          if (DESCRIPTORS && USE_SETTER)
            setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
          return wrap(tag, description);
        };
        SymbolPrototype = $Symbol[PROTOTYPE];
        redefine(SymbolPrototype, "toString", function toString() {
          return getInternalState(this).tag;
        });
        redefine($Symbol, "withoutSetter", function(description) {
          return wrap(uid(description), description);
        });
        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        definePropertiesModule.f = $defineProperties;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
        wrappedWellKnownSymbolModule.f = function(name) {
          return wrap(wellKnownSymbol(name), name);
        };
        if (DESCRIPTORS) {
          nativeDefineProperty(SymbolPrototype, "description", {
            configurable: true,
            get: function description() {
              return getInternalState(this).description;
            }
          });
          if (!IS_PURE) {
            redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
          }
        }
      }
      $({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
        Symbol: $Symbol
      });
      $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
        defineWellKnownSymbol(name);
      });
      $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
        "for": function(key) {
          var string = $toString(key);
          if (hasOwn(StringToSymbolRegistry, string))
            return StringToSymbolRegistry[string];
          var symbol = $Symbol(string);
          StringToSymbolRegistry[string] = symbol;
          SymbolToStringRegistry[symbol] = string;
          return symbol;
        },
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym))
            throw TypeError2(sym + " is not a symbol");
          if (hasOwn(SymbolToStringRegistry, sym))
            return SymbolToStringRegistry[sym];
        },
        useSetter: function() {
          USE_SETTER = true;
        },
        useSimple: function() {
          USE_SETTER = false;
        }
      });
      $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
        create: $create,
        defineProperty: $defineProperty,
        defineProperties: $defineProperties,
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
      });
      $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
        getOwnPropertyNames: $getOwnPropertyNames,
        getOwnPropertySymbols: $getOwnPropertySymbols
      });
      $({ target: "Object", stat: true, forced: fails(function() {
        getOwnPropertySymbolsModule.f(1);
      }) }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return getOwnPropertySymbolsModule.f(toObject(it));
        }
      });
      if ($stringify) {
        FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
          var symbol = $Symbol();
          return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
        });
        $({ target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY }, {
          stringify: function stringify(it, replacer, space) {
            var args = arraySlice2(arguments);
            var $replacer = replacer;
            if (!isObject2(replacer) && it === void 0 || isSymbol(it))
              return;
            if (!isArray4(replacer))
              replacer = function(key, value) {
                if (isCallable($replacer))
                  value = call($replacer, this, key, value);
                if (!isSymbol(value))
                  return value;
              };
            args[1] = replacer;
            return apply($stringify, null, args);
          }
        });
      }
      var FORCED_JSON_STRINGIFY;
      if (!SymbolPrototype[TO_PRIMITIVE]) {
        valueOf = SymbolPrototype.valueOf;
        redefine(SymbolPrototype, TO_PRIMITIVE, function(hint) {
          return call(valueOf, this);
        });
      }
      var valueOf;
      setToStringTag($Symbol, SYMBOL);
      hiddenKeys[HIDDEN] = true;
    }
  });

  // node_modules/core-js/modules/es.symbol.description.js
  var require_es_symbol_description = __commonJS({
    "node_modules/core-js/modules/es.symbol.description.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var hasOwn = require_has_own_property();
      var isCallable = require_is_callable();
      var isPrototypeOf = require_object_is_prototype_of();
      var toString = require_to_string();
      var defineProperty = require_object_define_property().f;
      var copyConstructorProperties = require_copy_constructor_properties();
      var NativeSymbol = global2.Symbol;
      var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;
      if (DESCRIPTORS && isCallable(NativeSymbol) && (!("description" in SymbolPrototype) || NativeSymbol().description !== void 0)) {
        EmptyStringDescriptionStore = {};
        SymbolWrapper = function Symbol2() {
          var description = arguments.length < 1 || arguments[0] === void 0 ? void 0 : toString(arguments[0]);
          var result = isPrototypeOf(SymbolPrototype, this) ? new NativeSymbol(description) : description === void 0 ? NativeSymbol() : NativeSymbol(description);
          if (description === "")
            EmptyStringDescriptionStore[result] = true;
          return result;
        };
        copyConstructorProperties(SymbolWrapper, NativeSymbol);
        SymbolWrapper.prototype = SymbolPrototype;
        SymbolPrototype.constructor = SymbolWrapper;
        NATIVE_SYMBOL = String(NativeSymbol("test")) == "Symbol(test)";
        symbolToString = uncurryThis(SymbolPrototype.toString);
        symbolValueOf = uncurryThis(SymbolPrototype.valueOf);
        regexp = /^Symbol\((.*)\)[^)]+$/;
        replace = uncurryThis("".replace);
        stringSlice = uncurryThis("".slice);
        defineProperty(SymbolPrototype, "description", {
          configurable: true,
          get: function description() {
            var symbol = symbolValueOf(this);
            var string = symbolToString(symbol);
            if (hasOwn(EmptyStringDescriptionStore, symbol))
              return "";
            var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, "$1");
            return desc === "" ? void 0 : desc;
          }
        });
        $({ global: true, forced: true }, {
          Symbol: SymbolWrapper
        });
      }
      var EmptyStringDescriptionStore;
      var SymbolWrapper;
      var NATIVE_SYMBOL;
      var symbolToString;
      var symbolValueOf;
      var regexp;
      var replace;
      var stringSlice;
    }
  });

  // node_modules/core-js/modules/es.symbol.async-iterator.js
  var require_es_symbol_async_iterator = __commonJS({
    "node_modules/core-js/modules/es.symbol.async-iterator.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("asyncIterator");
    }
  });

  // node_modules/core-js/modules/es.symbol.has-instance.js
  var require_es_symbol_has_instance = __commonJS({
    "node_modules/core-js/modules/es.symbol.has-instance.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("hasInstance");
    }
  });

  // node_modules/core-js/modules/es.symbol.is-concat-spreadable.js
  var require_es_symbol_is_concat_spreadable = __commonJS({
    "node_modules/core-js/modules/es.symbol.is-concat-spreadable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("isConcatSpreadable");
    }
  });

  // node_modules/core-js/modules/es.symbol.iterator.js
  var require_es_symbol_iterator = __commonJS({
    "node_modules/core-js/modules/es.symbol.iterator.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("iterator");
    }
  });

  // node_modules/core-js/modules/es.symbol.match.js
  var require_es_symbol_match = __commonJS({
    "node_modules/core-js/modules/es.symbol.match.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("match");
    }
  });

  // node_modules/core-js/modules/es.symbol.match-all.js
  var require_es_symbol_match_all = __commonJS({
    "node_modules/core-js/modules/es.symbol.match-all.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("matchAll");
    }
  });

  // node_modules/core-js/modules/es.symbol.replace.js
  var require_es_symbol_replace = __commonJS({
    "node_modules/core-js/modules/es.symbol.replace.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("replace");
    }
  });

  // node_modules/core-js/modules/es.symbol.search.js
  var require_es_symbol_search = __commonJS({
    "node_modules/core-js/modules/es.symbol.search.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("search");
    }
  });

  // node_modules/core-js/modules/es.symbol.species.js
  var require_es_symbol_species = __commonJS({
    "node_modules/core-js/modules/es.symbol.species.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("species");
    }
  });

  // node_modules/core-js/modules/es.symbol.split.js
  var require_es_symbol_split = __commonJS({
    "node_modules/core-js/modules/es.symbol.split.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("split");
    }
  });

  // node_modules/core-js/modules/es.symbol.to-primitive.js
  var require_es_symbol_to_primitive = __commonJS({
    "node_modules/core-js/modules/es.symbol.to-primitive.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("toPrimitive");
    }
  });

  // node_modules/core-js/modules/es.symbol.to-string-tag.js
  var require_es_symbol_to_string_tag = __commonJS({
    "node_modules/core-js/modules/es.symbol.to-string-tag.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("toStringTag");
    }
  });

  // node_modules/core-js/modules/es.symbol.unscopables.js
  var require_es_symbol_unscopables = __commonJS({
    "node_modules/core-js/modules/es.symbol.unscopables.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineWellKnownSymbol = require_define_well_known_symbol();
      defineWellKnownSymbol("unscopables");
    }
  });

  // node_modules/core-js/internals/a-possible-prototype.js
  var require_a_possible_prototype = __commonJS({
    "node_modules/core-js/internals/a-possible-prototype.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isCallable = require_is_callable();
      var String2 = global2.String;
      var TypeError2 = global2.TypeError;
      module.exports = function(argument) {
        if (typeof argument == "object" || isCallable(argument))
          return argument;
        throw TypeError2("Can't set " + String2(argument) + " as a prototype");
      };
    }
  });

  // node_modules/core-js/internals/object-set-prototype-of.js
  var require_object_set_prototype_of = __commonJS({
    "node_modules/core-js/internals/object-set-prototype-of.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var anObject = require_an_object();
      var aPossiblePrototype = require_a_possible_prototype();
      module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;
        try {
          setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set);
          setter(test, []);
          CORRECT_SETTER = test instanceof Array;
        } catch (error) {
        }
        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER)
            setter(O, proto);
          else
            O.__proto__ = proto;
          return O;
        };
      }() : void 0);
    }
  });

  // node_modules/core-js/internals/inherit-if-required.js
  var require_inherit_if_required = __commonJS({
    "node_modules/core-js/internals/inherit-if-required.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var isCallable = require_is_callable();
      var isObject2 = require_is_object();
      var setPrototypeOf = require_object_set_prototype_of();
      module.exports = function($this, dummy, Wrapper) {
        var NewTarget, NewTargetPrototype;
        if (setPrototypeOf && isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject2(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype)
          setPrototypeOf($this, NewTargetPrototype);
        return $this;
      };
    }
  });

  // node_modules/core-js/internals/normalize-string-argument.js
  var require_normalize_string_argument = __commonJS({
    "node_modules/core-js/internals/normalize-string-argument.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toString = require_to_string();
      module.exports = function(argument, $default) {
        return argument === void 0 ? arguments.length < 2 ? "" : $default : toString(argument);
      };
    }
  });

  // node_modules/core-js/internals/install-error-cause.js
  var require_install_error_cause = __commonJS({
    "node_modules/core-js/internals/install-error-cause.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var isObject2 = require_is_object();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      module.exports = function(O, options) {
        if (isObject2(options) && "cause" in options) {
          createNonEnumerableProperty(O, "cause", options.cause);
        }
      };
    }
  });

  // node_modules/core-js/internals/clear-error-stack.js
  var require_clear_error_stack = __commonJS({
    "node_modules/core-js/internals/clear-error-stack.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var replace = uncurryThis("".replace);
      var TEST = function(arg) {
        return String(Error(arg).stack);
      }("zxcasd");
      var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
      var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
      module.exports = function(stack, dropEntries) {
        if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string") {
          while (dropEntries--)
            stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
        }
        return stack;
      };
    }
  });

  // node_modules/core-js/internals/error-stack-installable.js
  var require_error_stack_installable = __commonJS({
    "node_modules/core-js/internals/error-stack-installable.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var createPropertyDescriptor = require_create_property_descriptor();
      module.exports = !fails(function() {
        var error = Error("a");
        if (!("stack" in error))
          return true;
        Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
        return error.stack !== 7;
      });
    }
  });

  // node_modules/core-js/internals/wrap-error-constructor-with-cause.js
  var require_wrap_error_constructor_with_cause = __commonJS({
    "node_modules/core-js/internals/wrap-error-constructor-with-cause.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var getBuiltIn = require_get_built_in();
      var hasOwn = require_has_own_property();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var isPrototypeOf = require_object_is_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var copyConstructorProperties = require_copy_constructor_properties();
      var inheritIfRequired = require_inherit_if_required();
      var normalizeStringArgument = require_normalize_string_argument();
      var installErrorCause = require_install_error_cause();
      var clearErrorStack = require_clear_error_stack();
      var ERROR_STACK_INSTALLABLE = require_error_stack_installable();
      var IS_PURE = require_is_pure();
      module.exports = function(FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
        var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
        var path = FULL_NAME.split(".");
        var ERROR_NAME = path[path.length - 1];
        var OriginalError = getBuiltIn.apply(null, path);
        if (!OriginalError)
          return;
        var OriginalErrorPrototype = OriginalError.prototype;
        if (!IS_PURE && hasOwn(OriginalErrorPrototype, "cause"))
          delete OriginalErrorPrototype.cause;
        if (!FORCED)
          return OriginalError;
        var BaseError = getBuiltIn("Error");
        var WrappedError = wrapper(function(a, b) {
          var message = normalizeStringArgument(IS_AGGREGATE_ERROR ? b : a, void 0);
          var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError();
          if (message !== void 0)
            createNonEnumerableProperty(result, "message", message);
          if (ERROR_STACK_INSTALLABLE)
            createNonEnumerableProperty(result, "stack", clearErrorStack(result.stack, 2));
          if (this && isPrototypeOf(OriginalErrorPrototype, this))
            inheritIfRequired(result, this, WrappedError);
          if (arguments.length > OPTIONS_POSITION)
            installErrorCause(result, arguments[OPTIONS_POSITION]);
          return result;
        });
        WrappedError.prototype = OriginalErrorPrototype;
        if (ERROR_NAME !== "Error") {
          if (setPrototypeOf)
            setPrototypeOf(WrappedError, BaseError);
          else
            copyConstructorProperties(WrappedError, BaseError, { name: true });
        }
        copyConstructorProperties(WrappedError, OriginalError);
        if (!IS_PURE)
          try {
            if (OriginalErrorPrototype.name !== ERROR_NAME) {
              createNonEnumerableProperty(OriginalErrorPrototype, "name", ERROR_NAME);
            }
            OriginalErrorPrototype.constructor = WrappedError;
          } catch (error) {
          }
        return WrappedError;
      };
    }
  });

  // node_modules/core-js/modules/es.error.cause.js
  var require_es_error_cause = __commonJS({
    "node_modules/core-js/modules/es.error.cause.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var apply = require_function_apply();
      var wrapErrorConstructorWithCause = require_wrap_error_constructor_with_cause();
      var WEB_ASSEMBLY = "WebAssembly";
      var WebAssembly = global2[WEB_ASSEMBLY];
      var FORCED = Error("e", { cause: 7 }).cause !== 7;
      var exportGlobalErrorCauseWrapper = function(ERROR_NAME, wrapper) {
        var O = {};
        O[ERROR_NAME] = wrapErrorConstructorWithCause(ERROR_NAME, wrapper, FORCED);
        $({ global: true, forced: FORCED }, O);
      };
      var exportWebAssemblyErrorCauseWrapper = function(ERROR_NAME, wrapper) {
        if (WebAssembly && WebAssembly[ERROR_NAME]) {
          var O = {};
          O[ERROR_NAME] = wrapErrorConstructorWithCause(WEB_ASSEMBLY + "." + ERROR_NAME, wrapper, FORCED);
          $({ target: WEB_ASSEMBLY, stat: true, forced: FORCED }, O);
        }
      };
      exportGlobalErrorCauseWrapper("Error", function(init) {
        return function Error2(message) {
          return apply(init, this, arguments);
        };
      });
      exportGlobalErrorCauseWrapper("EvalError", function(init) {
        return function EvalError(message) {
          return apply(init, this, arguments);
        };
      });
      exportGlobalErrorCauseWrapper("RangeError", function(init) {
        return function RangeError(message) {
          return apply(init, this, arguments);
        };
      });
      exportGlobalErrorCauseWrapper("ReferenceError", function(init) {
        return function ReferenceError(message) {
          return apply(init, this, arguments);
        };
      });
      exportGlobalErrorCauseWrapper("SyntaxError", function(init) {
        return function SyntaxError(message) {
          return apply(init, this, arguments);
        };
      });
      exportGlobalErrorCauseWrapper("TypeError", function(init) {
        return function TypeError2(message) {
          return apply(init, this, arguments);
        };
      });
      exportGlobalErrorCauseWrapper("URIError", function(init) {
        return function URIError(message) {
          return apply(init, this, arguments);
        };
      });
      exportWebAssemblyErrorCauseWrapper("CompileError", function(init) {
        return function CompileError(message) {
          return apply(init, this, arguments);
        };
      });
      exportWebAssemblyErrorCauseWrapper("LinkError", function(init) {
        return function LinkError(message) {
          return apply(init, this, arguments);
        };
      });
      exportWebAssemblyErrorCauseWrapper("RuntimeError", function(init) {
        return function RuntimeError(message) {
          return apply(init, this, arguments);
        };
      });
    }
  });

  // node_modules/core-js/internals/error-to-string.js
  var require_error_to_string = __commonJS({
    "node_modules/core-js/internals/error-to-string.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var fails = require_fails();
      var anObject = require_an_object();
      var create = require_object_create();
      var normalizeStringArgument = require_normalize_string_argument();
      var nativeErrorToString = Error.prototype.toString;
      var INCORRECT_TO_STRING = fails(function() {
        if (DESCRIPTORS) {
          var object = create(Object.defineProperty({}, "name", { get: function() {
            return this === object;
          } }));
          if (nativeErrorToString.call(object) !== "true")
            return true;
        }
        return nativeErrorToString.call({ message: 1, name: 2 }) !== "2: 1" || nativeErrorToString.call({}) !== "Error";
      });
      module.exports = INCORRECT_TO_STRING ? function toString() {
        var O = anObject(this);
        var name = normalizeStringArgument(O.name, "Error");
        var message = normalizeStringArgument(O.message);
        return !name ? message : !message ? name : name + ": " + message;
      } : nativeErrorToString;
    }
  });

  // node_modules/core-js/modules/es.error.to-string.js
  var require_es_error_to_string = __commonJS({
    "node_modules/core-js/modules/es.error.to-string.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var redefine = require_redefine();
      var errorToString = require_error_to_string();
      var ErrorPrototype = Error.prototype;
      if (ErrorPrototype.toString !== errorToString) {
        redefine(ErrorPrototype, "toString", errorToString);
      }
    }
  });

  // node_modules/core-js/internals/correct-prototype-getter.js
  var require_correct_prototype_getter = __commonJS({
    "node_modules/core-js/internals/correct-prototype-getter.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      module.exports = !fails(function() {
        function F() {
        }
        F.prototype.constructor = null;
        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
    }
  });

  // node_modules/core-js/internals/object-get-prototype-of.js
  var require_object_get_prototype_of = __commonJS({
    "node_modules/core-js/internals/object-get-prototype-of.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var hasOwn = require_has_own_property();
      var isCallable = require_is_callable();
      var toObject = require_to_object();
      var sharedKey = require_shared_key();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
      var IE_PROTO = sharedKey("IE_PROTO");
      var Object2 = global2.Object;
      var ObjectPrototype = Object2.prototype;
      module.exports = CORRECT_PROTOTYPE_GETTER ? Object2.getPrototypeOf : function(O) {
        var object = toObject(O);
        if (hasOwn(object, IE_PROTO))
          return object[IE_PROTO];
        var constructor = object.constructor;
        if (isCallable(constructor) && object instanceof constructor) {
          return constructor.prototype;
        }
        return object instanceof Object2 ? ObjectPrototype : null;
      };
    }
  });

  // node_modules/core-js/internals/iterators.js
  var require_iterators = __commonJS({
    "node_modules/core-js/internals/iterators.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = {};
    }
  });

  // node_modules/core-js/internals/is-array-iterator-method.js
  var require_is_array_iterator_method = __commonJS({
    "node_modules/core-js/internals/is-array-iterator-method.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var wellKnownSymbol = require_well_known_symbol();
      var Iterators = require_iterators();
      var ITERATOR = wellKnownSymbol("iterator");
      var ArrayPrototype = Array.prototype;
      module.exports = function(it) {
        return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
      };
    }
  });

  // node_modules/core-js/internals/get-iterator-method.js
  var require_get_iterator_method = __commonJS({
    "node_modules/core-js/internals/get-iterator-method.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var classof = require_classof();
      var getMethod = require_get_method();
      var Iterators = require_iterators();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      module.exports = function(it) {
        if (it != void 0)
          return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
      };
    }
  });

  // node_modules/core-js/internals/get-iterator.js
  var require_get_iterator = __commonJS({
    "node_modules/core-js/internals/get-iterator.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var call = require_function_call();
      var aCallable = require_a_callable();
      var anObject = require_an_object();
      var tryToString = require_try_to_string();
      var getIteratorMethod = require_get_iterator_method();
      var TypeError2 = global2.TypeError;
      module.exports = function(argument, usingIterator) {
        var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
        if (aCallable(iteratorMethod))
          return anObject(call(iteratorMethod, argument));
        throw TypeError2(tryToString(argument) + " is not iterable");
      };
    }
  });

  // node_modules/core-js/internals/iterator-close.js
  var require_iterator_close = __commonJS({
    "node_modules/core-js/internals/iterator-close.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var call = require_function_call();
      var anObject = require_an_object();
      var getMethod = require_get_method();
      module.exports = function(iterator2, kind, value) {
        var innerResult, innerError;
        anObject(iterator2);
        try {
          innerResult = getMethod(iterator2, "return");
          if (!innerResult) {
            if (kind === "throw")
              throw value;
            return value;
          }
          innerResult = call(innerResult, iterator2);
        } catch (error) {
          innerError = true;
          innerResult = error;
        }
        if (kind === "throw")
          throw value;
        if (innerError)
          throw innerResult;
        anObject(innerResult);
        return value;
      };
    }
  });

  // node_modules/core-js/internals/iterate.js
  var require_iterate = __commonJS({
    "node_modules/core-js/internals/iterate.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var bind = require_function_bind_context();
      var call = require_function_call();
      var anObject = require_an_object();
      var tryToString = require_try_to_string();
      var isArrayIteratorMethod = require_is_array_iterator_method();
      var lengthOfArrayLike = require_length_of_array_like();
      var isPrototypeOf = require_object_is_prototype_of();
      var getIterator = require_get_iterator();
      var getIteratorMethod = require_get_iterator_method();
      var iteratorClose = require_iterator_close();
      var TypeError2 = global2.TypeError;
      var Result = function(stopped, result) {
        this.stopped = stopped;
        this.result = result;
      };
      var ResultPrototype = Result.prototype;
      module.exports = function(iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = bind(unboundFunction, that);
        var iterator2, iterFn, index, length, result, next, step;
        var stop = function(condition) {
          if (iterator2)
            iteratorClose(iterator2, "normal", condition);
          return new Result(true, condition);
        };
        var callFn = function(value) {
          if (AS_ENTRIES) {
            anObject(value);
            return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
          }
          return INTERRUPTED ? fn(value, stop) : fn(value);
        };
        if (IS_ITERATOR) {
          iterator2 = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (!iterFn)
            throw TypeError2(tryToString(iterable) + " is not iterable");
          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
              result = callFn(iterable[index]);
              if (result && isPrototypeOf(ResultPrototype, result))
                return result;
            }
            return new Result(false);
          }
          iterator2 = getIterator(iterable, iterFn);
        }
        next = iterator2.next;
        while (!(step = call(next, iterator2)).done) {
          try {
            result = callFn(step.value);
          } catch (error) {
            iteratorClose(iterator2, "throw", error);
          }
          if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
            return result;
        }
        return new Result(false);
      };
    }
  });

  // node_modules/core-js/modules/es.aggregate-error.js
  var require_es_aggregate_error = __commonJS({
    "node_modules/core-js/modules/es.aggregate-error.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var isPrototypeOf = require_object_is_prototype_of();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var copyConstructorProperties = require_copy_constructor_properties();
      var create = require_object_create();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var createPropertyDescriptor = require_create_property_descriptor();
      var clearErrorStack = require_clear_error_stack();
      var installErrorCause = require_install_error_cause();
      var iterate = require_iterate();
      var normalizeStringArgument = require_normalize_string_argument();
      var wellKnownSymbol = require_well_known_symbol();
      var ERROR_STACK_INSTALLABLE = require_error_stack_installable();
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var Error2 = global2.Error;
      var push = [].push;
      var $AggregateError = function AggregateError(errors, message) {
        var options = arguments.length > 2 ? arguments[2] : void 0;
        var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
        var that;
        if (setPrototypeOf) {
          that = setPrototypeOf(new Error2(), isInstance ? getPrototypeOf2(this) : AggregateErrorPrototype);
        } else {
          that = isInstance ? this : create(AggregateErrorPrototype);
          createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
        }
        if (message !== void 0)
          createNonEnumerableProperty(that, "message", normalizeStringArgument(message));
        if (ERROR_STACK_INSTALLABLE)
          createNonEnumerableProperty(that, "stack", clearErrorStack(that.stack, 1));
        installErrorCause(that, options);
        var errorsArray = [];
        iterate(errors, push, { that: errorsArray });
        createNonEnumerableProperty(that, "errors", errorsArray);
        return that;
      };
      if (setPrototypeOf)
        setPrototypeOf($AggregateError, Error2);
      else
        copyConstructorProperties($AggregateError, Error2, { name: true });
      var AggregateErrorPrototype = $AggregateError.prototype = create(Error2.prototype, {
        constructor: createPropertyDescriptor(1, $AggregateError),
        message: createPropertyDescriptor(1, ""),
        name: createPropertyDescriptor(1, "AggregateError")
      });
      $({ global: true }, {
        AggregateError: $AggregateError
      });
    }
  });

  // node_modules/core-js/modules/es.aggregate-error.cause.js
  var require_es_aggregate_error_cause = __commonJS({
    "node_modules/core-js/modules/es.aggregate-error.cause.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var apply = require_function_apply();
      var fails = require_fails();
      var wrapErrorConstructorWithCause = require_wrap_error_constructor_with_cause();
      var AGGREGATE_ERROR = "AggregateError";
      var $AggregateError = getBuiltIn(AGGREGATE_ERROR);
      var FORCED = !fails(function() {
        return $AggregateError([1]).errors[0] !== 1;
      }) && fails(function() {
        return $AggregateError([1], AGGREGATE_ERROR, { cause: 7 }).cause !== 7;
      });
      $({ global: true, forced: FORCED }, {
        AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function(init) {
          return function AggregateError(errors, message) {
            return apply(init, this, arguments);
          };
        }, FORCED, true)
      });
    }
  });

  // node_modules/core-js/internals/add-to-unscopables.js
  var require_add_to_unscopables = __commonJS({
    "node_modules/core-js/internals/add-to-unscopables.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var wellKnownSymbol = require_well_known_symbol();
      var create = require_object_create();
      var definePropertyModule = require_object_define_property();
      var UNSCOPABLES = wellKnownSymbol("unscopables");
      var ArrayPrototype = Array.prototype;
      if (ArrayPrototype[UNSCOPABLES] == void 0) {
        definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: create(null)
        });
      }
      module.exports = function(key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
    }
  });

  // node_modules/core-js/modules/es.array.at.js
  var require_es_array_at = __commonJS({
    "node_modules/core-js/modules/es.array.at.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var addToUnscopables = require_add_to_unscopables();
      $({ target: "Array", proto: true }, {
        at: function at(index) {
          var O = toObject(this);
          var len = lengthOfArrayLike(O);
          var relativeIndex = toIntegerOrInfinity(index);
          var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
          return k < 0 || k >= len ? void 0 : O[k];
        }
      });
      addToUnscopables("at");
    }
  });

  // node_modules/core-js/internals/array-method-has-species-support.js
  var require_array_method_has_species_support = __commonJS({
    "node_modules/core-js/internals/array-method-has-species-support.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var V8_VERSION = require_engine_v8_version();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(METHOD_NAME) {
        return V8_VERSION >= 51 || !fails(function() {
          var array = [];
          var constructor = array.constructor = {};
          constructor[SPECIES] = function() {
            return { foo: 1 };
          };
          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
    }
  });

  // node_modules/core-js/modules/es.array.concat.js
  var require_es_array_concat = __commonJS({
    "node_modules/core-js/modules/es.array.concat.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var fails = require_fails();
      var isArray4 = require_is_array();
      var isObject2 = require_is_object();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var createProperty = require_create_property();
      var arraySpeciesCreate = require_array_species_create();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var wellKnownSymbol = require_well_known_symbol();
      var V8_VERSION = require_engine_v8_version();
      var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
      var MAX_SAFE_INTEGER = 9007199254740991;
      var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
      var TypeError2 = global2.TypeError;
      var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
      });
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
      var isConcatSpreadable = function(O) {
        if (!isObject2(O))
          return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== void 0 ? !!spreadable : isArray4(O);
      };
      var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
      $({ target: "Array", proto: true, forced: FORCED }, {
        concat: function concat3(arg) {
          var O = toObject(this);
          var A = arraySpeciesCreate(O, 0);
          var n = 0;
          var i, k, length, len, E;
          for (i = -1, length = arguments.length; i < length; i++) {
            E = i === -1 ? O : arguments[i];
            if (isConcatSpreadable(E)) {
              len = lengthOfArrayLike(E);
              if (n + len > MAX_SAFE_INTEGER)
                throw TypeError2(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
              for (k = 0; k < len; k++, n++)
                if (k in E)
                  createProperty(A, n, E[k]);
            } else {
              if (n >= MAX_SAFE_INTEGER)
                throw TypeError2(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
              createProperty(A, n++, E);
            }
          }
          A.length = n;
          return A;
        }
      });
    }
  });

  // node_modules/core-js/internals/array-copy-within.js
  var require_array_copy_within = __commonJS({
    "node_modules/core-js/internals/array-copy-within.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toObject = require_to_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var min = Math.min;
      module.exports = [].copyWithin || function copyWithin(target, start) {
        var O = toObject(this);
        var len = lengthOfArrayLike(O);
        var to = toAbsoluteIndex(target, len);
        var from2 = toAbsoluteIndex(start, len);
        var end = arguments.length > 2 ? arguments[2] : void 0;
        var count = min((end === void 0 ? len : toAbsoluteIndex(end, len)) - from2, len - to);
        var inc = 1;
        if (from2 < to && to < from2 + count) {
          inc = -1;
          from2 += count - 1;
          to += count - 1;
        }
        while (count-- > 0) {
          if (from2 in O)
            O[to] = O[from2];
          else
            delete O[to];
          to += inc;
          from2 += inc;
        }
        return O;
      };
    }
  });

  // node_modules/core-js/modules/es.array.copy-within.js
  var require_es_array_copy_within = __commonJS({
    "node_modules/core-js/modules/es.array.copy-within.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var copyWithin = require_array_copy_within();
      var addToUnscopables = require_add_to_unscopables();
      $({ target: "Array", proto: true }, {
        copyWithin
      });
      addToUnscopables("copyWithin");
    }
  });

  // node_modules/core-js/internals/array-method-is-strict.js
  var require_array_method_is_strict = __commonJS({
    "node_modules/core-js/internals/array-method-is-strict.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      module.exports = function(METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function() {
          method.call(null, argument || function() {
            return 1;
          }, 1);
        });
      };
    }
  });

  // node_modules/core-js/modules/es.array.every.js
  var require_es_array_every = __commonJS({
    "node_modules/core-js/modules/es.array.every.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $every = require_array_iteration().every;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var STRICT_METHOD = arrayMethodIsStrict("every");
      $({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
        every: function every(callbackfn) {
          return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/internals/array-fill.js
  var require_array_fill = __commonJS({
    "node_modules/core-js/internals/array-fill.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toObject = require_to_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      module.exports = function fill(value) {
        var O = toObject(this);
        var length = lengthOfArrayLike(O);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : void 0, length);
        var end = argumentsLength > 2 ? arguments[2] : void 0;
        var endPos = end === void 0 ? length : toAbsoluteIndex(end, length);
        while (endPos > index)
          O[index++] = value;
        return O;
      };
    }
  });

  // node_modules/core-js/modules/es.array.fill.js
  var require_es_array_fill = __commonJS({
    "node_modules/core-js/modules/es.array.fill.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fill = require_array_fill();
      var addToUnscopables = require_add_to_unscopables();
      $({ target: "Array", proto: true }, {
        fill
      });
      addToUnscopables("fill");
    }
  });

  // node_modules/core-js/modules/es.array.filter.js
  var require_es_array_filter = __commonJS({
    "node_modules/core-js/modules/es.array.filter.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $filter = require_array_iteration().filter;
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        filter: function filter2(callbackfn) {
          return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.find.js
  var require_es_array_find = __commonJS({
    "node_modules/core-js/modules/es.array.find.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $find = require_array_iteration().find;
      var addToUnscopables = require_add_to_unscopables();
      var FIND = "find";
      var SKIPS_HOLES = true;
      if (FIND in [])
        Array(1)[FIND](function() {
          SKIPS_HOLES = false;
        });
      $({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
        find: function find(callbackfn) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      addToUnscopables(FIND);
    }
  });

  // node_modules/core-js/modules/es.array.find-index.js
  var require_es_array_find_index = __commonJS({
    "node_modules/core-js/modules/es.array.find-index.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $findIndex = require_array_iteration().findIndex;
      var addToUnscopables = require_add_to_unscopables();
      var FIND_INDEX = "findIndex";
      var SKIPS_HOLES = true;
      if (FIND_INDEX in [])
        Array(1)[FIND_INDEX](function() {
          SKIPS_HOLES = false;
        });
      $({ target: "Array", proto: true, forced: SKIPS_HOLES }, {
        findIndex: function findIndex(callbackfn) {
          return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      addToUnscopables(FIND_INDEX);
    }
  });

  // node_modules/core-js/internals/flatten-into-array.js
  var require_flatten_into_array = __commonJS({
    "node_modules/core-js/internals/flatten-into-array.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isArray4 = require_is_array();
      var lengthOfArrayLike = require_length_of_array_like();
      var bind = require_function_bind_context();
      var TypeError2 = global2.TypeError;
      var flattenIntoArray = function(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind(mapper, thisArg) : false;
        var element, elementLen;
        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
            if (depth > 0 && isArray4(element)) {
              elementLen = lengthOfArrayLike(element);
              targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;
            } else {
              if (targetIndex >= 9007199254740991)
                throw TypeError2("Exceed the acceptable array length");
              target[targetIndex] = element;
            }
            targetIndex++;
          }
          sourceIndex++;
        }
        return targetIndex;
      };
      module.exports = flattenIntoArray;
    }
  });

  // node_modules/core-js/modules/es.array.flat.js
  var require_es_array_flat = __commonJS({
    "node_modules/core-js/modules/es.array.flat.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var flattenIntoArray = require_flatten_into_array();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var arraySpeciesCreate = require_array_species_create();
      $({ target: "Array", proto: true }, {
        flat: function flat() {
          var depthArg = arguments.length ? arguments[0] : void 0;
          var O = toObject(this);
          var sourceLen = lengthOfArrayLike(O);
          var A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === void 0 ? 1 : toIntegerOrInfinity(depthArg));
          return A;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.flat-map.js
  var require_es_array_flat_map = __commonJS({
    "node_modules/core-js/modules/es.array.flat-map.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var flattenIntoArray = require_flatten_into_array();
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var arraySpeciesCreate = require_array_species_create();
      $({ target: "Array", proto: true }, {
        flatMap: function flatMap2(callbackfn) {
          var O = toObject(this);
          var sourceLen = lengthOfArrayLike(O);
          var A;
          aCallable(callbackfn);
          A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          return A;
        }
      });
    }
  });

  // node_modules/core-js/internals/array-for-each.js
  var require_array_for_each = __commonJS({
    "node_modules/core-js/internals/array-for-each.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $forEach = require_array_iteration().forEach;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var STRICT_METHOD = arrayMethodIsStrict("forEach");
      module.exports = !STRICT_METHOD ? function forEach(callbackfn) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      } : [].forEach;
    }
  });

  // node_modules/core-js/modules/es.array.for-each.js
  var require_es_array_for_each = __commonJS({
    "node_modules/core-js/modules/es.array.for-each.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var forEach = require_array_for_each();
      $({ target: "Array", proto: true, forced: [].forEach != forEach }, {
        forEach
      });
    }
  });

  // node_modules/core-js/internals/call-with-safe-iteration-closing.js
  var require_call_with_safe_iteration_closing = __commonJS({
    "node_modules/core-js/internals/call-with-safe-iteration-closing.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var anObject = require_an_object();
      var iteratorClose = require_iterator_close();
      module.exports = function(iterator2, fn, value, ENTRIES) {
        try {
          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
        } catch (error) {
          iteratorClose(iterator2, "throw", error);
        }
      };
    }
  });

  // node_modules/core-js/internals/array-from.js
  var require_array_from = __commonJS({
    "node_modules/core-js/internals/array-from.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var bind = require_function_bind_context();
      var call = require_function_call();
      var toObject = require_to_object();
      var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
      var isArrayIteratorMethod = require_is_array_iterator_method();
      var isConstructor = require_is_constructor();
      var lengthOfArrayLike = require_length_of_array_like();
      var createProperty = require_create_property();
      var getIterator = require_get_iterator();
      var getIteratorMethod = require_get_iterator_method();
      var Array2 = global2.Array;
      module.exports = function from2(arrayLike) {
        var O = toObject(arrayLike);
        var IS_CONSTRUCTOR = isConstructor(this);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
        var mapping = mapfn !== void 0;
        if (mapping)
          mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
        var iteratorMethod = getIteratorMethod(O);
        var index = 0;
        var length, result, step, iterator2, next, value;
        if (iteratorMethod && !(this == Array2 && isArrayIteratorMethod(iteratorMethod))) {
          iterator2 = getIterator(O, iteratorMethod);
          next = iterator2.next;
          result = IS_CONSTRUCTOR ? new this() : [];
          for (; !(step = call(next, iterator2)).done; index++) {
            value = mapping ? callWithSafeIterationClosing(iterator2, mapfn, [step.value, index], true) : step.value;
            createProperty(result, index, value);
          }
        } else {
          length = lengthOfArrayLike(O);
          result = IS_CONSTRUCTOR ? new this(length) : Array2(length);
          for (; length > index; index++) {
            value = mapping ? mapfn(O[index], index) : O[index];
            createProperty(result, index, value);
          }
        }
        result.length = index;
        return result;
      };
    }
  });

  // node_modules/core-js/internals/check-correctness-of-iteration.js
  var require_check_correctness_of_iteration = __commonJS({
    "node_modules/core-js/internals/check-correctness-of-iteration.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      var SAFE_CLOSING = false;
      try {
        called = 0;
        iteratorWithReturn = {
          next: function() {
            return { done: !!called++ };
          },
          "return": function() {
            SAFE_CLOSING = true;
          }
        };
        iteratorWithReturn[ITERATOR] = function() {
          return this;
        };
        Array.from(iteratorWithReturn, function() {
          throw 2;
        });
      } catch (error) {
      }
      var called;
      var iteratorWithReturn;
      module.exports = function(exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING)
          return false;
        var ITERATION_SUPPORT = false;
        try {
          var object = {};
          object[ITERATOR] = function() {
            return {
              next: function() {
                return { done: ITERATION_SUPPORT = true };
              }
            };
          };
          exec(object);
        } catch (error) {
        }
        return ITERATION_SUPPORT;
      };
    }
  });

  // node_modules/core-js/modules/es.array.from.js
  var require_es_array_from = __commonJS({
    "node_modules/core-js/modules/es.array.from.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var from2 = require_array_from();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
      var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
        Array.from(iterable);
      });
      $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
        from: from2
      });
    }
  });

  // node_modules/core-js/modules/es.array.includes.js
  var require_es_array_includes = __commonJS({
    "node_modules/core-js/modules/es.array.includes.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $includes = require_array_includes().includes;
      var addToUnscopables = require_add_to_unscopables();
      $({ target: "Array", proto: true }, {
        includes: function includes(el) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
      addToUnscopables("includes");
    }
  });

  // node_modules/core-js/modules/es.array.index-of.js
  var require_es_array_index_of = __commonJS({
    "node_modules/core-js/modules/es.array.index-of.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var $IndexOf = require_array_includes().indexOf;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var un$IndexOf = uncurryThis([].indexOf);
      var NEGATIVE_ZERO = !!un$IndexOf && 1 / un$IndexOf([1], 1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict("indexOf");
      $({ target: "Array", proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD }, {
        indexOf: function indexOf(searchElement) {
          var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
          return NEGATIVE_ZERO ? un$IndexOf(this, searchElement, fromIndex) || 0 : $IndexOf(this, searchElement, fromIndex);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.is-array.js
  var require_es_array_is_array = __commonJS({
    "node_modules/core-js/modules/es.array.is-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var isArray4 = require_is_array();
      $({ target: "Array", stat: true }, {
        isArray: isArray4
      });
    }
  });

  // node_modules/core-js/internals/iterators-core.js
  var require_iterators_core = __commonJS({
    "node_modules/core-js/internals/iterators-core.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var isCallable = require_is_callable();
      var create = require_object_create();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var redefine = require_redefine();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var ITERATOR = wellKnownSymbol("iterator");
      var BUGGY_SAFARI_ITERATORS = false;
      var IteratorPrototype;
      var PrototypeOfArrayIteratorPrototype;
      var arrayIterator;
      if ([].keys) {
        arrayIterator = [].keys();
        if (!("next" in arrayIterator))
          BUGGY_SAFARI_ITERATORS = true;
        else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf2(getPrototypeOf2(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
            IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }
      var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
        var test = {};
        return IteratorPrototype[ITERATOR].call(test) !== test;
      });
      if (NEW_ITERATOR_PROTOTYPE)
        IteratorPrototype = {};
      else if (IS_PURE)
        IteratorPrototype = create(IteratorPrototype);
      if (!isCallable(IteratorPrototype[ITERATOR])) {
        redefine(IteratorPrototype, ITERATOR, function() {
          return this;
        });
      }
      module.exports = {
        IteratorPrototype,
        BUGGY_SAFARI_ITERATORS
      };
    }
  });

  // node_modules/core-js/internals/create-iterator-constructor.js
  var require_create_iterator_constructor = __commonJS({
    "node_modules/core-js/internals/create-iterator-constructor.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var IteratorPrototype = require_iterators_core().IteratorPrototype;
      var create = require_object_create();
      var createPropertyDescriptor = require_create_property_descriptor();
      var setToStringTag = require_set_to_string_tag();
      var Iterators = require_iterators();
      var returnThis = function() {
        return this;
      };
      module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
        var TO_STRING_TAG = NAME + " Iterator";
        IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
    }
  });

  // node_modules/core-js/internals/define-iterator.js
  var require_define_iterator = __commonJS({
    "node_modules/core-js/internals/define-iterator.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var call = require_function_call();
      var IS_PURE = require_is_pure();
      var FunctionName = require_function_name();
      var isCallable = require_is_callable();
      var createIteratorConstructor = require_create_iterator_constructor();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var setToStringTag = require_set_to_string_tag();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefine = require_redefine();
      var wellKnownSymbol = require_well_known_symbol();
      var Iterators = require_iterators();
      var IteratorsCore = require_iterators_core();
      var PROPER_FUNCTION_NAME = FunctionName.PROPER;
      var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol("iterator");
      var KEYS = "keys";
      var VALUES = "values";
      var ENTRIES = "entries";
      var returnThis = function() {
        return this;
      };
      module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);
        var getIterationMethod = function(KIND) {
          if (KIND === DEFAULT && defaultIterator)
            return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
            return IterablePrototype[KIND];
          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };
            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };
            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }
          return function() {
            return new IteratorConstructor(this);
          };
        };
        var TO_STRING_TAG = NAME + " Iterator";
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY;
        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf2(anyNativeIterator.call(new Iterable()));
          if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf2(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            }
            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE)
              Iterators[TO_STRING_TAG] = returnThis;
          }
        }
        if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
            createNonEnumerableProperty(IterablePrototype, "name", VALUES);
          } else {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
              return call(nativeIterator, this);
            };
          }
        }
        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED)
            for (KEY in methods) {
              if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                redefine(IterablePrototype, KEY, methods[KEY]);
              }
            }
          else
            $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
        }
        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
        }
        Iterators[NAME] = defaultIterator;
        return methods;
      };
    }
  });

  // node_modules/core-js/modules/es.array.iterator.js
  var require_es_array_iterator = __commonJS({
    "node_modules/core-js/modules/es.array.iterator.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var toIndexedObject = require_to_indexed_object();
      var addToUnscopables = require_add_to_unscopables();
      var Iterators = require_iterators();
      var InternalStateModule = require_internal_state();
      var defineProperty = require_object_define_property().f;
      var defineIterator = require_define_iterator();
      var IS_PURE = require_is_pure();
      var DESCRIPTORS = require_descriptors();
      var ARRAY_ITERATOR = "Array Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
      module.exports = defineIterator(Array, "Array", function(iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          index: 0,
          kind
        });
      }, function() {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;
        if (!target || index >= target.length) {
          state.target = void 0;
          return { value: void 0, done: true };
        }
        if (kind == "keys")
          return { value: index, done: false };
        if (kind == "values")
          return { value: target[index], done: false };
        return { value: [index, target[index]], done: false };
      }, "values");
      var values = Iterators.Arguments = Iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
      if (!IS_PURE && DESCRIPTORS && values.name !== "values")
        try {
          defineProperty(values, "name", { value: "values" });
        } catch (error) {
        }
    }
  });

  // node_modules/core-js/modules/es.array.join.js
  var require_es_array_join = __commonJS({
    "node_modules/core-js/modules/es.array.join.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var IndexedObject = require_indexed_object();
      var toIndexedObject = require_to_indexed_object();
      var arrayMethodIsStrict = require_array_method_is_strict();
      var un$Join = uncurryThis([].join);
      var ES3_STRINGS = IndexedObject != Object;
      var STRICT_METHOD = arrayMethodIsStrict("join", ",");
      $({ target: "Array", proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {
        join: function join(separator) {
          return un$Join(toIndexedObject(this), separator === void 0 ? "," : separator);
        }
      });
    }
  });

  // node_modules/core-js/internals/array-last-index-of.js
  var require_array_last_index_of = __commonJS({
    "node_modules/core-js/internals/array-last-index-of.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var apply = require_function_apply();
      var toIndexedObject = require_to_indexed_object();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var lengthOfArrayLike = require_length_of_array_like();
      var arrayMethodIsStrict = require_array_method_is_strict();
      var min = Math.min;
      var $lastIndexOf = [].lastIndexOf;
      var NEGATIVE_ZERO = !!$lastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict("lastIndexOf");
      var FORCED = NEGATIVE_ZERO || !STRICT_METHOD;
      module.exports = FORCED ? function lastIndexOf(searchElement) {
        if (NEGATIVE_ZERO)
          return apply($lastIndexOf, this, arguments) || 0;
        var O = toIndexedObject(this);
        var length = lengthOfArrayLike(O);
        var index = length - 1;
        if (arguments.length > 1)
          index = min(index, toIntegerOrInfinity(arguments[1]));
        if (index < 0)
          index = length + index;
        for (; index >= 0; index--)
          if (index in O && O[index] === searchElement)
            return index || 0;
        return -1;
      } : $lastIndexOf;
    }
  });

  // node_modules/core-js/modules/es.array.last-index-of.js
  var require_es_array_last_index_of = __commonJS({
    "node_modules/core-js/modules/es.array.last-index-of.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var lastIndexOf = require_array_last_index_of();
      $({ target: "Array", proto: true, forced: lastIndexOf !== [].lastIndexOf }, {
        lastIndexOf
      });
    }
  });

  // node_modules/core-js/modules/es.array.map.js
  var require_es_array_map = __commonJS({
    "node_modules/core-js/modules/es.array.map.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $map = require_array_iteration().map;
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        map: function map2(callbackfn) {
          return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.of.js
  var require_es_array_of = __commonJS({
    "node_modules/core-js/modules/es.array.of.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var fails = require_fails();
      var isConstructor = require_is_constructor();
      var createProperty = require_create_property();
      var Array2 = global2.Array;
      var ISNT_GENERIC = fails(function() {
        function F() {
        }
        return !(Array2.of.call(F) instanceof F);
      });
      $({ target: "Array", stat: true, forced: ISNT_GENERIC }, {
        of: function of2() {
          var index = 0;
          var argumentsLength = arguments.length;
          var result = new (isConstructor(this) ? this : Array2)(argumentsLength);
          while (argumentsLength > index)
            createProperty(result, index, arguments[index++]);
          result.length = argumentsLength;
          return result;
        }
      });
    }
  });

  // node_modules/core-js/internals/array-reduce.js
  var require_array_reduce = __commonJS({
    "node_modules/core-js/internals/array-reduce.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var IndexedObject = require_indexed_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var TypeError2 = global2.TypeError;
      var createMethod = function(IS_RIGHT) {
        return function(that, callbackfn, argumentsLength, memo) {
          aCallable(callbackfn);
          var O = toObject(that);
          var self2 = IndexedObject(O);
          var length = lengthOfArrayLike(O);
          var index = IS_RIGHT ? length - 1 : 0;
          var i = IS_RIGHT ? -1 : 1;
          if (argumentsLength < 2)
            while (true) {
              if (index in self2) {
                memo = self2[index];
                index += i;
                break;
              }
              index += i;
              if (IS_RIGHT ? index < 0 : length <= index) {
                throw TypeError2("Reduce of empty array with no initial value");
              }
            }
          for (; IS_RIGHT ? index >= 0 : length > index; index += i)
            if (index in self2) {
              memo = callbackfn(memo, self2[index], index, O);
            }
          return memo;
        };
      };
      module.exports = {
        left: createMethod(false),
        right: createMethod(true)
      };
    }
  });

  // node_modules/core-js/internals/engine-is-node.js
  var require_engine_is_node = __commonJS({
    "node_modules/core-js/internals/engine-is-node.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var classof = require_classof_raw();
      var global2 = require_global();
      module.exports = classof(global2.process) == "process";
    }
  });

  // node_modules/core-js/modules/es.array.reduce.js
  var require_es_array_reduce = __commonJS({
    "node_modules/core-js/modules/es.array.reduce.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $reduce = require_array_reduce().left;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var CHROME_VERSION = require_engine_v8_version();
      var IS_NODE = require_engine_is_node();
      var STRICT_METHOD = arrayMethodIsStrict("reduce");
      var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
      $({ target: "Array", proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
        reduce: function reduce(callbackfn) {
          var length = arguments.length;
          return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.reduce-right.js
  var require_es_array_reduce_right = __commonJS({
    "node_modules/core-js/modules/es.array.reduce-right.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $reduceRight = require_array_reduce().right;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var CHROME_VERSION = require_engine_v8_version();
      var IS_NODE = require_engine_is_node();
      var STRICT_METHOD = arrayMethodIsStrict("reduceRight");
      var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
      $({ target: "Array", proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
        reduceRight: function reduceRight(callbackfn) {
          return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.reverse.js
  var require_es_array_reverse = __commonJS({
    "node_modules/core-js/modules/es.array.reverse.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var isArray4 = require_is_array();
      var un$Reverse = uncurryThis([].reverse);
      var test = [1, 2];
      $({ target: "Array", proto: true, forced: String(test) === String(test.reverse()) }, {
        reverse: function reverse() {
          if (isArray4(this))
            this.length = this.length;
          return un$Reverse(this);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.slice.js
  var require_es_array_slice = __commonJS({
    "node_modules/core-js/modules/es.array.slice.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var isArray4 = require_is_array();
      var isConstructor = require_is_constructor();
      var isObject2 = require_is_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var lengthOfArrayLike = require_length_of_array_like();
      var toIndexedObject = require_to_indexed_object();
      var createProperty = require_create_property();
      var wellKnownSymbol = require_well_known_symbol();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var un$Slice = require_array_slice();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
      var SPECIES = wellKnownSymbol("species");
      var Array2 = global2.Array;
      var max = Math.max;
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        slice: function slice(start, end) {
          var O = toIndexedObject(this);
          var length = lengthOfArrayLike(O);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
          var Constructor, result, n;
          if (isArray4(O)) {
            Constructor = O.constructor;
            if (isConstructor(Constructor) && (Constructor === Array2 || isArray4(Constructor.prototype))) {
              Constructor = void 0;
            } else if (isObject2(Constructor)) {
              Constructor = Constructor[SPECIES];
              if (Constructor === null)
                Constructor = void 0;
            }
            if (Constructor === Array2 || Constructor === void 0) {
              return un$Slice(O, k, fin);
            }
          }
          result = new (Constructor === void 0 ? Array2 : Constructor)(max(fin - k, 0));
          for (n = 0; k < fin; k++, n++)
            if (k in O)
              createProperty(result, n, O[k]);
          result.length = n;
          return result;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.some.js
  var require_es_array_some = __commonJS({
    "node_modules/core-js/modules/es.array.some.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $some = require_array_iteration().some;
      var arrayMethodIsStrict = require_array_method_is_strict();
      var STRICT_METHOD = arrayMethodIsStrict("some");
      $({ target: "Array", proto: true, forced: !STRICT_METHOD }, {
        some: function some(callbackfn) {
          return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/internals/array-sort.js
  var require_array_sort = __commonJS({
    "node_modules/core-js/internals/array-sort.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var arraySlice2 = require_array_slice_simple();
      var floor = Math.floor;
      var mergeSort = function(array, comparefn) {
        var length = array.length;
        var middle = floor(length / 2);
        return length < 8 ? insertionSort(array, comparefn) : merge2(array, mergeSort(arraySlice2(array, 0, middle), comparefn), mergeSort(arraySlice2(array, middle), comparefn), comparefn);
      };
      var insertionSort = function(array, comparefn) {
        var length = array.length;
        var i = 1;
        var element, j;
        while (i < length) {
          j = i;
          element = array[i];
          while (j && comparefn(array[j - 1], element) > 0) {
            array[j] = array[--j];
          }
          if (j !== i++)
            array[j] = element;
        }
        return array;
      };
      var merge2 = function(array, left, right, comparefn) {
        var llength = left.length;
        var rlength = right.length;
        var lindex = 0;
        var rindex = 0;
        while (lindex < llength || rindex < rlength) {
          array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
        }
        return array;
      };
      module.exports = mergeSort;
    }
  });

  // node_modules/core-js/internals/engine-ff-version.js
  var require_engine_ff_version = __commonJS({
    "node_modules/core-js/internals/engine-ff-version.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var userAgent = require_engine_user_agent();
      var firefox = userAgent.match(/firefox\/(\d+)/i);
      module.exports = !!firefox && +firefox[1];
    }
  });

  // node_modules/core-js/internals/engine-is-ie-or-edge.js
  var require_engine_is_ie_or_edge = __commonJS({
    "node_modules/core-js/internals/engine-is-ie-or-edge.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var UA = require_engine_user_agent();
      module.exports = /MSIE|Trident/.test(UA);
    }
  });

  // node_modules/core-js/internals/engine-webkit-version.js
  var require_engine_webkit_version = __commonJS({
    "node_modules/core-js/internals/engine-webkit-version.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var userAgent = require_engine_user_agent();
      var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
      module.exports = !!webkit && +webkit[1];
    }
  });

  // node_modules/core-js/modules/es.array.sort.js
  var require_es_array_sort = __commonJS({
    "node_modules/core-js/modules/es.array.sort.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var toString = require_to_string();
      var fails = require_fails();
      var internalSort = require_array_sort();
      var arrayMethodIsStrict = require_array_method_is_strict();
      var FF = require_engine_ff_version();
      var IE_OR_EDGE = require_engine_is_ie_or_edge();
      var V8 = require_engine_v8_version();
      var WEBKIT = require_engine_webkit_version();
      var test = [];
      var un$Sort = uncurryThis(test.sort);
      var push = uncurryThis(test.push);
      var FAILS_ON_UNDEFINED = fails(function() {
        test.sort(void 0);
      });
      var FAILS_ON_NULL = fails(function() {
        test.sort(null);
      });
      var STRICT_METHOD = arrayMethodIsStrict("sort");
      var STABLE_SORT = !fails(function() {
        if (V8)
          return V8 < 70;
        if (FF && FF > 3)
          return;
        if (IE_OR_EDGE)
          return true;
        if (WEBKIT)
          return WEBKIT < 603;
        var result = "";
        var code, chr, value, index;
        for (code = 65; code < 76; code++) {
          chr = String.fromCharCode(code);
          switch (code) {
            case 66:
            case 69:
            case 70:
            case 72:
              value = 3;
              break;
            case 68:
            case 71:
              value = 4;
              break;
            default:
              value = 2;
          }
          for (index = 0; index < 47; index++) {
            test.push({ k: chr + index, v: value });
          }
        }
        test.sort(function(a, b) {
          return b.v - a.v;
        });
        for (index = 0; index < test.length; index++) {
          chr = test[index].k.charAt(0);
          if (result.charAt(result.length - 1) !== chr)
            result += chr;
        }
        return result !== "DGBEFHACIJK";
      });
      var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
      var getSortCompare = function(comparefn) {
        return function(x, y) {
          if (y === void 0)
            return -1;
          if (x === void 0)
            return 1;
          if (comparefn !== void 0)
            return +comparefn(x, y) || 0;
          return toString(x) > toString(y) ? 1 : -1;
        };
      };
      $({ target: "Array", proto: true, forced: FORCED }, {
        sort: function sort(comparefn) {
          if (comparefn !== void 0)
            aCallable(comparefn);
          var array = toObject(this);
          if (STABLE_SORT)
            return comparefn === void 0 ? un$Sort(array) : un$Sort(array, comparefn);
          var items = [];
          var arrayLength = lengthOfArrayLike(array);
          var itemsLength, index;
          for (index = 0; index < arrayLength; index++) {
            if (index in array)
              push(items, array[index]);
          }
          internalSort(items, getSortCompare(comparefn));
          itemsLength = items.length;
          index = 0;
          while (index < itemsLength)
            array[index] = items[index++];
          while (index < arrayLength)
            delete array[index++];
          return array;
        }
      });
    }
  });

  // node_modules/core-js/internals/set-species.js
  var require_set_species = __commonJS({
    "node_modules/core-js/internals/set-species.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var getBuiltIn = require_get_built_in();
      var definePropertyModule = require_object_define_property();
      var wellKnownSymbol = require_well_known_symbol();
      var DESCRIPTORS = require_descriptors();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;
        if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
          defineProperty(Constructor, SPECIES, {
            configurable: true,
            get: function() {
              return this;
            }
          });
        }
      };
    }
  });

  // node_modules/core-js/modules/es.array.species.js
  var require_es_array_species = __commonJS({
    "node_modules/core-js/modules/es.array.species.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var setSpecies = require_set_species();
      setSpecies("Array");
    }
  });

  // node_modules/core-js/modules/es.array.splice.js
  var require_es_array_splice = __commonJS({
    "node_modules/core-js/modules/es.array.splice.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var toAbsoluteIndex = require_to_absolute_index();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var lengthOfArrayLike = require_length_of_array_like();
      var toObject = require_to_object();
      var arraySpeciesCreate = require_array_species_create();
      var createProperty = require_create_property();
      var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
      var TypeError2 = global2.TypeError;
      var max = Math.max;
      var min = Math.min;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";
      $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
        splice: function splice(start, deleteCount) {
          var O = toObject(this);
          var len = lengthOfArrayLike(O);
          var actualStart = toAbsoluteIndex(start, len);
          var argumentsLength = arguments.length;
          var insertCount, actualDeleteCount, A, k, from2, to;
          if (argumentsLength === 0) {
            insertCount = actualDeleteCount = 0;
          } else if (argumentsLength === 1) {
            insertCount = 0;
            actualDeleteCount = len - actualStart;
          } else {
            insertCount = argumentsLength - 2;
            actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
          }
          if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
            throw TypeError2(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
          }
          A = arraySpeciesCreate(O, actualDeleteCount);
          for (k = 0; k < actualDeleteCount; k++) {
            from2 = actualStart + k;
            if (from2 in O)
              createProperty(A, k, O[from2]);
          }
          A.length = actualDeleteCount;
          if (insertCount < actualDeleteCount) {
            for (k = actualStart; k < len - actualDeleteCount; k++) {
              from2 = k + actualDeleteCount;
              to = k + insertCount;
              if (from2 in O)
                O[to] = O[from2];
              else
                delete O[to];
            }
            for (k = len; k > len - actualDeleteCount + insertCount; k--)
              delete O[k - 1];
          } else if (insertCount > actualDeleteCount) {
            for (k = len - actualDeleteCount; k > actualStart; k--) {
              from2 = k + actualDeleteCount - 1;
              to = k + insertCount - 1;
              if (from2 in O)
                O[to] = O[from2];
              else
                delete O[to];
            }
          }
          for (k = 0; k < insertCount; k++) {
            O[k + actualStart] = arguments[k + 2];
          }
          O.length = len - actualDeleteCount + insertCount;
          return A;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.array.unscopables.flat.js
  var require_es_array_unscopables_flat = __commonJS({
    "node_modules/core-js/modules/es.array.unscopables.flat.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var addToUnscopables = require_add_to_unscopables();
      addToUnscopables("flat");
    }
  });

  // node_modules/core-js/modules/es.array.unscopables.flat-map.js
  var require_es_array_unscopables_flat_map = __commonJS({
    "node_modules/core-js/modules/es.array.unscopables.flat-map.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var addToUnscopables = require_add_to_unscopables();
      addToUnscopables("flatMap");
    }
  });

  // node_modules/core-js/internals/array-buffer-native.js
  var require_array_buffer_native = __commonJS({
    "node_modules/core-js/internals/array-buffer-native.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = typeof ArrayBuffer != "undefined" && typeof DataView != "undefined";
    }
  });

  // node_modules/core-js/internals/redefine-all.js
  var require_redefine_all = __commonJS({
    "node_modules/core-js/internals/redefine-all.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var redefine = require_redefine();
      module.exports = function(target, src, options) {
        for (var key in src)
          redefine(target, key, src[key], options);
        return target;
      };
    }
  });

  // node_modules/core-js/internals/an-instance.js
  var require_an_instance = __commonJS({
    "node_modules/core-js/internals/an-instance.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isPrototypeOf = require_object_is_prototype_of();
      var TypeError2 = global2.TypeError;
      module.exports = function(it, Prototype) {
        if (isPrototypeOf(Prototype, it))
          return it;
        throw TypeError2("Incorrect invocation");
      };
    }
  });

  // node_modules/core-js/internals/to-index.js
  var require_to_index = __commonJS({
    "node_modules/core-js/internals/to-index.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toLength = require_to_length();
      var RangeError = global2.RangeError;
      module.exports = function(it) {
        if (it === void 0)
          return 0;
        var number = toIntegerOrInfinity(it);
        var length = toLength(number);
        if (number !== length)
          throw RangeError("Wrong length or index");
        return length;
      };
    }
  });

  // node_modules/core-js/internals/ieee754.js
  var require_ieee754 = __commonJS({
    "node_modules/core-js/internals/ieee754.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var Array2 = global2.Array;
      var abs = Math.abs;
      var pow = Math.pow;
      var floor = Math.floor;
      var log = Math.log;
      var LN2 = Math.LN2;
      var pack = function(number, mantissaLength, bytes) {
        var buffer = Array2(bytes);
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
        var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
        var index = 0;
        var exponent, mantissa, c;
        number = abs(number);
        if (number != number || number === Infinity) {
          mantissa = number != number ? 1 : 0;
          exponent = eMax;
        } else {
          exponent = floor(log(number) / LN2);
          c = pow(2, -exponent);
          if (number * c < 1) {
            exponent--;
            c *= 2;
          }
          if (exponent + eBias >= 1) {
            number += rt / c;
          } else {
            number += rt * pow(2, 1 - eBias);
          }
          if (number * c >= 2) {
            exponent++;
            c /= 2;
          }
          if (exponent + eBias >= eMax) {
            mantissa = 0;
            exponent = eMax;
          } else if (exponent + eBias >= 1) {
            mantissa = (number * c - 1) * pow(2, mantissaLength);
            exponent = exponent + eBias;
          } else {
            mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
            exponent = 0;
          }
        }
        while (mantissaLength >= 8) {
          buffer[index++] = mantissa & 255;
          mantissa /= 256;
          mantissaLength -= 8;
        }
        exponent = exponent << mantissaLength | mantissa;
        exponentLength += mantissaLength;
        while (exponentLength > 0) {
          buffer[index++] = exponent & 255;
          exponent /= 256;
          exponentLength -= 8;
        }
        buffer[--index] |= sign * 128;
        return buffer;
      };
      var unpack = function(buffer, mantissaLength) {
        var bytes = buffer.length;
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var nBits = exponentLength - 7;
        var index = bytes - 1;
        var sign = buffer[index--];
        var exponent = sign & 127;
        var mantissa;
        sign >>= 7;
        while (nBits > 0) {
          exponent = exponent * 256 + buffer[index--];
          nBits -= 8;
        }
        mantissa = exponent & (1 << -nBits) - 1;
        exponent >>= -nBits;
        nBits += mantissaLength;
        while (nBits > 0) {
          mantissa = mantissa * 256 + buffer[index--];
          nBits -= 8;
        }
        if (exponent === 0) {
          exponent = 1 - eBias;
        } else if (exponent === eMax) {
          return mantissa ? NaN : sign ? -Infinity : Infinity;
        } else {
          mantissa = mantissa + pow(2, mantissaLength);
          exponent = exponent - eBias;
        }
        return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
      };
      module.exports = {
        pack,
        unpack
      };
    }
  });

  // node_modules/core-js/internals/array-buffer.js
  var require_array_buffer = __commonJS({
    "node_modules/core-js/internals/array-buffer.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var DESCRIPTORS = require_descriptors();
      var NATIVE_ARRAY_BUFFER = require_array_buffer_native();
      var FunctionName = require_function_name();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefineAll = require_redefine_all();
      var fails = require_fails();
      var anInstance = require_an_instance();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toLength = require_to_length();
      var toIndex = require_to_index();
      var IEEE754 = require_ieee754();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var getOwnPropertyNames = require_object_get_own_property_names().f;
      var defineProperty = require_object_define_property().f;
      var arrayFill = require_array_fill();
      var arraySlice2 = require_array_slice_simple();
      var setToStringTag = require_set_to_string_tag();
      var InternalStateModule = require_internal_state();
      var PROPER_FUNCTION_NAME = FunctionName.PROPER;
      var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var ARRAY_BUFFER = "ArrayBuffer";
      var DATA_VIEW = "DataView";
      var PROTOTYPE = "prototype";
      var WRONG_LENGTH = "Wrong length";
      var WRONG_INDEX = "Wrong index";
      var NativeArrayBuffer = global2[ARRAY_BUFFER];
      var $ArrayBuffer = NativeArrayBuffer;
      var ArrayBufferPrototype = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
      var $DataView = global2[DATA_VIEW];
      var DataViewPrototype = $DataView && $DataView[PROTOTYPE];
      var ObjectPrototype = Object.prototype;
      var Array2 = global2.Array;
      var RangeError = global2.RangeError;
      var fill = uncurryThis(arrayFill);
      var reverse = uncurryThis([].reverse);
      var packIEEE754 = IEEE754.pack;
      var unpackIEEE754 = IEEE754.unpack;
      var packInt8 = function(number) {
        return [number & 255];
      };
      var packInt16 = function(number) {
        return [number & 255, number >> 8 & 255];
      };
      var packInt32 = function(number) {
        return [number & 255, number >> 8 & 255, number >> 16 & 255, number >> 24 & 255];
      };
      var unpackInt32 = function(buffer) {
        return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
      };
      var packFloat32 = function(number) {
        return packIEEE754(number, 23, 4);
      };
      var packFloat64 = function(number) {
        return packIEEE754(number, 52, 8);
      };
      var addGetter = function(Constructor, key2) {
        defineProperty(Constructor[PROTOTYPE], key2, { get: function() {
          return getInternalState(this)[key2];
        } });
      };
      var get = function(view, count, index, isLittleEndian) {
        var intIndex = toIndex(index);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength)
          throw RangeError(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = arraySlice2(bytes, start, start + count);
        return isLittleEndian ? pack : reverse(pack);
      };
      var set = function(view, count, index, conversion, value, isLittleEndian) {
        var intIndex = toIndex(index);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength)
          throw RangeError(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = conversion(+value);
        for (var i = 0; i < count; i++)
          bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
      };
      if (!NATIVE_ARRAY_BUFFER) {
        $ArrayBuffer = function ArrayBuffer2(length) {
          anInstance(this, ArrayBufferPrototype);
          var byteLength = toIndex(length);
          setInternalState(this, {
            bytes: fill(Array2(byteLength), 0),
            byteLength
          });
          if (!DESCRIPTORS)
            this.byteLength = byteLength;
        };
        ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE];
        $DataView = function DataView2(buffer, byteOffset, byteLength) {
          anInstance(this, DataViewPrototype);
          anInstance(buffer, ArrayBufferPrototype);
          var bufferLength = getInternalState(buffer).byteLength;
          var offset = toIntegerOrInfinity(byteOffset);
          if (offset < 0 || offset > bufferLength)
            throw RangeError("Wrong offset");
          byteLength = byteLength === void 0 ? bufferLength - offset : toLength(byteLength);
          if (offset + byteLength > bufferLength)
            throw RangeError(WRONG_LENGTH);
          setInternalState(this, {
            buffer,
            byteLength,
            byteOffset: offset
          });
          if (!DESCRIPTORS) {
            this.buffer = buffer;
            this.byteLength = byteLength;
            this.byteOffset = offset;
          }
        };
        DataViewPrototype = $DataView[PROTOTYPE];
        if (DESCRIPTORS) {
          addGetter($ArrayBuffer, "byteLength");
          addGetter($DataView, "buffer");
          addGetter($DataView, "byteLength");
          addGetter($DataView, "byteOffset");
        }
        redefineAll(DataViewPrototype, {
          getInt8: function getInt8(byteOffset) {
            return get(this, 1, byteOffset)[0] << 24 >> 24;
          },
          getUint8: function getUint8(byteOffset) {
            return get(this, 1, byteOffset)[0];
          },
          getInt16: function getInt16(byteOffset) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : void 0);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
          },
          getUint16: function getUint16(byteOffset) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : void 0);
            return bytes[1] << 8 | bytes[0];
          },
          getInt32: function getInt32(byteOffset) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0));
          },
          getUint32: function getUint32(byteOffset) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0)) >>> 0;
          },
          getFloat32: function getFloat32(byteOffset) {
            return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : void 0), 23);
          },
          getFloat64: function getFloat64(byteOffset) {
            return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : void 0), 52);
          },
          setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setInt16: function setInt16(byteOffset, value) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : void 0);
          },
          setUint16: function setUint16(byteOffset, value) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : void 0);
          },
          setInt32: function setInt32(byteOffset, value) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : void 0);
          },
          setUint32: function setUint32(byteOffset, value) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : void 0);
          },
          setFloat32: function setFloat32(byteOffset, value) {
            set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : void 0);
          },
          setFloat64: function setFloat64(byteOffset, value) {
            set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : void 0);
          }
        });
      } else {
        INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME && NativeArrayBuffer.name !== ARRAY_BUFFER;
        if (!fails(function() {
          NativeArrayBuffer(1);
        }) || !fails(function() {
          new NativeArrayBuffer(-1);
        }) || fails(function() {
          new NativeArrayBuffer();
          new NativeArrayBuffer(1.5);
          new NativeArrayBuffer(NaN);
          return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;
        })) {
          $ArrayBuffer = function ArrayBuffer2(length) {
            anInstance(this, ArrayBufferPrototype);
            return new NativeArrayBuffer(toIndex(length));
          };
          $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype;
          for (keys = getOwnPropertyNames(NativeArrayBuffer), j = 0; keys.length > j; ) {
            if (!((key = keys[j++]) in $ArrayBuffer)) {
              createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
            }
          }
          ArrayBufferPrototype.constructor = $ArrayBuffer;
        } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {
          createNonEnumerableProperty(NativeArrayBuffer, "name", ARRAY_BUFFER);
        }
        if (setPrototypeOf && getPrototypeOf2(DataViewPrototype) !== ObjectPrototype) {
          setPrototypeOf(DataViewPrototype, ObjectPrototype);
        }
        testView = new $DataView(new $ArrayBuffer(2));
        $setInt8 = uncurryThis(DataViewPrototype.setInt8);
        testView.setInt8(0, 2147483648);
        testView.setInt8(1, 2147483649);
        if (testView.getInt8(0) || !testView.getInt8(1))
          redefineAll(DataViewPrototype, {
            setInt8: function setInt8(byteOffset, value) {
              $setInt8(this, byteOffset, value << 24 >> 24);
            },
            setUint8: function setUint8(byteOffset, value) {
              $setInt8(this, byteOffset, value << 24 >> 24);
            }
          }, { unsafe: true });
      }
      var INCORRECT_ARRAY_BUFFER_NAME;
      var keys;
      var j;
      var key;
      var testView;
      var $setInt8;
      setToStringTag($ArrayBuffer, ARRAY_BUFFER);
      setToStringTag($DataView, DATA_VIEW);
      module.exports = {
        ArrayBuffer: $ArrayBuffer,
        DataView: $DataView
      };
    }
  });

  // node_modules/core-js/modules/es.array-buffer.constructor.js
  var require_es_array_buffer_constructor = __commonJS({
    "node_modules/core-js/modules/es.array-buffer.constructor.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var arrayBufferModule = require_array_buffer();
      var setSpecies = require_set_species();
      var ARRAY_BUFFER = "ArrayBuffer";
      var ArrayBuffer2 = arrayBufferModule[ARRAY_BUFFER];
      var NativeArrayBuffer = global2[ARRAY_BUFFER];
      $({ global: true, forced: NativeArrayBuffer !== ArrayBuffer2 }, {
        ArrayBuffer: ArrayBuffer2
      });
      setSpecies(ARRAY_BUFFER);
    }
  });

  // node_modules/core-js/internals/array-buffer-view-core.js
  var require_array_buffer_view_core = __commonJS({
    "node_modules/core-js/internals/array-buffer-view-core.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var NATIVE_ARRAY_BUFFER = require_array_buffer_native();
      var DESCRIPTORS = require_descriptors();
      var global2 = require_global();
      var isCallable = require_is_callable();
      var isObject2 = require_is_object();
      var hasOwn = require_has_own_property();
      var classof = require_classof();
      var tryToString = require_try_to_string();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var redefine = require_redefine();
      var defineProperty = require_object_define_property().f;
      var isPrototypeOf = require_object_is_prototype_of();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var wellKnownSymbol = require_well_known_symbol();
      var uid = require_uid();
      var Int8Array2 = global2.Int8Array;
      var Int8ArrayPrototype = Int8Array2 && Int8Array2.prototype;
      var Uint8ClampedArray2 = global2.Uint8ClampedArray;
      var Uint8ClampedArrayPrototype = Uint8ClampedArray2 && Uint8ClampedArray2.prototype;
      var TypedArray = Int8Array2 && getPrototypeOf2(Int8Array2);
      var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf2(Int8ArrayPrototype);
      var ObjectPrototype = Object.prototype;
      var TypeError2 = global2.TypeError;
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var TYPED_ARRAY_TAG = uid("TYPED_ARRAY_TAG");
      var TYPED_ARRAY_CONSTRUCTOR = uid("TYPED_ARRAY_CONSTRUCTOR");
      var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global2.opera) !== "Opera";
      var TYPED_ARRAY_TAG_REQUIRED = false;
      var NAME;
      var Constructor;
      var Prototype;
      var TypedArrayConstructorsList = {
        Int8Array: 1,
        Uint8Array: 1,
        Uint8ClampedArray: 1,
        Int16Array: 2,
        Uint16Array: 2,
        Int32Array: 4,
        Uint32Array: 4,
        Float32Array: 4,
        Float64Array: 8
      };
      var BigIntArrayConstructorsList = {
        BigInt64Array: 8,
        BigUint64Array: 8
      };
      var isView = function isView2(it) {
        if (!isObject2(it))
          return false;
        var klass = classof(it);
        return klass === "DataView" || hasOwn(TypedArrayConstructorsList, klass) || hasOwn(BigIntArrayConstructorsList, klass);
      };
      var isTypedArray = function(it) {
        if (!isObject2(it))
          return false;
        var klass = classof(it);
        return hasOwn(TypedArrayConstructorsList, klass) || hasOwn(BigIntArrayConstructorsList, klass);
      };
      var aTypedArray = function(it) {
        if (isTypedArray(it))
          return it;
        throw TypeError2("Target is not a typed array");
      };
      var aTypedArrayConstructor = function(C) {
        if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C)))
          return C;
        throw TypeError2(tryToString(C) + " is not a typed array constructor");
      };
      var exportTypedArrayMethod = function(KEY, property, forced, options) {
        if (!DESCRIPTORS)
          return;
        if (forced)
          for (var ARRAY in TypedArrayConstructorsList) {
            var TypedArrayConstructor = global2[ARRAY];
            if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY))
              try {
                delete TypedArrayConstructor.prototype[KEY];
              } catch (error) {
                try {
                  TypedArrayConstructor.prototype[KEY] = property;
                } catch (error2) {
                }
              }
          }
        if (!TypedArrayPrototype[KEY] || forced) {
          redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);
        }
      };
      var exportTypedArrayStaticMethod = function(KEY, property, forced) {
        var ARRAY, TypedArrayConstructor;
        if (!DESCRIPTORS)
          return;
        if (setPrototypeOf) {
          if (forced)
            for (ARRAY in TypedArrayConstructorsList) {
              TypedArrayConstructor = global2[ARRAY];
              if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY))
                try {
                  delete TypedArrayConstructor[KEY];
                } catch (error) {
                }
            }
          if (!TypedArray[KEY] || forced) {
            try {
              return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
            } catch (error) {
            }
          } else
            return;
        }
        for (ARRAY in TypedArrayConstructorsList) {
          TypedArrayConstructor = global2[ARRAY];
          if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
            redefine(TypedArrayConstructor, KEY, property);
          }
        }
      };
      for (NAME in TypedArrayConstructorsList) {
        Constructor = global2[NAME];
        Prototype = Constructor && Constructor.prototype;
        if (Prototype)
          createNonEnumerableProperty(Prototype, TYPED_ARRAY_CONSTRUCTOR, Constructor);
        else
          NATIVE_ARRAY_BUFFER_VIEWS = false;
      }
      for (NAME in BigIntArrayConstructorsList) {
        Constructor = global2[NAME];
        Prototype = Constructor && Constructor.prototype;
        if (Prototype)
          createNonEnumerableProperty(Prototype, TYPED_ARRAY_CONSTRUCTOR, Constructor);
      }
      if (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {
        TypedArray = function TypedArray2() {
          throw TypeError2("Incorrect invocation");
        };
        if (NATIVE_ARRAY_BUFFER_VIEWS)
          for (NAME in TypedArrayConstructorsList) {
            if (global2[NAME])
              setPrototypeOf(global2[NAME], TypedArray);
          }
      }
      if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
        TypedArrayPrototype = TypedArray.prototype;
        if (NATIVE_ARRAY_BUFFER_VIEWS)
          for (NAME in TypedArrayConstructorsList) {
            if (global2[NAME])
              setPrototypeOf(global2[NAME].prototype, TypedArrayPrototype);
          }
      }
      if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf2(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
        setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
      }
      if (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {
        TYPED_ARRAY_TAG_REQUIRED = true;
        defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function() {
          return isObject2(this) ? this[TYPED_ARRAY_TAG] : void 0;
        } });
        for (NAME in TypedArrayConstructorsList)
          if (global2[NAME]) {
            createNonEnumerableProperty(global2[NAME], TYPED_ARRAY_TAG, NAME);
          }
      }
      module.exports = {
        NATIVE_ARRAY_BUFFER_VIEWS,
        TYPED_ARRAY_CONSTRUCTOR,
        TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
        aTypedArray,
        aTypedArrayConstructor,
        exportTypedArrayMethod,
        exportTypedArrayStaticMethod,
        isView,
        isTypedArray,
        TypedArray,
        TypedArrayPrototype
      };
    }
  });

  // node_modules/core-js/modules/es.array-buffer.is-view.js
  var require_es_array_buffer_is_view = __commonJS({
    "node_modules/core-js/modules/es.array-buffer.is-view.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
      $({ target: "ArrayBuffer", stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
        isView: ArrayBufferViewCore.isView
      });
    }
  });

  // node_modules/core-js/internals/a-constructor.js
  var require_a_constructor = __commonJS({
    "node_modules/core-js/internals/a-constructor.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isConstructor = require_is_constructor();
      var tryToString = require_try_to_string();
      var TypeError2 = global2.TypeError;
      module.exports = function(argument) {
        if (isConstructor(argument))
          return argument;
        throw TypeError2(tryToString(argument) + " is not a constructor");
      };
    }
  });

  // node_modules/core-js/internals/species-constructor.js
  var require_species_constructor = __commonJS({
    "node_modules/core-js/internals/species-constructor.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var anObject = require_an_object();
      var aConstructor = require_a_constructor();
      var wellKnownSymbol = require_well_known_symbol();
      var SPECIES = wellKnownSymbol("species");
      module.exports = function(O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === void 0 || (S = anObject(C)[SPECIES]) == void 0 ? defaultConstructor : aConstructor(S);
      };
    }
  });

  // node_modules/core-js/modules/es.array-buffer.slice.js
  var require_es_array_buffer_slice = __commonJS({
    "node_modules/core-js/modules/es.array-buffer.slice.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var ArrayBufferModule = require_array_buffer();
      var anObject = require_an_object();
      var toAbsoluteIndex = require_to_absolute_index();
      var toLength = require_to_length();
      var speciesConstructor = require_species_constructor();
      var ArrayBuffer2 = ArrayBufferModule.ArrayBuffer;
      var DataView2 = ArrayBufferModule.DataView;
      var DataViewPrototype = DataView2.prototype;
      var un$ArrayBufferSlice = uncurryThis(ArrayBuffer2.prototype.slice);
      var getUint8 = uncurryThis(DataViewPrototype.getUint8);
      var setUint8 = uncurryThis(DataViewPrototype.setUint8);
      var INCORRECT_SLICE = fails(function() {
        return !new ArrayBuffer2(2).slice(1, void 0).byteLength;
      });
      $({ target: "ArrayBuffer", proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
        slice: function slice(start, end) {
          if (un$ArrayBufferSlice && end === void 0) {
            return un$ArrayBufferSlice(anObject(this), start);
          }
          var length = anObject(this).byteLength;
          var first = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
          var result = new (speciesConstructor(this, ArrayBuffer2))(toLength(fin - first));
          var viewSource = new DataView2(this);
          var viewTarget = new DataView2(result);
          var index = 0;
          while (first < fin) {
            setUint8(viewTarget, index++, getUint8(viewSource, first++));
          }
          return result;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.data-view.js
  var require_es_data_view = __commonJS({
    "node_modules/core-js/modules/es.data-view.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var ArrayBufferModule = require_array_buffer();
      var NATIVE_ARRAY_BUFFER = require_array_buffer_native();
      $({ global: true, forced: !NATIVE_ARRAY_BUFFER }, {
        DataView: ArrayBufferModule.DataView
      });
    }
  });

  // node_modules/core-js/modules/es.date.get-year.js
  var require_es_date_get_year = __commonJS({
    "node_modules/core-js/modules/es.date.get-year.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var FORCED = fails(function() {
        return new Date(16e11).getYear() !== 120;
      });
      var getFullYear = uncurryThis(Date.prototype.getFullYear);
      $({ target: "Date", proto: true, forced: FORCED }, {
        getYear: function getYear() {
          return getFullYear(this) - 1900;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.date.now.js
  var require_es_date_now = __commonJS({
    "node_modules/core-js/modules/es.date.now.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var Date2 = global2.Date;
      var getTime = uncurryThis(Date2.prototype.getTime);
      $({ target: "Date", stat: true }, {
        now: function now() {
          return getTime(new Date2());
        }
      });
    }
  });

  // node_modules/core-js/modules/es.date.set-year.js
  var require_es_date_set_year = __commonJS({
    "node_modules/core-js/modules/es.date.set-year.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var DatePrototype = Date.prototype;
      var getTime = uncurryThis(DatePrototype.getTime);
      var setFullYear = uncurryThis(DatePrototype.setFullYear);
      $({ target: "Date", proto: true }, {
        setYear: function setYear(year) {
          getTime(this);
          var yi = toIntegerOrInfinity(year);
          var yyyy = 0 <= yi && yi <= 99 ? yi + 1900 : yi;
          return setFullYear(this, yyyy);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.date.to-gmt-string.js
  var require_es_date_to_gmt_string = __commonJS({
    "node_modules/core-js/modules/es.date.to-gmt-string.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      $({ target: "Date", proto: true }, {
        toGMTString: Date.prototype.toUTCString
      });
    }
  });

  // node_modules/core-js/internals/string-repeat.js
  var require_string_repeat = __commonJS({
    "node_modules/core-js/internals/string-repeat.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var RangeError = global2.RangeError;
      module.exports = function repeat(count) {
        var str = toString(requireObjectCoercible(this));
        var result = "";
        var n = toIntegerOrInfinity(count);
        if (n < 0 || n == Infinity)
          throw RangeError("Wrong number of repetitions");
        for (; n > 0; (n >>>= 1) && (str += str))
          if (n & 1)
            result += str;
        return result;
      };
    }
  });

  // node_modules/core-js/internals/string-pad.js
  var require_string_pad = __commonJS({
    "node_modules/core-js/internals/string-pad.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var toLength = require_to_length();
      var toString = require_to_string();
      var $repeat = require_string_repeat();
      var requireObjectCoercible = require_require_object_coercible();
      var repeat = uncurryThis($repeat);
      var stringSlice = uncurryThis("".slice);
      var ceil = Math.ceil;
      var createMethod = function(IS_END) {
        return function($this, maxLength, fillString) {
          var S = toString(requireObjectCoercible($this));
          var intMaxLength = toLength(maxLength);
          var stringLength = S.length;
          var fillStr = fillString === void 0 ? " " : toString(fillString);
          var fillLen, stringFiller;
          if (intMaxLength <= stringLength || fillStr == "")
            return S;
          fillLen = intMaxLength - stringLength;
          stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
          if (stringFiller.length > fillLen)
            stringFiller = stringSlice(stringFiller, 0, fillLen);
          return IS_END ? S + stringFiller : stringFiller + S;
        };
      };
      module.exports = {
        start: createMethod(false),
        end: createMethod(true)
      };
    }
  });

  // node_modules/core-js/internals/date-to-iso-string.js
  var require_date_to_iso_string = __commonJS({
    "node_modules/core-js/internals/date-to-iso-string.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var padStart = require_string_pad().start;
      var RangeError = global2.RangeError;
      var abs = Math.abs;
      var DatePrototype = Date.prototype;
      var n$DateToISOString = DatePrototype.toISOString;
      var getTime = uncurryThis(DatePrototype.getTime);
      var getUTCDate = uncurryThis(DatePrototype.getUTCDate);
      var getUTCFullYear = uncurryThis(DatePrototype.getUTCFullYear);
      var getUTCHours = uncurryThis(DatePrototype.getUTCHours);
      var getUTCMilliseconds = uncurryThis(DatePrototype.getUTCMilliseconds);
      var getUTCMinutes = uncurryThis(DatePrototype.getUTCMinutes);
      var getUTCMonth = uncurryThis(DatePrototype.getUTCMonth);
      var getUTCSeconds = uncurryThis(DatePrototype.getUTCSeconds);
      module.exports = fails(function() {
        return n$DateToISOString.call(new Date(-5e13 - 1)) != "0385-07-25T07:06:39.999Z";
      }) || !fails(function() {
        n$DateToISOString.call(new Date(NaN));
      }) ? function toISOString() {
        if (!isFinite(getTime(this)))
          throw RangeError("Invalid time value");
        var date = this;
        var year = getUTCFullYear(date);
        var milliseconds = getUTCMilliseconds(date);
        var sign = year < 0 ? "-" : year > 9999 ? "+" : "";
        return sign + padStart(abs(year), sign ? 6 : 4, 0) + "-" + padStart(getUTCMonth(date) + 1, 2, 0) + "-" + padStart(getUTCDate(date), 2, 0) + "T" + padStart(getUTCHours(date), 2, 0) + ":" + padStart(getUTCMinutes(date), 2, 0) + ":" + padStart(getUTCSeconds(date), 2, 0) + "." + padStart(milliseconds, 3, 0) + "Z";
      } : n$DateToISOString;
    }
  });

  // node_modules/core-js/modules/es.date.to-iso-string.js
  var require_es_date_to_iso_string = __commonJS({
    "node_modules/core-js/modules/es.date.to-iso-string.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var toISOString = require_date_to_iso_string();
      $({ target: "Date", proto: true, forced: Date.prototype.toISOString !== toISOString }, {
        toISOString
      });
    }
  });

  // node_modules/core-js/modules/es.date.to-json.js
  var require_es_date_to_json = __commonJS({
    "node_modules/core-js/modules/es.date.to-json.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fails = require_fails();
      var toObject = require_to_object();
      var toPrimitive = require_to_primitive();
      var FORCED = fails(function() {
        return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function() {
          return 1;
        } }) !== 1;
      });
      $({ target: "Date", proto: true, forced: FORCED }, {
        toJSON: function toJSON(key) {
          var O = toObject(this);
          var pv = toPrimitive(O, "number");
          return typeof pv == "number" && !isFinite(pv) ? null : O.toISOString();
        }
      });
    }
  });

  // node_modules/core-js/internals/date-to-primitive.js
  var require_date_to_primitive = __commonJS({
    "node_modules/core-js/internals/date-to-primitive.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var anObject = require_an_object();
      var ordinaryToPrimitive = require_ordinary_to_primitive();
      var TypeError2 = global2.TypeError;
      module.exports = function(hint) {
        anObject(this);
        if (hint === "string" || hint === "default")
          hint = "string";
        else if (hint !== "number")
          throw TypeError2("Incorrect hint");
        return ordinaryToPrimitive(this, hint);
      };
    }
  });

  // node_modules/core-js/modules/es.date.to-primitive.js
  var require_es_date_to_primitive = __commonJS({
    "node_modules/core-js/modules/es.date.to-primitive.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var hasOwn = require_has_own_property();
      var redefine = require_redefine();
      var dateToPrimitive = require_date_to_primitive();
      var wellKnownSymbol = require_well_known_symbol();
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      var DatePrototype = Date.prototype;
      if (!hasOwn(DatePrototype, TO_PRIMITIVE)) {
        redefine(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
      }
    }
  });

  // node_modules/core-js/modules/es.date.to-string.js
  var require_es_date_to_string = __commonJS({
    "node_modules/core-js/modules/es.date.to-string.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var redefine = require_redefine();
      var DatePrototype = Date.prototype;
      var INVALID_DATE = "Invalid Date";
      var TO_STRING = "toString";
      var un$DateToString = uncurryThis(DatePrototype[TO_STRING]);
      var getTime = uncurryThis(DatePrototype.getTime);
      if (String(new Date(NaN)) != INVALID_DATE) {
        redefine(DatePrototype, TO_STRING, function toString() {
          var value = getTime(this);
          return value === value ? un$DateToString(this) : INVALID_DATE;
        });
      }
    }
  });

  // node_modules/core-js/modules/es.escape.js
  var require_es_escape = __commonJS({
    "node_modules/core-js/modules/es.escape.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var toString = require_to_string();
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var exec = uncurryThis(/./.exec);
      var numberToString = uncurryThis(1 .toString);
      var toUpperCase = uncurryThis("".toUpperCase);
      var raw = /[\w*+\-./@]/;
      var hex = function(code, length) {
        var result = numberToString(code, 16);
        while (result.length < length)
          result = "0" + result;
        return result;
      };
      $({ global: true }, {
        escape: function escape2(string) {
          var str = toString(string);
          var result = "";
          var length = str.length;
          var index = 0;
          var chr, code;
          while (index < length) {
            chr = charAt(str, index++);
            if (exec(raw, chr)) {
              result += chr;
            } else {
              code = charCodeAt(chr, 0);
              if (code < 256) {
                result += "%" + hex(code, 2);
              } else {
                result += "%u" + toUpperCase(hex(code, 4));
              }
            }
          }
          return result;
        }
      });
    }
  });

  // node_modules/core-js/internals/function-bind.js
  var require_function_bind = __commonJS({
    "node_modules/core-js/internals/function-bind.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var aCallable = require_a_callable();
      var isObject2 = require_is_object();
      var hasOwn = require_has_own_property();
      var arraySlice2 = require_array_slice();
      var NATIVE_BIND = require_function_bind_native();
      var Function2 = global2.Function;
      var concat3 = uncurryThis([].concat);
      var join = uncurryThis([].join);
      var factories = {};
      var construct = function(C, argsLength, args) {
        if (!hasOwn(factories, argsLength)) {
          for (var list = [], i = 0; i < argsLength; i++)
            list[i] = "a[" + i + "]";
          factories[argsLength] = Function2("C,a", "return new C(" + join(list, ",") + ")");
        }
        return factories[argsLength](C, args);
      };
      module.exports = NATIVE_BIND ? Function2.bind : function bind(that) {
        var F = aCallable(this);
        var Prototype = F.prototype;
        var partArgs = arraySlice2(arguments, 1);
        var boundFunction = function bound() {
          var args = concat3(partArgs, arraySlice2(arguments));
          return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);
        };
        if (isObject2(Prototype))
          boundFunction.prototype = Prototype;
        return boundFunction;
      };
    }
  });

  // node_modules/core-js/modules/es.function.bind.js
  var require_es_function_bind = __commonJS({
    "node_modules/core-js/modules/es.function.bind.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var bind = require_function_bind();
      $({ target: "Function", proto: true, forced: Function.bind !== bind }, {
        bind
      });
    }
  });

  // node_modules/core-js/modules/es.function.has-instance.js
  var require_es_function_has_instance = __commonJS({
    "node_modules/core-js/modules/es.function.has-instance.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var isCallable = require_is_callable();
      var isObject2 = require_is_object();
      var definePropertyModule = require_object_define_property();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var wellKnownSymbol = require_well_known_symbol();
      var HAS_INSTANCE = wellKnownSymbol("hasInstance");
      var FunctionPrototype = Function.prototype;
      if (!(HAS_INSTANCE in FunctionPrototype)) {
        definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, { value: function(O) {
          if (!isCallable(this) || !isObject2(O))
            return false;
          var P = this.prototype;
          if (!isObject2(P))
            return O instanceof this;
          while (O = getPrototypeOf2(O))
            if (P === O)
              return true;
          return false;
        } });
      }
    }
  });

  // node_modules/core-js/modules/es.function.name.js
  var require_es_function_name = __commonJS({
    "node_modules/core-js/modules/es.function.name.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var FUNCTION_NAME_EXISTS = require_function_name().EXISTS;
      var uncurryThis = require_function_uncurry_this();
      var defineProperty = require_object_define_property().f;
      var FunctionPrototype = Function.prototype;
      var functionToString = uncurryThis(FunctionPrototype.toString);
      var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
      var regExpExec = uncurryThis(nameRE.exec);
      var NAME = "name";
      if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
        defineProperty(FunctionPrototype, NAME, {
          configurable: true,
          get: function() {
            try {
              return regExpExec(nameRE, functionToString(this))[1];
            } catch (error) {
              return "";
            }
          }
        });
      }
    }
  });

  // node_modules/core-js/modules/es.global-this.js
  var require_es_global_this = __commonJS({
    "node_modules/core-js/modules/es.global-this.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      $({ global: true }, {
        globalThis: global2
      });
    }
  });

  // node_modules/core-js/modules/es.json.stringify.js
  var require_es_json_stringify = __commonJS({
    "node_modules/core-js/modules/es.json.stringify.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var getBuiltIn = require_get_built_in();
      var apply = require_function_apply();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var Array2 = global2.Array;
      var $stringify = getBuiltIn("JSON", "stringify");
      var exec = uncurryThis(/./.exec);
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var replace = uncurryThis("".replace);
      var numberToString = uncurryThis(1 .toString);
      var tester = /[\uD800-\uDFFF]/g;
      var low = /^[\uD800-\uDBFF]$/;
      var hi = /^[\uDC00-\uDFFF]$/;
      var fix = function(match, offset, string) {
        var prev = charAt(string, offset - 1);
        var next = charAt(string, offset + 1);
        if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
          return "\\u" + numberToString(charCodeAt(match, 0), 16);
        }
        return match;
      };
      var FORCED = fails(function() {
        return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
      });
      if ($stringify) {
        $({ target: "JSON", stat: true, forced: FORCED }, {
          stringify: function stringify(it, replacer, space) {
            for (var i = 0, l = arguments.length, args = Array2(l); i < l; i++)
              args[i] = arguments[i];
            var result = apply($stringify, null, args);
            return typeof result == "string" ? replace(result, tester, fix) : result;
          }
        });
      }
    }
  });

  // node_modules/core-js/modules/es.json.to-string-tag.js
  var require_es_json_to_string_tag = __commonJS({
    "node_modules/core-js/modules/es.json.to-string-tag.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var setToStringTag = require_set_to_string_tag();
      setToStringTag(global2.JSON, "JSON", true);
    }
  });

  // node_modules/core-js/internals/array-buffer-non-extensible.js
  var require_array_buffer_non_extensible = __commonJS({
    "node_modules/core-js/internals/array-buffer-non-extensible.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      module.exports = fails(function() {
        if (typeof ArrayBuffer == "function") {
          var buffer = new ArrayBuffer(8);
          if (Object.isExtensible(buffer))
            Object.defineProperty(buffer, "a", { value: 8 });
        }
      });
    }
  });

  // node_modules/core-js/internals/object-is-extensible.js
  var require_object_is_extensible = __commonJS({
    "node_modules/core-js/internals/object-is-extensible.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var isObject2 = require_is_object();
      var classof = require_classof_raw();
      var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
      var $isExtensible = Object.isExtensible;
      var FAILS_ON_PRIMITIVES = fails(function() {
        $isExtensible(1);
      });
      module.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
        if (!isObject2(it))
          return false;
        if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == "ArrayBuffer")
          return false;
        return $isExtensible ? $isExtensible(it) : true;
      } : $isExtensible;
    }
  });

  // node_modules/core-js/internals/freezing.js
  var require_freezing = __commonJS({
    "node_modules/core-js/internals/freezing.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      module.exports = !fails(function() {
        return Object.isExtensible(Object.preventExtensions({}));
      });
    }
  });

  // node_modules/core-js/internals/internal-metadata.js
  var require_internal_metadata = __commonJS({
    "node_modules/core-js/internals/internal-metadata.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var hiddenKeys = require_hidden_keys();
      var isObject2 = require_is_object();
      var hasOwn = require_has_own_property();
      var defineProperty = require_object_define_property().f;
      var getOwnPropertyNamesModule = require_object_get_own_property_names();
      var getOwnPropertyNamesExternalModule = require_object_get_own_property_names_external();
      var isExtensible = require_object_is_extensible();
      var uid = require_uid();
      var FREEZING = require_freezing();
      var REQUIRED = false;
      var METADATA = uid("meta");
      var id = 0;
      var setMetadata = function(it) {
        defineProperty(it, METADATA, { value: {
          objectID: "O" + id++,
          weakData: {}
        } });
      };
      var fastKey = function(it, create) {
        if (!isObject2(it))
          return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
        if (!hasOwn(it, METADATA)) {
          if (!isExtensible(it))
            return "F";
          if (!create)
            return "E";
          setMetadata(it);
        }
        return it[METADATA].objectID;
      };
      var getWeakData = function(it, create) {
        if (!hasOwn(it, METADATA)) {
          if (!isExtensible(it))
            return true;
          if (!create)
            return false;
          setMetadata(it);
        }
        return it[METADATA].weakData;
      };
      var onFreeze = function(it) {
        if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA))
          setMetadata(it);
        return it;
      };
      var enable = function() {
        meta.enable = function() {
        };
        REQUIRED = true;
        var getOwnPropertyNames = getOwnPropertyNamesModule.f;
        var splice = uncurryThis([].splice);
        var test = {};
        test[METADATA] = 1;
        if (getOwnPropertyNames(test).length) {
          getOwnPropertyNamesModule.f = function(it) {
            var result = getOwnPropertyNames(it);
            for (var i = 0, length = result.length; i < length; i++) {
              if (result[i] === METADATA) {
                splice(result, i, 1);
                break;
              }
            }
            return result;
          };
          $({ target: "Object", stat: true, forced: true }, {
            getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
          });
        }
      };
      var meta = module.exports = {
        enable,
        fastKey,
        getWeakData,
        onFreeze
      };
      hiddenKeys[METADATA] = true;
    }
  });

  // node_modules/core-js/internals/collection.js
  var require_collection = __commonJS({
    "node_modules/core-js/internals/collection.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var isForced = require_is_forced();
      var redefine = require_redefine();
      var InternalMetadataModule = require_internal_metadata();
      var iterate = require_iterate();
      var anInstance = require_an_instance();
      var isCallable = require_is_callable();
      var isObject2 = require_is_object();
      var fails = require_fails();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
      var setToStringTag = require_set_to_string_tag();
      var inheritIfRequired = require_inherit_if_required();
      module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
        var ADDER = IS_MAP ? "set" : "add";
        var NativeConstructor = global2[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var Constructor = NativeConstructor;
        var exported = {};
        var fixMethod = function(KEY) {
          var uncurriedNativeMethod = uncurryThis(NativePrototype[KEY]);
          redefine(NativePrototype, KEY, KEY == "add" ? function add(value) {
            uncurriedNativeMethod(this, value === 0 ? 0 : value);
            return this;
          } : KEY == "delete" ? function(key) {
            return IS_WEAK && !isObject2(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
          } : KEY == "get" ? function get(key) {
            return IS_WEAK && !isObject2(key) ? void 0 : uncurriedNativeMethod(this, key === 0 ? 0 : key);
          } : KEY == "has" ? function has(key) {
            return IS_WEAK && !isObject2(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
          } : function set(key, value) {
            uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
            return this;
          });
        };
        var REPLACE = isForced(CONSTRUCTOR_NAME, !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
          new NativeConstructor().entries().next();
        })));
        if (REPLACE) {
          Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
          InternalMetadataModule.enable();
        } else if (isForced(CONSTRUCTOR_NAME, true)) {
          var instance = new Constructor();
          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
          var THROWS_ON_PRIMITIVES = fails(function() {
            instance.has(1);
          });
          var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function(iterable) {
            new NativeConstructor(iterable);
          });
          var BUGGY_ZERO = !IS_WEAK && fails(function() {
            var $instance = new NativeConstructor();
            var index = 5;
            while (index--)
              $instance[ADDER](index, index);
            return !$instance.has(-0);
          });
          if (!ACCEPT_ITERABLES) {
            Constructor = wrapper(function(dummy, iterable) {
              anInstance(dummy, NativePrototype);
              var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
              if (iterable != void 0)
                iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
              return that;
            });
            Constructor.prototype = NativePrototype;
            NativePrototype.constructor = Constructor;
          }
          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod("delete");
            fixMethod("has");
            IS_MAP && fixMethod("get");
          }
          if (BUGGY_ZERO || HASNT_CHAINING)
            fixMethod(ADDER);
          if (IS_WEAK && NativePrototype.clear)
            delete NativePrototype.clear;
        }
        exported[CONSTRUCTOR_NAME] = Constructor;
        $({ global: true, forced: Constructor != NativeConstructor }, exported);
        setToStringTag(Constructor, CONSTRUCTOR_NAME);
        if (!IS_WEAK)
          common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
      };
    }
  });

  // node_modules/core-js/internals/collection-strong.js
  var require_collection_strong = __commonJS({
    "node_modules/core-js/internals/collection-strong.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var defineProperty = require_object_define_property().f;
      var create = require_object_create();
      var redefineAll = require_redefine_all();
      var bind = require_function_bind_context();
      var anInstance = require_an_instance();
      var iterate = require_iterate();
      var defineIterator = require_define_iterator();
      var setSpecies = require_set_species();
      var DESCRIPTORS = require_descriptors();
      var fastKey = require_internal_metadata().fastKey;
      var InternalStateModule = require_internal_state();
      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      module.exports = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var Constructor = wrapper(function(that, iterable) {
            anInstance(that, Prototype);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              index: create(null),
              first: void 0,
              last: void 0,
              size: 0
            });
            if (!DESCRIPTORS)
              that.size = 0;
            if (iterable != void 0)
              iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
          });
          var Prototype = Constructor.prototype;
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var define2 = function(that, key, value) {
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            var previous, index;
            if (entry) {
              entry.value = value;
            } else {
              state.last = entry = {
                index: index = fastKey(key, true),
                key,
                value,
                previous: previous = state.last,
                next: void 0,
                removed: false
              };
              if (!state.first)
                state.first = entry;
              if (previous)
                previous.next = entry;
              if (DESCRIPTORS)
                state.size++;
              else
                that.size++;
              if (index !== "F")
                state.index[index] = entry;
            }
            return that;
          };
          var getEntry = function(that, key) {
            var state = getInternalState(that);
            var index = fastKey(key);
            var entry;
            if (index !== "F")
              return state.index[index];
            for (entry = state.first; entry; entry = entry.next) {
              if (entry.key == key)
                return entry;
            }
          };
          redefineAll(Prototype, {
            clear: function clear() {
              var that = this;
              var state = getInternalState(that);
              var data = state.index;
              var entry = state.first;
              while (entry) {
                entry.removed = true;
                if (entry.previous)
                  entry.previous = entry.previous.next = void 0;
                delete data[entry.index];
                entry = entry.next;
              }
              state.first = state.last = void 0;
              if (DESCRIPTORS)
                state.size = 0;
              else
                that.size = 0;
            },
            "delete": function(key) {
              var that = this;
              var state = getInternalState(that);
              var entry = getEntry(that, key);
              if (entry) {
                var next = entry.next;
                var prev = entry.previous;
                delete state.index[entry.index];
                entry.removed = true;
                if (prev)
                  prev.next = next;
                if (next)
                  next.previous = prev;
                if (state.first == entry)
                  state.first = next;
                if (state.last == entry)
                  state.last = prev;
                if (DESCRIPTORS)
                  state.size--;
                else
                  that.size--;
              }
              return !!entry;
            },
            forEach: function forEach(callbackfn) {
              var state = getInternalState(this);
              var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : void 0);
              var entry;
              while (entry = entry ? entry.next : state.first) {
                boundFunction(entry.value, entry.key, this);
                while (entry && entry.removed)
                  entry = entry.previous;
              }
            },
            has: function has(key) {
              return !!getEntry(this, key);
            }
          });
          redefineAll(Prototype, IS_MAP ? {
            get: function get(key) {
              var entry = getEntry(this, key);
              return entry && entry.value;
            },
            set: function set(key, value) {
              return define2(this, key === 0 ? 0 : key, value);
            }
          } : {
            add: function add(value) {
              return define2(this, value = value === 0 ? 0 : value, value);
            }
          });
          if (DESCRIPTORS)
            defineProperty(Prototype, "size", {
              get: function() {
                return getInternalState(this).size;
              }
            });
          return Constructor;
        },
        setStrong: function(Constructor, CONSTRUCTOR_NAME, IS_MAP) {
          var ITERATOR_NAME = CONSTRUCTOR_NAME + " Iterator";
          var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
          defineIterator(Constructor, CONSTRUCTOR_NAME, function(iterated, kind) {
            setInternalState(this, {
              type: ITERATOR_NAME,
              target: iterated,
              state: getInternalCollectionState(iterated),
              kind,
              last: void 0
            });
          }, function() {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var entry = state.last;
            while (entry && entry.removed)
              entry = entry.previous;
            if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
              state.target = void 0;
              return { value: void 0, done: true };
            }
            if (kind == "keys")
              return { value: entry.key, done: false };
            if (kind == "values")
              return { value: entry.value, done: false };
            return { value: [entry.key, entry.value], done: false };
          }, IS_MAP ? "entries" : "values", !IS_MAP, true);
          setSpecies(CONSTRUCTOR_NAME);
        }
      };
    }
  });

  // node_modules/core-js/modules/es.map.js
  var require_es_map = __commonJS({
    "node_modules/core-js/modules/es.map.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var collection = require_collection();
      var collectionStrong = require_collection_strong();
      collection("Map", function(init) {
        return function Map2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      }, collectionStrong);
    }
  });

  // node_modules/core-js/internals/math-log1p.js
  var require_math_log1p = __commonJS({
    "node_modules/core-js/internals/math-log1p.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var log = Math.log;
      module.exports = Math.log1p || function log1p(x) {
        return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
      };
    }
  });

  // node_modules/core-js/modules/es.math.acosh.js
  var require_es_math_acosh = __commonJS({
    "node_modules/core-js/modules/es.math.acosh.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var log1p = require_math_log1p();
      var $acosh = Math.acosh;
      var log = Math.log;
      var sqrt = Math.sqrt;
      var LN2 = Math.LN2;
      var FORCED = !$acosh || Math.floor($acosh(Number.MAX_VALUE)) != 710 || $acosh(Infinity) != Infinity;
      $({ target: "Math", stat: true, forced: FORCED }, {
        acosh: function acosh(x) {
          return (x = +x) < 1 ? NaN : x > 9490626562425156e-8 ? log(x) + LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
        }
      });
    }
  });

  // node_modules/core-js/modules/es.math.asinh.js
  var require_es_math_asinh = __commonJS({
    "node_modules/core-js/modules/es.math.asinh.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $asinh = Math.asinh;
      var log = Math.log;
      var sqrt = Math.sqrt;
      function asinh(x) {
        return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
      }
      $({ target: "Math", stat: true, forced: !($asinh && 1 / $asinh(0) > 0) }, {
        asinh
      });
    }
  });

  // node_modules/core-js/modules/es.math.atanh.js
  var require_es_math_atanh = __commonJS({
    "node_modules/core-js/modules/es.math.atanh.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $atanh = Math.atanh;
      var log = Math.log;
      $({ target: "Math", stat: true, forced: !($atanh && 1 / $atanh(-0) < 0) }, {
        atanh: function atanh(x) {
          return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
        }
      });
    }
  });

  // node_modules/core-js/internals/math-sign.js
  var require_math_sign = __commonJS({
    "node_modules/core-js/internals/math-sign.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = Math.sign || function sign(x) {
        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
      };
    }
  });

  // node_modules/core-js/modules/es.math.cbrt.js
  var require_es_math_cbrt = __commonJS({
    "node_modules/core-js/modules/es.math.cbrt.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var sign = require_math_sign();
      var abs = Math.abs;
      var pow = Math.pow;
      $({ target: "Math", stat: true }, {
        cbrt: function cbrt(x) {
          return sign(x = +x) * pow(abs(x), 1 / 3);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.math.clz32.js
  var require_es_math_clz32 = __commonJS({
    "node_modules/core-js/modules/es.math.clz32.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var floor = Math.floor;
      var log = Math.log;
      var LOG2E = Math.LOG2E;
      $({ target: "Math", stat: true }, {
        clz32: function clz32(x) {
          return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
        }
      });
    }
  });

  // node_modules/core-js/internals/math-expm1.js
  var require_math_expm1 = __commonJS({
    "node_modules/core-js/internals/math-expm1.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $expm1 = Math.expm1;
      var exp = Math.exp;
      module.exports = !$expm1 || $expm1(10) > 22025.465794806718 || $expm1(10) < 22025.465794806718 || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
        return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
      } : $expm1;
    }
  });

  // node_modules/core-js/modules/es.math.cosh.js
  var require_es_math_cosh = __commonJS({
    "node_modules/core-js/modules/es.math.cosh.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var expm1 = require_math_expm1();
      var $cosh = Math.cosh;
      var abs = Math.abs;
      var E = Math.E;
      $({ target: "Math", stat: true, forced: !$cosh || $cosh(710) === Infinity }, {
        cosh: function cosh(x) {
          var t = expm1(abs(x) - 1) + 1;
          return (t + 1 / (t * E * E)) * (E / 2);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.math.expm1.js
  var require_es_math_expm1 = __commonJS({
    "node_modules/core-js/modules/es.math.expm1.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var expm1 = require_math_expm1();
      $({ target: "Math", stat: true, forced: expm1 != Math.expm1 }, { expm1 });
    }
  });

  // node_modules/core-js/internals/math-fround.js
  var require_math_fround = __commonJS({
    "node_modules/core-js/internals/math-fround.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var sign = require_math_sign();
      var abs = Math.abs;
      var pow = Math.pow;
      var EPSILON3 = pow(2, -52);
      var EPSILON32 = pow(2, -23);
      var MAX32 = pow(2, 127) * (2 - EPSILON32);
      var MIN32 = pow(2, -126);
      var roundTiesToEven = function(n) {
        return n + 1 / EPSILON3 - 1 / EPSILON3;
      };
      module.exports = Math.fround || function fround(x) {
        var $abs = abs(x);
        var $sign = sign(x);
        var a, result;
        if ($abs < MIN32)
          return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
        a = (1 + EPSILON32 / EPSILON3) * $abs;
        result = a - (a - $abs);
        if (result > MAX32 || result != result)
          return $sign * Infinity;
        return $sign * result;
      };
    }
  });

  // node_modules/core-js/modules/es.math.fround.js
  var require_es_math_fround = __commonJS({
    "node_modules/core-js/modules/es.math.fround.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fround = require_math_fround();
      $({ target: "Math", stat: true }, { fround });
    }
  });

  // node_modules/core-js/modules/es.math.hypot.js
  var require_es_math_hypot = __commonJS({
    "node_modules/core-js/modules/es.math.hypot.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $hypot = Math.hypot;
      var abs = Math.abs;
      var sqrt = Math.sqrt;
      var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;
      $({ target: "Math", stat: true, forced: BUGGY }, {
        hypot: function hypot(value1, value2) {
          var sum = 0;
          var i = 0;
          var aLen = arguments.length;
          var larg = 0;
          var arg, div;
          while (i < aLen) {
            arg = abs(arguments[i++]);
            if (larg < arg) {
              div = larg / arg;
              sum = sum * div * div + 1;
              larg = arg;
            } else if (arg > 0) {
              div = arg / larg;
              sum += div * div;
            } else
              sum += arg;
          }
          return larg === Infinity ? Infinity : larg * sqrt(sum);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.math.imul.js
  var require_es_math_imul = __commonJS({
    "node_modules/core-js/modules/es.math.imul.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fails = require_fails();
      var $imul = Math.imul;
      var FORCED = fails(function() {
        return $imul(4294967295, 5) != -5 || $imul.length != 2;
      });
      $({ target: "Math", stat: true, forced: FORCED }, {
        imul: function imul(x, y) {
          var UINT16 = 65535;
          var xn = +x;
          var yn = +y;
          var xl = UINT16 & xn;
          var yl = UINT16 & yn;
          return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
        }
      });
    }
  });

  // node_modules/core-js/internals/math-log10.js
  var require_math_log10 = __commonJS({
    "node_modules/core-js/internals/math-log10.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var log = Math.log;
      var LOG10E = Math.LOG10E;
      module.exports = Math.log10 || function log10(x) {
        return log(x) * LOG10E;
      };
    }
  });

  // node_modules/core-js/modules/es.math.log10.js
  var require_es_math_log10 = __commonJS({
    "node_modules/core-js/modules/es.math.log10.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var log10 = require_math_log10();
      $({ target: "Math", stat: true }, {
        log10
      });
    }
  });

  // node_modules/core-js/modules/es.math.log1p.js
  var require_es_math_log1p = __commonJS({
    "node_modules/core-js/modules/es.math.log1p.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var log1p = require_math_log1p();
      $({ target: "Math", stat: true }, { log1p });
    }
  });

  // node_modules/core-js/modules/es.math.log2.js
  var require_es_math_log2 = __commonJS({
    "node_modules/core-js/modules/es.math.log2.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var log = Math.log;
      var LN2 = Math.LN2;
      $({ target: "Math", stat: true }, {
        log2: function log2(x) {
          return log(x) / LN2;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.math.sign.js
  var require_es_math_sign = __commonJS({
    "node_modules/core-js/modules/es.math.sign.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var sign = require_math_sign();
      $({ target: "Math", stat: true }, {
        sign
      });
    }
  });

  // node_modules/core-js/modules/es.math.sinh.js
  var require_es_math_sinh = __commonJS({
    "node_modules/core-js/modules/es.math.sinh.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fails = require_fails();
      var expm1 = require_math_expm1();
      var abs = Math.abs;
      var exp = Math.exp;
      var E = Math.E;
      var FORCED = fails(function() {
        return Math.sinh(-2e-17) != -2e-17;
      });
      $({ target: "Math", stat: true, forced: FORCED }, {
        sinh: function sinh(x) {
          return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.math.tanh.js
  var require_es_math_tanh = __commonJS({
    "node_modules/core-js/modules/es.math.tanh.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var expm1 = require_math_expm1();
      var exp = Math.exp;
      $({ target: "Math", stat: true }, {
        tanh: function tanh(x) {
          var a = expm1(x = +x);
          var b = expm1(-x);
          return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
        }
      });
    }
  });

  // node_modules/core-js/modules/es.math.to-string-tag.js
  var require_es_math_to_string_tag = __commonJS({
    "node_modules/core-js/modules/es.math.to-string-tag.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var setToStringTag = require_set_to_string_tag();
      setToStringTag(Math, "Math", true);
    }
  });

  // node_modules/core-js/modules/es.math.trunc.js
  var require_es_math_trunc = __commonJS({
    "node_modules/core-js/modules/es.math.trunc.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var ceil = Math.ceil;
      var floor = Math.floor;
      $({ target: "Math", stat: true }, {
        trunc: function trunc(it) {
          return (it > 0 ? floor : ceil)(it);
        }
      });
    }
  });

  // node_modules/core-js/internals/this-number-value.js
  var require_this_number_value = __commonJS({
    "node_modules/core-js/internals/this-number-value.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      module.exports = uncurryThis(1 .valueOf);
    }
  });

  // node_modules/core-js/internals/whitespaces.js
  var require_whitespaces = __commonJS({
    "node_modules/core-js/internals/whitespaces.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
    }
  });

  // node_modules/core-js/internals/string-trim.js
  var require_string_trim = __commonJS({
    "node_modules/core-js/internals/string-trim.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var requireObjectCoercible = require_require_object_coercible();
      var toString = require_to_string();
      var whitespaces = require_whitespaces();
      var replace = uncurryThis("".replace);
      var whitespace = "[" + whitespaces + "]";
      var ltrim = RegExp("^" + whitespace + whitespace + "*");
      var rtrim = RegExp(whitespace + whitespace + "*$");
      var createMethod = function(TYPE) {
        return function($this) {
          var string = toString(requireObjectCoercible($this));
          if (TYPE & 1)
            string = replace(string, ltrim, "");
          if (TYPE & 2)
            string = replace(string, rtrim, "");
          return string;
        };
      };
      module.exports = {
        start: createMethod(1),
        end: createMethod(2),
        trim: createMethod(3)
      };
    }
  });

  // node_modules/core-js/modules/es.number.constructor.js
  var require_es_number_constructor = __commonJS({
    "node_modules/core-js/modules/es.number.constructor.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var isForced = require_is_forced();
      var redefine = require_redefine();
      var hasOwn = require_has_own_property();
      var inheritIfRequired = require_inherit_if_required();
      var isPrototypeOf = require_object_is_prototype_of();
      var isSymbol = require_is_symbol();
      var toPrimitive = require_to_primitive();
      var fails = require_fails();
      var getOwnPropertyNames = require_object_get_own_property_names().f;
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var defineProperty = require_object_define_property().f;
      var thisNumberValue = require_this_number_value();
      var trim = require_string_trim().trim;
      var NUMBER = "Number";
      var NativeNumber = global2[NUMBER];
      var NumberPrototype = NativeNumber.prototype;
      var TypeError2 = global2.TypeError;
      var arraySlice2 = uncurryThis("".slice);
      var charCodeAt = uncurryThis("".charCodeAt);
      var toNumeric = function(value) {
        var primValue = toPrimitive(value, "number");
        return typeof primValue == "bigint" ? primValue : toNumber(primValue);
      };
      var toNumber = function(argument) {
        var it = toPrimitive(argument, "number");
        var first, third, radix, maxCode, digits, length, index, code;
        if (isSymbol(it))
          throw TypeError2("Cannot convert a Symbol value to a number");
        if (typeof it == "string" && it.length > 2) {
          it = trim(it);
          first = charCodeAt(it, 0);
          if (first === 43 || first === 45) {
            third = charCodeAt(it, 2);
            if (third === 88 || third === 120)
              return NaN;
          } else if (first === 48) {
            switch (charCodeAt(it, 1)) {
              case 66:
              case 98:
                radix = 2;
                maxCode = 49;
                break;
              case 79:
              case 111:
                radix = 8;
                maxCode = 55;
                break;
              default:
                return +it;
            }
            digits = arraySlice2(it, 2);
            length = digits.length;
            for (index = 0; index < length; index++) {
              code = charCodeAt(digits, index);
              if (code < 48 || code > maxCode)
                return NaN;
            }
            return parseInt(digits, radix);
          }
        }
        return +it;
      };
      if (isForced(NUMBER, !NativeNumber(" 0o1") || !NativeNumber("0b1") || NativeNumber("+0x1"))) {
        NumberWrapper = function Number2(value) {
          var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
          var dummy = this;
          return isPrototypeOf(NumberPrototype, dummy) && fails(function() {
            thisNumberValue(dummy);
          }) ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
        };
        for (keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","), j = 0; keys.length > j; j++) {
          if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {
            defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
          }
        }
        NumberWrapper.prototype = NumberPrototype;
        NumberPrototype.constructor = NumberWrapper;
        redefine(global2, NUMBER, NumberWrapper);
      }
      var NumberWrapper;
      var keys;
      var j;
      var key;
    }
  });

  // node_modules/core-js/modules/es.number.epsilon.js
  var require_es_number_epsilon = __commonJS({
    "node_modules/core-js/modules/es.number.epsilon.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      $({ target: "Number", stat: true }, {
        EPSILON: Math.pow(2, -52)
      });
    }
  });

  // node_modules/core-js/internals/number-is-finite.js
  var require_number_is_finite = __commonJS({
    "node_modules/core-js/internals/number-is-finite.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var globalIsFinite = global2.isFinite;
      module.exports = Number.isFinite || function isFinite2(it) {
        return typeof it == "number" && globalIsFinite(it);
      };
    }
  });

  // node_modules/core-js/modules/es.number.is-finite.js
  var require_es_number_is_finite = __commonJS({
    "node_modules/core-js/modules/es.number.is-finite.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var numberIsFinite = require_number_is_finite();
      $({ target: "Number", stat: true }, { isFinite: numberIsFinite });
    }
  });

  // node_modules/core-js/internals/is-integral-number.js
  var require_is_integral_number = __commonJS({
    "node_modules/core-js/internals/is-integral-number.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var isObject2 = require_is_object();
      var floor = Math.floor;
      module.exports = Number.isInteger || function isInteger(it) {
        return !isObject2(it) && isFinite(it) && floor(it) === it;
      };
    }
  });

  // node_modules/core-js/modules/es.number.is-integer.js
  var require_es_number_is_integer = __commonJS({
    "node_modules/core-js/modules/es.number.is-integer.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var isIntegralNumber = require_is_integral_number();
      $({ target: "Number", stat: true }, {
        isInteger: isIntegralNumber
      });
    }
  });

  // node_modules/core-js/modules/es.number.is-nan.js
  var require_es_number_is_nan = __commonJS({
    "node_modules/core-js/modules/es.number.is-nan.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      $({ target: "Number", stat: true }, {
        isNaN: function isNaN2(number) {
          return number != number;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.number.is-safe-integer.js
  var require_es_number_is_safe_integer = __commonJS({
    "node_modules/core-js/modules/es.number.is-safe-integer.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var isIntegralNumber = require_is_integral_number();
      var abs = Math.abs;
      $({ target: "Number", stat: true }, {
        isSafeInteger: function isSafeInteger(number) {
          return isIntegralNumber(number) && abs(number) <= 9007199254740991;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.number.max-safe-integer.js
  var require_es_number_max_safe_integer = __commonJS({
    "node_modules/core-js/modules/es.number.max-safe-integer.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      $({ target: "Number", stat: true }, {
        MAX_SAFE_INTEGER: 9007199254740991
      });
    }
  });

  // node_modules/core-js/modules/es.number.min-safe-integer.js
  var require_es_number_min_safe_integer = __commonJS({
    "node_modules/core-js/modules/es.number.min-safe-integer.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      $({ target: "Number", stat: true }, {
        MIN_SAFE_INTEGER: -9007199254740991
      });
    }
  });

  // node_modules/core-js/internals/number-parse-float.js
  var require_number_parse_float = __commonJS({
    "node_modules/core-js/internals/number-parse-float.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var fails = require_fails();
      var uncurryThis = require_function_uncurry_this();
      var toString = require_to_string();
      var trim = require_string_trim().trim;
      var whitespaces = require_whitespaces();
      var charAt = uncurryThis("".charAt);
      var n$ParseFloat = global2.parseFloat;
      var Symbol2 = global2.Symbol;
      var ITERATOR = Symbol2 && Symbol2.iterator;
      var FORCED = 1 / n$ParseFloat(whitespaces + "-0") !== -Infinity || ITERATOR && !fails(function() {
        n$ParseFloat(Object(ITERATOR));
      });
      module.exports = FORCED ? function parseFloat2(string) {
        var trimmedString = trim(toString(string));
        var result = n$ParseFloat(trimmedString);
        return result === 0 && charAt(trimmedString, 0) == "-" ? -0 : result;
      } : n$ParseFloat;
    }
  });

  // node_modules/core-js/modules/es.number.parse-float.js
  var require_es_number_parse_float = __commonJS({
    "node_modules/core-js/modules/es.number.parse-float.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var parseFloat2 = require_number_parse_float();
      $({ target: "Number", stat: true, forced: Number.parseFloat != parseFloat2 }, {
        parseFloat: parseFloat2
      });
    }
  });

  // node_modules/core-js/internals/number-parse-int.js
  var require_number_parse_int = __commonJS({
    "node_modules/core-js/internals/number-parse-int.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var fails = require_fails();
      var uncurryThis = require_function_uncurry_this();
      var toString = require_to_string();
      var trim = require_string_trim().trim;
      var whitespaces = require_whitespaces();
      var $parseInt = global2.parseInt;
      var Symbol2 = global2.Symbol;
      var ITERATOR = Symbol2 && Symbol2.iterator;
      var hex = /^[+-]?0x/i;
      var exec = uncurryThis(hex.exec);
      var FORCED = $parseInt(whitespaces + "08") !== 8 || $parseInt(whitespaces + "0x16") !== 22 || ITERATOR && !fails(function() {
        $parseInt(Object(ITERATOR));
      });
      module.exports = FORCED ? function parseInt2(string, radix) {
        var S = trim(toString(string));
        return $parseInt(S, radix >>> 0 || (exec(hex, S) ? 16 : 10));
      } : $parseInt;
    }
  });

  // node_modules/core-js/modules/es.number.parse-int.js
  var require_es_number_parse_int = __commonJS({
    "node_modules/core-js/modules/es.number.parse-int.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var parseInt2 = require_number_parse_int();
      $({ target: "Number", stat: true, forced: Number.parseInt != parseInt2 }, {
        parseInt: parseInt2
      });
    }
  });

  // node_modules/core-js/modules/es.number.to-exponential.js
  var require_es_number_to_exponential = __commonJS({
    "node_modules/core-js/modules/es.number.to-exponential.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var thisNumberValue = require_this_number_value();
      var $repeat = require_string_repeat();
      var log10 = require_math_log10();
      var fails = require_fails();
      var RangeError = global2.RangeError;
      var String2 = global2.String;
      var isFinite2 = global2.isFinite;
      var abs = Math.abs;
      var floor = Math.floor;
      var pow = Math.pow;
      var round = Math.round;
      var un$ToExponential = uncurryThis(1 .toExponential);
      var repeat = uncurryThis($repeat);
      var stringSlice = uncurryThis("".slice);
      var ROUNDS_PROPERLY = un$ToExponential(-69e-12, 4) === "-6.9000e-11" && un$ToExponential(1.255, 2) === "1.25e+0" && un$ToExponential(12345, 3) === "1.235e+4" && un$ToExponential(25, 0) === "3e+1";
      var THROWS_ON_INFINITY_FRACTION = fails(function() {
        un$ToExponential(1, Infinity);
      }) && fails(function() {
        un$ToExponential(1, -Infinity);
      });
      var PROPER_NON_FINITE_THIS_CHECK = !fails(function() {
        un$ToExponential(Infinity, Infinity);
      }) && !fails(function() {
        un$ToExponential(NaN, Infinity);
      });
      var FORCED = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK;
      $({ target: "Number", proto: true, forced: FORCED }, {
        toExponential: function toExponential(fractionDigits) {
          var x = thisNumberValue(this);
          if (fractionDigits === void 0)
            return un$ToExponential(x);
          var f = toIntegerOrInfinity(fractionDigits);
          if (!isFinite2(x))
            return String2(x);
          if (f < 0 || f > 20)
            throw RangeError("Incorrect fraction digits");
          if (ROUNDS_PROPERLY)
            return un$ToExponential(x, f);
          var s = "";
          var m = "";
          var e = 0;
          var c = "";
          var d = "";
          if (x < 0) {
            s = "-";
            x = -x;
          }
          if (x === 0) {
            e = 0;
            m = repeat("0", f + 1);
          } else {
            var l = log10(x);
            e = floor(l);
            var n = 0;
            var w = pow(10, e - f);
            n = round(x / w);
            if (2 * x >= (2 * n + 1) * w) {
              n += 1;
            }
            if (n >= pow(10, f + 1)) {
              n /= 10;
              e += 1;
            }
            m = String2(n);
          }
          if (f !== 0) {
            m = stringSlice(m, 0, 1) + "." + stringSlice(m, 1);
          }
          if (e === 0) {
            c = "+";
            d = "0";
          } else {
            c = e > 0 ? "+" : "-";
            d = String2(abs(e));
          }
          m += "e" + c + d;
          return s + m;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.number.to-fixed.js
  var require_es_number_to_fixed = __commonJS({
    "node_modules/core-js/modules/es.number.to-fixed.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var thisNumberValue = require_this_number_value();
      var $repeat = require_string_repeat();
      var fails = require_fails();
      var RangeError = global2.RangeError;
      var String2 = global2.String;
      var floor = Math.floor;
      var repeat = uncurryThis($repeat);
      var stringSlice = uncurryThis("".slice);
      var un$ToFixed = uncurryThis(1 .toFixed);
      var pow = function(x, n, acc) {
        return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
      };
      var log = function(x) {
        var n = 0;
        var x2 = x;
        while (x2 >= 4096) {
          n += 12;
          x2 /= 4096;
        }
        while (x2 >= 2) {
          n += 1;
          x2 /= 2;
        }
        return n;
      };
      var multiply = function(data, n, c) {
        var index = -1;
        var c2 = c;
        while (++index < 6) {
          c2 += n * data[index];
          data[index] = c2 % 1e7;
          c2 = floor(c2 / 1e7);
        }
      };
      var divide = function(data, n) {
        var index = 6;
        var c = 0;
        while (--index >= 0) {
          c += data[index];
          data[index] = floor(c / n);
          c = c % n * 1e7;
        }
      };
      var dataToString = function(data) {
        var index = 6;
        var s = "";
        while (--index >= 0) {
          if (s !== "" || index === 0 || data[index] !== 0) {
            var t = String2(data[index]);
            s = s === "" ? t : s + repeat("0", 7 - t.length) + t;
          }
        }
        return s;
      };
      var FORCED = fails(function() {
        return un$ToFixed(8e-5, 3) !== "0.000" || un$ToFixed(0.9, 0) !== "1" || un$ToFixed(1.255, 2) !== "1.25" || un$ToFixed(1000000000000000100, 0) !== "1000000000000000128";
      }) || !fails(function() {
        un$ToFixed({});
      });
      $({ target: "Number", proto: true, forced: FORCED }, {
        toFixed: function toFixed(fractionDigits) {
          var number = thisNumberValue(this);
          var fractDigits = toIntegerOrInfinity(fractionDigits);
          var data = [0, 0, 0, 0, 0, 0];
          var sign = "";
          var result = "0";
          var e, z, j, k;
          if (fractDigits < 0 || fractDigits > 20)
            throw RangeError("Incorrect fraction digits");
          if (number != number)
            return "NaN";
          if (number <= -1e21 || number >= 1e21)
            return String2(number);
          if (number < 0) {
            sign = "-";
            number = -number;
          }
          if (number > 1e-21) {
            e = log(number * pow(2, 69, 1)) - 69;
            z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
            z *= 4503599627370496;
            e = 52 - e;
            if (e > 0) {
              multiply(data, 0, z);
              j = fractDigits;
              while (j >= 7) {
                multiply(data, 1e7, 0);
                j -= 7;
              }
              multiply(data, pow(10, j, 1), 0);
              j = e - 1;
              while (j >= 23) {
                divide(data, 1 << 23);
                j -= 23;
              }
              divide(data, 1 << j);
              multiply(data, 1, 1);
              divide(data, 2);
              result = dataToString(data);
            } else {
              multiply(data, 0, z);
              multiply(data, 1 << -e, 0);
              result = dataToString(data) + repeat("0", fractDigits);
            }
          }
          if (fractDigits > 0) {
            k = result.length;
            result = sign + (k <= fractDigits ? "0." + repeat("0", fractDigits - k) + result : stringSlice(result, 0, k - fractDigits) + "." + stringSlice(result, k - fractDigits));
          } else {
            result = sign + result;
          }
          return result;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.number.to-precision.js
  var require_es_number_to_precision = __commonJS({
    "node_modules/core-js/modules/es.number.to-precision.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var thisNumberValue = require_this_number_value();
      var un$ToPrecision = uncurryThis(1 .toPrecision);
      var FORCED = fails(function() {
        return un$ToPrecision(1, void 0) !== "1";
      }) || !fails(function() {
        un$ToPrecision({});
      });
      $({ target: "Number", proto: true, forced: FORCED }, {
        toPrecision: function toPrecision(precision) {
          return precision === void 0 ? un$ToPrecision(thisNumberValue(this)) : un$ToPrecision(thisNumberValue(this), precision);
        }
      });
    }
  });

  // node_modules/core-js/internals/object-assign.js
  var require_object_assign = __commonJS({
    "node_modules/core-js/internals/object-assign.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var uncurryThis = require_function_uncurry_this();
      var call = require_function_call();
      var fails = require_fails();
      var objectKeys = require_object_keys();
      var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
      var propertyIsEnumerableModule = require_object_property_is_enumerable();
      var toObject = require_to_object();
      var IndexedObject = require_indexed_object();
      var $assign = Object.assign;
      var defineProperty = Object.defineProperty;
      var concat3 = uncurryThis([].concat);
      module.exports = !$assign || fails(function() {
        if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, "a", {
          enumerable: true,
          get: function() {
            defineProperty(this, "b", {
              value: 3,
              enumerable: false
            });
          }
        }), { b: 2 })).b !== 1)
          return true;
        var A = {};
        var B = {};
        var symbol = Symbol();
        var alphabet = "abcdefghijklmnopqrst";
        A[symbol] = 7;
        alphabet.split("").forEach(function(chr) {
          B[chr] = chr;
        });
        return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join("") != alphabet;
      }) ? function assign(target, source) {
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        var propertyIsEnumerable = propertyIsEnumerableModule.f;
        while (argumentsLength > index) {
          var S = IndexedObject(arguments[index++]);
          var keys = getOwnPropertySymbols ? concat3(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
          var length = keys.length;
          var j = 0;
          var key;
          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || call(propertyIsEnumerable, S, key))
              T[key] = S[key];
          }
        }
        return T;
      } : $assign;
    }
  });

  // node_modules/core-js/modules/es.object.assign.js
  var require_es_object_assign = __commonJS({
    "node_modules/core-js/modules/es.object.assign.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var assign = require_object_assign();
      $({ target: "Object", stat: true, forced: Object.assign !== assign }, {
        assign
      });
    }
  });

  // node_modules/core-js/modules/es.object.create.js
  var require_es_object_create = __commonJS({
    "node_modules/core-js/modules/es.object.create.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var create = require_object_create();
      $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
        create
      });
    }
  });

  // node_modules/core-js/internals/object-prototype-accessors-forced.js
  var require_object_prototype_accessors_forced = __commonJS({
    "node_modules/core-js/internals/object-prototype-accessors-forced.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var IS_PURE = require_is_pure();
      var global2 = require_global();
      var fails = require_fails();
      var WEBKIT = require_engine_webkit_version();
      module.exports = IS_PURE || !fails(function() {
        if (WEBKIT && WEBKIT < 535)
          return;
        var key = Math.random();
        __defineSetter__.call(null, key, function() {
        });
        delete global2[key];
      });
    }
  });

  // node_modules/core-js/modules/es.object.define-getter.js
  var require_es_object_define_getter = __commonJS({
    "node_modules/core-js/modules/es.object.define-getter.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var FORCED = require_object_prototype_accessors_forced();
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var definePropertyModule = require_object_define_property();
      if (DESCRIPTORS) {
        $({ target: "Object", proto: true, forced: FORCED }, {
          __defineGetter__: function __defineGetter__(P, getter) {
            definePropertyModule.f(toObject(this), P, { get: aCallable(getter), enumerable: true, configurable: true });
          }
        });
      }
    }
  });

  // node_modules/core-js/modules/es.object.define-properties.js
  var require_es_object_define_properties = __commonJS({
    "node_modules/core-js/modules/es.object.define-properties.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var defineProperties = require_object_define_properties().f;
      $({ target: "Object", stat: true, forced: Object.defineProperties !== defineProperties, sham: !DESCRIPTORS }, {
        defineProperties
      });
    }
  });

  // node_modules/core-js/modules/es.object.define-property.js
  var require_es_object_define_property = __commonJS({
    "node_modules/core-js/modules/es.object.define-property.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var defineProperty = require_object_define_property().f;
      $({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
        defineProperty
      });
    }
  });

  // node_modules/core-js/modules/es.object.define-setter.js
  var require_es_object_define_setter = __commonJS({
    "node_modules/core-js/modules/es.object.define-setter.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var FORCED = require_object_prototype_accessors_forced();
      var aCallable = require_a_callable();
      var toObject = require_to_object();
      var definePropertyModule = require_object_define_property();
      if (DESCRIPTORS) {
        $({ target: "Object", proto: true, forced: FORCED }, {
          __defineSetter__: function __defineSetter__2(P, setter) {
            definePropertyModule.f(toObject(this), P, { set: aCallable(setter), enumerable: true, configurable: true });
          }
        });
      }
    }
  });

  // node_modules/core-js/internals/object-to-array.js
  var require_object_to_array = __commonJS({
    "node_modules/core-js/internals/object-to-array.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var uncurryThis = require_function_uncurry_this();
      var objectKeys = require_object_keys();
      var toIndexedObject = require_to_indexed_object();
      var $propertyIsEnumerable = require_object_property_is_enumerable().f;
      var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
      var push = uncurryThis([].push);
      var createMethod = function(TO_ENTRIES) {
        return function(it) {
          var O = toIndexedObject(it);
          var keys = objectKeys(O);
          var length = keys.length;
          var i = 0;
          var result = [];
          var key;
          while (length > i) {
            key = keys[i++];
            if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {
              push(result, TO_ENTRIES ? [key, O[key]] : O[key]);
            }
          }
          return result;
        };
      };
      module.exports = {
        entries: createMethod(true),
        values: createMethod(false)
      };
    }
  });

  // node_modules/core-js/modules/es.object.entries.js
  var require_es_object_entries = __commonJS({
    "node_modules/core-js/modules/es.object.entries.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $entries = require_object_to_array().entries;
      $({ target: "Object", stat: true }, {
        entries: function entries(O) {
          return $entries(O);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.freeze.js
  var require_es_object_freeze = __commonJS({
    "node_modules/core-js/modules/es.object.freeze.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var FREEZING = require_freezing();
      var fails = require_fails();
      var isObject2 = require_is_object();
      var onFreeze = require_internal_metadata().onFreeze;
      var $freeze = Object.freeze;
      var FAILS_ON_PRIMITIVES = fails(function() {
        $freeze(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
        freeze: function freeze(it) {
          return $freeze && isObject2(it) ? $freeze(onFreeze(it)) : it;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.from-entries.js
  var require_es_object_from_entries = __commonJS({
    "node_modules/core-js/modules/es.object.from-entries.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var iterate = require_iterate();
      var createProperty = require_create_property();
      $({ target: "Object", stat: true }, {
        fromEntries: function fromEntries(iterable) {
          var obj = {};
          iterate(iterable, function(k, v) {
            createProperty(obj, k, v);
          }, { AS_ENTRIES: true });
          return obj;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.get-own-property-descriptor.js
  var require_es_object_get_own_property_descriptor = __commonJS({
    "node_modules/core-js/modules/es.object.get-own-property-descriptor.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fails = require_fails();
      var toIndexedObject = require_to_indexed_object();
      var nativeGetOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var DESCRIPTORS = require_descriptors();
      var FAILS_ON_PRIMITIVES = fails(function() {
        nativeGetOwnPropertyDescriptor(1);
      });
      var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;
      $({ target: "Object", stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
          return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.get-own-property-descriptors.js
  var require_es_object_get_own_property_descriptors = __commonJS({
    "node_modules/core-js/modules/es.object.get-own-property-descriptors.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var ownKeys = require_own_keys();
      var toIndexedObject = require_to_indexed_object();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var createProperty = require_create_property();
      $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
          var O = toIndexedObject(object);
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var keys = ownKeys(O);
          var result = {};
          var index = 0;
          var key, descriptor;
          while (keys.length > index) {
            descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
            if (descriptor !== void 0)
              createProperty(result, key, descriptor);
          }
          return result;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.get-own-property-names.js
  var require_es_object_get_own_property_names = __commonJS({
    "node_modules/core-js/modules/es.object.get-own-property-names.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fails = require_fails();
      var getOwnPropertyNames = require_object_get_own_property_names_external().f;
      var FAILS_ON_PRIMITIVES = fails(function() {
        return !Object.getOwnPropertyNames(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
        getOwnPropertyNames
      });
    }
  });

  // node_modules/core-js/modules/es.object.get-prototype-of.js
  var require_es_object_get_prototype_of = __commonJS({
    "node_modules/core-js/modules/es.object.get-prototype-of.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fails = require_fails();
      var toObject = require_to_object();
      var nativeGetPrototypeOf = require_object_get_prototype_of();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
      var FAILS_ON_PRIMITIVES = fails(function() {
        nativeGetPrototypeOf(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
        getPrototypeOf: function getPrototypeOf2(it) {
          return nativeGetPrototypeOf(toObject(it));
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.has-own.js
  var require_es_object_has_own = __commonJS({
    "node_modules/core-js/modules/es.object.has-own.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var hasOwn = require_has_own_property();
      $({ target: "Object", stat: true }, {
        hasOwn
      });
    }
  });

  // node_modules/core-js/internals/same-value.js
  var require_same_value = __commonJS({
    "node_modules/core-js/internals/same-value.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = Object.is || function is(x, y) {
        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
      };
    }
  });

  // node_modules/core-js/modules/es.object.is.js
  var require_es_object_is = __commonJS({
    "node_modules/core-js/modules/es.object.is.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var is = require_same_value();
      $({ target: "Object", stat: true }, {
        is
      });
    }
  });

  // node_modules/core-js/modules/es.object.is-extensible.js
  var require_es_object_is_extensible = __commonJS({
    "node_modules/core-js/modules/es.object.is-extensible.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $isExtensible = require_object_is_extensible();
      $({ target: "Object", stat: true, forced: Object.isExtensible !== $isExtensible }, {
        isExtensible: $isExtensible
      });
    }
  });

  // node_modules/core-js/modules/es.object.is-frozen.js
  var require_es_object_is_frozen = __commonJS({
    "node_modules/core-js/modules/es.object.is-frozen.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fails = require_fails();
      var isObject2 = require_is_object();
      var classof = require_classof_raw();
      var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
      var $isFrozen = Object.isFrozen;
      var FAILS_ON_PRIMITIVES = fails(function() {
        $isFrozen(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE }, {
        isFrozen: function isFrozen(it) {
          if (!isObject2(it))
            return true;
          if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == "ArrayBuffer")
            return true;
          return $isFrozen ? $isFrozen(it) : false;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.is-sealed.js
  var require_es_object_is_sealed = __commonJS({
    "node_modules/core-js/modules/es.object.is-sealed.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var fails = require_fails();
      var isObject2 = require_is_object();
      var classof = require_classof_raw();
      var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
      var $isSealed = Object.isSealed;
      var FAILS_ON_PRIMITIVES = fails(function() {
        $isSealed(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE }, {
        isSealed: function isSealed(it) {
          if (!isObject2(it))
            return true;
          if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == "ArrayBuffer")
            return true;
          return $isSealed ? $isSealed(it) : false;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.keys.js
  var require_es_object_keys = __commonJS({
    "node_modules/core-js/modules/es.object.keys.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var toObject = require_to_object();
      var nativeKeys = require_object_keys();
      var fails = require_fails();
      var FAILS_ON_PRIMITIVES = fails(function() {
        nativeKeys(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
        keys: function keys(it) {
          return nativeKeys(toObject(it));
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.lookup-getter.js
  var require_es_object_lookup_getter = __commonJS({
    "node_modules/core-js/modules/es.object.lookup-getter.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var FORCED = require_object_prototype_accessors_forced();
      var toObject = require_to_object();
      var toPropertyKey = require_to_property_key();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      if (DESCRIPTORS) {
        $({ target: "Object", proto: true, forced: FORCED }, {
          __lookupGetter__: function __lookupGetter__(P) {
            var O = toObject(this);
            var key = toPropertyKey(P);
            var desc;
            do {
              if (desc = getOwnPropertyDescriptor(O, key))
                return desc.get;
            } while (O = getPrototypeOf2(O));
          }
        });
      }
    }
  });

  // node_modules/core-js/modules/es.object.lookup-setter.js
  var require_es_object_lookup_setter = __commonJS({
    "node_modules/core-js/modules/es.object.lookup-setter.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var FORCED = require_object_prototype_accessors_forced();
      var toObject = require_to_object();
      var toPropertyKey = require_to_property_key();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      if (DESCRIPTORS) {
        $({ target: "Object", proto: true, forced: FORCED }, {
          __lookupSetter__: function __lookupSetter__(P) {
            var O = toObject(this);
            var key = toPropertyKey(P);
            var desc;
            do {
              if (desc = getOwnPropertyDescriptor(O, key))
                return desc.set;
            } while (O = getPrototypeOf2(O));
          }
        });
      }
    }
  });

  // node_modules/core-js/modules/es.object.prevent-extensions.js
  var require_es_object_prevent_extensions = __commonJS({
    "node_modules/core-js/modules/es.object.prevent-extensions.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var isObject2 = require_is_object();
      var onFreeze = require_internal_metadata().onFreeze;
      var FREEZING = require_freezing();
      var fails = require_fails();
      var $preventExtensions = Object.preventExtensions;
      var FAILS_ON_PRIMITIVES = fails(function() {
        $preventExtensions(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
        preventExtensions: function preventExtensions(it) {
          return $preventExtensions && isObject2(it) ? $preventExtensions(onFreeze(it)) : it;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.seal.js
  var require_es_object_seal = __commonJS({
    "node_modules/core-js/modules/es.object.seal.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var isObject2 = require_is_object();
      var onFreeze = require_internal_metadata().onFreeze;
      var FREEZING = require_freezing();
      var fails = require_fails();
      var $seal = Object.seal;
      var FAILS_ON_PRIMITIVES = fails(function() {
        $seal(1);
      });
      $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES, sham: !FREEZING }, {
        seal: function seal(it) {
          return $seal && isObject2(it) ? $seal(onFreeze(it)) : it;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.object.set-prototype-of.js
  var require_es_object_set_prototype_of = __commonJS({
    "node_modules/core-js/modules/es.object.set-prototype-of.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var setPrototypeOf = require_object_set_prototype_of();
      $({ target: "Object", stat: true }, {
        setPrototypeOf
      });
    }
  });

  // node_modules/core-js/internals/object-to-string.js
  var require_object_to_string = __commonJS({
    "node_modules/core-js/internals/object-to-string.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var classof = require_classof();
      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
        return "[object " + classof(this) + "]";
      };
    }
  });

  // node_modules/core-js/modules/es.object.to-string.js
  var require_es_object_to_string = __commonJS({
    "node_modules/core-js/modules/es.object.to-string.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
      var redefine = require_redefine();
      var toString = require_object_to_string();
      if (!TO_STRING_TAG_SUPPORT) {
        redefine(Object.prototype, "toString", toString, { unsafe: true });
      }
    }
  });

  // node_modules/core-js/modules/es.object.values.js
  var require_es_object_values = __commonJS({
    "node_modules/core-js/modules/es.object.values.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $values = require_object_to_array().values;
      $({ target: "Object", stat: true }, {
        values: function values(O) {
          return $values(O);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.parse-float.js
  var require_es_parse_float = __commonJS({
    "node_modules/core-js/modules/es.parse-float.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $parseFloat = require_number_parse_float();
      $({ global: true, forced: parseFloat != $parseFloat }, {
        parseFloat: $parseFloat
      });
    }
  });

  // node_modules/core-js/modules/es.parse-int.js
  var require_es_parse_int = __commonJS({
    "node_modules/core-js/modules/es.parse-int.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $parseInt = require_number_parse_int();
      $({ global: true, forced: parseInt != $parseInt }, {
        parseInt: $parseInt
      });
    }
  });

  // node_modules/core-js/internals/native-promise-constructor.js
  var require_native_promise_constructor = __commonJS({
    "node_modules/core-js/internals/native-promise-constructor.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      module.exports = global2.Promise;
    }
  });

  // node_modules/core-js/internals/validate-arguments-length.js
  var require_validate_arguments_length = __commonJS({
    "node_modules/core-js/internals/validate-arguments-length.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var TypeError2 = global2.TypeError;
      module.exports = function(passed, required) {
        if (passed < required)
          throw TypeError2("Not enough arguments");
        return passed;
      };
    }
  });

  // node_modules/core-js/internals/engine-is-ios.js
  var require_engine_is_ios = __commonJS({
    "node_modules/core-js/internals/engine-is-ios.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var userAgent = require_engine_user_agent();
      module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);
    }
  });

  // node_modules/core-js/internals/task.js
  var require_task = __commonJS({
    "node_modules/core-js/internals/task.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var apply = require_function_apply();
      var bind = require_function_bind_context();
      var isCallable = require_is_callable();
      var hasOwn = require_has_own_property();
      var fails = require_fails();
      var html = require_html();
      var arraySlice2 = require_array_slice();
      var createElement2 = require_document_create_element();
      var validateArgumentsLength = require_validate_arguments_length();
      var IS_IOS = require_engine_is_ios();
      var IS_NODE = require_engine_is_node();
      var set = global2.setImmediate;
      var clear = global2.clearImmediate;
      var process3 = global2.process;
      var Dispatch = global2.Dispatch;
      var Function2 = global2.Function;
      var MessageChannel2 = global2.MessageChannel;
      var String2 = global2.String;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = "onreadystatechange";
      var location2;
      var defer2;
      var channel;
      var port;
      try {
        location2 = global2.location;
      } catch (error) {
      }
      var run = function(id) {
        if (hasOwn(queue, id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };
      var runner = function(id) {
        return function() {
          run(id);
        };
      };
      var listener = function(event) {
        run(event.data);
      };
      var post = function(id) {
        global2.postMessage(String2(id), location2.protocol + "//" + location2.host);
      };
      if (!set || !clear) {
        set = function setImmediate3(handler) {
          validateArgumentsLength(arguments.length, 1);
          var fn = isCallable(handler) ? handler : Function2(handler);
          var args = arraySlice2(arguments, 1);
          queue[++counter] = function() {
            apply(fn, void 0, args);
          };
          defer2(counter);
          return counter;
        };
        clear = function clearImmediate2(id) {
          delete queue[id];
        };
        if (IS_NODE) {
          defer2 = function(id) {
            process3.nextTick(runner(id));
          };
        } else if (Dispatch && Dispatch.now) {
          defer2 = function(id) {
            Dispatch.now(runner(id));
          };
        } else if (MessageChannel2 && !IS_IOS) {
          channel = new MessageChannel2();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer2 = bind(port.postMessage, port);
        } else if (global2.addEventListener && isCallable(global2.postMessage) && !global2.importScripts && location2 && location2.protocol !== "file:" && !fails(post)) {
          defer2 = post;
          global2.addEventListener("message", listener, false);
        } else if (ONREADYSTATECHANGE in createElement2("script")) {
          defer2 = function(id) {
            html.appendChild(createElement2("script"))[ONREADYSTATECHANGE] = function() {
              html.removeChild(this);
              run(id);
            };
          };
        } else {
          defer2 = function(id) {
            setTimeout(runner(id), 0);
          };
        }
      }
      module.exports = {
        set,
        clear
      };
    }
  });

  // node_modules/core-js/internals/engine-is-ios-pebble.js
  var require_engine_is_ios_pebble = __commonJS({
    "node_modules/core-js/internals/engine-is-ios-pebble.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var userAgent = require_engine_user_agent();
      var global2 = require_global();
      module.exports = /ipad|iphone|ipod/i.test(userAgent) && global2.Pebble !== void 0;
    }
  });

  // node_modules/core-js/internals/engine-is-webos-webkit.js
  var require_engine_is_webos_webkit = __commonJS({
    "node_modules/core-js/internals/engine-is-webos-webkit.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var userAgent = require_engine_user_agent();
      module.exports = /web0s(?!.*chrome)/i.test(userAgent);
    }
  });

  // node_modules/core-js/internals/microtask.js
  var require_microtask = __commonJS({
    "node_modules/core-js/internals/microtask.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var bind = require_function_bind_context();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var macrotask = require_task().set;
      var IS_IOS = require_engine_is_ios();
      var IS_IOS_PEBBLE = require_engine_is_ios_pebble();
      var IS_WEBOS_WEBKIT = require_engine_is_webos_webkit();
      var IS_NODE = require_engine_is_node();
      var MutationObserver2 = global2.MutationObserver || global2.WebKitMutationObserver;
      var document2 = global2.document;
      var process3 = global2.process;
      var Promise2 = global2.Promise;
      var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global2, "queueMicrotask");
      var queueMicrotask2 = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
      var flush;
      var head;
      var last2;
      var notify;
      var toggle;
      var node;
      var promise;
      var then;
      if (!queueMicrotask2) {
        flush = function() {
          var parent, fn;
          if (IS_NODE && (parent = process3.domain))
            parent.exit();
          while (head) {
            fn = head.fn;
            head = head.next;
            try {
              fn();
            } catch (error) {
              if (head)
                notify();
              else
                last2 = void 0;
              throw error;
            }
          }
          last2 = void 0;
          if (parent)
            parent.enter();
        };
        if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver2 && document2) {
          toggle = true;
          node = document2.createTextNode("");
          new MutationObserver2(flush).observe(node, { characterData: true });
          notify = function() {
            node.data = toggle = !toggle;
          };
        } else if (!IS_IOS_PEBBLE && Promise2 && Promise2.resolve) {
          promise = Promise2.resolve(void 0);
          promise.constructor = Promise2;
          then = bind(promise.then, promise);
          notify = function() {
            then(flush);
          };
        } else if (IS_NODE) {
          notify = function() {
            process3.nextTick(flush);
          };
        } else {
          macrotask = bind(macrotask, global2);
          notify = function() {
            macrotask(flush);
          };
        }
      }
      module.exports = queueMicrotask2 || function(fn) {
        var task = { fn, next: void 0 };
        if (last2)
          last2.next = task;
        if (!head) {
          head = task;
          notify();
        }
        last2 = task;
      };
    }
  });

  // node_modules/core-js/internals/new-promise-capability.js
  var require_new_promise_capability = __commonJS({
    "node_modules/core-js/internals/new-promise-capability.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var aCallable = require_a_callable();
      var PromiseCapability = function(C) {
        var resolve, reject;
        this.promise = new C(function($$resolve, $$reject) {
          if (resolve !== void 0 || reject !== void 0)
            throw TypeError("Bad Promise constructor");
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aCallable(resolve);
        this.reject = aCallable(reject);
      };
      module.exports.f = function(C) {
        return new PromiseCapability(C);
      };
    }
  });

  // node_modules/core-js/internals/promise-resolve.js
  var require_promise_resolve = __commonJS({
    "node_modules/core-js/internals/promise-resolve.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var anObject = require_an_object();
      var isObject2 = require_is_object();
      var newPromiseCapability = require_new_promise_capability();
      module.exports = function(C, x) {
        anObject(C);
        if (isObject2(x) && x.constructor === C)
          return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
    }
  });

  // node_modules/core-js/internals/host-report-errors.js
  var require_host_report_errors = __commonJS({
    "node_modules/core-js/internals/host-report-errors.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      module.exports = function(a, b) {
        var console2 = global2.console;
        if (console2 && console2.error) {
          arguments.length == 1 ? console2.error(a) : console2.error(a, b);
        }
      };
    }
  });

  // node_modules/core-js/internals/perform.js
  var require_perform = __commonJS({
    "node_modules/core-js/internals/perform.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = function(exec) {
        try {
          return { error: false, value: exec() };
        } catch (error) {
          return { error: true, value: error };
        }
      };
    }
  });

  // node_modules/core-js/internals/queue.js
  var require_queue = __commonJS({
    "node_modules/core-js/internals/queue.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var Queue = function() {
        this.head = null;
        this.tail = null;
      };
      Queue.prototype = {
        add: function(item) {
          var entry = { item, next: null };
          if (this.head)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
        },
        get: function() {
          var entry = this.head;
          if (entry) {
            this.head = entry.next;
            if (this.tail === entry)
              this.tail = null;
            return entry.item;
          }
        }
      };
      module.exports = Queue;
    }
  });

  // node_modules/core-js/internals/engine-is-browser.js
  var require_engine_is_browser = __commonJS({
    "node_modules/core-js/internals/engine-is-browser.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = typeof window == "object";
    }
  });

  // node_modules/core-js/modules/es.promise.js
  var require_es_promise = __commonJS({
    "node_modules/core-js/modules/es.promise.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var IS_PURE = require_is_pure();
      var global2 = require_global();
      var getBuiltIn = require_get_built_in();
      var call = require_function_call();
      var NativePromise = require_native_promise_constructor();
      var redefine = require_redefine();
      var redefineAll = require_redefine_all();
      var setPrototypeOf = require_object_set_prototype_of();
      var setToStringTag = require_set_to_string_tag();
      var setSpecies = require_set_species();
      var aCallable = require_a_callable();
      var isCallable = require_is_callable();
      var isObject2 = require_is_object();
      var anInstance = require_an_instance();
      var inspectSource = require_inspect_source();
      var iterate = require_iterate();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
      var speciesConstructor = require_species_constructor();
      var task = require_task().set;
      var microtask = require_microtask();
      var promiseResolve = require_promise_resolve();
      var hostReportErrors = require_host_report_errors();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      var Queue = require_queue();
      var InternalStateModule = require_internal_state();
      var isForced = require_is_forced();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_BROWSER = require_engine_is_browser();
      var IS_NODE = require_engine_is_node();
      var V8_VERSION = require_engine_v8_version();
      var SPECIES = wellKnownSymbol("species");
      var PROMISE = "Promise";
      var getInternalState = InternalStateModule.getterFor(PROMISE);
      var setInternalState = InternalStateModule.set;
      var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
      var NativePromisePrototype = NativePromise && NativePromise.prototype;
      var PromiseConstructor = NativePromise;
      var PromisePrototype = NativePromisePrototype;
      var TypeError2 = global2.TypeError;
      var document2 = global2.document;
      var process3 = global2.process;
      var newPromiseCapability = newPromiseCapabilityModule.f;
      var newGenericPromiseCapability = newPromiseCapability;
      var DISPATCH_EVENT = !!(document2 && document2.createEvent && global2.dispatchEvent);
      var NATIVE_REJECTION_EVENT = isCallable(global2.PromiseRejectionEvent);
      var UNHANDLED_REJECTION = "unhandledrejection";
      var REJECTION_HANDLED = "rejectionhandled";
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;
      var HANDLED = 1;
      var UNHANDLED = 2;
      var SUBCLASSING = false;
      var Internal;
      var OwnPromiseCapability;
      var PromiseWrapper;
      var nativeThen;
      var FORCED = isForced(PROMISE, function() {
        var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
        var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
        if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66)
          return true;
        if (IS_PURE && !PromisePrototype["finally"])
          return true;
        if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE))
          return false;
        var promise = new PromiseConstructor(function(resolve) {
          resolve(1);
        });
        var FakePromise = function(exec) {
          exec(function() {
          }, function() {
          });
        };
        var constructor = promise.constructor = {};
        constructor[SPECIES] = FakePromise;
        SUBCLASSING = promise.then(function() {
        }) instanceof FakePromise;
        if (!SUBCLASSING)
          return true;
        return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
      });
      var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function(iterable) {
        PromiseConstructor.all(iterable)["catch"](function() {
        });
      });
      var isThenable = function(it) {
        var then;
        return isObject2(it) && isCallable(then = it.then) ? then : false;
      };
      var callReaction = function(reaction, state) {
        var value = state.value;
        var ok = state.state == FULFILLED;
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;
        try {
          if (handler) {
            if (!ok) {
              if (state.rejection === UNHANDLED)
                onHandleUnhandled(state);
              state.rejection = HANDLED;
            }
            if (handler === true)
              result = value;
            else {
              if (domain)
                domain.enter();
              result = handler(value);
              if (domain) {
                domain.exit();
                exited = true;
              }
            }
            if (result === reaction.promise) {
              reject(TypeError2("Promise-chain cycle"));
            } else if (then = isThenable(result)) {
              call(then, result, resolve, reject);
            } else
              resolve(result);
          } else
            reject(value);
        } catch (error) {
          if (domain && !exited)
            domain.exit();
          reject(error);
        }
      };
      var notify = function(state, isReject) {
        if (state.notified)
          return;
        state.notified = true;
        microtask(function() {
          var reactions = state.reactions;
          var reaction;
          while (reaction = reactions.get()) {
            callReaction(reaction, state);
          }
          state.notified = false;
          if (isReject && !state.rejection)
            onUnhandled(state);
        });
      };
      var dispatchEvent = function(name, promise, reason) {
        var event, handler;
        if (DISPATCH_EVENT) {
          event = document2.createEvent("Event");
          event.promise = promise;
          event.reason = reason;
          event.initEvent(name, false, true);
          global2.dispatchEvent(event);
        } else
          event = { promise, reason };
        if (!NATIVE_REJECTION_EVENT && (handler = global2["on" + name]))
          handler(event);
        else if (name === UNHANDLED_REJECTION)
          hostReportErrors("Unhandled promise rejection", reason);
      };
      var onUnhandled = function(state) {
        call(task, global2, function() {
          var promise = state.facade;
          var value = state.value;
          var IS_UNHANDLED = isUnhandled(state);
          var result;
          if (IS_UNHANDLED) {
            result = perform(function() {
              if (IS_NODE) {
                process3.emit("unhandledRejection", value, promise);
              } else
                dispatchEvent(UNHANDLED_REJECTION, promise, value);
            });
            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
            if (result.error)
              throw result.value;
          }
        });
      };
      var isUnhandled = function(state) {
        return state.rejection !== HANDLED && !state.parent;
      };
      var onHandleUnhandled = function(state) {
        call(task, global2, function() {
          var promise = state.facade;
          if (IS_NODE) {
            process3.emit("rejectionHandled", promise);
          } else
            dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
      };
      var bind = function(fn, state, unwrap) {
        return function(value) {
          fn(state, value, unwrap);
        };
      };
      var internalReject = function(state, value, unwrap) {
        if (state.done)
          return;
        state.done = true;
        if (unwrap)
          state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(state, true);
      };
      var internalResolve = function(state, value, unwrap) {
        if (state.done)
          return;
        state.done = true;
        if (unwrap)
          state = unwrap;
        try {
          if (state.facade === value)
            throw TypeError2("Promise can't be resolved itself");
          var then = isThenable(value);
          if (then) {
            microtask(function() {
              var wrapper = { done: false };
              try {
                call(then, value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
              } catch (error) {
                internalReject(wrapper, error, state);
              }
            });
          } else {
            state.value = value;
            state.state = FULFILLED;
            notify(state, false);
          }
        } catch (error) {
          internalReject({ done: false }, error, state);
        }
      };
      if (FORCED) {
        PromiseConstructor = function Promise2(executor) {
          anInstance(this, PromisePrototype);
          aCallable(executor);
          call(Internal, this);
          var state = getInternalState(this);
          try {
            executor(bind(internalResolve, state), bind(internalReject, state));
          } catch (error) {
            internalReject(state, error);
          }
        };
        PromisePrototype = PromiseConstructor.prototype;
        Internal = function Promise2(executor) {
          setInternalState(this, {
            type: PROMISE,
            done: false,
            notified: false,
            parent: false,
            reactions: new Queue(),
            rejection: false,
            state: PENDING,
            value: void 0
          });
        };
        Internal.prototype = redefineAll(PromisePrototype, {
          then: function then(onFulfilled, onRejected) {
            var state = getInternalPromiseState(this);
            var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
            state.parent = true;
            reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
            reaction.fail = isCallable(onRejected) && onRejected;
            reaction.domain = IS_NODE ? process3.domain : void 0;
            if (state.state == PENDING)
              state.reactions.add(reaction);
            else
              microtask(function() {
                callReaction(reaction, state);
              });
            return reaction.promise;
          },
          "catch": function(onRejected) {
            return this.then(void 0, onRejected);
          }
        });
        OwnPromiseCapability = function() {
          var promise = new Internal();
          var state = getInternalState(promise);
          this.promise = promise;
          this.resolve = bind(internalResolve, state);
          this.reject = bind(internalReject, state);
        };
        newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
          return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };
        if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {
          nativeThen = NativePromisePrototype.then;
          if (!SUBCLASSING) {
            redefine(NativePromisePrototype, "then", function then(onFulfilled, onRejected) {
              var that = this;
              return new PromiseConstructor(function(resolve, reject) {
                call(nativeThen, that, resolve, reject);
              }).then(onFulfilled, onRejected);
            }, { unsafe: true });
            redefine(NativePromisePrototype, "catch", PromisePrototype["catch"], { unsafe: true });
          }
          try {
            delete NativePromisePrototype.constructor;
          } catch (error) {
          }
          if (setPrototypeOf) {
            setPrototypeOf(NativePromisePrototype, PromisePrototype);
          }
        }
      }
      $({ global: true, wrap: true, forced: FORCED }, {
        Promise: PromiseConstructor
      });
      setToStringTag(PromiseConstructor, PROMISE, false, true);
      setSpecies(PROMISE);
      PromiseWrapper = getBuiltIn(PROMISE);
      $({ target: PROMISE, stat: true, forced: FORCED }, {
        reject: function reject(r) {
          var capability = newPromiseCapability(this);
          call(capability.reject, void 0, r);
          return capability.promise;
        }
      });
      $({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
        resolve: function resolve(x) {
          return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
        }
      });
      $({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var $promiseResolve = aCallable(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyCalled = false;
              remaining++;
              call($promiseResolve, C, promise).then(function(value) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        },
        race: function race2(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var reject = capability.reject;
          var result = perform(function() {
            var $promiseResolve = aCallable(C.resolve);
            iterate(iterable, function(promise) {
              call($promiseResolve, C, promise).then(capability.resolve, reject);
            });
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.promise.all-settled.js
  var require_es_promise_all_settled = __commonJS({
    "node_modules/core-js/modules/es.promise.all-settled.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var call = require_function_call();
      var aCallable = require_a_callable();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      var iterate = require_iterate();
      $({ target: "Promise", stat: true }, {
        allSettled: function allSettled(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var promiseResolve = aCallable(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyCalled = false;
              remaining++;
              call(promiseResolve, C, promise).then(function(value) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = { status: "fulfilled", value };
                --remaining || resolve(values);
              }, function(error) {
                if (alreadyCalled)
                  return;
                alreadyCalled = true;
                values[index] = { status: "rejected", reason: error };
                --remaining || resolve(values);
              });
            });
            --remaining || resolve(values);
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.promise.any.js
  var require_es_promise_any = __commonJS({
    "node_modules/core-js/modules/es.promise.any.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var aCallable = require_a_callable();
      var getBuiltIn = require_get_built_in();
      var call = require_function_call();
      var newPromiseCapabilityModule = require_new_promise_capability();
      var perform = require_perform();
      var iterate = require_iterate();
      var PROMISE_ANY_ERROR = "No one promise resolved";
      $({ target: "Promise", stat: true }, {
        any: function any(iterable) {
          var C = this;
          var AggregateError = getBuiltIn("AggregateError");
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function() {
            var promiseResolve = aCallable(C.resolve);
            var errors = [];
            var counter = 0;
            var remaining = 1;
            var alreadyResolved = false;
            iterate(iterable, function(promise) {
              var index = counter++;
              var alreadyRejected = false;
              remaining++;
              call(promiseResolve, C, promise).then(function(value) {
                if (alreadyRejected || alreadyResolved)
                  return;
                alreadyResolved = true;
                resolve(value);
              }, function(error) {
                if (alreadyRejected || alreadyResolved)
                  return;
                alreadyRejected = true;
                errors[index] = error;
                --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
              });
            });
            --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
          });
          if (result.error)
            reject(result.value);
          return capability.promise;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.promise.finally.js
  var require_es_promise_finally = __commonJS({
    "node_modules/core-js/modules/es.promise.finally.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var IS_PURE = require_is_pure();
      var NativePromise = require_native_promise_constructor();
      var fails = require_fails();
      var getBuiltIn = require_get_built_in();
      var isCallable = require_is_callable();
      var speciesConstructor = require_species_constructor();
      var promiseResolve = require_promise_resolve();
      var redefine = require_redefine();
      var NON_GENERIC = !!NativePromise && fails(function() {
        NativePromise.prototype["finally"].call({ then: function() {
        } }, function() {
        });
      });
      $({ target: "Promise", proto: true, real: true, forced: NON_GENERIC }, {
        "finally": function(onFinally) {
          var C = speciesConstructor(this, getBuiltIn("Promise"));
          var isFunction2 = isCallable(onFinally);
          return this.then(isFunction2 ? function(x) {
            return promiseResolve(C, onFinally()).then(function() {
              return x;
            });
          } : onFinally, isFunction2 ? function(e) {
            return promiseResolve(C, onFinally()).then(function() {
              throw e;
            });
          } : onFinally);
        }
      });
      if (!IS_PURE && isCallable(NativePromise)) {
        method = getBuiltIn("Promise").prototype["finally"];
        if (NativePromise.prototype["finally"] !== method) {
          redefine(NativePromise.prototype, "finally", method, { unsafe: true });
        }
      }
      var method;
    }
  });

  // node_modules/core-js/modules/es.reflect.apply.js
  var require_es_reflect_apply = __commonJS({
    "node_modules/core-js/modules/es.reflect.apply.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var functionApply = require_function_apply();
      var aCallable = require_a_callable();
      var anObject = require_an_object();
      var fails = require_fails();
      var OPTIONAL_ARGUMENTS_LIST = !fails(function() {
        Reflect.apply(function() {
        });
      });
      $({ target: "Reflect", stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
        apply: function apply(target, thisArgument, argumentsList) {
          return functionApply(aCallable(target), thisArgument, anObject(argumentsList));
        }
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.construct.js
  var require_es_reflect_construct = __commonJS({
    "node_modules/core-js/modules/es.reflect.construct.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var apply = require_function_apply();
      var bind = require_function_bind();
      var aConstructor = require_a_constructor();
      var anObject = require_an_object();
      var isObject2 = require_is_object();
      var create = require_object_create();
      var fails = require_fails();
      var nativeConstruct = getBuiltIn("Reflect", "construct");
      var ObjectPrototype = Object.prototype;
      var push = [].push;
      var NEW_TARGET_BUG = fails(function() {
        function F() {
        }
        return !(nativeConstruct(function() {
        }, [], F) instanceof F);
      });
      var ARGS_BUG = !fails(function() {
        nativeConstruct(function() {
        });
      });
      var FORCED = NEW_TARGET_BUG || ARGS_BUG;
      $({ target: "Reflect", stat: true, forced: FORCED, sham: FORCED }, {
        construct: function construct(Target, args) {
          aConstructor(Target);
          anObject(args);
          var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
          if (ARGS_BUG && !NEW_TARGET_BUG)
            return nativeConstruct(Target, args, newTarget);
          if (Target == newTarget) {
            switch (args.length) {
              case 0:
                return new Target();
              case 1:
                return new Target(args[0]);
              case 2:
                return new Target(args[0], args[1]);
              case 3:
                return new Target(args[0], args[1], args[2]);
              case 4:
                return new Target(args[0], args[1], args[2], args[3]);
            }
            var $args = [null];
            apply(push, $args, args);
            return new (apply(bind, Target, $args))();
          }
          var proto = newTarget.prototype;
          var instance = create(isObject2(proto) ? proto : ObjectPrototype);
          var result = apply(Target, instance, args);
          return isObject2(result) ? result : instance;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.define-property.js
  var require_es_reflect_define_property = __commonJS({
    "node_modules/core-js/modules/es.reflect.define-property.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var anObject = require_an_object();
      var toPropertyKey = require_to_property_key();
      var definePropertyModule = require_object_define_property();
      var fails = require_fails();
      var ERROR_INSTEAD_OF_FALSE = fails(function() {
        Reflect.defineProperty(definePropertyModule.f({}, 1, { value: 1 }), 1, { value: 2 });
      });
      $({ target: "Reflect", stat: true, forced: ERROR_INSTEAD_OF_FALSE, sham: !DESCRIPTORS }, {
        defineProperty: function defineProperty(target, propertyKey, attributes) {
          anObject(target);
          var key = toPropertyKey(propertyKey);
          anObject(attributes);
          try {
            definePropertyModule.f(target, key, attributes);
            return true;
          } catch (error) {
            return false;
          }
        }
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.delete-property.js
  var require_es_reflect_delete_property = __commonJS({
    "node_modules/core-js/modules/es.reflect.delete-property.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var anObject = require_an_object();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      $({ target: "Reflect", stat: true }, {
        deleteProperty: function deleteProperty(target, propertyKey) {
          var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
          return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
        }
      });
    }
  });

  // node_modules/core-js/internals/is-data-descriptor.js
  var require_is_data_descriptor = __commonJS({
    "node_modules/core-js/internals/is-data-descriptor.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var hasOwn = require_has_own_property();
      module.exports = function(descriptor) {
        return descriptor !== void 0 && (hasOwn(descriptor, "value") || hasOwn(descriptor, "writable"));
      };
    }
  });

  // node_modules/core-js/modules/es.reflect.get.js
  var require_es_reflect_get = __commonJS({
    "node_modules/core-js/modules/es.reflect.get.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var call = require_function_call();
      var isObject2 = require_is_object();
      var anObject = require_an_object();
      var isDataDescriptor = require_is_data_descriptor();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var getPrototypeOf2 = require_object_get_prototype_of();
      function get(target, propertyKey) {
        var receiver = arguments.length < 3 ? target : arguments[2];
        var descriptor, prototype;
        if (anObject(target) === receiver)
          return target[propertyKey];
        descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);
        if (descriptor)
          return isDataDescriptor(descriptor) ? descriptor.value : descriptor.get === void 0 ? void 0 : call(descriptor.get, receiver);
        if (isObject2(prototype = getPrototypeOf2(target)))
          return get(prototype, propertyKey, receiver);
      }
      $({ target: "Reflect", stat: true }, {
        get
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.get-own-property-descriptor.js
  var require_es_reflect_get_own_property_descriptor = __commonJS({
    "node_modules/core-js/modules/es.reflect.get-own-property-descriptor.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var anObject = require_an_object();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      $({ target: "Reflect", stat: true, sham: !DESCRIPTORS }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
          return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.get-prototype-of.js
  var require_es_reflect_get_prototype_of = __commonJS({
    "node_modules/core-js/modules/es.reflect.get-prototype-of.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var anObject = require_an_object();
      var objectGetPrototypeOf = require_object_get_prototype_of();
      var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
      $({ target: "Reflect", stat: true, sham: !CORRECT_PROTOTYPE_GETTER }, {
        getPrototypeOf: function getPrototypeOf2(target) {
          return objectGetPrototypeOf(anObject(target));
        }
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.has.js
  var require_es_reflect_has = __commonJS({
    "node_modules/core-js/modules/es.reflect.has.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      $({ target: "Reflect", stat: true }, {
        has: function has(target, propertyKey) {
          return propertyKey in target;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.is-extensible.js
  var require_es_reflect_is_extensible = __commonJS({
    "node_modules/core-js/modules/es.reflect.is-extensible.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var anObject = require_an_object();
      var $isExtensible = require_object_is_extensible();
      $({ target: "Reflect", stat: true }, {
        isExtensible: function isExtensible(target) {
          anObject(target);
          return $isExtensible(target);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.own-keys.js
  var require_es_reflect_own_keys = __commonJS({
    "node_modules/core-js/modules/es.reflect.own-keys.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var ownKeys = require_own_keys();
      $({ target: "Reflect", stat: true }, {
        ownKeys
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.prevent-extensions.js
  var require_es_reflect_prevent_extensions = __commonJS({
    "node_modules/core-js/modules/es.reflect.prevent-extensions.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var anObject = require_an_object();
      var FREEZING = require_freezing();
      $({ target: "Reflect", stat: true, sham: !FREEZING }, {
        preventExtensions: function preventExtensions(target) {
          anObject(target);
          try {
            var objectPreventExtensions = getBuiltIn("Object", "preventExtensions");
            if (objectPreventExtensions)
              objectPreventExtensions(target);
            return true;
          } catch (error) {
            return false;
          }
        }
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.set.js
  var require_es_reflect_set = __commonJS({
    "node_modules/core-js/modules/es.reflect.set.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var call = require_function_call();
      var anObject = require_an_object();
      var isObject2 = require_is_object();
      var isDataDescriptor = require_is_data_descriptor();
      var fails = require_fails();
      var definePropertyModule = require_object_define_property();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var getPrototypeOf2 = require_object_get_prototype_of();
      var createPropertyDescriptor = require_create_property_descriptor();
      function set(target, propertyKey, V) {
        var receiver = arguments.length < 4 ? target : arguments[3];
        var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
        var existingDescriptor, prototype, setter;
        if (!ownDescriptor) {
          if (isObject2(prototype = getPrototypeOf2(target))) {
            return set(prototype, propertyKey, V, receiver);
          }
          ownDescriptor = createPropertyDescriptor(0);
        }
        if (isDataDescriptor(ownDescriptor)) {
          if (ownDescriptor.writable === false || !isObject2(receiver))
            return false;
          if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
            if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false)
              return false;
            existingDescriptor.value = V;
            definePropertyModule.f(receiver, propertyKey, existingDescriptor);
          } else
            definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));
        } else {
          setter = ownDescriptor.set;
          if (setter === void 0)
            return false;
          call(setter, receiver, V);
        }
        return true;
      }
      var MS_EDGE_BUG = fails(function() {
        var Constructor = function() {
        };
        var object = definePropertyModule.f(new Constructor(), "a", { configurable: true });
        return Reflect.set(Constructor.prototype, "a", 1, object) !== false;
      });
      $({ target: "Reflect", stat: true, forced: MS_EDGE_BUG }, {
        set
      });
    }
  });

  // node_modules/core-js/modules/es.reflect.set-prototype-of.js
  var require_es_reflect_set_prototype_of = __commonJS({
    "node_modules/core-js/modules/es.reflect.set-prototype-of.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var anObject = require_an_object();
      var aPossiblePrototype = require_a_possible_prototype();
      var objectSetPrototypeOf = require_object_set_prototype_of();
      if (objectSetPrototypeOf)
        $({ target: "Reflect", stat: true }, {
          setPrototypeOf: function setPrototypeOf(target, proto) {
            anObject(target);
            aPossiblePrototype(proto);
            try {
              objectSetPrototypeOf(target, proto);
              return true;
            } catch (error) {
              return false;
            }
          }
        });
    }
  });

  // node_modules/core-js/modules/es.reflect.to-string-tag.js
  var require_es_reflect_to_string_tag = __commonJS({
    "node_modules/core-js/modules/es.reflect.to-string-tag.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var setToStringTag = require_set_to_string_tag();
      $({ global: true }, { Reflect: {} });
      setToStringTag(global2.Reflect, "Reflect", true);
    }
  });

  // node_modules/core-js/internals/is-regexp.js
  var require_is_regexp = __commonJS({
    "node_modules/core-js/internals/is-regexp.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var isObject2 = require_is_object();
      var classof = require_classof_raw();
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module.exports = function(it) {
        var isRegExp;
        return isObject2(it) && ((isRegExp = it[MATCH]) !== void 0 ? !!isRegExp : classof(it) == "RegExp");
      };
    }
  });

  // node_modules/core-js/internals/regexp-flags.js
  var require_regexp_flags = __commonJS({
    "node_modules/core-js/internals/regexp-flags.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var anObject = require_an_object();
      module.exports = function() {
        var that = anObject(this);
        var result = "";
        if (that.global)
          result += "g";
        if (that.ignoreCase)
          result += "i";
        if (that.multiline)
          result += "m";
        if (that.dotAll)
          result += "s";
        if (that.unicode)
          result += "u";
        if (that.sticky)
          result += "y";
        return result;
      };
    }
  });

  // node_modules/core-js/internals/regexp-sticky-helpers.js
  var require_regexp_sticky_helpers = __commonJS({
    "node_modules/core-js/internals/regexp-sticky-helpers.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var global2 = require_global();
      var $RegExp = global2.RegExp;
      var UNSUPPORTED_Y = fails(function() {
        var re = $RegExp("a", "y");
        re.lastIndex = 2;
        return re.exec("abcd") != null;
      });
      var MISSED_STICKY = UNSUPPORTED_Y || fails(function() {
        return !$RegExp("a", "y").sticky;
      });
      var BROKEN_CARET = UNSUPPORTED_Y || fails(function() {
        var re = $RegExp("^r", "gy");
        re.lastIndex = 2;
        return re.exec("str") != null;
      });
      module.exports = {
        BROKEN_CARET,
        MISSED_STICKY,
        UNSUPPORTED_Y
      };
    }
  });

  // node_modules/core-js/internals/regexp-unsupported-dot-all.js
  var require_regexp_unsupported_dot_all = __commonJS({
    "node_modules/core-js/internals/regexp-unsupported-dot-all.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var global2 = require_global();
      var $RegExp = global2.RegExp;
      module.exports = fails(function() {
        var re = $RegExp(".", "s");
        return !(re.dotAll && re.exec("\n") && re.flags === "s");
      });
    }
  });

  // node_modules/core-js/internals/regexp-unsupported-ncg.js
  var require_regexp_unsupported_ncg = __commonJS({
    "node_modules/core-js/internals/regexp-unsupported-ncg.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var global2 = require_global();
      var $RegExp = global2.RegExp;
      module.exports = fails(function() {
        var re = $RegExp("(?<a>b)", "g");
        return re.exec("b").groups.a !== "b" || "b".replace(re, "$<a>c") !== "bc";
      });
    }
  });

  // node_modules/core-js/modules/es.regexp.constructor.js
  var require_es_regexp_constructor = __commonJS({
    "node_modules/core-js/modules/es.regexp.constructor.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var isForced = require_is_forced();
      var inheritIfRequired = require_inherit_if_required();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var defineProperty = require_object_define_property().f;
      var getOwnPropertyNames = require_object_get_own_property_names().f;
      var isPrototypeOf = require_object_is_prototype_of();
      var isRegExp = require_is_regexp();
      var toString = require_to_string();
      var regExpFlags = require_regexp_flags();
      var stickyHelpers = require_regexp_sticky_helpers();
      var redefine = require_redefine();
      var fails = require_fails();
      var hasOwn = require_has_own_property();
      var enforceInternalState = require_internal_state().enforce;
      var setSpecies = require_set_species();
      var wellKnownSymbol = require_well_known_symbol();
      var UNSUPPORTED_DOT_ALL = require_regexp_unsupported_dot_all();
      var UNSUPPORTED_NCG = require_regexp_unsupported_ncg();
      var MATCH = wellKnownSymbol("match");
      var NativeRegExp = global2.RegExp;
      var RegExpPrototype = NativeRegExp.prototype;
      var SyntaxError = global2.SyntaxError;
      var getFlags = uncurryThis(regExpFlags);
      var exec = uncurryThis(RegExpPrototype.exec);
      var charAt = uncurryThis("".charAt);
      var replace = uncurryThis("".replace);
      var stringIndexOf = uncurryThis("".indexOf);
      var stringSlice = uncurryThis("".slice);
      var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
      var re1 = /a/g;
      var re2 = /a/g;
      var CORRECT_NEW = new NativeRegExp(re1) !== re1;
      var MISSED_STICKY = stickyHelpers.MISSED_STICKY;
      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
      var BASE_FORCED = DESCRIPTORS && (!CORRECT_NEW || MISSED_STICKY || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG || fails(function() {
        re2[MATCH] = false;
        return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, "i") != "/a/i";
      }));
      var handleDotAll = function(string) {
        var length = string.length;
        var index2 = 0;
        var result = "";
        var brackets = false;
        var chr;
        for (; index2 <= length; index2++) {
          chr = charAt(string, index2);
          if (chr === "\\") {
            result += chr + charAt(string, ++index2);
            continue;
          }
          if (!brackets && chr === ".") {
            result += "[\\s\\S]";
          } else {
            if (chr === "[") {
              brackets = true;
            } else if (chr === "]") {
              brackets = false;
            }
            result += chr;
          }
        }
        return result;
      };
      var handleNCG = function(string) {
        var length = string.length;
        var index2 = 0;
        var result = "";
        var named = [];
        var names = {};
        var brackets = false;
        var ncg = false;
        var groupid = 0;
        var groupname = "";
        var chr;
        for (; index2 <= length; index2++) {
          chr = charAt(string, index2);
          if (chr === "\\") {
            chr = chr + charAt(string, ++index2);
          } else if (chr === "]") {
            brackets = false;
          } else if (!brackets)
            switch (true) {
              case chr === "[":
                brackets = true;
                break;
              case chr === "(":
                if (exec(IS_NCG, stringSlice(string, index2 + 1))) {
                  index2 += 2;
                  ncg = true;
                }
                result += chr;
                groupid++;
                continue;
              case (chr === ">" && ncg):
                if (groupname === "" || hasOwn(names, groupname)) {
                  throw new SyntaxError("Invalid capture group name");
                }
                names[groupname] = true;
                named[named.length] = [groupname, groupid];
                ncg = false;
                groupname = "";
                continue;
            }
          if (ncg)
            groupname += chr;
          else
            result += chr;
        }
        return [result, named];
      };
      if (isForced("RegExp", BASE_FORCED)) {
        RegExpWrapper = function RegExp2(pattern, flags) {
          var thisIsRegExp = isPrototypeOf(RegExpPrototype, this);
          var patternIsRegExp = isRegExp(pattern);
          var flagsAreUndefined = flags === void 0;
          var groups = [];
          var rawPattern = pattern;
          var rawFlags, dotAll, sticky, handled, result, state;
          if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
            return pattern;
          }
          if (patternIsRegExp || isPrototypeOf(RegExpPrototype, pattern)) {
            pattern = pattern.source;
            if (flagsAreUndefined)
              flags = "flags" in rawPattern ? rawPattern.flags : getFlags(rawPattern);
          }
          pattern = pattern === void 0 ? "" : toString(pattern);
          flags = flags === void 0 ? "" : toString(flags);
          rawPattern = pattern;
          if (UNSUPPORTED_DOT_ALL && "dotAll" in re1) {
            dotAll = !!flags && stringIndexOf(flags, "s") > -1;
            if (dotAll)
              flags = replace(flags, /s/g, "");
          }
          rawFlags = flags;
          if (MISSED_STICKY && "sticky" in re1) {
            sticky = !!flags && stringIndexOf(flags, "y") > -1;
            if (sticky && UNSUPPORTED_Y)
              flags = replace(flags, /y/g, "");
          }
          if (UNSUPPORTED_NCG) {
            handled = handleNCG(pattern);
            pattern = handled[0];
            groups = handled[1];
          }
          result = inheritIfRequired(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
          if (dotAll || sticky || groups.length) {
            state = enforceInternalState(result);
            if (dotAll) {
              state.dotAll = true;
              state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
            }
            if (sticky)
              state.sticky = true;
            if (groups.length)
              state.groups = groups;
          }
          if (pattern !== rawPattern)
            try {
              createNonEnumerableProperty(result, "source", rawPattern === "" ? "(?:)" : rawPattern);
            } catch (error) {
            }
          return result;
        };
        proxy = function(key) {
          key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
            configurable: true,
            get: function() {
              return NativeRegExp[key];
            },
            set: function(it) {
              NativeRegExp[key] = it;
            }
          });
        };
        for (keys = getOwnPropertyNames(NativeRegExp), index = 0; keys.length > index; ) {
          proxy(keys[index++]);
        }
        RegExpPrototype.constructor = RegExpWrapper;
        RegExpWrapper.prototype = RegExpPrototype;
        redefine(global2, "RegExp", RegExpWrapper);
      }
      var RegExpWrapper;
      var proxy;
      var keys;
      var index;
      setSpecies("RegExp");
    }
  });

  // node_modules/core-js/modules/es.regexp.dot-all.js
  var require_es_regexp_dot_all = __commonJS({
    "node_modules/core-js/modules/es.regexp.dot-all.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var DESCRIPTORS = require_descriptors();
      var UNSUPPORTED_DOT_ALL = require_regexp_unsupported_dot_all();
      var classof = require_classof_raw();
      var defineProperty = require_object_define_property().f;
      var getInternalState = require_internal_state().get;
      var RegExpPrototype = RegExp.prototype;
      var TypeError2 = global2.TypeError;
      if (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {
        defineProperty(RegExpPrototype, "dotAll", {
          configurable: true,
          get: function() {
            if (this === RegExpPrototype)
              return void 0;
            if (classof(this) === "RegExp") {
              return !!getInternalState(this).dotAll;
            }
            throw TypeError2("Incompatible receiver, RegExp required");
          }
        });
      }
    }
  });

  // node_modules/core-js/internals/regexp-exec.js
  var require_regexp_exec = __commonJS({
    "node_modules/core-js/internals/regexp-exec.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var toString = require_to_string();
      var regexpFlags = require_regexp_flags();
      var stickyHelpers = require_regexp_sticky_helpers();
      var shared = require_shared();
      var create = require_object_create();
      var getInternalState = require_internal_state().get;
      var UNSUPPORTED_DOT_ALL = require_regexp_unsupported_dot_all();
      var UNSUPPORTED_NCG = require_regexp_unsupported_ncg();
      var nativeReplace = shared("native-string-replace", String.prototype.replace);
      var nativeExec = RegExp.prototype.exec;
      var patchedExec = nativeExec;
      var charAt = uncurryThis("".charAt);
      var indexOf = uncurryThis("".indexOf);
      var replace = uncurryThis("".replace);
      var stringSlice = uncurryThis("".slice);
      var UPDATES_LAST_INDEX_WRONG = function() {
        var re1 = /a/;
        var re2 = /b*/g;
        call(nativeExec, re1, "a");
        call(nativeExec, re2, "a");
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
      }();
      var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;
      var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;
      if (PATCH) {
        patchedExec = function exec(string) {
          var re = this;
          var state = getInternalState(re);
          var str = toString(string);
          var raw = state.raw;
          var result, reCopy, lastIndex, match, i, object, group;
          if (raw) {
            raw.lastIndex = re.lastIndex;
            result = call(patchedExec, raw, str);
            re.lastIndex = raw.lastIndex;
            return result;
          }
          var groups = state.groups;
          var sticky = UNSUPPORTED_Y && re.sticky;
          var flags = call(regexpFlags, re);
          var source = re.source;
          var charsAdded = 0;
          var strCopy = str;
          if (sticky) {
            flags = replace(flags, "y", "");
            if (indexOf(flags, "g") === -1) {
              flags += "g";
            }
            strCopy = stringSlice(str, re.lastIndex);
            if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== "\n")) {
              source = "(?: " + source + ")";
              strCopy = " " + strCopy;
              charsAdded++;
            }
            reCopy = new RegExp("^(?:" + source + ")", flags);
          }
          if (NPCG_INCLUDED) {
            reCopy = new RegExp("^" + source + "$(?!\\s)", flags);
          }
          if (UPDATES_LAST_INDEX_WRONG)
            lastIndex = re.lastIndex;
          match = call(nativeExec, sticky ? reCopy : re, strCopy);
          if (sticky) {
            if (match) {
              match.input = stringSlice(match.input, charsAdded);
              match[0] = stringSlice(match[0], charsAdded);
              match.index = re.lastIndex;
              re.lastIndex += match[0].length;
            } else
              re.lastIndex = 0;
          } else if (UPDATES_LAST_INDEX_WRONG && match) {
            re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
          }
          if (NPCG_INCLUDED && match && match.length > 1) {
            call(nativeReplace, match[0], reCopy, function() {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === void 0)
                  match[i] = void 0;
              }
            });
          }
          if (match && groups) {
            match.groups = object = create(null);
            for (i = 0; i < groups.length; i++) {
              group = groups[i];
              object[group[0]] = match[group[1]];
            }
          }
          return match;
        };
      }
      module.exports = patchedExec;
    }
  });

  // node_modules/core-js/modules/es.regexp.exec.js
  var require_es_regexp_exec = __commonJS({
    "node_modules/core-js/modules/es.regexp.exec.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var exec = require_regexp_exec();
      $({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
        exec
      });
    }
  });

  // node_modules/core-js/modules/es.regexp.flags.js
  var require_es_regexp_flags = __commonJS({
    "node_modules/core-js/modules/es.regexp.flags.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var DESCRIPTORS = require_descriptors();
      var objectDefinePropertyModule = require_object_define_property();
      var regExpFlags = require_regexp_flags();
      var fails = require_fails();
      var RegExpPrototype = RegExp.prototype;
      var FORCED = DESCRIPTORS && fails(function() {
        return Object.getOwnPropertyDescriptor(RegExpPrototype, "flags").get.call({ dotAll: true, sticky: true }) !== "sy";
      });
      if (FORCED)
        objectDefinePropertyModule.f(RegExpPrototype, "flags", {
          configurable: true,
          get: regExpFlags
        });
    }
  });

  // node_modules/core-js/modules/es.regexp.sticky.js
  var require_es_regexp_sticky = __commonJS({
    "node_modules/core-js/modules/es.regexp.sticky.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var DESCRIPTORS = require_descriptors();
      var MISSED_STICKY = require_regexp_sticky_helpers().MISSED_STICKY;
      var classof = require_classof_raw();
      var defineProperty = require_object_define_property().f;
      var getInternalState = require_internal_state().get;
      var RegExpPrototype = RegExp.prototype;
      var TypeError2 = global2.TypeError;
      if (DESCRIPTORS && MISSED_STICKY) {
        defineProperty(RegExpPrototype, "sticky", {
          configurable: true,
          get: function() {
            if (this === RegExpPrototype)
              return void 0;
            if (classof(this) === "RegExp") {
              return !!getInternalState(this).sticky;
            }
            throw TypeError2("Incompatible receiver, RegExp required");
          }
        });
      }
    }
  });

  // node_modules/core-js/modules/es.regexp.test.js
  var require_es_regexp_test = __commonJS({
    "node_modules/core-js/modules/es.regexp.test.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      require_es_regexp_exec();
      var $ = require_export();
      var global2 = require_global();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var isCallable = require_is_callable();
      var isObject2 = require_is_object();
      var DELEGATES_TO_EXEC = function() {
        var execCalled = false;
        var re = /[ac]/;
        re.exec = function() {
          execCalled = true;
          return /./.exec.apply(this, arguments);
        };
        return re.test("abc") === true && execCalled;
      }();
      var Error2 = global2.Error;
      var un$Test = uncurryThis(/./.test);
      $({ target: "RegExp", proto: true, forced: !DELEGATES_TO_EXEC }, {
        test: function(str) {
          var exec = this.exec;
          if (!isCallable(exec))
            return un$Test(this, str);
          var result = call(exec, this, str);
          if (result !== null && !isObject2(result)) {
            throw new Error2("RegExp exec method returned something other than an Object or null");
          }
          return !!result;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.regexp.to-string.js
  var require_es_regexp_to_string = __commonJS({
    "node_modules/core-js/modules/es.regexp.to-string.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var PROPER_FUNCTION_NAME = require_function_name().PROPER;
      var redefine = require_redefine();
      var anObject = require_an_object();
      var isPrototypeOf = require_object_is_prototype_of();
      var $toString = require_to_string();
      var fails = require_fails();
      var regExpFlags = require_regexp_flags();
      var TO_STRING = "toString";
      var RegExpPrototype = RegExp.prototype;
      var n$ToString = RegExpPrototype[TO_STRING];
      var getFlags = uncurryThis(regExpFlags);
      var NOT_GENERIC = fails(function() {
        return n$ToString.call({ source: "a", flags: "b" }) != "/a/b";
      });
      var INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING;
      if (NOT_GENERIC || INCORRECT_NAME) {
        redefine(RegExp.prototype, TO_STRING, function toString() {
          var R = anObject(this);
          var p = $toString(R.source);
          var rf = R.flags;
          var f = $toString(rf === void 0 && isPrototypeOf(RegExpPrototype, R) && !("flags" in RegExpPrototype) ? getFlags(R) : rf);
          return "/" + p + "/" + f;
        }, { unsafe: true });
      }
    }
  });

  // node_modules/core-js/modules/es.set.js
  var require_es_set = __commonJS({
    "node_modules/core-js/modules/es.set.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var collection = require_collection();
      var collectionStrong = require_collection_strong();
      collection("Set", function(init) {
        return function Set2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      }, collectionStrong);
    }
  });

  // node_modules/core-js/modules/es.string.at-alternative.js
  var require_es_string_at_alternative = __commonJS({
    "node_modules/core-js/modules/es.string.at-alternative.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var requireObjectCoercible = require_require_object_coercible();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var fails = require_fails();
      var charAt = uncurryThis("".charAt);
      var FORCED = fails(function() {
        return "\u{20BB7}".at(-2) !== "\uD842";
      });
      $({ target: "String", proto: true, forced: FORCED }, {
        at: function at(index) {
          var S = toString(requireObjectCoercible(this));
          var len = S.length;
          var relativeIndex = toIntegerOrInfinity(index);
          var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
          return k < 0 || k >= len ? void 0 : charAt(S, k);
        }
      });
    }
  });

  // node_modules/core-js/internals/string-multibyte.js
  var require_string_multibyte = __commonJS({
    "node_modules/core-js/internals/string-multibyte.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var stringSlice = uncurryThis("".slice);
      var createMethod = function(CONVERT_TO_STRING) {
        return function($this, pos) {
          var S = toString(requireObjectCoercible($this));
          var position = toIntegerOrInfinity(pos);
          var size = S.length;
          var first, second;
          if (position < 0 || position >= size)
            return CONVERT_TO_STRING ? "" : void 0;
          first = charCodeAt(S, position);
          return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
        };
      };
      module.exports = {
        codeAt: createMethod(false),
        charAt: createMethod(true)
      };
    }
  });

  // node_modules/core-js/modules/es.string.code-point-at.js
  var require_es_string_code_point_at = __commonJS({
    "node_modules/core-js/modules/es.string.code-point-at.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var codeAt = require_string_multibyte().codeAt;
      $({ target: "String", proto: true }, {
        codePointAt: function codePointAt(pos) {
          return codeAt(this, pos);
        }
      });
    }
  });

  // node_modules/core-js/internals/not-a-regexp.js
  var require_not_a_regexp = __commonJS({
    "node_modules/core-js/internals/not-a-regexp.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var isRegExp = require_is_regexp();
      var TypeError2 = global2.TypeError;
      module.exports = function(it) {
        if (isRegExp(it)) {
          throw TypeError2("The method doesn't accept regular expressions");
        }
        return it;
      };
    }
  });

  // node_modules/core-js/internals/correct-is-regexp-logic.js
  var require_correct_is_regexp_logic = __commonJS({
    "node_modules/core-js/internals/correct-is-regexp-logic.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var wellKnownSymbol = require_well_known_symbol();
      var MATCH = wellKnownSymbol("match");
      module.exports = function(METHOD_NAME) {
        var regexp = /./;
        try {
          "/./"[METHOD_NAME](regexp);
        } catch (error1) {
          try {
            regexp[MATCH] = false;
            return "/./"[METHOD_NAME](regexp);
          } catch (error2) {
          }
        }
        return false;
      };
    }
  });

  // node_modules/core-js/modules/es.string.ends-with.js
  var require_es_string_ends_with = __commonJS({
    "node_modules/core-js/modules/es.string.ends-with.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var toLength = require_to_length();
      var toString = require_to_string();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      var IS_PURE = require_is_pure();
      var un$EndsWith = uncurryThis("".endsWith);
      var slice = uncurryThis("".slice);
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("endsWith");
      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
        var descriptor = getOwnPropertyDescriptor(String.prototype, "endsWith");
        return descriptor && !descriptor.writable;
      }();
      $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
        endsWith: function endsWith(searchString) {
          var that = toString(requireObjectCoercible(this));
          notARegExp(searchString);
          var endPosition = arguments.length > 1 ? arguments[1] : void 0;
          var len = that.length;
          var end = endPosition === void 0 ? len : min(toLength(endPosition), len);
          var search = toString(searchString);
          return un$EndsWith ? un$EndsWith(that, search, end) : slice(that, end - search.length, end) === search;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.from-code-point.js
  var require_es_string_from_code_point = __commonJS({
    "node_modules/core-js/modules/es.string.from-code-point.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var toAbsoluteIndex = require_to_absolute_index();
      var RangeError = global2.RangeError;
      var fromCharCode = String.fromCharCode;
      var $fromCodePoint = String.fromCodePoint;
      var join = uncurryThis([].join);
      var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;
      $({ target: "String", stat: true, forced: INCORRECT_LENGTH }, {
        fromCodePoint: function fromCodePoint(x) {
          var elements = [];
          var length = arguments.length;
          var i = 0;
          var code;
          while (length > i) {
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 1114111) !== code)
              throw RangeError(code + " is not a valid code point");
            elements[i] = code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
          }
          return join(elements, "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.includes.js
  var require_es_string_includes = __commonJS({
    "node_modules/core-js/modules/es.string.includes.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var toString = require_to_string();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      var stringIndexOf = uncurryThis("".indexOf);
      $({ target: "String", proto: true, forced: !correctIsRegExpLogic("includes") }, {
        includes: function includes(searchString) {
          return !!~stringIndexOf(toString(requireObjectCoercible(this)), toString(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.iterator.js
  var require_es_string_iterator = __commonJS({
    "node_modules/core-js/modules/es.string.iterator.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var charAt = require_string_multibyte().charAt;
      var toString = require_to_string();
      var InternalStateModule = require_internal_state();
      var defineIterator = require_define_iterator();
      var STRING_ITERATOR = "String Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
      defineIterator(String, "String", function(iterated) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: toString(iterated),
          index: 0
        });
      }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length)
          return { value: void 0, done: true };
        point = charAt(string, index);
        state.index += point.length;
        return { value: point, done: false };
      });
    }
  });

  // node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js
  var require_fix_regexp_well_known_symbol_logic = __commonJS({
    "node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      require_es_regexp_exec();
      var uncurryThis = require_function_uncurry_this();
      var redefine = require_redefine();
      var regexpExec = require_regexp_exec();
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var SPECIES = wellKnownSymbol("species");
      var RegExpPrototype = RegExp.prototype;
      module.exports = function(KEY, exec, FORCED, SHAM) {
        var SYMBOL = wellKnownSymbol(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function() {
          var O = {};
          O[SYMBOL] = function() {
            return 7;
          };
          return ""[KEY](O) != 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
          var execCalled = false;
          var re = /a/;
          if (KEY === "split") {
            re = {};
            re.constructor = {};
            re.constructor[SPECIES] = function() {
              return re;
            };
            re.flags = "";
            re[SYMBOL] = /./[SYMBOL];
          }
          re.exec = function() {
            execCalled = true;
            return null;
          };
          re[SYMBOL]("");
          return !execCalled;
        });
        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
          var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);
          var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
            var uncurriedNativeMethod = uncurryThis(nativeMethod);
            var $exec = regexp.exec;
            if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
              }
              return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
            }
            return { done: false };
          });
          redefine(String.prototype, KEY, methods[0]);
          redefine(RegExpPrototype, SYMBOL, methods[1]);
        }
        if (SHAM)
          createNonEnumerableProperty(RegExpPrototype[SYMBOL], "sham", true);
      };
    }
  });

  // node_modules/core-js/internals/advance-string-index.js
  var require_advance_string_index = __commonJS({
    "node_modules/core-js/internals/advance-string-index.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var charAt = require_string_multibyte().charAt;
      module.exports = function(S, index, unicode) {
        return index + (unicode ? charAt(S, index).length : 1);
      };
    }
  });

  // node_modules/core-js/internals/regexp-exec-abstract.js
  var require_regexp_exec_abstract = __commonJS({
    "node_modules/core-js/internals/regexp-exec-abstract.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var call = require_function_call();
      var anObject = require_an_object();
      var isCallable = require_is_callable();
      var classof = require_classof_raw();
      var regexpExec = require_regexp_exec();
      var TypeError2 = global2.TypeError;
      module.exports = function(R, S) {
        var exec = R.exec;
        if (isCallable(exec)) {
          var result = call(exec, R, S);
          if (result !== null)
            anObject(result);
          return result;
        }
        if (classof(R) === "RegExp")
          return call(regexpExec, R, S);
        throw TypeError2("RegExp#exec called on incompatible receiver");
      };
    }
  });

  // node_modules/core-js/modules/es.string.match.js
  var require_es_string_match = __commonJS({
    "node_modules/core-js/modules/es.string.match.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var call = require_function_call();
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var anObject = require_an_object();
      var toLength = require_to_length();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var getMethod = require_get_method();
      var advanceStringIndex = require_advance_string_index();
      var regExpExec = require_regexp_exec_abstract();
      fixRegExpWellKnownSymbolLogic("match", function(MATCH, nativeMatch, maybeCallNative) {
        return [
          function match(regexp) {
            var O = requireObjectCoercible(this);
            var matcher = regexp == void 0 ? void 0 : getMethod(regexp, MATCH);
            return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
          },
          function(string) {
            var rx = anObject(this);
            var S = toString(string);
            var res = maybeCallNative(nativeMatch, rx, S);
            if (res.done)
              return res.value;
            if (!rx.global)
              return regExpExec(rx, S);
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
            var A = [];
            var n = 0;
            var result;
            while ((result = regExpExec(rx, S)) !== null) {
              var matchStr = toString(result[0]);
              A[n] = matchStr;
              if (matchStr === "")
                rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
              n++;
            }
            return n === 0 ? null : A;
          }
        ];
      });
    }
  });

  // node_modules/core-js/modules/es.string.match-all.js
  var require_es_string_match_all = __commonJS({
    "node_modules/core-js/modules/es.string.match-all.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var createIteratorConstructor = require_create_iterator_constructor();
      var requireObjectCoercible = require_require_object_coercible();
      var toLength = require_to_length();
      var toString = require_to_string();
      var anObject = require_an_object();
      var classof = require_classof_raw();
      var isPrototypeOf = require_object_is_prototype_of();
      var isRegExp = require_is_regexp();
      var regExpFlags = require_regexp_flags();
      var getMethod = require_get_method();
      var redefine = require_redefine();
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var speciesConstructor = require_species_constructor();
      var advanceStringIndex = require_advance_string_index();
      var regExpExec = require_regexp_exec_abstract();
      var InternalStateModule = require_internal_state();
      var IS_PURE = require_is_pure();
      var MATCH_ALL = wellKnownSymbol("matchAll");
      var REGEXP_STRING = "RegExp String";
      var REGEXP_STRING_ITERATOR = REGEXP_STRING + " Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
      var RegExpPrototype = RegExp.prototype;
      var TypeError2 = global2.TypeError;
      var getFlags = uncurryThis(regExpFlags);
      var stringIndexOf = uncurryThis("".indexOf);
      var un$MatchAll = uncurryThis("".matchAll);
      var WORKS_WITH_NON_GLOBAL_REGEX = !!un$MatchAll && !fails(function() {
        un$MatchAll("a", /./);
      });
      var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, $global, fullUnicode) {
        setInternalState(this, {
          type: REGEXP_STRING_ITERATOR,
          regexp,
          string,
          global: $global,
          unicode: fullUnicode,
          done: false
        });
      }, REGEXP_STRING, function next() {
        var state = getInternalState(this);
        if (state.done)
          return { value: void 0, done: true };
        var R = state.regexp;
        var S = state.string;
        var match = regExpExec(R, S);
        if (match === null)
          return { value: void 0, done: state.done = true };
        if (state.global) {
          if (toString(match[0]) === "")
            R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
          return { value: match, done: false };
        }
        state.done = true;
        return { value: match, done: false };
      });
      var $matchAll = function(string) {
        var R = anObject(this);
        var S = toString(string);
        var C, flagsValue, flags, matcher, $global, fullUnicode;
        C = speciesConstructor(R, RegExp);
        flagsValue = R.flags;
        if (flagsValue === void 0 && isPrototypeOf(RegExpPrototype, R) && !("flags" in RegExpPrototype)) {
          flagsValue = getFlags(R);
        }
        flags = flagsValue === void 0 ? "" : toString(flagsValue);
        matcher = new C(C === RegExp ? R.source : R, flags);
        $global = !!~stringIndexOf(flags, "g");
        fullUnicode = !!~stringIndexOf(flags, "u");
        matcher.lastIndex = toLength(R.lastIndex);
        return new $RegExpStringIterator(matcher, S, $global, fullUnicode);
      };
      $({ target: "String", proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {
        matchAll: function matchAll(regexp) {
          var O = requireObjectCoercible(this);
          var flags, S, matcher, rx;
          if (regexp != null) {
            if (isRegExp(regexp)) {
              flags = toString(requireObjectCoercible("flags" in RegExpPrototype ? regexp.flags : getFlags(regexp)));
              if (!~stringIndexOf(flags, "g"))
                throw TypeError2("`.matchAll` does not allow non-global regexes");
            }
            if (WORKS_WITH_NON_GLOBAL_REGEX)
              return un$MatchAll(O, regexp);
            matcher = getMethod(regexp, MATCH_ALL);
            if (matcher === void 0 && IS_PURE && classof(regexp) == "RegExp")
              matcher = $matchAll;
            if (matcher)
              return call(matcher, regexp, O);
          } else if (WORKS_WITH_NON_GLOBAL_REGEX)
            return un$MatchAll(O, regexp);
          S = toString(O);
          rx = new RegExp(regexp, "g");
          return IS_PURE ? call($matchAll, rx, S) : rx[MATCH_ALL](S);
        }
      });
      IS_PURE || MATCH_ALL in RegExpPrototype || redefine(RegExpPrototype, MATCH_ALL, $matchAll);
    }
  });

  // node_modules/core-js/internals/string-pad-webkit-bug.js
  var require_string_pad_webkit_bug = __commonJS({
    "node_modules/core-js/internals/string-pad-webkit-bug.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var userAgent = require_engine_user_agent();
      module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);
    }
  });

  // node_modules/core-js/modules/es.string.pad-end.js
  var require_es_string_pad_end = __commonJS({
    "node_modules/core-js/modules/es.string.pad-end.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $padEnd = require_string_pad().end;
      var WEBKIT_BUG = require_string_pad_webkit_bug();
      $({ target: "String", proto: true, forced: WEBKIT_BUG }, {
        padEnd: function padEnd(maxLength) {
          return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.pad-start.js
  var require_es_string_pad_start = __commonJS({
    "node_modules/core-js/modules/es.string.pad-start.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $padStart = require_string_pad().start;
      var WEBKIT_BUG = require_string_pad_webkit_bug();
      $({ target: "String", proto: true, forced: WEBKIT_BUG }, {
        padStart: function padStart(maxLength) {
          return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : void 0);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.raw.js
  var require_es_string_raw = __commonJS({
    "node_modules/core-js/modules/es.string.raw.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var toIndexedObject = require_to_indexed_object();
      var toObject = require_to_object();
      var toString = require_to_string();
      var lengthOfArrayLike = require_length_of_array_like();
      var push = uncurryThis([].push);
      var join = uncurryThis([].join);
      $({ target: "String", stat: true }, {
        raw: function raw(template) {
          var rawTemplate = toIndexedObject(toObject(template).raw);
          var literalSegments = lengthOfArrayLike(rawTemplate);
          var argumentsLength = arguments.length;
          var elements = [];
          var i = 0;
          while (literalSegments > i) {
            push(elements, toString(rawTemplate[i++]));
            if (i === literalSegments)
              return join(elements, "");
            if (i < argumentsLength)
              push(elements, toString(arguments[i]));
          }
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.repeat.js
  var require_es_string_repeat = __commonJS({
    "node_modules/core-js/modules/es.string.repeat.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var repeat = require_string_repeat();
      $({ target: "String", proto: true }, {
        repeat
      });
    }
  });

  // node_modules/core-js/internals/get-substitution.js
  var require_get_substitution = __commonJS({
    "node_modules/core-js/internals/get-substitution.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var toObject = require_to_object();
      var floor = Math.floor;
      var charAt = uncurryThis("".charAt);
      var replace = uncurryThis("".replace);
      var stringSlice = uncurryThis("".slice);
      var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
      module.exports = function(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
        if (namedCaptures !== void 0) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }
        return replace(replacement, symbols, function(match, ch) {
          var capture;
          switch (charAt(ch, 0)) {
            case "$":
              return "$";
            case "&":
              return matched;
            case "`":
              return stringSlice(str, 0, position);
            case "'":
              return stringSlice(str, tailPos);
            case "<":
              capture = namedCaptures[stringSlice(ch, 1, -1)];
              break;
            default:
              var n = +ch;
              if (n === 0)
                return match;
              if (n > m) {
                var f = floor(n / 10);
                if (f === 0)
                  return match;
                if (f <= m)
                  return captures[f - 1] === void 0 ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
                return match;
              }
              capture = captures[n - 1];
          }
          return capture === void 0 ? "" : capture;
        });
      };
    }
  });

  // node_modules/core-js/modules/es.string.replace.js
  var require_es_string_replace = __commonJS({
    "node_modules/core-js/modules/es.string.replace.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var apply = require_function_apply();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var fails = require_fails();
      var anObject = require_an_object();
      var isCallable = require_is_callable();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toLength = require_to_length();
      var toString = require_to_string();
      var requireObjectCoercible = require_require_object_coercible();
      var advanceStringIndex = require_advance_string_index();
      var getMethod = require_get_method();
      var getSubstitution = require_get_substitution();
      var regExpExec = require_regexp_exec_abstract();
      var wellKnownSymbol = require_well_known_symbol();
      var REPLACE = wellKnownSymbol("replace");
      var max = Math.max;
      var min = Math.min;
      var concat3 = uncurryThis([].concat);
      var push = uncurryThis([].push);
      var stringIndexOf = uncurryThis("".indexOf);
      var stringSlice = uncurryThis("".slice);
      var maybeToString = function(it) {
        return it === void 0 ? it : String(it);
      };
      var REPLACE_KEEPS_$0 = function() {
        return "a".replace(/./, "$0") === "$0";
      }();
      var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
        if (/./[REPLACE]) {
          return /./[REPLACE]("a", "$0") === "";
        }
        return false;
      }();
      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
        var re = /./;
        re.exec = function() {
          var result = [];
          result.groups = { a: "7" };
          return result;
        };
        return "".replace(re, "$<a>") !== "7";
      });
      fixRegExpWellKnownSymbolLogic("replace", function(_, nativeReplace, maybeCallNative) {
        var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
        return [
          function replace(searchValue, replaceValue) {
            var O = requireObjectCoercible(this);
            var replacer = searchValue == void 0 ? void 0 : getMethod(searchValue, REPLACE);
            return replacer ? call(replacer, searchValue, O, replaceValue) : call(nativeReplace, toString(O), searchValue, replaceValue);
          },
          function(string, replaceValue) {
            var rx = anObject(this);
            var S = toString(string);
            if (typeof replaceValue == "string" && stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 && stringIndexOf(replaceValue, "$<") === -1) {
              var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
              if (res.done)
                return res.value;
            }
            var functionalReplace = isCallable(replaceValue);
            if (!functionalReplace)
              replaceValue = toString(replaceValue);
            var global2 = rx.global;
            if (global2) {
              var fullUnicode = rx.unicode;
              rx.lastIndex = 0;
            }
            var results = [];
            while (true) {
              var result = regExpExec(rx, S);
              if (result === null)
                break;
              push(results, result);
              if (!global2)
                break;
              var matchStr = toString(result[0]);
              if (matchStr === "")
                rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }
            var accumulatedResult = "";
            var nextSourcePosition = 0;
            for (var i = 0; i < results.length; i++) {
              result = results[i];
              var matched = toString(result[0]);
              var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
              var captures = [];
              for (var j = 1; j < result.length; j++)
                push(captures, maybeToString(result[j]));
              var namedCaptures = result.groups;
              if (functionalReplace) {
                var replacerArgs = concat3([matched], captures, position, S);
                if (namedCaptures !== void 0)
                  push(replacerArgs, namedCaptures);
                var replacement = toString(apply(replaceValue, void 0, replacerArgs));
              } else {
                replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
              }
              if (position >= nextSourcePosition) {
                accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
                nextSourcePosition = position + matched.length;
              }
            }
            return accumulatedResult + stringSlice(S, nextSourcePosition);
          }
        ];
      }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);
    }
  });

  // node_modules/core-js/modules/es.string.replace-all.js
  var require_es_string_replace_all = __commonJS({
    "node_modules/core-js/modules/es.string.replace-all.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var requireObjectCoercible = require_require_object_coercible();
      var isCallable = require_is_callable();
      var isRegExp = require_is_regexp();
      var toString = require_to_string();
      var getMethod = require_get_method();
      var regExpFlags = require_regexp_flags();
      var getSubstitution = require_get_substitution();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var REPLACE = wellKnownSymbol("replace");
      var RegExpPrototype = RegExp.prototype;
      var TypeError2 = global2.TypeError;
      var getFlags = uncurryThis(regExpFlags);
      var indexOf = uncurryThis("".indexOf);
      var replace = uncurryThis("".replace);
      var stringSlice = uncurryThis("".slice);
      var max = Math.max;
      var stringIndexOf = function(string, searchValue, fromIndex) {
        if (fromIndex > string.length)
          return -1;
        if (searchValue === "")
          return fromIndex;
        return indexOf(string, searchValue, fromIndex);
      };
      $({ target: "String", proto: true }, {
        replaceAll: function replaceAll(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
          var position = 0;
          var endOfLastMatch = 0;
          var result = "";
          if (searchValue != null) {
            IS_REG_EXP = isRegExp(searchValue);
            if (IS_REG_EXP) {
              flags = toString(requireObjectCoercible("flags" in RegExpPrototype ? searchValue.flags : getFlags(searchValue)));
              if (!~indexOf(flags, "g"))
                throw TypeError2("`.replaceAll` does not allow non-global regexes");
            }
            replacer = getMethod(searchValue, REPLACE);
            if (replacer) {
              return call(replacer, searchValue, O, replaceValue);
            } else if (IS_PURE && IS_REG_EXP) {
              return replace(toString(O), searchValue, replaceValue);
            }
          }
          string = toString(O);
          searchString = toString(searchValue);
          functionalReplace = isCallable(replaceValue);
          if (!functionalReplace)
            replaceValue = toString(replaceValue);
          searchLength = searchString.length;
          advanceBy = max(1, searchLength);
          position = stringIndexOf(string, searchString, 0);
          while (position !== -1) {
            replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], void 0, replaceValue);
            result += stringSlice(string, endOfLastMatch, position) + replacement;
            endOfLastMatch = position + searchLength;
            position = stringIndexOf(string, searchString, position + advanceBy);
          }
          if (endOfLastMatch < string.length) {
            result += stringSlice(string, endOfLastMatch);
          }
          return result;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.search.js
  var require_es_string_search = __commonJS({
    "node_modules/core-js/modules/es.string.search.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var call = require_function_call();
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var anObject = require_an_object();
      var requireObjectCoercible = require_require_object_coercible();
      var sameValue = require_same_value();
      var toString = require_to_string();
      var getMethod = require_get_method();
      var regExpExec = require_regexp_exec_abstract();
      fixRegExpWellKnownSymbolLogic("search", function(SEARCH, nativeSearch, maybeCallNative) {
        return [
          function search(regexp) {
            var O = requireObjectCoercible(this);
            var searcher = regexp == void 0 ? void 0 : getMethod(regexp, SEARCH);
            return searcher ? call(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString(O));
          },
          function(string) {
            var rx = anObject(this);
            var S = toString(string);
            var res = maybeCallNative(nativeSearch, rx, S);
            if (res.done)
              return res.value;
            var previousLastIndex = rx.lastIndex;
            if (!sameValue(previousLastIndex, 0))
              rx.lastIndex = 0;
            var result = regExpExec(rx, S);
            if (!sameValue(rx.lastIndex, previousLastIndex))
              rx.lastIndex = previousLastIndex;
            return result === null ? -1 : result.index;
          }
        ];
      });
    }
  });

  // node_modules/core-js/modules/es.string.split.js
  var require_es_string_split = __commonJS({
    "node_modules/core-js/modules/es.string.split.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var apply = require_function_apply();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var fixRegExpWellKnownSymbolLogic = require_fix_regexp_well_known_symbol_logic();
      var isRegExp = require_is_regexp();
      var anObject = require_an_object();
      var requireObjectCoercible = require_require_object_coercible();
      var speciesConstructor = require_species_constructor();
      var advanceStringIndex = require_advance_string_index();
      var toLength = require_to_length();
      var toString = require_to_string();
      var getMethod = require_get_method();
      var arraySlice2 = require_array_slice_simple();
      var callRegExpExec = require_regexp_exec_abstract();
      var regexpExec = require_regexp_exec();
      var stickyHelpers = require_regexp_sticky_helpers();
      var fails = require_fails();
      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
      var MAX_UINT32 = 4294967295;
      var min = Math.min;
      var $push = [].push;
      var exec = uncurryThis(/./.exec);
      var push = uncurryThis($push);
      var stringSlice = uncurryThis("".slice);
      var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
        var re = /(?:)/;
        var originalExec = re.exec;
        re.exec = function() {
          return originalExec.apply(this, arguments);
        };
        var result = "ab".split(re);
        return result.length !== 2 || result[0] !== "a" || result[1] !== "b";
      });
      fixRegExpWellKnownSymbolLogic("split", function(SPLIT, nativeSplit, maybeCallNative) {
        var internalSplit;
        if ("abbc".split(/(b)*/)[1] == "c" || "test".split(/(?:)/, -1).length != 4 || "ab".split(/(?:ab)*/).length != 2 || ".".split(/(.?)(.?)/).length != 4 || ".".split(/()()/).length > 1 || "".split(/.?/).length) {
          internalSplit = function(separator, limit) {
            var string = toString(requireObjectCoercible(this));
            var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
            if (lim === 0)
              return [];
            if (separator === void 0)
              return [string];
            if (!isRegExp(separator)) {
              return call(nativeSplit, string, separator, lim);
            }
            var output = [];
            var flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.unicode ? "u" : "") + (separator.sticky ? "y" : "");
            var lastLastIndex = 0;
            var separatorCopy = new RegExp(separator.source, flags + "g");
            var match, lastIndex, lastLength;
            while (match = call(regexpExec, separatorCopy, string)) {
              lastIndex = separatorCopy.lastIndex;
              if (lastIndex > lastLastIndex) {
                push(output, stringSlice(string, lastLastIndex, match.index));
                if (match.length > 1 && match.index < string.length)
                  apply($push, output, arraySlice2(match, 1));
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= lim)
                  break;
              }
              if (separatorCopy.lastIndex === match.index)
                separatorCopy.lastIndex++;
            }
            if (lastLastIndex === string.length) {
              if (lastLength || !exec(separatorCopy, ""))
                push(output, "");
            } else
              push(output, stringSlice(string, lastLastIndex));
            return output.length > lim ? arraySlice2(output, 0, lim) : output;
          };
        } else if ("0".split(void 0, 0).length) {
          internalSplit = function(separator, limit) {
            return separator === void 0 && limit === 0 ? [] : call(nativeSplit, this, separator, limit);
          };
        } else
          internalSplit = nativeSplit;
        return [
          function split(separator, limit) {
            var O = requireObjectCoercible(this);
            var splitter = separator == void 0 ? void 0 : getMethod(separator, SPLIT);
            return splitter ? call(splitter, separator, O, limit) : call(internalSplit, toString(O), separator, limit);
          },
          function(string, limit) {
            var rx = anObject(this);
            var S = toString(string);
            var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);
            if (res.done)
              return res.value;
            var C = speciesConstructor(rx, RegExp);
            var unicodeMatching = rx.unicode;
            var flags = (rx.ignoreCase ? "i" : "") + (rx.multiline ? "m" : "") + (rx.unicode ? "u" : "") + (UNSUPPORTED_Y ? "g" : "y");
            var splitter = new C(UNSUPPORTED_Y ? "^(?:" + rx.source + ")" : rx, flags);
            var lim = limit === void 0 ? MAX_UINT32 : limit >>> 0;
            if (lim === 0)
              return [];
            if (S.length === 0)
              return callRegExpExec(splitter, S) === null ? [S] : [];
            var p = 0;
            var q = 0;
            var A = [];
            while (q < S.length) {
              splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
              var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);
              var e;
              if (z === null || (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) {
                q = advanceStringIndex(S, q, unicodeMatching);
              } else {
                push(A, stringSlice(S, p, q));
                if (A.length === lim)
                  return A;
                for (var i = 1; i <= z.length - 1; i++) {
                  push(A, z[i]);
                  if (A.length === lim)
                    return A;
                }
                q = p = e;
              }
            }
            push(A, stringSlice(S, p));
            return A;
          }
        ];
      }, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);
    }
  });

  // node_modules/core-js/modules/es.string.starts-with.js
  var require_es_string_starts_with = __commonJS({
    "node_modules/core-js/modules/es.string.starts-with.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
      var toLength = require_to_length();
      var toString = require_to_string();
      var notARegExp = require_not_a_regexp();
      var requireObjectCoercible = require_require_object_coercible();
      var correctIsRegExpLogic = require_correct_is_regexp_logic();
      var IS_PURE = require_is_pure();
      var un$StartsWith = uncurryThis("".startsWith);
      var stringSlice = uncurryThis("".slice);
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
        var descriptor = getOwnPropertyDescriptor(String.prototype, "startsWith");
        return descriptor && !descriptor.writable;
      }();
      $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
        startsWith: function startsWith2(searchString) {
          var that = toString(requireObjectCoercible(this));
          notARegExp(searchString);
          var index = toLength(min(arguments.length > 1 ? arguments[1] : void 0, that.length));
          var search = toString(searchString);
          return un$StartsWith ? un$StartsWith(that, search, index) : stringSlice(that, index, index + search.length) === search;
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.substr.js
  var require_es_string_substr = __commonJS({
    "node_modules/core-js/modules/es.string.substr.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var requireObjectCoercible = require_require_object_coercible();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var toString = require_to_string();
      var stringSlice = uncurryThis("".slice);
      var max = Math.max;
      var min = Math.min;
      var FORCED = !"".substr || "ab".substr(-1) !== "b";
      $({ target: "String", proto: true, forced: FORCED }, {
        substr: function substr(start, length) {
          var that = toString(requireObjectCoercible(this));
          var size = that.length;
          var intStart = toIntegerOrInfinity(start);
          var intLength, intEnd;
          if (intStart === Infinity)
            intStart = 0;
          if (intStart < 0)
            intStart = max(size + intStart, 0);
          intLength = length === void 0 ? size : toIntegerOrInfinity(length);
          if (intLength <= 0 || intLength === Infinity)
            return "";
          intEnd = min(intStart + intLength, size);
          return intStart >= intEnd ? "" : stringSlice(that, intStart, intEnd);
        }
      });
    }
  });

  // node_modules/core-js/internals/string-trim-forced.js
  var require_string_trim_forced = __commonJS({
    "node_modules/core-js/internals/string-trim-forced.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var PROPER_FUNCTION_NAME = require_function_name().PROPER;
      var fails = require_fails();
      var whitespaces = require_whitespaces();
      var non = "\u200B\x85\u180E";
      module.exports = function(METHOD_NAME) {
        return fails(function() {
          return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() !== non || PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
      };
    }
  });

  // node_modules/core-js/modules/es.string.trim.js
  var require_es_string_trim = __commonJS({
    "node_modules/core-js/modules/es.string.trim.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $trim = require_string_trim().trim;
      var forcedStringTrimMethod = require_string_trim_forced();
      $({ target: "String", proto: true, forced: forcedStringTrimMethod("trim") }, {
        trim: function trim() {
          return $trim(this);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.trim-end.js
  var require_es_string_trim_end = __commonJS({
    "node_modules/core-js/modules/es.string.trim-end.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $trimEnd = require_string_trim().end;
      var forcedStringTrimMethod = require_string_trim_forced();
      var FORCED = forcedStringTrimMethod("trimEnd");
      var trimEnd = FORCED ? function trimEnd2() {
        return $trimEnd(this);
      } : "".trimEnd;
      $({ target: "String", proto: true, name: "trimEnd", forced: FORCED }, {
        trimEnd,
        trimRight: trimEnd
      });
    }
  });

  // node_modules/core-js/modules/es.string.trim-start.js
  var require_es_string_trim_start = __commonJS({
    "node_modules/core-js/modules/es.string.trim-start.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var $trimStart = require_string_trim().start;
      var forcedStringTrimMethod = require_string_trim_forced();
      var FORCED = forcedStringTrimMethod("trimStart");
      var trimStart = FORCED ? function trimStart2() {
        return $trimStart(this);
      } : "".trimStart;
      $({ target: "String", proto: true, name: "trimStart", forced: FORCED }, {
        trimStart,
        trimLeft: trimStart
      });
    }
  });

  // node_modules/core-js/internals/create-html.js
  var require_create_html = __commonJS({
    "node_modules/core-js/internals/create-html.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var requireObjectCoercible = require_require_object_coercible();
      var toString = require_to_string();
      var quot = /"/g;
      var replace = uncurryThis("".replace);
      module.exports = function(string, tag, attribute, value) {
        var S = toString(requireObjectCoercible(string));
        var p1 = "<" + tag;
        if (attribute !== "")
          p1 += " " + attribute + '="' + replace(toString(value), quot, "&quot;") + '"';
        return p1 + ">" + S + "</" + tag + ">";
      };
    }
  });

  // node_modules/core-js/internals/string-html-forced.js
  var require_string_html_forced = __commonJS({
    "node_modules/core-js/internals/string-html-forced.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      module.exports = function(METHOD_NAME) {
        return fails(function() {
          var test = ""[METHOD_NAME]('"');
          return test !== test.toLowerCase() || test.split('"').length > 3;
        });
      };
    }
  });

  // node_modules/core-js/modules/es.string.anchor.js
  var require_es_string_anchor = __commonJS({
    "node_modules/core-js/modules/es.string.anchor.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("anchor") }, {
        anchor: function anchor(name) {
          return createHTML(this, "a", "name", name);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.big.js
  var require_es_string_big = __commonJS({
    "node_modules/core-js/modules/es.string.big.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("big") }, {
        big: function big() {
          return createHTML(this, "big", "", "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.blink.js
  var require_es_string_blink = __commonJS({
    "node_modules/core-js/modules/es.string.blink.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("blink") }, {
        blink: function blink() {
          return createHTML(this, "blink", "", "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.bold.js
  var require_es_string_bold = __commonJS({
    "node_modules/core-js/modules/es.string.bold.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("bold") }, {
        bold: function bold() {
          return createHTML(this, "b", "", "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.fixed.js
  var require_es_string_fixed = __commonJS({
    "node_modules/core-js/modules/es.string.fixed.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("fixed") }, {
        fixed: function fixed() {
          return createHTML(this, "tt", "", "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.fontcolor.js
  var require_es_string_fontcolor = __commonJS({
    "node_modules/core-js/modules/es.string.fontcolor.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("fontcolor") }, {
        fontcolor: function fontcolor(color) {
          return createHTML(this, "font", "color", color);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.fontsize.js
  var require_es_string_fontsize = __commonJS({
    "node_modules/core-js/modules/es.string.fontsize.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("fontsize") }, {
        fontsize: function fontsize(size) {
          return createHTML(this, "font", "size", size);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.italics.js
  var require_es_string_italics = __commonJS({
    "node_modules/core-js/modules/es.string.italics.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("italics") }, {
        italics: function italics() {
          return createHTML(this, "i", "", "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.link.js
  var require_es_string_link = __commonJS({
    "node_modules/core-js/modules/es.string.link.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("link") }, {
        link: function link(url) {
          return createHTML(this, "a", "href", url);
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.small.js
  var require_es_string_small = __commonJS({
    "node_modules/core-js/modules/es.string.small.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("small") }, {
        small: function small() {
          return createHTML(this, "small", "", "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.strike.js
  var require_es_string_strike = __commonJS({
    "node_modules/core-js/modules/es.string.strike.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("strike") }, {
        strike: function strike() {
          return createHTML(this, "strike", "", "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.sub.js
  var require_es_string_sub = __commonJS({
    "node_modules/core-js/modules/es.string.sub.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("sub") }, {
        sub: function sub() {
          return createHTML(this, "sub", "", "");
        }
      });
    }
  });

  // node_modules/core-js/modules/es.string.sup.js
  var require_es_string_sup = __commonJS({
    "node_modules/core-js/modules/es.string.sup.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var createHTML = require_create_html();
      var forcedStringHTMLMethod = require_string_html_forced();
      $({ target: "String", proto: true, forced: forcedStringHTMLMethod("sup") }, {
        sup: function sup() {
          return createHTML(this, "sup", "", "");
        }
      });
    }
  });

  // node_modules/core-js/internals/typed-array-constructors-require-wrappers.js
  var require_typed_array_constructors_require_wrappers = __commonJS({
    "node_modules/core-js/internals/typed-array-constructors-require-wrappers.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var fails = require_fails();
      var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
      var NATIVE_ARRAY_BUFFER_VIEWS = require_array_buffer_view_core().NATIVE_ARRAY_BUFFER_VIEWS;
      var ArrayBuffer2 = global2.ArrayBuffer;
      var Int8Array2 = global2.Int8Array;
      module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function() {
        Int8Array2(1);
      }) || !fails(function() {
        new Int8Array2(-1);
      }) || !checkCorrectnessOfIteration(function(iterable) {
        new Int8Array2();
        new Int8Array2(null);
        new Int8Array2(1.5);
        new Int8Array2(iterable);
      }, true) || fails(function() {
        return new Int8Array2(new ArrayBuffer2(2), 1, void 0).length !== 1;
      });
    }
  });

  // node_modules/core-js/internals/to-positive-integer.js
  var require_to_positive_integer = __commonJS({
    "node_modules/core-js/internals/to-positive-integer.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var RangeError = global2.RangeError;
      module.exports = function(it) {
        var result = toIntegerOrInfinity(it);
        if (result < 0)
          throw RangeError("The argument can't be less than 0");
        return result;
      };
    }
  });

  // node_modules/core-js/internals/to-offset.js
  var require_to_offset = __commonJS({
    "node_modules/core-js/internals/to-offset.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var toPositiveInteger = require_to_positive_integer();
      var RangeError = global2.RangeError;
      module.exports = function(it, BYTES) {
        var offset = toPositiveInteger(it);
        if (offset % BYTES)
          throw RangeError("Wrong offset");
        return offset;
      };
    }
  });

  // node_modules/core-js/internals/typed-array-from.js
  var require_typed_array_from = __commonJS({
    "node_modules/core-js/internals/typed-array-from.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var bind = require_function_bind_context();
      var call = require_function_call();
      var aConstructor = require_a_constructor();
      var toObject = require_to_object();
      var lengthOfArrayLike = require_length_of_array_like();
      var getIterator = require_get_iterator();
      var getIteratorMethod = require_get_iterator_method();
      var isArrayIteratorMethod = require_is_array_iterator_method();
      var aTypedArrayConstructor = require_array_buffer_view_core().aTypedArrayConstructor;
      module.exports = function from2(source) {
        var C = aConstructor(this);
        var O = toObject(source);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
        var mapping = mapfn !== void 0;
        var iteratorMethod = getIteratorMethod(O);
        var i, length, result, step, iterator2, next;
        if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
          iterator2 = getIterator(O, iteratorMethod);
          next = iterator2.next;
          O = [];
          while (!(step = call(next, iterator2)).done) {
            O.push(step.value);
          }
        }
        if (mapping && argumentsLength > 2) {
          mapfn = bind(mapfn, arguments[2]);
        }
        length = lengthOfArrayLike(O);
        result = new (aTypedArrayConstructor(C))(length);
        for (i = 0; length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }
        return result;
      };
    }
  });

  // node_modules/core-js/internals/typed-array-constructor.js
  var require_typed_array_constructor = __commonJS({
    "node_modules/core-js/internals/typed-array-constructor.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var call = require_function_call();
      var DESCRIPTORS = require_descriptors();
      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require_typed_array_constructors_require_wrappers();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var ArrayBufferModule = require_array_buffer();
      var anInstance = require_an_instance();
      var createPropertyDescriptor = require_create_property_descriptor();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var isIntegralNumber = require_is_integral_number();
      var toLength = require_to_length();
      var toIndex = require_to_index();
      var toOffset = require_to_offset();
      var toPropertyKey = require_to_property_key();
      var hasOwn = require_has_own_property();
      var classof = require_classof();
      var isObject2 = require_is_object();
      var isSymbol = require_is_symbol();
      var create = require_object_create();
      var isPrototypeOf = require_object_is_prototype_of();
      var setPrototypeOf = require_object_set_prototype_of();
      var getOwnPropertyNames = require_object_get_own_property_names().f;
      var typedArrayFrom = require_typed_array_from();
      var forEach = require_array_iteration().forEach;
      var setSpecies = require_set_species();
      var definePropertyModule = require_object_define_property();
      var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
      var InternalStateModule = require_internal_state();
      var inheritIfRequired = require_inherit_if_required();
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var round = Math.round;
      var RangeError = global2.RangeError;
      var ArrayBuffer2 = ArrayBufferModule.ArrayBuffer;
      var ArrayBufferPrototype = ArrayBuffer2.prototype;
      var DataView2 = ArrayBufferModule.DataView;
      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
      var TYPED_ARRAY_CONSTRUCTOR = ArrayBufferViewCore.TYPED_ARRAY_CONSTRUCTOR;
      var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
      var TypedArray = ArrayBufferViewCore.TypedArray;
      var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var isTypedArray = ArrayBufferViewCore.isTypedArray;
      var BYTES_PER_ELEMENT = "BYTES_PER_ELEMENT";
      var WRONG_LENGTH = "Wrong length";
      var fromList = function(C, list) {
        aTypedArrayConstructor(C);
        var index = 0;
        var length = list.length;
        var result = new C(length);
        while (length > index)
          result[index] = list[index++];
        return result;
      };
      var addGetter = function(it, key) {
        nativeDefineProperty(it, key, { get: function() {
          return getInternalState(this)[key];
        } });
      };
      var isArrayBuffer = function(it) {
        var klass;
        return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof(it)) == "ArrayBuffer" || klass == "SharedArrayBuffer";
      };
      var isTypedArrayIndex = function(target, key) {
        return isTypedArray(target) && !isSymbol(key) && key in target && isIntegralNumber(+key) && key >= 0;
      };
      var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
        key = toPropertyKey(key);
        return isTypedArrayIndex(target, key) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
      };
      var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
        key = toPropertyKey(key);
        if (isTypedArrayIndex(target, key) && isObject2(descriptor) && hasOwn(descriptor, "value") && !hasOwn(descriptor, "get") && !hasOwn(descriptor, "set") && !descriptor.configurable && (!hasOwn(descriptor, "writable") || descriptor.writable) && (!hasOwn(descriptor, "enumerable") || descriptor.enumerable)) {
          target[key] = descriptor.value;
          return target;
        }
        return nativeDefineProperty(target, key, descriptor);
      };
      if (DESCRIPTORS) {
        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
          getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
          definePropertyModule.f = wrappedDefineProperty;
          addGetter(TypedArrayPrototype, "buffer");
          addGetter(TypedArrayPrototype, "byteOffset");
          addGetter(TypedArrayPrototype, "byteLength");
          addGetter(TypedArrayPrototype, "length");
        }
        $({ target: "Object", stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
          getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
          defineProperty: wrappedDefineProperty
        });
        module.exports = function(TYPE, wrapper, CLAMPED) {
          var BYTES = TYPE.match(/\d+$/)[0] / 8;
          var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? "Clamped" : "") + "Array";
          var GETTER = "get" + TYPE;
          var SETTER = "set" + TYPE;
          var NativeTypedArrayConstructor = global2[CONSTRUCTOR_NAME];
          var TypedArrayConstructor = NativeTypedArrayConstructor;
          var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
          var exported = {};
          var getter = function(that, index) {
            var data = getInternalState(that);
            return data.view[GETTER](index * BYTES + data.byteOffset, true);
          };
          var setter = function(that, index, value) {
            var data = getInternalState(that);
            if (CLAMPED)
              value = (value = round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;
            data.view[SETTER](index * BYTES + data.byteOffset, value, true);
          };
          var addElement = function(that, index) {
            nativeDefineProperty(that, index, {
              get: function() {
                return getter(this, index);
              },
              set: function(value) {
                return setter(this, index, value);
              },
              enumerable: true
            });
          };
          if (!NATIVE_ARRAY_BUFFER_VIEWS) {
            TypedArrayConstructor = wrapper(function(that, data, offset, $length) {
              anInstance(that, TypedArrayConstructorPrototype);
              var index = 0;
              var byteOffset = 0;
              var buffer, byteLength, length;
              if (!isObject2(data)) {
                length = toIndex(data);
                byteLength = length * BYTES;
                buffer = new ArrayBuffer2(byteLength);
              } else if (isArrayBuffer(data)) {
                buffer = data;
                byteOffset = toOffset(offset, BYTES);
                var $len = data.byteLength;
                if ($length === void 0) {
                  if ($len % BYTES)
                    throw RangeError(WRONG_LENGTH);
                  byteLength = $len - byteOffset;
                  if (byteLength < 0)
                    throw RangeError(WRONG_LENGTH);
                } else {
                  byteLength = toLength($length) * BYTES;
                  if (byteLength + byteOffset > $len)
                    throw RangeError(WRONG_LENGTH);
                }
                length = byteLength / BYTES;
              } else if (isTypedArray(data)) {
                return fromList(TypedArrayConstructor, data);
              } else {
                return call(typedArrayFrom, TypedArrayConstructor, data);
              }
              setInternalState(that, {
                buffer,
                byteOffset,
                byteLength,
                length,
                view: new DataView2(buffer)
              });
              while (index < length)
                addElement(that, index++);
            });
            if (setPrototypeOf)
              setPrototypeOf(TypedArrayConstructor, TypedArray);
            TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
          } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
            TypedArrayConstructor = wrapper(function(dummy, data, typedArrayOffset, $length) {
              anInstance(dummy, TypedArrayConstructorPrototype);
              return inheritIfRequired(function() {
                if (!isObject2(data))
                  return new NativeTypedArrayConstructor(toIndex(data));
                if (isArrayBuffer(data))
                  return $length !== void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== void 0 ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
                if (isTypedArray(data))
                  return fromList(TypedArrayConstructor, data);
                return call(typedArrayFrom, TypedArrayConstructor, data);
              }(), dummy, TypedArrayConstructor);
            });
            if (setPrototypeOf)
              setPrototypeOf(TypedArrayConstructor, TypedArray);
            forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function(key) {
              if (!(key in TypedArrayConstructor)) {
                createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
              }
            });
            TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
          }
          if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, "constructor", TypedArrayConstructor);
          }
          createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_CONSTRUCTOR, TypedArrayConstructor);
          if (TYPED_ARRAY_TAG) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
          }
          exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
          $({
            global: true,
            forced: TypedArrayConstructor != NativeTypedArrayConstructor,
            sham: !NATIVE_ARRAY_BUFFER_VIEWS
          }, exported);
          if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
            createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
          }
          if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
          }
          setSpecies(CONSTRUCTOR_NAME);
        };
      } else
        module.exports = function() {
        };
    }
  });

  // node_modules/core-js/modules/es.typed-array.float32-array.js
  var require_es_typed_array_float32_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.float32-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Float32", function(init) {
        return function Float32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.float64-array.js
  var require_es_typed_array_float64_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.float64-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Float64", function(init) {
        return function Float64Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.int8-array.js
  var require_es_typed_array_int8_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.int8-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Int8", function(init) {
        return function Int8Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.int16-array.js
  var require_es_typed_array_int16_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.int16-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Int16", function(init) {
        return function Int16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.int32-array.js
  var require_es_typed_array_int32_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.int32-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Int32", function(init) {
        return function Int32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.uint8-array.js
  var require_es_typed_array_uint8_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.uint8-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Uint8", function(init) {
        return function Uint8Array2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js
  var require_es_typed_array_uint8_clamped_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.uint8-clamped-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Uint8", function(init) {
        return function Uint8ClampedArray2(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      }, true);
    }
  });

  // node_modules/core-js/modules/es.typed-array.uint16-array.js
  var require_es_typed_array_uint16_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.uint16-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Uint16", function(init) {
        return function Uint16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.uint32-array.js
  var require_es_typed_array_uint32_array = __commonJS({
    "node_modules/core-js/modules/es.typed-array.uint32-array.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var createTypedArrayConstructor = require_typed_array_constructor();
      createTypedArrayConstructor("Uint32", function(init) {
        return function Uint32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.at.js
  var require_es_typed_array_at = __commonJS({
    "node_modules/core-js/modules/es.typed-array.at.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var lengthOfArrayLike = require_length_of_array_like();
      var toIntegerOrInfinity = require_to_integer_or_infinity();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("at", function at(index) {
        var O = aTypedArray(this);
        var len = lengthOfArrayLike(O);
        var relativeIndex = toIntegerOrInfinity(index);
        var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
        return k < 0 || k >= len ? void 0 : O[k];
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.copy-within.js
  var require_es_typed_array_copy_within = __commonJS({
    "node_modules/core-js/modules/es.typed-array.copy-within.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $ArrayCopyWithin = require_array_copy_within();
      var u$ArrayCopyWithin = uncurryThis($ArrayCopyWithin);
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("copyWithin", function copyWithin(target, start) {
        return u$ArrayCopyWithin(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.every.js
  var require_es_typed_array_every = __commonJS({
    "node_modules/core-js/modules/es.typed-array.every.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $every = require_array_iteration().every;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("every", function every(callbackfn) {
        return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.fill.js
  var require_es_typed_array_fill = __commonJS({
    "node_modules/core-js/modules/es.typed-array.fill.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var call = require_function_call();
      var $fill = require_array_fill();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("fill", function fill(value) {
        var length = arguments.length;
        return call($fill, aTypedArray(this), value, length > 1 ? arguments[1] : void 0, length > 2 ? arguments[2] : void 0);
      });
    }
  });

  // node_modules/core-js/internals/array-from-constructor-and-list.js
  var require_array_from_constructor_and_list = __commonJS({
    "node_modules/core-js/internals/array-from-constructor-and-list.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var lengthOfArrayLike = require_length_of_array_like();
      module.exports = function(Constructor, list) {
        var index = 0;
        var length = lengthOfArrayLike(list);
        var result = new Constructor(length);
        while (length > index)
          result[index] = list[index++];
        return result;
      };
    }
  });

  // node_modules/core-js/internals/typed-array-species-constructor.js
  var require_typed_array_species_constructor = __commonJS({
    "node_modules/core-js/internals/typed-array-species-constructor.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var speciesConstructor = require_species_constructor();
      var TYPED_ARRAY_CONSTRUCTOR = ArrayBufferViewCore.TYPED_ARRAY_CONSTRUCTOR;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      module.exports = function(originalArray) {
        return aTypedArrayConstructor(speciesConstructor(originalArray, originalArray[TYPED_ARRAY_CONSTRUCTOR]));
      };
    }
  });

  // node_modules/core-js/internals/typed-array-from-species-and-list.js
  var require_typed_array_from_species_and_list = __commonJS({
    "node_modules/core-js/internals/typed-array-from-species-and-list.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var arrayFromConstructorAndList = require_array_from_constructor_and_list();
      var typedArraySpeciesConstructor = require_typed_array_species_constructor();
      module.exports = function(instance, list) {
        return arrayFromConstructorAndList(typedArraySpeciesConstructor(instance), list);
      };
    }
  });

  // node_modules/core-js/modules/es.typed-array.filter.js
  var require_es_typed_array_filter = __commonJS({
    "node_modules/core-js/modules/es.typed-array.filter.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $filter = require_array_iteration().filter;
      var fromSpeciesAndList = require_typed_array_from_species_and_list();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("filter", function filter2(callbackfn) {
        var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        return fromSpeciesAndList(this, list);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.find.js
  var require_es_typed_array_find = __commonJS({
    "node_modules/core-js/modules/es.typed-array.find.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $find = require_array_iteration().find;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("find", function find(predicate) {
        return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.find-index.js
  var require_es_typed_array_find_index = __commonJS({
    "node_modules/core-js/modules/es.typed-array.find-index.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $findIndex = require_array_iteration().findIndex;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("findIndex", function findIndex(predicate) {
        return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.for-each.js
  var require_es_typed_array_for_each = __commonJS({
    "node_modules/core-js/modules/es.typed-array.for-each.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $forEach = require_array_iteration().forEach;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("forEach", function forEach(callbackfn) {
        $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.from.js
  var require_es_typed_array_from = __commonJS({
    "node_modules/core-js/modules/es.typed-array.from.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require_typed_array_constructors_require_wrappers();
      var exportTypedArrayStaticMethod = require_array_buffer_view_core().exportTypedArrayStaticMethod;
      var typedArrayFrom = require_typed_array_from();
      exportTypedArrayStaticMethod("from", typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);
    }
  });

  // node_modules/core-js/modules/es.typed-array.includes.js
  var require_es_typed_array_includes = __commonJS({
    "node_modules/core-js/modules/es.typed-array.includes.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $includes = require_array_includes().includes;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("includes", function includes(searchElement) {
        return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.index-of.js
  var require_es_typed_array_index_of = __commonJS({
    "node_modules/core-js/modules/es.typed-array.index-of.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $indexOf = require_array_includes().indexOf;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("indexOf", function indexOf(searchElement) {
        return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.iterator.js
  var require_es_typed_array_iterator = __commonJS({
    "node_modules/core-js/modules/es.typed-array.iterator.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var fails = require_fails();
      var uncurryThis = require_function_uncurry_this();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var ArrayIterators = require_es_array_iterator();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      var Uint8Array2 = global2.Uint8Array;
      var arrayValues = uncurryThis(ArrayIterators.values);
      var arrayKeys = uncurryThis(ArrayIterators.keys);
      var arrayEntries = uncurryThis(ArrayIterators.entries);
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var TypedArrayPrototype = Uint8Array2 && Uint8Array2.prototype;
      var GENERIC = !fails(function() {
        TypedArrayPrototype[ITERATOR].call([1]);
      });
      var ITERATOR_IS_VALUES = !!TypedArrayPrototype && TypedArrayPrototype.values && TypedArrayPrototype[ITERATOR] === TypedArrayPrototype.values && TypedArrayPrototype.values.name === "values";
      var typedArrayValues = function values() {
        return arrayValues(aTypedArray(this));
      };
      exportTypedArrayMethod("entries", function entries() {
        return arrayEntries(aTypedArray(this));
      }, GENERIC);
      exportTypedArrayMethod("keys", function keys() {
        return arrayKeys(aTypedArray(this));
      }, GENERIC);
      exportTypedArrayMethod("values", typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, { name: "values" });
      exportTypedArrayMethod(ITERATOR, typedArrayValues, GENERIC || !ITERATOR_IS_VALUES, { name: "values" });
    }
  });

  // node_modules/core-js/modules/es.typed-array.join.js
  var require_es_typed_array_join = __commonJS({
    "node_modules/core-js/modules/es.typed-array.join.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var uncurryThis = require_function_uncurry_this();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $join = uncurryThis([].join);
      exportTypedArrayMethod("join", function join(separator) {
        return $join(aTypedArray(this), separator);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.last-index-of.js
  var require_es_typed_array_last_index_of = __commonJS({
    "node_modules/core-js/modules/es.typed-array.last-index-of.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var apply = require_function_apply();
      var $lastIndexOf = require_array_last_index_of();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("lastIndexOf", function lastIndexOf(searchElement) {
        var length = arguments.length;
        return apply($lastIndexOf, aTypedArray(this), length > 1 ? [searchElement, arguments[1]] : [searchElement]);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.map.js
  var require_es_typed_array_map = __commonJS({
    "node_modules/core-js/modules/es.typed-array.map.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $map = require_array_iteration().map;
      var typedArraySpeciesConstructor = require_typed_array_species_constructor();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("map", function map2(mapfn) {
        return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : void 0, function(O, length) {
          return new (typedArraySpeciesConstructor(O))(length);
        });
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.of.js
  var require_es_typed_array_of = __commonJS({
    "node_modules/core-js/modules/es.typed-array.of.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require_typed_array_constructors_require_wrappers();
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod;
      exportTypedArrayStaticMethod("of", function of2() {
        var index = 0;
        var length = arguments.length;
        var result = new (aTypedArrayConstructor(this))(length);
        while (length > index)
          result[index] = arguments[index++];
        return result;
      }, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);
    }
  });

  // node_modules/core-js/modules/es.typed-array.reduce.js
  var require_es_typed_array_reduce = __commonJS({
    "node_modules/core-js/modules/es.typed-array.reduce.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $reduce = require_array_reduce().left;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("reduce", function reduce(callbackfn) {
        var length = arguments.length;
        return $reduce(aTypedArray(this), callbackfn, length, length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.reduce-right.js
  var require_es_typed_array_reduce_right = __commonJS({
    "node_modules/core-js/modules/es.typed-array.reduce-right.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $reduceRight = require_array_reduce().right;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("reduceRight", function reduceRight(callbackfn) {
        var length = arguments.length;
        return $reduceRight(aTypedArray(this), callbackfn, length, length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.reverse.js
  var require_es_typed_array_reverse = __commonJS({
    "node_modules/core-js/modules/es.typed-array.reverse.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var floor = Math.floor;
      exportTypedArrayMethod("reverse", function reverse() {
        var that = this;
        var length = aTypedArray(that).length;
        var middle = floor(length / 2);
        var index = 0;
        var value;
        while (index < middle) {
          value = that[index];
          that[index++] = that[--length];
          that[length] = value;
        }
        return that;
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.set.js
  var require_es_typed_array_set = __commonJS({
    "node_modules/core-js/modules/es.typed-array.set.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var call = require_function_call();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var lengthOfArrayLike = require_length_of_array_like();
      var toOffset = require_to_offset();
      var toIndexedObject = require_to_object();
      var fails = require_fails();
      var RangeError = global2.RangeError;
      var Int8Array2 = global2.Int8Array;
      var Int8ArrayPrototype = Int8Array2 && Int8Array2.prototype;
      var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails(function() {
        var array = new Uint8ClampedArray(2);
        call($set, array, { length: 1, 0: 3 }, 1);
        return array[1] !== 3;
      });
      var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS && fails(function() {
        var array = new Int8Array2(2);
        array.set(1);
        array.set("2", 1);
        return array[0] !== 0 || array[1] !== 2;
      });
      exportTypedArrayMethod("set", function set(arrayLike) {
        aTypedArray(this);
        var offset = toOffset(arguments.length > 1 ? arguments[1] : void 0, 1);
        var src = toIndexedObject(arrayLike);
        if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS)
          return call($set, this, src, offset);
        var length = this.length;
        var len = lengthOfArrayLike(src);
        var index = 0;
        if (len + offset > length)
          throw RangeError("Wrong length");
        while (index < len)
          this[offset + index] = src[index++];
      }, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);
    }
  });

  // node_modules/core-js/modules/es.typed-array.slice.js
  var require_es_typed_array_slice = __commonJS({
    "node_modules/core-js/modules/es.typed-array.slice.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var typedArraySpeciesConstructor = require_typed_array_species_constructor();
      var fails = require_fails();
      var arraySlice2 = require_array_slice();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var FORCED = fails(function() {
        new Int8Array(1).slice();
      });
      exportTypedArrayMethod("slice", function slice(start, end) {
        var list = arraySlice2(aTypedArray(this), start, end);
        var C = typedArraySpeciesConstructor(this);
        var index = 0;
        var length = list.length;
        var result = new C(length);
        while (length > index)
          result[index] = list[index++];
        return result;
      }, FORCED);
    }
  });

  // node_modules/core-js/modules/es.typed-array.some.js
  var require_es_typed_array_some = __commonJS({
    "node_modules/core-js/modules/es.typed-array.some.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var $some = require_array_iteration().some;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("some", function some(callbackfn) {
        return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.sort.js
  var require_es_typed_array_sort = __commonJS({
    "node_modules/core-js/modules/es.typed-array.sort.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var aCallable = require_a_callable();
      var internalSort = require_array_sort();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var FF = require_engine_ff_version();
      var IE_OR_EDGE = require_engine_is_ie_or_edge();
      var V8 = require_engine_v8_version();
      var WEBKIT = require_engine_webkit_version();
      var Array2 = global2.Array;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var Uint16Array = global2.Uint16Array;
      var un$Sort = Uint16Array && uncurryThis(Uint16Array.prototype.sort);
      var ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails(function() {
        un$Sort(new Uint16Array(2), null);
      }) && fails(function() {
        un$Sort(new Uint16Array(2), {});
      }));
      var STABLE_SORT = !!un$Sort && !fails(function() {
        if (V8)
          return V8 < 74;
        if (FF)
          return FF < 67;
        if (IE_OR_EDGE)
          return true;
        if (WEBKIT)
          return WEBKIT < 602;
        var array = new Uint16Array(516);
        var expected = Array2(516);
        var index, mod;
        for (index = 0; index < 516; index++) {
          mod = index % 4;
          array[index] = 515 - index;
          expected[index] = index - 2 * mod + 3;
        }
        un$Sort(array, function(a, b) {
          return (a / 4 | 0) - (b / 4 | 0);
        });
        for (index = 0; index < 516; index++) {
          if (array[index] !== expected[index])
            return true;
        }
      });
      var getSortCompare = function(comparefn) {
        return function(x, y) {
          if (comparefn !== void 0)
            return +comparefn(x, y) || 0;
          if (y !== y)
            return -1;
          if (x !== x)
            return 1;
          if (x === 0 && y === 0)
            return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
          return x > y;
        };
      };
      exportTypedArrayMethod("sort", function sort(comparefn) {
        if (comparefn !== void 0)
          aCallable(comparefn);
        if (STABLE_SORT)
          return un$Sort(this, comparefn);
        return internalSort(aTypedArray(this), getSortCompare(comparefn));
      }, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);
    }
  });

  // node_modules/core-js/modules/es.typed-array.subarray.js
  var require_es_typed_array_subarray = __commonJS({
    "node_modules/core-js/modules/es.typed-array.subarray.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var toLength = require_to_length();
      var toAbsoluteIndex = require_to_absolute_index();
      var typedArraySpeciesConstructor = require_typed_array_species_constructor();
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      exportTypedArrayMethod("subarray", function subarray(begin, end) {
        var O = aTypedArray(this);
        var length = O.length;
        var beginIndex = toAbsoluteIndex(begin, length);
        var C = typedArraySpeciesConstructor(O);
        return new C(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === void 0 ? length : toAbsoluteIndex(end, length)) - beginIndex));
      });
    }
  });

  // node_modules/core-js/modules/es.typed-array.to-locale-string.js
  var require_es_typed_array_to_locale_string = __commonJS({
    "node_modules/core-js/modules/es.typed-array.to-locale-string.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var apply = require_function_apply();
      var ArrayBufferViewCore = require_array_buffer_view_core();
      var fails = require_fails();
      var arraySlice2 = require_array_slice();
      var Int8Array2 = global2.Int8Array;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $toLocaleString = [].toLocaleString;
      var TO_LOCALE_STRING_BUG = !!Int8Array2 && fails(function() {
        $toLocaleString.call(new Int8Array2(1));
      });
      var FORCED = fails(function() {
        return [1, 2].toLocaleString() != new Int8Array2([1, 2]).toLocaleString();
      }) || !fails(function() {
        Int8Array2.prototype.toLocaleString.call([1, 2]);
      });
      exportTypedArrayMethod("toLocaleString", function toLocaleString() {
        return apply($toLocaleString, TO_LOCALE_STRING_BUG ? arraySlice2(aTypedArray(this)) : aTypedArray(this), arraySlice2(arguments));
      }, FORCED);
    }
  });

  // node_modules/core-js/modules/es.typed-array.to-string.js
  var require_es_typed_array_to_string = __commonJS({
    "node_modules/core-js/modules/es.typed-array.to-string.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var exportTypedArrayMethod = require_array_buffer_view_core().exportTypedArrayMethod;
      var fails = require_fails();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var Uint8Array2 = global2.Uint8Array;
      var Uint8ArrayPrototype = Uint8Array2 && Uint8Array2.prototype || {};
      var arrayToString = [].toString;
      var join = uncurryThis([].join);
      if (fails(function() {
        arrayToString.call({});
      })) {
        arrayToString = function toString() {
          return join(this);
        };
      }
      var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;
      exportTypedArrayMethod("toString", arrayToString, IS_NOT_ARRAY_METHOD);
    }
  });

  // node_modules/core-js/modules/es.unescape.js
  var require_es_unescape = __commonJS({
    "node_modules/core-js/modules/es.unescape.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var uncurryThis = require_function_uncurry_this();
      var toString = require_to_string();
      var fromCharCode = String.fromCharCode;
      var charAt = uncurryThis("".charAt);
      var exec = uncurryThis(/./.exec);
      var stringSlice = uncurryThis("".slice);
      var hex2 = /^[\da-f]{2}$/i;
      var hex4 = /^[\da-f]{4}$/i;
      $({ global: true }, {
        unescape: function unescape2(string) {
          var str = toString(string);
          var result = "";
          var length = str.length;
          var index = 0;
          var chr, part;
          while (index < length) {
            chr = charAt(str, index++);
            if (chr === "%") {
              if (charAt(str, index) === "u") {
                part = stringSlice(str, index + 1, index + 5);
                if (exec(hex4, part)) {
                  result += fromCharCode(parseInt(part, 16));
                  index += 5;
                  continue;
                }
              } else {
                part = stringSlice(str, index, index + 2);
                if (exec(hex2, part)) {
                  result += fromCharCode(parseInt(part, 16));
                  index += 2;
                  continue;
                }
              }
            }
            result += chr;
          }
          return result;
        }
      });
    }
  });

  // node_modules/core-js/internals/collection-weak.js
  var require_collection_weak = __commonJS({
    "node_modules/core-js/internals/collection-weak.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var uncurryThis = require_function_uncurry_this();
      var redefineAll = require_redefine_all();
      var getWeakData = require_internal_metadata().getWeakData;
      var anObject = require_an_object();
      var isObject2 = require_is_object();
      var anInstance = require_an_instance();
      var iterate = require_iterate();
      var ArrayIterationModule = require_array_iteration();
      var hasOwn = require_has_own_property();
      var InternalStateModule = require_internal_state();
      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      var find = ArrayIterationModule.find;
      var findIndex = ArrayIterationModule.findIndex;
      var splice = uncurryThis([].splice);
      var id = 0;
      var uncaughtFrozenStore = function(store) {
        return store.frozen || (store.frozen = new UncaughtFrozenStore());
      };
      var UncaughtFrozenStore = function() {
        this.entries = [];
      };
      var findUncaughtFrozen = function(store, key) {
        return find(store.entries, function(it) {
          return it[0] === key;
        });
      };
      UncaughtFrozenStore.prototype = {
        get: function(key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry)
            return entry[1];
        },
        has: function(key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function(key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry)
            entry[1] = value;
          else
            this.entries.push([key, value]);
        },
        "delete": function(key) {
          var index = findIndex(this.entries, function(it) {
            return it[0] === key;
          });
          if (~index)
            splice(this.entries, index, 1);
          return !!~index;
        }
      };
      module.exports = {
        getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var Constructor = wrapper(function(that, iterable) {
            anInstance(that, Prototype);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              id: id++,
              frozen: void 0
            });
            if (iterable != void 0)
              iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
          });
          var Prototype = Constructor.prototype;
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var define2 = function(that, key, value) {
            var state = getInternalState(that);
            var data = getWeakData(anObject(key), true);
            if (data === true)
              uncaughtFrozenStore(state).set(key, value);
            else
              data[state.id] = value;
            return that;
          };
          redefineAll(Prototype, {
            "delete": function(key) {
              var state = getInternalState(this);
              if (!isObject2(key))
                return false;
              var data = getWeakData(key);
              if (data === true)
                return uncaughtFrozenStore(state)["delete"](key);
              return data && hasOwn(data, state.id) && delete data[state.id];
            },
            has: function has(key) {
              var state = getInternalState(this);
              if (!isObject2(key))
                return false;
              var data = getWeakData(key);
              if (data === true)
                return uncaughtFrozenStore(state).has(key);
              return data && hasOwn(data, state.id);
            }
          });
          redefineAll(Prototype, IS_MAP ? {
            get: function get(key) {
              var state = getInternalState(this);
              if (isObject2(key)) {
                var data = getWeakData(key);
                if (data === true)
                  return uncaughtFrozenStore(state).get(key);
                return data ? data[state.id] : void 0;
              }
            },
            set: function set(key, value) {
              return define2(this, key, value);
            }
          } : {
            add: function add(value) {
              return define2(this, value, true);
            }
          });
          return Constructor;
        }
      };
    }
  });

  // node_modules/core-js/modules/es.weak-map.js
  var require_es_weak_map = __commonJS({
    "node_modules/core-js/modules/es.weak-map.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var redefineAll = require_redefine_all();
      var InternalMetadataModule = require_internal_metadata();
      var collection = require_collection();
      var collectionWeak = require_collection_weak();
      var isObject2 = require_is_object();
      var isExtensible = require_object_is_extensible();
      var enforceInternalState = require_internal_state().enforce;
      var NATIVE_WEAK_MAP = require_native_weak_map();
      var IS_IE11 = !global2.ActiveXObject && "ActiveXObject" in global2;
      var InternalWeakMap;
      var wrapper = function(init) {
        return function WeakMap2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      };
      var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
      if (NATIVE_WEAK_MAP && IS_IE11) {
        InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
        InternalMetadataModule.enable();
        WeakMapPrototype = $WeakMap.prototype;
        nativeDelete = uncurryThis(WeakMapPrototype["delete"]);
        nativeHas = uncurryThis(WeakMapPrototype.has);
        nativeGet = uncurryThis(WeakMapPrototype.get);
        nativeSet = uncurryThis(WeakMapPrototype.set);
        redefineAll(WeakMapPrototype, {
          "delete": function(key) {
            if (isObject2(key) && !isExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeDelete(this, key) || state.frozen["delete"](key);
            }
            return nativeDelete(this, key);
          },
          has: function has(key) {
            if (isObject2(key) && !isExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeHas(this, key) || state.frozen.has(key);
            }
            return nativeHas(this, key);
          },
          get: function get(key) {
            if (isObject2(key) && !isExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
            }
            return nativeGet(this, key);
          },
          set: function set(key, value) {
            if (isObject2(key) && !isExtensible(key)) {
              var state = enforceInternalState(this);
              if (!state.frozen)
                state.frozen = new InternalWeakMap();
              nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
            } else
              nativeSet(this, key, value);
            return this;
          }
        });
      }
      var WeakMapPrototype;
      var nativeDelete;
      var nativeHas;
      var nativeGet;
      var nativeSet;
    }
  });

  // node_modules/core-js/modules/es.weak-set.js
  var require_es_weak_set = __commonJS({
    "node_modules/core-js/modules/es.weak-set.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var collection = require_collection();
      var collectionWeak = require_collection_weak();
      collection("WeakSet", function(init) {
        return function WeakSet2() {
          return init(this, arguments.length ? arguments[0] : void 0);
        };
      }, collectionWeak);
    }
  });

  // node_modules/core-js/internals/base64-map.js
  var require_base64_map = __commonJS({
    "node_modules/core-js/internals/base64-map.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var itoc = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      var ctoi = {};
      for (index = 0; index < 66; index++)
        ctoi[itoc.charAt(index)] = index;
      var index;
      module.exports = {
        itoc,
        ctoi
      };
    }
  });

  // node_modules/core-js/modules/web.atob.js
  var require_web_atob = __commonJS({
    "node_modules/core-js/modules/web.atob.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var toString = require_to_string();
      var hasOwn = require_has_own_property();
      var validateArgumentsLength = require_validate_arguments_length();
      var ctoi = require_base64_map().ctoi;
      var disallowed = /[^\d+/a-z]/i;
      var whitespaces = /[\t\n\f\r ]+/g;
      var finalEq = /[=]+$/;
      var $atob = getBuiltIn("atob");
      var fromCharCode = String.fromCharCode;
      var charAt = uncurryThis("".charAt);
      var replace = uncurryThis("".replace);
      var exec = uncurryThis(disallowed.exec);
      var NO_SPACES_IGNORE = fails(function() {
        return atob(" ") !== "";
      });
      var NO_ARG_RECEIVING_CHECK = !NO_SPACES_IGNORE && !fails(function() {
        $atob();
      });
      $({ global: true, enumerable: true, forced: NO_SPACES_IGNORE || NO_ARG_RECEIVING_CHECK }, {
        atob: function atob2(data) {
          validateArgumentsLength(arguments.length, 1);
          if (NO_ARG_RECEIVING_CHECK)
            return $atob(data);
          var string = replace(toString(data), whitespaces, "");
          var output = "";
          var position = 0;
          var bc = 0;
          var chr, bs;
          if (string.length % 4 == 0) {
            string = replace(string, finalEq, "");
          }
          if (string.length % 4 == 1 || exec(disallowed, string)) {
            throw new (getBuiltIn("DOMException"))("The string is not correctly encoded", "InvalidCharacterError");
          }
          while (chr = charAt(string, position++)) {
            if (hasOwn(ctoi, chr)) {
              bs = bc % 4 ? bs * 64 + ctoi[chr] : ctoi[chr];
              if (bc++ % 4)
                output += fromCharCode(255 & bs >> (-2 * bc & 6));
            }
          }
          return output;
        }
      });
    }
  });

  // node_modules/core-js/modules/web.btoa.js
  var require_web_btoa = __commonJS({
    "node_modules/core-js/modules/web.btoa.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var toString = require_to_string();
      var validateArgumentsLength = require_validate_arguments_length();
      var itoc = require_base64_map().itoc;
      var $btoa = getBuiltIn("btoa");
      var charAt = uncurryThis("".charAt);
      var charCodeAt = uncurryThis("".charCodeAt);
      var NO_ARG_RECEIVING_CHECK = !!$btoa && !fails(function() {
        $btoa();
      });
      $({ global: true, enumerable: true, forced: NO_ARG_RECEIVING_CHECK }, {
        btoa: function btoa(data) {
          validateArgumentsLength(arguments.length, 1);
          if (NO_ARG_RECEIVING_CHECK)
            return $btoa(data);
          var string = toString(data);
          var output = "";
          var position = 0;
          var map2 = itoc;
          var block, charCode;
          while (charAt(string, position) || (map2 = "=", position % 1)) {
            charCode = charCodeAt(string, position += 3 / 4);
            if (charCode > 255) {
              throw new (getBuiltIn("DOMException"))("The string contains characters outside of the Latin1 range", "InvalidCharacterError");
            }
            block = block << 8 | charCode;
            output += charAt(map2, 63 & block >> 8 - position % 1 * 8);
          }
          return output;
        }
      });
    }
  });

  // node_modules/core-js/internals/dom-iterables.js
  var require_dom_iterables = __commonJS({
    "node_modules/core-js/internals/dom-iterables.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
    }
  });

  // node_modules/core-js/internals/dom-token-list-prototype.js
  var require_dom_token_list_prototype = __commonJS({
    "node_modules/core-js/internals/dom-token-list-prototype.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var documentCreateElement = require_document_create_element();
      var classList = documentCreateElement("span").classList;
      var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;
      module.exports = DOMTokenListPrototype === Object.prototype ? void 0 : DOMTokenListPrototype;
    }
  });

  // node_modules/core-js/modules/web.dom-collections.for-each.js
  var require_web_dom_collections_for_each = __commonJS({
    "node_modules/core-js/modules/web.dom-collections.for-each.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var DOMIterables = require_dom_iterables();
      var DOMTokenListPrototype = require_dom_token_list_prototype();
      var forEach = require_array_for_each();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var handlePrototype = function(CollectionPrototype) {
        if (CollectionPrototype && CollectionPrototype.forEach !== forEach)
          try {
            createNonEnumerableProperty(CollectionPrototype, "forEach", forEach);
          } catch (error) {
            CollectionPrototype.forEach = forEach;
          }
      };
      for (COLLECTION_NAME in DOMIterables) {
        if (DOMIterables[COLLECTION_NAME]) {
          handlePrototype(global2[COLLECTION_NAME] && global2[COLLECTION_NAME].prototype);
        }
      }
      var COLLECTION_NAME;
      handlePrototype(DOMTokenListPrototype);
    }
  });

  // node_modules/core-js/modules/web.dom-collections.iterator.js
  var require_web_dom_collections_iterator = __commonJS({
    "node_modules/core-js/modules/web.dom-collections.iterator.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var DOMIterables = require_dom_iterables();
      var DOMTokenListPrototype = require_dom_token_list_prototype();
      var ArrayIteratorMethods = require_es_array_iterator();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var wellKnownSymbol = require_well_known_symbol();
      var ITERATOR = wellKnownSymbol("iterator");
      var TO_STRING_TAG = wellKnownSymbol("toStringTag");
      var ArrayValues = ArrayIteratorMethods.values;
      var handlePrototype = function(CollectionPrototype, COLLECTION_NAME2) {
        if (CollectionPrototype) {
          if (CollectionPrototype[ITERATOR] !== ArrayValues)
            try {
              createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
            } catch (error) {
              CollectionPrototype[ITERATOR] = ArrayValues;
            }
          if (!CollectionPrototype[TO_STRING_TAG]) {
            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME2);
          }
          if (DOMIterables[COLLECTION_NAME2])
            for (var METHOD_NAME in ArrayIteratorMethods) {
              if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME])
                try {
                  createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                } catch (error) {
                  CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                }
            }
        }
      };
      for (COLLECTION_NAME in DOMIterables) {
        handlePrototype(global2[COLLECTION_NAME] && global2[COLLECTION_NAME].prototype, COLLECTION_NAME);
      }
      var COLLECTION_NAME;
      handlePrototype(DOMTokenListPrototype, "DOMTokenList");
    }
  });

  // node_modules/core-js/internals/try-node-require.js
  var require_try_node_require = __commonJS({
    "node_modules/core-js/internals/try-node-require.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var IS_NODE = require_engine_is_node();
      module.exports = function(name) {
        try {
          if (IS_NODE)
            return Function('return require("' + name + '")')();
        } catch (error) {
        }
      };
    }
  });

  // node_modules/core-js/internals/dom-exception-constants.js
  var require_dom_exception_constants = __commonJS({
    "node_modules/core-js/internals/dom-exception-constants.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      module.exports = {
        IndexSizeError: { s: "INDEX_SIZE_ERR", c: 1, m: 1 },
        DOMStringSizeError: { s: "DOMSTRING_SIZE_ERR", c: 2, m: 0 },
        HierarchyRequestError: { s: "HIERARCHY_REQUEST_ERR", c: 3, m: 1 },
        WrongDocumentError: { s: "WRONG_DOCUMENT_ERR", c: 4, m: 1 },
        InvalidCharacterError: { s: "INVALID_CHARACTER_ERR", c: 5, m: 1 },
        NoDataAllowedError: { s: "NO_DATA_ALLOWED_ERR", c: 6, m: 0 },
        NoModificationAllowedError: { s: "NO_MODIFICATION_ALLOWED_ERR", c: 7, m: 1 },
        NotFoundError: { s: "NOT_FOUND_ERR", c: 8, m: 1 },
        NotSupportedError: { s: "NOT_SUPPORTED_ERR", c: 9, m: 1 },
        InUseAttributeError: { s: "INUSE_ATTRIBUTE_ERR", c: 10, m: 1 },
        InvalidStateError: { s: "INVALID_STATE_ERR", c: 11, m: 1 },
        SyntaxError: { s: "SYNTAX_ERR", c: 12, m: 1 },
        InvalidModificationError: { s: "INVALID_MODIFICATION_ERR", c: 13, m: 1 },
        NamespaceError: { s: "NAMESPACE_ERR", c: 14, m: 1 },
        InvalidAccessError: { s: "INVALID_ACCESS_ERR", c: 15, m: 1 },
        ValidationError: { s: "VALIDATION_ERR", c: 16, m: 0 },
        TypeMismatchError: { s: "TYPE_MISMATCH_ERR", c: 17, m: 1 },
        SecurityError: { s: "SECURITY_ERR", c: 18, m: 1 },
        NetworkError: { s: "NETWORK_ERR", c: 19, m: 1 },
        AbortError: { s: "ABORT_ERR", c: 20, m: 1 },
        URLMismatchError: { s: "URL_MISMATCH_ERR", c: 21, m: 1 },
        QuotaExceededError: { s: "QUOTA_EXCEEDED_ERR", c: 22, m: 1 },
        TimeoutError: { s: "TIMEOUT_ERR", c: 23, m: 1 },
        InvalidNodeTypeError: { s: "INVALID_NODE_TYPE_ERR", c: 24, m: 1 },
        DataCloneError: { s: "DATA_CLONE_ERR", c: 25, m: 1 }
      };
    }
  });

  // node_modules/core-js/modules/web.dom-exception.constructor.js
  var require_web_dom_exception_constructor = __commonJS({
    "node_modules/core-js/modules/web.dom-exception.constructor.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var tryNodeRequire = require_try_node_require();
      var getBuiltIn = require_get_built_in();
      var fails = require_fails();
      var create = require_object_create();
      var createPropertyDescriptor = require_create_property_descriptor();
      var defineProperty = require_object_define_property().f;
      var defineProperties = require_object_define_properties().f;
      var redefine = require_redefine();
      var hasOwn = require_has_own_property();
      var anInstance = require_an_instance();
      var anObject = require_an_object();
      var errorToString = require_error_to_string();
      var normalizeStringArgument = require_normalize_string_argument();
      var DOMExceptionConstants = require_dom_exception_constants();
      var clearErrorStack = require_clear_error_stack();
      var InternalStateModule = require_internal_state();
      var DESCRIPTORS = require_descriptors();
      var IS_PURE = require_is_pure();
      var DOM_EXCEPTION = "DOMException";
      var DATA_CLONE_ERR = "DATA_CLONE_ERR";
      var Error2 = getBuiltIn("Error");
      var NativeDOMException = getBuiltIn(DOM_EXCEPTION) || function() {
        try {
          var MessageChannel2 = getBuiltIn("MessageChannel") || tryNodeRequire("worker_threads").MessageChannel;
          new MessageChannel2().port1.postMessage(/* @__PURE__ */ new WeakMap());
        } catch (error) {
          if (error.name == DATA_CLONE_ERR && error.code == 25)
            return error.constructor;
        }
      }();
      var NativeDOMExceptionPrototype = NativeDOMException && NativeDOMException.prototype;
      var ErrorPrototype = Error2.prototype;
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(DOM_EXCEPTION);
      var HAS_STACK = "stack" in Error2(DOM_EXCEPTION);
      var codeFor = function(name) {
        return hasOwn(DOMExceptionConstants, name) && DOMExceptionConstants[name].m ? DOMExceptionConstants[name].c : 0;
      };
      var $DOMException = function DOMException() {
        anInstance(this, DOMExceptionPrototype);
        var argumentsLength = arguments.length;
        var message = normalizeStringArgument(argumentsLength < 1 ? void 0 : arguments[0]);
        var name = normalizeStringArgument(argumentsLength < 2 ? void 0 : arguments[1], "Error");
        var code = codeFor(name);
        setInternalState(this, {
          type: DOM_EXCEPTION,
          name,
          message,
          code
        });
        if (!DESCRIPTORS) {
          this.name = name;
          this.message = message;
          this.code = code;
        }
        if (HAS_STACK) {
          var error = Error2(message);
          error.name = DOM_EXCEPTION;
          defineProperty(this, "stack", createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
        }
      };
      var DOMExceptionPrototype = $DOMException.prototype = create(ErrorPrototype);
      var createGetterDescriptor = function(get) {
        return { enumerable: true, configurable: true, get };
      };
      var getterFor = function(key2) {
        return createGetterDescriptor(function() {
          return getInternalState(this)[key2];
        });
      };
      if (DESCRIPTORS)
        defineProperties(DOMExceptionPrototype, {
          name: getterFor("name"),
          message: getterFor("message"),
          code: getterFor("code")
        });
      defineProperty(DOMExceptionPrototype, "constructor", createPropertyDescriptor(1, $DOMException));
      var INCORRECT_CONSTRUCTOR = fails(function() {
        return !(new NativeDOMException() instanceof Error2);
      });
      var INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails(function() {
        return ErrorPrototype.toString !== errorToString || String(new NativeDOMException(1, 2)) !== "2: 1";
      });
      var INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails(function() {
        return new NativeDOMException(1, "DataCloneError").code !== 25;
      });
      var MISSED_CONSTANTS = INCORRECT_CONSTRUCTOR || NativeDOMException[DATA_CLONE_ERR] !== 25 || NativeDOMExceptionPrototype[DATA_CLONE_ERR] !== 25;
      var FORCED_CONSTRUCTOR = IS_PURE ? INCORRECT_TO_STRING || INCORRECT_CODE || MISSED_CONSTANTS : INCORRECT_CONSTRUCTOR;
      $({ global: true, forced: FORCED_CONSTRUCTOR }, {
        DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
      });
      var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
      var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;
      if (INCORRECT_TO_STRING && (IS_PURE || NativeDOMException === PolyfilledDOMException)) {
        redefine(PolyfilledDOMExceptionPrototype, "toString", errorToString);
      }
      if (INCORRECT_CODE && DESCRIPTORS && NativeDOMException === PolyfilledDOMException) {
        defineProperty(PolyfilledDOMExceptionPrototype, "code", createGetterDescriptor(function() {
          return codeFor(anObject(this).name);
        }));
      }
      for (key in DOMExceptionConstants)
        if (hasOwn(DOMExceptionConstants, key)) {
          constant = DOMExceptionConstants[key];
          constantName = constant.s;
          descriptor = createPropertyDescriptor(6, constant.c);
          if (!hasOwn(PolyfilledDOMException, constantName)) {
            defineProperty(PolyfilledDOMException, constantName, descriptor);
          }
          if (!hasOwn(PolyfilledDOMExceptionPrototype, constantName)) {
            defineProperty(PolyfilledDOMExceptionPrototype, constantName, descriptor);
          }
        }
      var constant;
      var constantName;
      var descriptor;
      var key;
    }
  });

  // node_modules/core-js/modules/web.dom-exception.stack.js
  var require_web_dom_exception_stack = __commonJS({
    "node_modules/core-js/modules/web.dom-exception.stack.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var getBuiltIn = require_get_built_in();
      var createPropertyDescriptor = require_create_property_descriptor();
      var defineProperty = require_object_define_property().f;
      var hasOwn = require_has_own_property();
      var anInstance = require_an_instance();
      var inheritIfRequired = require_inherit_if_required();
      var normalizeStringArgument = require_normalize_string_argument();
      var DOMExceptionConstants = require_dom_exception_constants();
      var clearErrorStack = require_clear_error_stack();
      var IS_PURE = require_is_pure();
      var DOM_EXCEPTION = "DOMException";
      var Error2 = getBuiltIn("Error");
      var NativeDOMException = getBuiltIn(DOM_EXCEPTION);
      var $DOMException = function DOMException() {
        anInstance(this, DOMExceptionPrototype);
        var argumentsLength = arguments.length;
        var message = normalizeStringArgument(argumentsLength < 1 ? void 0 : arguments[0]);
        var name = normalizeStringArgument(argumentsLength < 2 ? void 0 : arguments[1], "Error");
        var that = new NativeDOMException(message, name);
        var error = Error2(message);
        error.name = DOM_EXCEPTION;
        defineProperty(that, "stack", createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
        inheritIfRequired(that, this, $DOMException);
        return that;
      };
      var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;
      var ERROR_HAS_STACK = "stack" in Error2(DOM_EXCEPTION);
      var DOM_EXCEPTION_HAS_STACK = "stack" in new NativeDOMException(1, 2);
      var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK;
      $({ global: true, forced: IS_PURE || FORCED_CONSTRUCTOR }, {
        DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
      });
      var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
      var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;
      if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
        if (!IS_PURE) {
          defineProperty(PolyfilledDOMExceptionPrototype, "constructor", createPropertyDescriptor(1, PolyfilledDOMException));
        }
        for (key in DOMExceptionConstants)
          if (hasOwn(DOMExceptionConstants, key)) {
            constant = DOMExceptionConstants[key];
            constantName = constant.s;
            if (!hasOwn(PolyfilledDOMException, constantName)) {
              defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));
            }
          }
      }
      var constant;
      var constantName;
      var key;
    }
  });

  // node_modules/core-js/modules/web.dom-exception.to-string-tag.js
  var require_web_dom_exception_to_string_tag = __commonJS({
    "node_modules/core-js/modules/web.dom-exception.to-string-tag.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var getBuiltIn = require_get_built_in();
      var setToStringTag = require_set_to_string_tag();
      var DOM_EXCEPTION = "DOMException";
      setToStringTag(getBuiltIn(DOM_EXCEPTION), DOM_EXCEPTION);
    }
  });

  // node_modules/core-js/modules/web.immediate.js
  var require_web_immediate = __commonJS({
    "node_modules/core-js/modules/web.immediate.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var task = require_task();
      var FORCED = !global2.setImmediate || !global2.clearImmediate;
      $({ global: true, bind: true, enumerable: true, forced: FORCED }, {
        setImmediate: task.set,
        clearImmediate: task.clear
      });
    }
  });

  // node_modules/core-js/modules/web.queue-microtask.js
  var require_web_queue_microtask = __commonJS({
    "node_modules/core-js/modules/web.queue-microtask.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var microtask = require_microtask();
      var aCallable = require_a_callable();
      var validateArgumentsLength = require_validate_arguments_length();
      var IS_NODE = require_engine_is_node();
      var process3 = global2.process;
      $({ global: true, enumerable: true, noTargetGet: true }, {
        queueMicrotask: function queueMicrotask2(fn) {
          validateArgumentsLength(arguments.length, 1);
          aCallable(fn);
          var domain = IS_NODE && process3.domain;
          microtask(domain ? domain.bind(fn) : fn);
        }
      });
    }
  });

  // node_modules/core-js/modules/web.structured-clone.js
  var require_web_structured_clone = __commonJS({
    "node_modules/core-js/modules/web.structured-clone.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var IS_PURE = require_is_pure();
      var $ = require_export();
      var global2 = require_global();
      var getBuiltin = require_get_built_in();
      var uncurryThis = require_function_uncurry_this();
      var fails = require_fails();
      var uid = require_uid();
      var isCallable = require_is_callable();
      var isConstructor = require_is_constructor();
      var isObject2 = require_is_object();
      var isSymbol = require_is_symbol();
      var iterate = require_iterate();
      var anObject = require_an_object();
      var classof = require_classof();
      var hasOwn = require_has_own_property();
      var createProperty = require_create_property();
      var createNonEnumerableProperty = require_create_non_enumerable_property();
      var lengthOfArrayLike = require_length_of_array_like();
      var validateArgumentsLength = require_validate_arguments_length();
      var regExpFlags = require_regexp_flags();
      var ERROR_STACK_INSTALLABLE = require_error_stack_installable();
      var Object2 = global2.Object;
      var Date2 = global2.Date;
      var Error2 = global2.Error;
      var EvalError = global2.EvalError;
      var RangeError = global2.RangeError;
      var ReferenceError = global2.ReferenceError;
      var SyntaxError = global2.SyntaxError;
      var TypeError2 = global2.TypeError;
      var URIError = global2.URIError;
      var PerformanceMark = global2.PerformanceMark;
      var WebAssembly = global2.WebAssembly;
      var CompileError = WebAssembly && WebAssembly.CompileError || Error2;
      var LinkError = WebAssembly && WebAssembly.LinkError || Error2;
      var RuntimeError = WebAssembly && WebAssembly.RuntimeError || Error2;
      var DOMException = getBuiltin("DOMException");
      var Set2 = getBuiltin("Set");
      var Map2 = getBuiltin("Map");
      var MapPrototype = Map2.prototype;
      var mapHas = uncurryThis(MapPrototype.has);
      var mapGet = uncurryThis(MapPrototype.get);
      var mapSet = uncurryThis(MapPrototype.set);
      var setAdd = uncurryThis(Set2.prototype.add);
      var objectKeys = getBuiltin("Object", "keys");
      var push = uncurryThis([].push);
      var booleanValueOf = uncurryThis(true.valueOf);
      var numberValueOf = uncurryThis(1 .valueOf);
      var stringValueOf = uncurryThis("".valueOf);
      var getFlags = uncurryThis(regExpFlags);
      var getTime = uncurryThis(Date2.prototype.getTime);
      var PERFORMANCE_MARK = uid("structuredClone");
      var DATA_CLONE_ERROR = "DataCloneError";
      var TRANSFERRING = "Transferring";
      var checkBasicSemantic = function(structuredCloneImplementation) {
        return !fails(function() {
          var set1 = new global2.Set([7]);
          var set2 = structuredCloneImplementation(set1);
          var number = structuredCloneImplementation(Object2(7));
          return set2 == set1 || !set2.has(7) || typeof number != "object" || number != 7;
        }) && structuredCloneImplementation;
      };
      var checkNewErrorsSemantic = function(structuredCloneImplementation) {
        return !fails(function() {
          var test = structuredCloneImplementation(new global2.AggregateError([1], PERFORMANCE_MARK, { cause: 3 }));
          return test.name != "AggregateError" || test.errors[0] != 1 || test.message != PERFORMANCE_MARK || test.cause != 3;
        }) && structuredCloneImplementation;
      };
      var nativeStructuredClone = global2.structuredClone;
      var FORCED_REPLACEMENT = IS_PURE || !checkNewErrorsSemantic(nativeStructuredClone);
      var structuredCloneFromMark = !nativeStructuredClone && checkBasicSemantic(function(value) {
        return new PerformanceMark(PERFORMANCE_MARK, { detail: value }).detail;
      });
      var nativeRestrictedStructuredClone = checkBasicSemantic(nativeStructuredClone) || structuredCloneFromMark;
      var throwUncloneable = function(type) {
        throw new DOMException("Uncloneable type: " + type, DATA_CLONE_ERROR);
      };
      var throwUnpolyfillable = function(type, kind) {
        throw new DOMException((kind || "Cloning") + " of " + type + " cannot be properly polyfilled in this engine", DATA_CLONE_ERROR);
      };
      var structuredCloneInternal = function(value, map2) {
        if (isSymbol(value))
          throwUncloneable("Symbol");
        if (!isObject2(value))
          return value;
        if (map2) {
          if (mapHas(map2, value))
            return mapGet(map2, value);
        } else
          map2 = new Map2();
        var type = classof(value);
        var deep = false;
        var C, name, cloned, dataTransfer, i, length, keys, key, source, target;
        switch (type) {
          case "Array":
            cloned = [];
            deep = true;
            break;
          case "Object":
            cloned = {};
            deep = true;
            break;
          case "Map":
            cloned = new Map2();
            deep = true;
            break;
          case "Set":
            cloned = new Set2();
            deep = true;
            break;
          case "RegExp":
            cloned = new RegExp(value.source, "flags" in value ? value.flags : getFlags(value));
            break;
          case "Error":
            name = value.name;
            switch (name) {
              case "AggregateError":
                cloned = getBuiltin("AggregateError")([]);
                break;
              case "EvalError":
                cloned = EvalError();
                break;
              case "RangeError":
                cloned = RangeError();
                break;
              case "ReferenceError":
                cloned = ReferenceError();
                break;
              case "SyntaxError":
                cloned = SyntaxError();
                break;
              case "TypeError":
                cloned = TypeError2();
                break;
              case "URIError":
                cloned = URIError();
                break;
              case "CompileError":
                cloned = CompileError();
                break;
              case "LinkError":
                cloned = LinkError();
                break;
              case "RuntimeError":
                cloned = RuntimeError();
                break;
              default:
                cloned = Error2();
            }
            deep = true;
            break;
          case "DOMException":
            cloned = new DOMException(value.message, value.name);
            deep = true;
            break;
          case "DataView":
          case "Int8Array":
          case "Uint8Array":
          case "Uint8ClampedArray":
          case "Int16Array":
          case "Uint16Array":
          case "Int32Array":
          case "Uint32Array":
          case "Float32Array":
          case "Float64Array":
          case "BigInt64Array":
          case "BigUint64Array":
            C = global2[type];
            if (!isObject2(C))
              throwUnpolyfillable(type);
            cloned = new C(structuredCloneInternal(value.buffer, map2), value.byteOffset, type === "DataView" ? value.byteLength : value.length);
            break;
          case "DOMQuad":
            try {
              cloned = new DOMQuad(structuredCloneInternal(value.p1, map2), structuredCloneInternal(value.p2, map2), structuredCloneInternal(value.p3, map2), structuredCloneInternal(value.p4, map2));
            } catch (error) {
              if (nativeRestrictedStructuredClone) {
                cloned = nativeRestrictedStructuredClone(value);
              } else
                throwUnpolyfillable(type);
            }
            break;
          case "FileList":
            C = global2.DataTransfer;
            if (isConstructor(C)) {
              dataTransfer = new C();
              for (i = 0, length = lengthOfArrayLike(value); i < length; i++) {
                dataTransfer.items.add(structuredCloneInternal(value[i], map2));
              }
              cloned = dataTransfer.files;
            } else if (nativeRestrictedStructuredClone) {
              cloned = nativeRestrictedStructuredClone(value);
            } else
              throwUnpolyfillable(type);
            break;
          case "ImageData":
            try {
              cloned = new ImageData(structuredCloneInternal(value.data, map2), value.width, value.height, { colorSpace: value.colorSpace });
            } catch (error) {
              if (nativeRestrictedStructuredClone) {
                cloned = nativeRestrictedStructuredClone(value);
              } else
                throwUnpolyfillable(type);
            }
            break;
          default:
            if (nativeRestrictedStructuredClone) {
              cloned = nativeRestrictedStructuredClone(value);
            } else
              switch (type) {
                case "BigInt":
                  cloned = Object2(value.valueOf());
                  break;
                case "Boolean":
                  cloned = Object2(booleanValueOf(value));
                  break;
                case "Number":
                  cloned = Object2(numberValueOf(value));
                  break;
                case "String":
                  cloned = Object2(stringValueOf(value));
                  break;
                case "Date":
                  cloned = new Date2(getTime(value));
                  break;
                case "ArrayBuffer":
                  C = global2.DataView;
                  if (!C && typeof value.slice != "function")
                    throwUnpolyfillable(type);
                  try {
                    if (typeof value.slice == "function") {
                      cloned = value.slice(0);
                    } else {
                      length = value.byteLength;
                      cloned = new ArrayBuffer(length);
                      source = new C(value);
                      target = new C(cloned);
                      for (i = 0; i < length; i++) {
                        target.setUint8(i, source.getUint8(i));
                      }
                    }
                  } catch (error) {
                    throw new DOMException("ArrayBuffer is detached", DATA_CLONE_ERROR);
                  }
                  break;
                case "SharedArrayBuffer":
                  cloned = value;
                  break;
                case "Blob":
                  try {
                    cloned = value.slice(0, value.size, value.type);
                  } catch (error) {
                    throwUnpolyfillable(type);
                  }
                  break;
                case "DOMPoint":
                case "DOMPointReadOnly":
                  C = global2[type];
                  try {
                    cloned = C.fromPoint ? C.fromPoint(value) : new C(value.x, value.y, value.z, value.w);
                  } catch (error) {
                    throwUnpolyfillable(type);
                  }
                  break;
                case "DOMRect":
                case "DOMRectReadOnly":
                  C = global2[type];
                  try {
                    cloned = C.fromRect ? C.fromRect(value) : new C(value.x, value.y, value.width, value.height);
                  } catch (error) {
                    throwUnpolyfillable(type);
                  }
                  break;
                case "DOMMatrix":
                case "DOMMatrixReadOnly":
                  C = global2[type];
                  try {
                    cloned = C.fromMatrix ? C.fromMatrix(value) : new C(value);
                  } catch (error) {
                    throwUnpolyfillable(type);
                  }
                  break;
                case "AudioData":
                case "VideoFrame":
                  if (!isCallable(value.clone))
                    throwUnpolyfillable(type);
                  try {
                    cloned = value.clone();
                  } catch (error) {
                    throwUncloneable(type);
                  }
                  break;
                case "File":
                  try {
                    cloned = new File([value], value.name, value);
                  } catch (error) {
                    throwUnpolyfillable(type);
                  }
                  break;
                case "CryptoKey":
                case "GPUCompilationMessage":
                case "GPUCompilationInfo":
                case "ImageBitmap":
                case "RTCCertificate":
                case "WebAssembly.Module":
                  throwUnpolyfillable(type);
                default:
                  throwUncloneable(type);
              }
        }
        mapSet(map2, value, cloned);
        if (deep)
          switch (type) {
            case "Array":
            case "Object":
              keys = objectKeys(value);
              for (i = 0, length = lengthOfArrayLike(keys); i < length; i++) {
                key = keys[i];
                createProperty(cloned, key, structuredCloneInternal(value[key], map2));
              }
              break;
            case "Map":
              value.forEach(function(v, k) {
                mapSet(cloned, structuredCloneInternal(k, map2), structuredCloneInternal(v, map2));
              });
              break;
            case "Set":
              value.forEach(function(v) {
                setAdd(cloned, structuredCloneInternal(v, map2));
              });
              break;
            case "Error":
              createNonEnumerableProperty(cloned, "message", structuredCloneInternal(value.message, map2));
              if (hasOwn(value, "cause")) {
                createNonEnumerableProperty(cloned, "cause", structuredCloneInternal(value.cause, map2));
              }
              if (name == "AggregateError") {
                cloned.errors = structuredCloneInternal(value.errors, map2);
              }
            case "DOMException":
              if (ERROR_STACK_INSTALLABLE) {
                createNonEnumerableProperty(cloned, "stack", structuredCloneInternal(value.stack, map2));
              }
          }
        return cloned;
      };
      var PROPER_TRANSFER = nativeStructuredClone && !fails(function() {
        var buffer = new ArrayBuffer(8);
        var clone = nativeStructuredClone(buffer, { transfer: [buffer] });
        return buffer.byteLength != 0 || clone.byteLength != 8;
      });
      var tryToTransfer = function(rawTransfer, map2) {
        if (!isObject2(rawTransfer))
          throw TypeError2("Transfer option cannot be converted to a sequence");
        var transfer = [];
        iterate(rawTransfer, function(value2) {
          push(transfer, anObject(value2));
        });
        var i = 0;
        var length = lengthOfArrayLike(transfer);
        var value, type, C, transferredArray, transferred, canvas, context2;
        if (PROPER_TRANSFER) {
          transferredArray = nativeStructuredClone(transfer, { transfer });
          while (i < length)
            mapSet(map2, transfer[i], transferredArray[i++]);
        } else
          while (i < length) {
            value = transfer[i++];
            if (mapHas(map2, value))
              throw new DOMException("Duplicate transferable", DATA_CLONE_ERROR);
            type = classof(value);
            switch (type) {
              case "ImageBitmap":
                C = global2.OffscreenCanvas;
                if (!isConstructor(C))
                  throwUnpolyfillable(type, TRANSFERRING);
                try {
                  canvas = new C(value.width, value.height);
                  context2 = canvas.getContext("bitmaprenderer");
                  context2.transferFromImageBitmap(value);
                  transferred = canvas.transferToImageBitmap();
                } catch (error) {
                }
                break;
              case "AudioData":
              case "VideoFrame":
                if (!isCallable(value.clone) || !isCallable(value.close))
                  throwUnpolyfillable(type, TRANSFERRING);
                try {
                  transferred = value.clone();
                  value.close();
                } catch (error) {
                }
                break;
              case "ArrayBuffer":
              case "MessagePort":
              case "OffscreenCanvas":
              case "ReadableStream":
              case "TransformStream":
              case "WritableStream":
                throwUnpolyfillable(type, TRANSFERRING);
            }
            if (transferred === void 0)
              throw new DOMException("This object cannot be transferred: " + type, DATA_CLONE_ERROR);
            mapSet(map2, value, transferred);
          }
      };
      $({ global: true, enumerable: true, sham: !PROPER_TRANSFER, forced: FORCED_REPLACEMENT }, {
        structuredClone: function structuredClone(value) {
          var options = validateArgumentsLength(arguments.length, 1) > 1 ? anObject(arguments[1]) : void 0;
          var transfer = options ? options.transfer : void 0;
          var map2;
          if (transfer !== void 0) {
            map2 = new Map2();
            tryToTransfer(transfer, map2);
          }
          return structuredCloneInternal(value, map2);
        }
      });
    }
  });

  // node_modules/core-js/modules/web.timers.js
  var require_web_timers = __commonJS({
    "node_modules/core-js/modules/web.timers.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var global2 = require_global();
      var apply = require_function_apply();
      var isCallable = require_is_callable();
      var userAgent = require_engine_user_agent();
      var arraySlice2 = require_array_slice();
      var validateArgumentsLength = require_validate_arguments_length();
      var MSIE = /MSIE .\./.test(userAgent);
      var Function2 = global2.Function;
      var wrap = function(scheduler) {
        return function(handler, timeout2) {
          var boundArgs = validateArgumentsLength(arguments.length, 1) > 2;
          var fn = isCallable(handler) ? handler : Function2(handler);
          var args = boundArgs ? arraySlice2(arguments, 2) : void 0;
          return scheduler(boundArgs ? function() {
            apply(fn, this, args);
          } : fn, timeout2);
        };
      };
      $({ global: true, bind: true, forced: MSIE }, {
        setTimeout: wrap(global2.setTimeout),
        setInterval: wrap(global2.setInterval)
      });
    }
  });

  // node_modules/core-js/internals/native-url.js
  var require_native_url = __commonJS({
    "node_modules/core-js/internals/native-url.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var fails = require_fails();
      var wellKnownSymbol = require_well_known_symbol();
      var IS_PURE = require_is_pure();
      var ITERATOR = wellKnownSymbol("iterator");
      module.exports = !fails(function() {
        var url = new URL("b?a=1&b=2&c=3", "http://a");
        var searchParams = url.searchParams;
        var result = "";
        url.pathname = "c%20d";
        searchParams.forEach(function(value, key) {
          searchParams["delete"]("b");
          result += key + value;
        });
        return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== "http://a/c%20d?a=1&c=3" || searchParams.get("c") !== "3" || String(new URLSearchParams("?a=1")) !== "a=1" || !searchParams[ITERATOR] || new URL("https://a@b").username !== "a" || new URLSearchParams(new URLSearchParams("a=b")).get("a") !== "b" || new URL("http://\u0442\u0435\u0441\u0442").host !== "xn--e1aybc" || new URL("http://a#\u0431").hash !== "#%D0%B1" || result !== "a1c3" || new URL("http://x", void 0).host !== "x";
      });
    }
  });

  // node_modules/core-js/internals/string-punycode-to-ascii.js
  var require_string_punycode_to_ascii = __commonJS({
    "node_modules/core-js/internals/string-punycode-to-ascii.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var global2 = require_global();
      var uncurryThis = require_function_uncurry_this();
      var maxInt = 2147483647;
      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128;
      var delimiter = "-";
      var regexNonASCII = /[^\0-\u007E]/;
      var regexSeparators = /[.\u3002\uFF0E\uFF61]/g;
      var OVERFLOW_ERROR = "Overflow: input needs wider integers to process";
      var baseMinusTMin = base - tMin;
      var RangeError = global2.RangeError;
      var exec = uncurryThis(regexSeparators.exec);
      var floor = Math.floor;
      var fromCharCode = String.fromCharCode;
      var charCodeAt = uncurryThis("".charCodeAt);
      var join = uncurryThis([].join);
      var push = uncurryThis([].push);
      var replace = uncurryThis("".replace);
      var split = uncurryThis("".split);
      var toLowerCase = uncurryThis("".toLowerCase);
      var ucs2decode = function(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        while (counter < length) {
          var value = charCodeAt(string, counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            var extra = charCodeAt(string, counter++);
            if ((extra & 64512) == 56320) {
              push(output, ((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              push(output, value);
              counter--;
            }
          } else {
            push(output, value);
          }
        }
        return output;
      };
      var digitToBasic = function(digit) {
        return digit + 22 + 75 * (digit < 26);
      };
      var adapt = function(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        while (delta > baseMinusTMin * tMax >> 1) {
          delta = floor(delta / baseMinusTMin);
          k += base;
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      var encode = function(input) {
        var output = [];
        input = ucs2decode(input);
        var inputLength = input.length;
        var n = initialN;
        var delta = 0;
        var bias = initialBias;
        var i, currentValue;
        for (i = 0; i < input.length; i++) {
          currentValue = input[i];
          if (currentValue < 128) {
            push(output, fromCharCode(currentValue));
          }
        }
        var basicLength = output.length;
        var handledCPCount = basicLength;
        if (basicLength) {
          push(output, delimiter);
        }
        while (handledCPCount < inputLength) {
          var m = maxInt;
          for (i = 0; i < input.length; i++) {
            currentValue = input[i];
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          var handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            throw RangeError(OVERFLOW_ERROR);
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (i = 0; i < input.length; i++) {
            currentValue = input[i];
            if (currentValue < n && ++delta > maxInt) {
              throw RangeError(OVERFLOW_ERROR);
            }
            if (currentValue == n) {
              var q = delta;
              var k = base;
              while (true) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t)
                  break;
                var qMinusT = q - t;
                var baseMinusT = base - t;
                push(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                q = floor(qMinusT / baseMinusT);
                k += base;
              }
              push(output, fromCharCode(digitToBasic(q)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              handledCPCount++;
            }
          }
          delta++;
          n++;
        }
        return join(output, "");
      };
      module.exports = function(input) {
        var encoded = [];
        var labels = split(replace(toLowerCase(input), regexSeparators, "."), ".");
        var i, label;
        for (i = 0; i < labels.length; i++) {
          label = labels[i];
          push(encoded, exec(regexNonASCII, label) ? "xn--" + encode(label) : label);
        }
        return join(encoded, ".");
      };
    }
  });

  // node_modules/core-js/modules/web.url-search-params.js
  var require_web_url_search_params = __commonJS({
    "node_modules/core-js/modules/web.url-search-params.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      require_es_array_iterator();
      var $ = require_export();
      var global2 = require_global();
      var getBuiltIn = require_get_built_in();
      var call = require_function_call();
      var uncurryThis = require_function_uncurry_this();
      var USE_NATIVE_URL = require_native_url();
      var redefine = require_redefine();
      var redefineAll = require_redefine_all();
      var setToStringTag = require_set_to_string_tag();
      var createIteratorConstructor = require_create_iterator_constructor();
      var InternalStateModule = require_internal_state();
      var anInstance = require_an_instance();
      var isCallable = require_is_callable();
      var hasOwn = require_has_own_property();
      var bind = require_function_bind_context();
      var classof = require_classof();
      var anObject = require_an_object();
      var isObject2 = require_is_object();
      var $toString = require_to_string();
      var create = require_object_create();
      var createPropertyDescriptor = require_create_property_descriptor();
      var getIterator = require_get_iterator();
      var getIteratorMethod = require_get_iterator_method();
      var validateArgumentsLength = require_validate_arguments_length();
      var wellKnownSymbol = require_well_known_symbol();
      var arraySort = require_array_sort();
      var ITERATOR = wellKnownSymbol("iterator");
      var URL_SEARCH_PARAMS = "URLSearchParams";
      var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + "Iterator";
      var setInternalState = InternalStateModule.set;
      var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
      var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
      var n$Fetch = getBuiltIn("fetch");
      var N$Request = getBuiltIn("Request");
      var Headers2 = getBuiltIn("Headers");
      var RequestPrototype = N$Request && N$Request.prototype;
      var HeadersPrototype = Headers2 && Headers2.prototype;
      var RegExp2 = global2.RegExp;
      var TypeError2 = global2.TypeError;
      var decodeURIComponent2 = global2.decodeURIComponent;
      var encodeURIComponent2 = global2.encodeURIComponent;
      var charAt = uncurryThis("".charAt);
      var join = uncurryThis([].join);
      var push = uncurryThis([].push);
      var replace = uncurryThis("".replace);
      var shift = uncurryThis([].shift);
      var splice = uncurryThis([].splice);
      var split = uncurryThis("".split);
      var stringSlice = uncurryThis("".slice);
      var plus = /\+/g;
      var sequences = Array(4);
      var percentSequence = function(bytes) {
        return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp2("((?:%[\\da-f]{2}){" + bytes + "})", "gi"));
      };
      var percentDecode = function(sequence) {
        try {
          return decodeURIComponent2(sequence);
        } catch (error) {
          return sequence;
        }
      };
      var deserialize = function(it) {
        var result = replace(it, plus, " ");
        var bytes = 4;
        try {
          return decodeURIComponent2(result);
        } catch (error) {
          while (bytes) {
            result = replace(result, percentSequence(bytes--), percentDecode);
          }
          return result;
        }
      };
      var find = /[!'()~]|%20/g;
      var replacements = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+"
      };
      var replacer = function(match) {
        return replacements[match];
      };
      var serialize = function(it) {
        return replace(encodeURIComponent2(it), find, replacer);
      };
      var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
        setInternalState(this, {
          type: URL_SEARCH_PARAMS_ITERATOR,
          iterator: getIterator(getInternalParamsState(params).entries),
          kind
        });
      }, "Iterator", function next() {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var step = state.iterator.next();
        var entry = step.value;
        if (!step.done) {
          step.value = kind === "keys" ? entry.key : kind === "values" ? entry.value : [entry.key, entry.value];
        }
        return step;
      }, true);
      var URLSearchParamsState = function(init) {
        this.entries = [];
        this.url = null;
        if (init !== void 0) {
          if (isObject2(init))
            this.parseObject(init);
          else
            this.parseQuery(typeof init == "string" ? charAt(init, 0) === "?" ? stringSlice(init, 1) : init : $toString(init));
        }
      };
      URLSearchParamsState.prototype = {
        type: URL_SEARCH_PARAMS,
        bindURL: function(url) {
          this.url = url;
          this.update();
        },
        parseObject: function(object) {
          var iteratorMethod = getIteratorMethod(object);
          var iterator2, next, step, entryIterator, entryNext, first, second;
          if (iteratorMethod) {
            iterator2 = getIterator(object, iteratorMethod);
            next = iterator2.next;
            while (!(step = call(next, iterator2)).done) {
              entryIterator = getIterator(anObject(step.value));
              entryNext = entryIterator.next;
              if ((first = call(entryNext, entryIterator)).done || (second = call(entryNext, entryIterator)).done || !call(entryNext, entryIterator).done)
                throw TypeError2("Expected sequence with length 2");
              push(this.entries, { key: $toString(first.value), value: $toString(second.value) });
            }
          } else
            for (var key in object)
              if (hasOwn(object, key)) {
                push(this.entries, { key, value: $toString(object[key]) });
              }
        },
        parseQuery: function(query) {
          if (query) {
            var attributes = split(query, "&");
            var index = 0;
            var attribute, entry;
            while (index < attributes.length) {
              attribute = attributes[index++];
              if (attribute.length) {
                entry = split(attribute, "=");
                push(this.entries, {
                  key: deserialize(shift(entry)),
                  value: deserialize(join(entry, "="))
                });
              }
            }
          }
        },
        serialize: function() {
          var entries = this.entries;
          var result = [];
          var index = 0;
          var entry;
          while (index < entries.length) {
            entry = entries[index++];
            push(result, serialize(entry.key) + "=" + serialize(entry.value));
          }
          return join(result, "&");
        },
        update: function() {
          this.entries.length = 0;
          this.parseQuery(this.url.query);
        },
        updateURL: function() {
          if (this.url)
            this.url.update();
        }
      };
      var URLSearchParamsConstructor = function URLSearchParams2() {
        anInstance(this, URLSearchParamsPrototype);
        var init = arguments.length > 0 ? arguments[0] : void 0;
        setInternalState(this, new URLSearchParamsState(init));
      };
      var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
      redefineAll(URLSearchParamsPrototype, {
        append: function append(name, value) {
          validateArgumentsLength(arguments.length, 2);
          var state = getInternalParamsState(this);
          push(state.entries, { key: $toString(name), value: $toString(value) });
          state.updateURL();
        },
        "delete": function(name) {
          validateArgumentsLength(arguments.length, 1);
          var state = getInternalParamsState(this);
          var entries = state.entries;
          var key = $toString(name);
          var index = 0;
          while (index < entries.length) {
            if (entries[index].key === key)
              splice(entries, index, 1);
            else
              index++;
          }
          state.updateURL();
        },
        get: function get(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = $toString(name);
          var index = 0;
          for (; index < entries.length; index++) {
            if (entries[index].key === key)
              return entries[index].value;
          }
          return null;
        },
        getAll: function getAll(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = $toString(name);
          var result = [];
          var index = 0;
          for (; index < entries.length; index++) {
            if (entries[index].key === key)
              push(result, entries[index].value);
          }
          return result;
        },
        has: function has(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = $toString(name);
          var index = 0;
          while (index < entries.length) {
            if (entries[index++].key === key)
              return true;
          }
          return false;
        },
        set: function set(name, value) {
          validateArgumentsLength(arguments.length, 1);
          var state = getInternalParamsState(this);
          var entries = state.entries;
          var found = false;
          var key = $toString(name);
          var val = $toString(value);
          var index = 0;
          var entry;
          for (; index < entries.length; index++) {
            entry = entries[index];
            if (entry.key === key) {
              if (found)
                splice(entries, index--, 1);
              else {
                found = true;
                entry.value = val;
              }
            }
          }
          if (!found)
            push(entries, { key, value: val });
          state.updateURL();
        },
        sort: function sort() {
          var state = getInternalParamsState(this);
          arraySort(state.entries, function(a, b) {
            return a.key > b.key ? 1 : -1;
          });
          state.updateURL();
        },
        forEach: function forEach(callback) {
          var entries = getInternalParamsState(this).entries;
          var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : void 0);
          var index = 0;
          var entry;
          while (index < entries.length) {
            entry = entries[index++];
            boundFunction(entry.value, entry.key, this);
          }
        },
        keys: function keys() {
          return new URLSearchParamsIterator(this, "keys");
        },
        values: function values() {
          return new URLSearchParamsIterator(this, "values");
        },
        entries: function entries() {
          return new URLSearchParamsIterator(this, "entries");
        }
      }, { enumerable: true });
      redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: "entries" });
      redefine(URLSearchParamsPrototype, "toString", function toString() {
        return getInternalParamsState(this).serialize();
      }, { enumerable: true });
      setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
      $({ global: true, forced: !USE_NATIVE_URL }, {
        URLSearchParams: URLSearchParamsConstructor
      });
      if (!USE_NATIVE_URL && isCallable(Headers2)) {
        headersHas = uncurryThis(HeadersPrototype.has);
        headersSet = uncurryThis(HeadersPrototype.set);
        wrapRequestOptions = function(init) {
          if (isObject2(init)) {
            var body = init.body;
            var headers;
            if (classof(body) === URL_SEARCH_PARAMS) {
              headers = init.headers ? new Headers2(init.headers) : new Headers2();
              if (!headersHas(headers, "content-type")) {
                headersSet(headers, "content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
              return create(init, {
                body: createPropertyDescriptor(0, $toString(body)),
                headers: createPropertyDescriptor(0, headers)
              });
            }
          }
          return init;
        };
        if (isCallable(n$Fetch)) {
          $({ global: true, enumerable: true, forced: true }, {
            fetch: function fetch2(input) {
              return n$Fetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
            }
          });
        }
        if (isCallable(N$Request)) {
          RequestConstructor = function Request(input) {
            anInstance(this, RequestPrototype);
            return new N$Request(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
          };
          RequestPrototype.constructor = RequestConstructor;
          RequestConstructor.prototype = RequestPrototype;
          $({ global: true, forced: true }, {
            Request: RequestConstructor
          });
        }
      }
      var headersHas;
      var headersSet;
      var wrapRequestOptions;
      var RequestConstructor;
      module.exports = {
        URLSearchParams: URLSearchParamsConstructor,
        getState: getInternalParamsState
      };
    }
  });

  // node_modules/core-js/modules/web.url.js
  var require_web_url = __commonJS({
    "node_modules/core-js/modules/web.url.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      require_es_string_iterator();
      var $ = require_export();
      var DESCRIPTORS = require_descriptors();
      var USE_NATIVE_URL = require_native_url();
      var global2 = require_global();
      var bind = require_function_bind_context();
      var uncurryThis = require_function_uncurry_this();
      var defineProperties = require_object_define_properties().f;
      var redefine = require_redefine();
      var anInstance = require_an_instance();
      var hasOwn = require_has_own_property();
      var assign = require_object_assign();
      var arrayFrom = require_array_from();
      var arraySlice2 = require_array_slice_simple();
      var codeAt = require_string_multibyte().codeAt;
      var toASCII = require_string_punycode_to_ascii();
      var $toString = require_to_string();
      var setToStringTag = require_set_to_string_tag();
      var validateArgumentsLength = require_validate_arguments_length();
      var URLSearchParamsModule = require_web_url_search_params();
      var InternalStateModule = require_internal_state();
      var setInternalState = InternalStateModule.set;
      var getInternalURLState = InternalStateModule.getterFor("URL");
      var URLSearchParams2 = URLSearchParamsModule.URLSearchParams;
      var getInternalSearchParamsState = URLSearchParamsModule.getState;
      var NativeURL = global2.URL;
      var TypeError2 = global2.TypeError;
      var parseInt2 = global2.parseInt;
      var floor = Math.floor;
      var pow = Math.pow;
      var charAt = uncurryThis("".charAt);
      var exec = uncurryThis(/./.exec);
      var join = uncurryThis([].join);
      var numberToString = uncurryThis(1 .toString);
      var pop = uncurryThis([].pop);
      var push = uncurryThis([].push);
      var replace = uncurryThis("".replace);
      var shift = uncurryThis([].shift);
      var split = uncurryThis("".split);
      var stringSlice = uncurryThis("".slice);
      var toLowerCase = uncurryThis("".toLowerCase);
      var unshift = uncurryThis([].unshift);
      var INVALID_AUTHORITY = "Invalid authority";
      var INVALID_SCHEME = "Invalid scheme";
      var INVALID_HOST = "Invalid host";
      var INVALID_PORT = "Invalid port";
      var ALPHA = /[a-z]/i;
      var ALPHANUMERIC = /[\d+-.a-z]/i;
      var DIGIT = /\d/;
      var HEX_START = /^0x/i;
      var OCT = /^[0-7]+$/;
      var DEC = /^\d+$/;
      var HEX = /^[\da-f]+$/i;
      var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
      var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
      var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
      var TAB_AND_NEW_LINE = /[\t\n\r]/g;
      var EOF;
      var parseIPv4 = function(input) {
        var parts = split(input, ".");
        var partsLength, numbers, index, part, radix, number, ipv4;
        if (parts.length && parts[parts.length - 1] == "") {
          parts.length--;
        }
        partsLength = parts.length;
        if (partsLength > 4)
          return input;
        numbers = [];
        for (index = 0; index < partsLength; index++) {
          part = parts[index];
          if (part == "")
            return input;
          radix = 10;
          if (part.length > 1 && charAt(part, 0) == "0") {
            radix = exec(HEX_START, part) ? 16 : 8;
            part = stringSlice(part, radix == 8 ? 1 : 2);
          }
          if (part === "") {
            number = 0;
          } else {
            if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part))
              return input;
            number = parseInt2(part, radix);
          }
          push(numbers, number);
        }
        for (index = 0; index < partsLength; index++) {
          number = numbers[index];
          if (index == partsLength - 1) {
            if (number >= pow(256, 5 - partsLength))
              return null;
          } else if (number > 255)
            return null;
        }
        ipv4 = pop(numbers);
        for (index = 0; index < numbers.length; index++) {
          ipv4 += numbers[index] * pow(256, 3 - index);
        }
        return ipv4;
      };
      var parseIPv6 = function(input) {
        var address = [0, 0, 0, 0, 0, 0, 0, 0];
        var pieceIndex = 0;
        var compress = null;
        var pointer = 0;
        var value, length, numbersSeen, ipv4Piece, number, swaps, swap;
        var chr = function() {
          return charAt(input, pointer);
        };
        if (chr() == ":") {
          if (charAt(input, 1) != ":")
            return;
          pointer += 2;
          pieceIndex++;
          compress = pieceIndex;
        }
        while (chr()) {
          if (pieceIndex == 8)
            return;
          if (chr() == ":") {
            if (compress !== null)
              return;
            pointer++;
            pieceIndex++;
            compress = pieceIndex;
            continue;
          }
          value = length = 0;
          while (length < 4 && exec(HEX, chr())) {
            value = value * 16 + parseInt2(chr(), 16);
            pointer++;
            length++;
          }
          if (chr() == ".") {
            if (length == 0)
              return;
            pointer -= length;
            if (pieceIndex > 6)
              return;
            numbersSeen = 0;
            while (chr()) {
              ipv4Piece = null;
              if (numbersSeen > 0) {
                if (chr() == "." && numbersSeen < 4)
                  pointer++;
                else
                  return;
              }
              if (!exec(DIGIT, chr()))
                return;
              while (exec(DIGIT, chr())) {
                number = parseInt2(chr(), 10);
                if (ipv4Piece === null)
                  ipv4Piece = number;
                else if (ipv4Piece == 0)
                  return;
                else
                  ipv4Piece = ipv4Piece * 10 + number;
                if (ipv4Piece > 255)
                  return;
                pointer++;
              }
              address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
              numbersSeen++;
              if (numbersSeen == 2 || numbersSeen == 4)
                pieceIndex++;
            }
            if (numbersSeen != 4)
              return;
            break;
          } else if (chr() == ":") {
            pointer++;
            if (!chr())
              return;
          } else if (chr())
            return;
          address[pieceIndex++] = value;
        }
        if (compress !== null) {
          swaps = pieceIndex - compress;
          pieceIndex = 7;
          while (pieceIndex != 0 && swaps > 0) {
            swap = address[pieceIndex];
            address[pieceIndex--] = address[compress + swaps - 1];
            address[compress + --swaps] = swap;
          }
        } else if (pieceIndex != 8)
          return;
        return address;
      };
      var findLongestZeroSequence = function(ipv6) {
        var maxIndex = null;
        var maxLength = 1;
        var currStart = null;
        var currLength = 0;
        var index = 0;
        for (; index < 8; index++) {
          if (ipv6[index] !== 0) {
            if (currLength > maxLength) {
              maxIndex = currStart;
              maxLength = currLength;
            }
            currStart = null;
            currLength = 0;
          } else {
            if (currStart === null)
              currStart = index;
            ++currLength;
          }
        }
        if (currLength > maxLength) {
          maxIndex = currStart;
          maxLength = currLength;
        }
        return maxIndex;
      };
      var serializeHost = function(host) {
        var result, index, compress, ignore0;
        if (typeof host == "number") {
          result = [];
          for (index = 0; index < 4; index++) {
            unshift(result, host % 256);
            host = floor(host / 256);
          }
          return join(result, ".");
        } else if (typeof host == "object") {
          result = "";
          compress = findLongestZeroSequence(host);
          for (index = 0; index < 8; index++) {
            if (ignore0 && host[index] === 0)
              continue;
            if (ignore0)
              ignore0 = false;
            if (compress === index) {
              result += index ? ":" : "::";
              ignore0 = true;
            } else {
              result += numberToString(host[index], 16);
              if (index < 7)
                result += ":";
            }
          }
          return "[" + result + "]";
        }
        return host;
      };
      var C0ControlPercentEncodeSet = {};
      var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
        " ": 1,
        '"': 1,
        "<": 1,
        ">": 1,
        "`": 1
      });
      var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
        "#": 1,
        "?": 1,
        "{": 1,
        "}": 1
      });
      var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
        "/": 1,
        ":": 1,
        ";": 1,
        "=": 1,
        "@": 1,
        "[": 1,
        "\\": 1,
        "]": 1,
        "^": 1,
        "|": 1
      });
      var percentEncode = function(chr, set) {
        var code = codeAt(chr, 0);
        return code > 32 && code < 127 && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
      };
      var specialSchemes = {
        ftp: 21,
        file: null,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443
      };
      var isWindowsDriveLetter = function(string, normalized) {
        var second;
        return string.length == 2 && exec(ALPHA, charAt(string, 0)) && ((second = charAt(string, 1)) == ":" || !normalized && second == "|");
      };
      var startsWithWindowsDriveLetter = function(string) {
        var third;
        return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (string.length == 2 || ((third = charAt(string, 2)) === "/" || third === "\\" || third === "?" || third === "#"));
      };
      var isSingleDot = function(segment) {
        return segment === "." || toLowerCase(segment) === "%2e";
      };
      var isDoubleDot = function(segment) {
        segment = toLowerCase(segment);
        return segment === ".." || segment === "%2e." || segment === ".%2e" || segment === "%2e%2e";
      };
      var SCHEME_START = {};
      var SCHEME = {};
      var NO_SCHEME = {};
      var SPECIAL_RELATIVE_OR_AUTHORITY = {};
      var PATH_OR_AUTHORITY = {};
      var RELATIVE = {};
      var RELATIVE_SLASH = {};
      var SPECIAL_AUTHORITY_SLASHES = {};
      var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
      var AUTHORITY = {};
      var HOST = {};
      var HOSTNAME = {};
      var PORT = {};
      var FILE = {};
      var FILE_SLASH = {};
      var FILE_HOST = {};
      var PATH_START = {};
      var PATH = {};
      var CANNOT_BE_A_BASE_URL_PATH = {};
      var QUERY = {};
      var FRAGMENT = {};
      var URLState = function(url, isBase, base) {
        var urlString = $toString(url);
        var baseState, failure, searchParams;
        if (isBase) {
          failure = this.parse(urlString);
          if (failure)
            throw TypeError2(failure);
          this.searchParams = null;
        } else {
          if (base !== void 0)
            baseState = new URLState(base, true);
          failure = this.parse(urlString, null, baseState);
          if (failure)
            throw TypeError2(failure);
          searchParams = getInternalSearchParamsState(new URLSearchParams2());
          searchParams.bindURL(this);
          this.searchParams = searchParams;
        }
      };
      URLState.prototype = {
        type: "URL",
        parse: function(input, stateOverride, base) {
          var url = this;
          var state = stateOverride || SCHEME_START;
          var pointer = 0;
          var buffer = "";
          var seenAt = false;
          var seenBracket = false;
          var seenPasswordToken = false;
          var codePoints, chr, bufferCodePoints, failure;
          input = $toString(input);
          if (!stateOverride) {
            url.scheme = "";
            url.username = "";
            url.password = "";
            url.host = null;
            url.port = null;
            url.path = [];
            url.query = null;
            url.fragment = null;
            url.cannotBeABaseURL = false;
            input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, "");
          }
          input = replace(input, TAB_AND_NEW_LINE, "");
          codePoints = arrayFrom(input);
          while (pointer <= codePoints.length) {
            chr = codePoints[pointer];
            switch (state) {
              case SCHEME_START:
                if (chr && exec(ALPHA, chr)) {
                  buffer += toLowerCase(chr);
                  state = SCHEME;
                } else if (!stateOverride) {
                  state = NO_SCHEME;
                  continue;
                } else
                  return INVALID_SCHEME;
                break;
              case SCHEME:
                if (chr && (exec(ALPHANUMERIC, chr) || chr == "+" || chr == "-" || chr == ".")) {
                  buffer += toLowerCase(chr);
                } else if (chr == ":") {
                  if (stateOverride && (url.isSpecial() != hasOwn(specialSchemes, buffer) || buffer == "file" && (url.includesCredentials() || url.port !== null) || url.scheme == "file" && !url.host))
                    return;
                  url.scheme = buffer;
                  if (stateOverride) {
                    if (url.isSpecial() && specialSchemes[url.scheme] == url.port)
                      url.port = null;
                    return;
                  }
                  buffer = "";
                  if (url.scheme == "file") {
                    state = FILE;
                  } else if (url.isSpecial() && base && base.scheme == url.scheme) {
                    state = SPECIAL_RELATIVE_OR_AUTHORITY;
                  } else if (url.isSpecial()) {
                    state = SPECIAL_AUTHORITY_SLASHES;
                  } else if (codePoints[pointer + 1] == "/") {
                    state = PATH_OR_AUTHORITY;
                    pointer++;
                  } else {
                    url.cannotBeABaseURL = true;
                    push(url.path, "");
                    state = CANNOT_BE_A_BASE_URL_PATH;
                  }
                } else if (!stateOverride) {
                  buffer = "";
                  state = NO_SCHEME;
                  pointer = 0;
                  continue;
                } else
                  return INVALID_SCHEME;
                break;
              case NO_SCHEME:
                if (!base || base.cannotBeABaseURL && chr != "#")
                  return INVALID_SCHEME;
                if (base.cannotBeABaseURL && chr == "#") {
                  url.scheme = base.scheme;
                  url.path = arraySlice2(base.path);
                  url.query = base.query;
                  url.fragment = "";
                  url.cannotBeABaseURL = true;
                  state = FRAGMENT;
                  break;
                }
                state = base.scheme == "file" ? FILE : RELATIVE;
                continue;
              case SPECIAL_RELATIVE_OR_AUTHORITY:
                if (chr == "/" && codePoints[pointer + 1] == "/") {
                  state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  pointer++;
                } else {
                  state = RELATIVE;
                  continue;
                }
                break;
              case PATH_OR_AUTHORITY:
                if (chr == "/") {
                  state = AUTHORITY;
                  break;
                } else {
                  state = PATH;
                  continue;
                }
              case RELATIVE:
                url.scheme = base.scheme;
                if (chr == EOF) {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  url.path = arraySlice2(base.path);
                  url.query = base.query;
                } else if (chr == "/" || chr == "\\" && url.isSpecial()) {
                  state = RELATIVE_SLASH;
                } else if (chr == "?") {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  url.path = arraySlice2(base.path);
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  url.path = arraySlice2(base.path);
                  url.query = base.query;
                  url.fragment = "";
                  state = FRAGMENT;
                } else {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  url.path = arraySlice2(base.path);
                  url.path.length--;
                  state = PATH;
                  continue;
                }
                break;
              case RELATIVE_SLASH:
                if (url.isSpecial() && (chr == "/" || chr == "\\")) {
                  state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                } else if (chr == "/") {
                  state = AUTHORITY;
                } else {
                  url.username = base.username;
                  url.password = base.password;
                  url.host = base.host;
                  url.port = base.port;
                  state = PATH;
                  continue;
                }
                break;
              case SPECIAL_AUTHORITY_SLASHES:
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                if (chr != "/" || charAt(buffer, pointer + 1) != "/")
                  continue;
                pointer++;
                break;
              case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                if (chr != "/" && chr != "\\") {
                  state = AUTHORITY;
                  continue;
                }
                break;
              case AUTHORITY:
                if (chr == "@") {
                  if (seenAt)
                    buffer = "%40" + buffer;
                  seenAt = true;
                  bufferCodePoints = arrayFrom(buffer);
                  for (var i = 0; i < bufferCodePoints.length; i++) {
                    var codePoint = bufferCodePoints[i];
                    if (codePoint == ":" && !seenPasswordToken) {
                      seenPasswordToken = true;
                      continue;
                    }
                    var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                    if (seenPasswordToken)
                      url.password += encodedCodePoints;
                    else
                      url.username += encodedCodePoints;
                  }
                  buffer = "";
                } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                  if (seenAt && buffer == "")
                    return INVALID_AUTHORITY;
                  pointer -= arrayFrom(buffer).length + 1;
                  buffer = "";
                  state = HOST;
                } else
                  buffer += chr;
                break;
              case HOST:
              case HOSTNAME:
                if (stateOverride && url.scheme == "file") {
                  state = FILE_HOST;
                  continue;
                } else if (chr == ":" && !seenBracket) {
                  if (buffer == "")
                    return INVALID_HOST;
                  failure = url.parseHost(buffer);
                  if (failure)
                    return failure;
                  buffer = "";
                  state = PORT;
                  if (stateOverride == HOSTNAME)
                    return;
                } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial()) {
                  if (url.isSpecial() && buffer == "")
                    return INVALID_HOST;
                  if (stateOverride && buffer == "" && (url.includesCredentials() || url.port !== null))
                    return;
                  failure = url.parseHost(buffer);
                  if (failure)
                    return failure;
                  buffer = "";
                  state = PATH_START;
                  if (stateOverride)
                    return;
                  continue;
                } else {
                  if (chr == "[")
                    seenBracket = true;
                  else if (chr == "]")
                    seenBracket = false;
                  buffer += chr;
                }
                break;
              case PORT:
                if (exec(DIGIT, chr)) {
                  buffer += chr;
                } else if (chr == EOF || chr == "/" || chr == "?" || chr == "#" || chr == "\\" && url.isSpecial() || stateOverride) {
                  if (buffer != "") {
                    var port = parseInt2(buffer, 10);
                    if (port > 65535)
                      return INVALID_PORT;
                    url.port = url.isSpecial() && port === specialSchemes[url.scheme] ? null : port;
                    buffer = "";
                  }
                  if (stateOverride)
                    return;
                  state = PATH_START;
                  continue;
                } else
                  return INVALID_PORT;
                break;
              case FILE:
                url.scheme = "file";
                if (chr == "/" || chr == "\\")
                  state = FILE_SLASH;
                else if (base && base.scheme == "file") {
                  if (chr == EOF) {
                    url.host = base.host;
                    url.path = arraySlice2(base.path);
                    url.query = base.query;
                  } else if (chr == "?") {
                    url.host = base.host;
                    url.path = arraySlice2(base.path);
                    url.query = "";
                    state = QUERY;
                  } else if (chr == "#") {
                    url.host = base.host;
                    url.path = arraySlice2(base.path);
                    url.query = base.query;
                    url.fragment = "";
                    state = FRAGMENT;
                  } else {
                    if (!startsWithWindowsDriveLetter(join(arraySlice2(codePoints, pointer), ""))) {
                      url.host = base.host;
                      url.path = arraySlice2(base.path);
                      url.shortenPath();
                    }
                    state = PATH;
                    continue;
                  }
                } else {
                  state = PATH;
                  continue;
                }
                break;
              case FILE_SLASH:
                if (chr == "/" || chr == "\\") {
                  state = FILE_HOST;
                  break;
                }
                if (base && base.scheme == "file" && !startsWithWindowsDriveLetter(join(arraySlice2(codePoints, pointer), ""))) {
                  if (isWindowsDriveLetter(base.path[0], true))
                    push(url.path, base.path[0]);
                  else
                    url.host = base.host;
                }
                state = PATH;
                continue;
              case FILE_HOST:
                if (chr == EOF || chr == "/" || chr == "\\" || chr == "?" || chr == "#") {
                  if (!stateOverride && isWindowsDriveLetter(buffer)) {
                    state = PATH;
                  } else if (buffer == "") {
                    url.host = "";
                    if (stateOverride)
                      return;
                    state = PATH_START;
                  } else {
                    failure = url.parseHost(buffer);
                    if (failure)
                      return failure;
                    if (url.host == "localhost")
                      url.host = "";
                    if (stateOverride)
                      return;
                    buffer = "";
                    state = PATH_START;
                  }
                  continue;
                } else
                  buffer += chr;
                break;
              case PATH_START:
                if (url.isSpecial()) {
                  state = PATH;
                  if (chr != "/" && chr != "\\")
                    continue;
                } else if (!stateOverride && chr == "?") {
                  url.query = "";
                  state = QUERY;
                } else if (!stateOverride && chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                } else if (chr != EOF) {
                  state = PATH;
                  if (chr != "/")
                    continue;
                }
                break;
              case PATH:
                if (chr == EOF || chr == "/" || chr == "\\" && url.isSpecial() || !stateOverride && (chr == "?" || chr == "#")) {
                  if (isDoubleDot(buffer)) {
                    url.shortenPath();
                    if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                      push(url.path, "");
                    }
                  } else if (isSingleDot(buffer)) {
                    if (chr != "/" && !(chr == "\\" && url.isSpecial())) {
                      push(url.path, "");
                    }
                  } else {
                    if (url.scheme == "file" && !url.path.length && isWindowsDriveLetter(buffer)) {
                      if (url.host)
                        url.host = "";
                      buffer = charAt(buffer, 0) + ":";
                    }
                    push(url.path, buffer);
                  }
                  buffer = "";
                  if (url.scheme == "file" && (chr == EOF || chr == "?" || chr == "#")) {
                    while (url.path.length > 1 && url.path[0] === "") {
                      shift(url.path);
                    }
                  }
                  if (chr == "?") {
                    url.query = "";
                    state = QUERY;
                  } else if (chr == "#") {
                    url.fragment = "";
                    state = FRAGMENT;
                  }
                } else {
                  buffer += percentEncode(chr, pathPercentEncodeSet);
                }
                break;
              case CANNOT_BE_A_BASE_URL_PATH:
                if (chr == "?") {
                  url.query = "";
                  state = QUERY;
                } else if (chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                } else if (chr != EOF) {
                  url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
                }
                break;
              case QUERY:
                if (!stateOverride && chr == "#") {
                  url.fragment = "";
                  state = FRAGMENT;
                } else if (chr != EOF) {
                  if (chr == "'" && url.isSpecial())
                    url.query += "%27";
                  else if (chr == "#")
                    url.query += "%23";
                  else
                    url.query += percentEncode(chr, C0ControlPercentEncodeSet);
                }
                break;
              case FRAGMENT:
                if (chr != EOF)
                  url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
                break;
            }
            pointer++;
          }
        },
        parseHost: function(input) {
          var result, codePoints, index;
          if (charAt(input, 0) == "[") {
            if (charAt(input, input.length - 1) != "]")
              return INVALID_HOST;
            result = parseIPv6(stringSlice(input, 1, -1));
            if (!result)
              return INVALID_HOST;
            this.host = result;
          } else if (!this.isSpecial()) {
            if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input))
              return INVALID_HOST;
            result = "";
            codePoints = arrayFrom(input);
            for (index = 0; index < codePoints.length; index++) {
              result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
            }
            this.host = result;
          } else {
            input = toASCII(input);
            if (exec(FORBIDDEN_HOST_CODE_POINT, input))
              return INVALID_HOST;
            result = parseIPv4(input);
            if (result === null)
              return INVALID_HOST;
            this.host = result;
          }
        },
        cannotHaveUsernamePasswordPort: function() {
          return !this.host || this.cannotBeABaseURL || this.scheme == "file";
        },
        includesCredentials: function() {
          return this.username != "" || this.password != "";
        },
        isSpecial: function() {
          return hasOwn(specialSchemes, this.scheme);
        },
        shortenPath: function() {
          var path = this.path;
          var pathSize = path.length;
          if (pathSize && (this.scheme != "file" || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
            path.length--;
          }
        },
        serialize: function() {
          var url = this;
          var scheme = url.scheme;
          var username = url.username;
          var password = url.password;
          var host = url.host;
          var port = url.port;
          var path = url.path;
          var query = url.query;
          var fragment = url.fragment;
          var output = scheme + ":";
          if (host !== null) {
            output += "//";
            if (url.includesCredentials()) {
              output += username + (password ? ":" + password : "") + "@";
            }
            output += serializeHost(host);
            if (port !== null)
              output += ":" + port;
          } else if (scheme == "file")
            output += "//";
          output += url.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
          if (query !== null)
            output += "?" + query;
          if (fragment !== null)
            output += "#" + fragment;
          return output;
        },
        setHref: function(href) {
          var failure = this.parse(href);
          if (failure)
            throw TypeError2(failure);
          this.searchParams.update();
        },
        getOrigin: function() {
          var scheme = this.scheme;
          var port = this.port;
          if (scheme == "blob")
            try {
              return new URLConstructor(scheme.path[0]).origin;
            } catch (error) {
              return "null";
            }
          if (scheme == "file" || !this.isSpecial())
            return "null";
          return scheme + "://" + serializeHost(this.host) + (port !== null ? ":" + port : "");
        },
        getProtocol: function() {
          return this.scheme + ":";
        },
        setProtocol: function(protocol) {
          this.parse($toString(protocol) + ":", SCHEME_START);
        },
        getUsername: function() {
          return this.username;
        },
        setUsername: function(username) {
          var codePoints = arrayFrom($toString(username));
          if (this.cannotHaveUsernamePasswordPort())
            return;
          this.username = "";
          for (var i = 0; i < codePoints.length; i++) {
            this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
          }
        },
        getPassword: function() {
          return this.password;
        },
        setPassword: function(password) {
          var codePoints = arrayFrom($toString(password));
          if (this.cannotHaveUsernamePasswordPort())
            return;
          this.password = "";
          for (var i = 0; i < codePoints.length; i++) {
            this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
          }
        },
        getHost: function() {
          var host = this.host;
          var port = this.port;
          return host === null ? "" : port === null ? serializeHost(host) : serializeHost(host) + ":" + port;
        },
        setHost: function(host) {
          if (this.cannotBeABaseURL)
            return;
          this.parse(host, HOST);
        },
        getHostname: function() {
          var host = this.host;
          return host === null ? "" : serializeHost(host);
        },
        setHostname: function(hostname) {
          if (this.cannotBeABaseURL)
            return;
          this.parse(hostname, HOSTNAME);
        },
        getPort: function() {
          var port = this.port;
          return port === null ? "" : $toString(port);
        },
        setPort: function(port) {
          if (this.cannotHaveUsernamePasswordPort())
            return;
          port = $toString(port);
          if (port == "")
            this.port = null;
          else
            this.parse(port, PORT);
        },
        getPathname: function() {
          var path = this.path;
          return this.cannotBeABaseURL ? path[0] : path.length ? "/" + join(path, "/") : "";
        },
        setPathname: function(pathname) {
          if (this.cannotBeABaseURL)
            return;
          this.path = [];
          this.parse(pathname, PATH_START);
        },
        getSearch: function() {
          var query = this.query;
          return query ? "?" + query : "";
        },
        setSearch: function(search) {
          search = $toString(search);
          if (search == "") {
            this.query = null;
          } else {
            if (charAt(search, 0) == "?")
              search = stringSlice(search, 1);
            this.query = "";
            this.parse(search, QUERY);
          }
          this.searchParams.update();
        },
        getSearchParams: function() {
          return this.searchParams.facade;
        },
        getHash: function() {
          var fragment = this.fragment;
          return fragment ? "#" + fragment : "";
        },
        setHash: function(hash) {
          hash = $toString(hash);
          if (hash == "") {
            this.fragment = null;
            return;
          }
          if (charAt(hash, 0) == "#")
            hash = stringSlice(hash, 1);
          this.fragment = "";
          this.parse(hash, FRAGMENT);
        },
        update: function() {
          this.query = this.searchParams.serialize() || null;
        }
      };
      var URLConstructor = function URL2(url) {
        var that = anInstance(this, URLPrototype);
        var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : void 0;
        var state = setInternalState(that, new URLState(url, false, base));
        if (!DESCRIPTORS) {
          that.href = state.serialize();
          that.origin = state.getOrigin();
          that.protocol = state.getProtocol();
          that.username = state.getUsername();
          that.password = state.getPassword();
          that.host = state.getHost();
          that.hostname = state.getHostname();
          that.port = state.getPort();
          that.pathname = state.getPathname();
          that.search = state.getSearch();
          that.searchParams = state.getSearchParams();
          that.hash = state.getHash();
        }
      };
      var URLPrototype = URLConstructor.prototype;
      var accessorDescriptor = function(getter, setter) {
        return {
          get: function() {
            return getInternalURLState(this)[getter]();
          },
          set: setter && function(value) {
            return getInternalURLState(this)[setter](value);
          },
          configurable: true,
          enumerable: true
        };
      };
      if (DESCRIPTORS) {
        defineProperties(URLPrototype, {
          href: accessorDescriptor("serialize", "setHref"),
          origin: accessorDescriptor("getOrigin"),
          protocol: accessorDescriptor("getProtocol", "setProtocol"),
          username: accessorDescriptor("getUsername", "setUsername"),
          password: accessorDescriptor("getPassword", "setPassword"),
          host: accessorDescriptor("getHost", "setHost"),
          hostname: accessorDescriptor("getHostname", "setHostname"),
          port: accessorDescriptor("getPort", "setPort"),
          pathname: accessorDescriptor("getPathname", "setPathname"),
          search: accessorDescriptor("getSearch", "setSearch"),
          searchParams: accessorDescriptor("getSearchParams"),
          hash: accessorDescriptor("getHash", "setHash")
        });
      }
      redefine(URLPrototype, "toJSON", function toJSON() {
        return getInternalURLState(this).serialize();
      }, { enumerable: true });
      redefine(URLPrototype, "toString", function toString() {
        return getInternalURLState(this).serialize();
      }, { enumerable: true });
      if (NativeURL) {
        nativeCreateObjectURL = NativeURL.createObjectURL;
        nativeRevokeObjectURL = NativeURL.revokeObjectURL;
        if (nativeCreateObjectURL)
          redefine(URLConstructor, "createObjectURL", bind(nativeCreateObjectURL, NativeURL));
        if (nativeRevokeObjectURL)
          redefine(URLConstructor, "revokeObjectURL", bind(nativeRevokeObjectURL, NativeURL));
      }
      var nativeCreateObjectURL;
      var nativeRevokeObjectURL;
      setToStringTag(URLConstructor, "URL");
      $({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
        URL: URLConstructor
      });
    }
  });

  // node_modules/core-js/modules/web.url.to-json.js
  var require_web_url_to_json = __commonJS({
    "node_modules/core-js/modules/web.url.to-json.js"() {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var $ = require_export();
      var call = require_function_call();
      $({ target: "URL", proto: true, enumerable: true }, {
        toJSON: function toJSON() {
          return call(URL.prototype.toString, this);
        }
      });
    }
  });

  // node_modules/core-js/stable/index.js
  var require_stable = __commonJS({
    "node_modules/core-js/stable/index.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      require_es_symbol();
      require_es_symbol_description();
      require_es_symbol_async_iterator();
      require_es_symbol_has_instance();
      require_es_symbol_is_concat_spreadable();
      require_es_symbol_iterator();
      require_es_symbol_match();
      require_es_symbol_match_all();
      require_es_symbol_replace();
      require_es_symbol_search();
      require_es_symbol_species();
      require_es_symbol_split();
      require_es_symbol_to_primitive();
      require_es_symbol_to_string_tag();
      require_es_symbol_unscopables();
      require_es_error_cause();
      require_es_error_to_string();
      require_es_aggregate_error();
      require_es_aggregate_error_cause();
      require_es_array_at();
      require_es_array_concat();
      require_es_array_copy_within();
      require_es_array_every();
      require_es_array_fill();
      require_es_array_filter();
      require_es_array_find();
      require_es_array_find_index();
      require_es_array_flat();
      require_es_array_flat_map();
      require_es_array_for_each();
      require_es_array_from();
      require_es_array_includes();
      require_es_array_index_of();
      require_es_array_is_array();
      require_es_array_iterator();
      require_es_array_join();
      require_es_array_last_index_of();
      require_es_array_map();
      require_es_array_of();
      require_es_array_reduce();
      require_es_array_reduce_right();
      require_es_array_reverse();
      require_es_array_slice();
      require_es_array_some();
      require_es_array_sort();
      require_es_array_species();
      require_es_array_splice();
      require_es_array_unscopables_flat();
      require_es_array_unscopables_flat_map();
      require_es_array_buffer_constructor();
      require_es_array_buffer_is_view();
      require_es_array_buffer_slice();
      require_es_data_view();
      require_es_date_get_year();
      require_es_date_now();
      require_es_date_set_year();
      require_es_date_to_gmt_string();
      require_es_date_to_iso_string();
      require_es_date_to_json();
      require_es_date_to_primitive();
      require_es_date_to_string();
      require_es_escape();
      require_es_function_bind();
      require_es_function_has_instance();
      require_es_function_name();
      require_es_global_this();
      require_es_json_stringify();
      require_es_json_to_string_tag();
      require_es_map();
      require_es_math_acosh();
      require_es_math_asinh();
      require_es_math_atanh();
      require_es_math_cbrt();
      require_es_math_clz32();
      require_es_math_cosh();
      require_es_math_expm1();
      require_es_math_fround();
      require_es_math_hypot();
      require_es_math_imul();
      require_es_math_log10();
      require_es_math_log1p();
      require_es_math_log2();
      require_es_math_sign();
      require_es_math_sinh();
      require_es_math_tanh();
      require_es_math_to_string_tag();
      require_es_math_trunc();
      require_es_number_constructor();
      require_es_number_epsilon();
      require_es_number_is_finite();
      require_es_number_is_integer();
      require_es_number_is_nan();
      require_es_number_is_safe_integer();
      require_es_number_max_safe_integer();
      require_es_number_min_safe_integer();
      require_es_number_parse_float();
      require_es_number_parse_int();
      require_es_number_to_exponential();
      require_es_number_to_fixed();
      require_es_number_to_precision();
      require_es_object_assign();
      require_es_object_create();
      require_es_object_define_getter();
      require_es_object_define_properties();
      require_es_object_define_property();
      require_es_object_define_setter();
      require_es_object_entries();
      require_es_object_freeze();
      require_es_object_from_entries();
      require_es_object_get_own_property_descriptor();
      require_es_object_get_own_property_descriptors();
      require_es_object_get_own_property_names();
      require_es_object_get_prototype_of();
      require_es_object_has_own();
      require_es_object_is();
      require_es_object_is_extensible();
      require_es_object_is_frozen();
      require_es_object_is_sealed();
      require_es_object_keys();
      require_es_object_lookup_getter();
      require_es_object_lookup_setter();
      require_es_object_prevent_extensions();
      require_es_object_seal();
      require_es_object_set_prototype_of();
      require_es_object_to_string();
      require_es_object_values();
      require_es_parse_float();
      require_es_parse_int();
      require_es_promise();
      require_es_promise_all_settled();
      require_es_promise_any();
      require_es_promise_finally();
      require_es_reflect_apply();
      require_es_reflect_construct();
      require_es_reflect_define_property();
      require_es_reflect_delete_property();
      require_es_reflect_get();
      require_es_reflect_get_own_property_descriptor();
      require_es_reflect_get_prototype_of();
      require_es_reflect_has();
      require_es_reflect_is_extensible();
      require_es_reflect_own_keys();
      require_es_reflect_prevent_extensions();
      require_es_reflect_set();
      require_es_reflect_set_prototype_of();
      require_es_reflect_to_string_tag();
      require_es_regexp_constructor();
      require_es_regexp_dot_all();
      require_es_regexp_exec();
      require_es_regexp_flags();
      require_es_regexp_sticky();
      require_es_regexp_test();
      require_es_regexp_to_string();
      require_es_set();
      require_es_string_at_alternative();
      require_es_string_code_point_at();
      require_es_string_ends_with();
      require_es_string_from_code_point();
      require_es_string_includes();
      require_es_string_iterator();
      require_es_string_match();
      require_es_string_match_all();
      require_es_string_pad_end();
      require_es_string_pad_start();
      require_es_string_raw();
      require_es_string_repeat();
      require_es_string_replace();
      require_es_string_replace_all();
      require_es_string_search();
      require_es_string_split();
      require_es_string_starts_with();
      require_es_string_substr();
      require_es_string_trim();
      require_es_string_trim_end();
      require_es_string_trim_start();
      require_es_string_anchor();
      require_es_string_big();
      require_es_string_blink();
      require_es_string_bold();
      require_es_string_fixed();
      require_es_string_fontcolor();
      require_es_string_fontsize();
      require_es_string_italics();
      require_es_string_link();
      require_es_string_small();
      require_es_string_strike();
      require_es_string_sub();
      require_es_string_sup();
      require_es_typed_array_float32_array();
      require_es_typed_array_float64_array();
      require_es_typed_array_int8_array();
      require_es_typed_array_int16_array();
      require_es_typed_array_int32_array();
      require_es_typed_array_uint8_array();
      require_es_typed_array_uint8_clamped_array();
      require_es_typed_array_uint16_array();
      require_es_typed_array_uint32_array();
      require_es_typed_array_at();
      require_es_typed_array_copy_within();
      require_es_typed_array_every();
      require_es_typed_array_fill();
      require_es_typed_array_filter();
      require_es_typed_array_find();
      require_es_typed_array_find_index();
      require_es_typed_array_for_each();
      require_es_typed_array_from();
      require_es_typed_array_includes();
      require_es_typed_array_index_of();
      require_es_typed_array_iterator();
      require_es_typed_array_join();
      require_es_typed_array_last_index_of();
      require_es_typed_array_map();
      require_es_typed_array_of();
      require_es_typed_array_reduce();
      require_es_typed_array_reduce_right();
      require_es_typed_array_reverse();
      require_es_typed_array_set();
      require_es_typed_array_slice();
      require_es_typed_array_some();
      require_es_typed_array_sort();
      require_es_typed_array_subarray();
      require_es_typed_array_to_locale_string();
      require_es_typed_array_to_string();
      require_es_unescape();
      require_es_weak_map();
      require_es_weak_set();
      require_web_atob();
      require_web_btoa();
      require_web_dom_collections_for_each();
      require_web_dom_collections_iterator();
      require_web_dom_exception_constructor();
      require_web_dom_exception_stack();
      require_web_dom_exception_to_string_tag();
      require_web_immediate();
      require_web_queue_microtask();
      require_web_structured_clone();
      require_web_timers();
      require_web_url();
      require_web_url_to_json();
      require_web_url_search_params();
      module.exports = require_path();
    }
  });

  // node_modules/regenerator-runtime/runtime.js
  var require_runtime = __commonJS({
    "node_modules/regenerator-runtime/runtime.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var runtime = function(exports2) {
        "use strict";
        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined2;
        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define2(obj, key, value) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
          return obj[key];
        }
        try {
          define2({}, "");
        } catch (err) {
          define2 = function(obj, key, value) {
            return obj[key] = value;
          };
        }
        function wrap(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context2 = new Context(tryLocsList || []);
          generator._invoke = makeInvokeMethod(innerFn, self2, context2);
          return generator;
        }
        exports2.wrap = wrap;
        function tryCatch2(fn, obj, arg) {
          try {
            return { type: "normal", arg: fn.call(obj, arg) };
          } catch (err) {
            return { type: "throw", arg: err };
          }
        }
        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed";
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        define2(IteratorPrototype, iteratorSymbol, function() {
          return this;
        });
        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
          IteratorPrototype = NativeIteratorPrototype;
        }
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        GeneratorFunction.prototype = GeneratorFunctionPrototype;
        define2(Gp, "constructor", GeneratorFunctionPrototype);
        define2(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
        GeneratorFunction.displayName = define2(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            define2(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        exports2.isGeneratorFunction = function(genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };
        exports2.mark = function(genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define2(genFun, toStringTagSymbol, "GeneratorFunction");
          }
          genFun.prototype = Object.create(Gp);
          return genFun;
        };
        exports2.awrap = function(arg) {
          return { __await: arg };
        };
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch2(generator[method], generator, arg);
            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;
              if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                return PromiseImpl.resolve(value.__await).then(function(value2) {
                  invoke("next", value2, resolve, reject);
                }, function(err) {
                  invoke("throw", err, resolve, reject);
                });
              }
              return PromiseImpl.resolve(value).then(function(unwrapped) {
                result.value = unwrapped;
                resolve(result);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
          }
          var previousPromise;
          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
          this._invoke = enqueue;
        }
        defineIteratorMethods(AsyncIterator.prototype);
        define2(AsyncIterator.prototype, asyncIteratorSymbol, function() {
          return this;
        });
        exports2.AsyncIterator = AsyncIterator;
        exports2.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          if (PromiseImpl === void 0)
            PromiseImpl = Promise;
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self2, tryLocsList), PromiseImpl);
          return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
        };
        function makeInvokeMethod(innerFn, self2, context2) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }
            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              }
              return doneResult();
            }
            context2.method = method;
            context2.arg = arg;
            while (true) {
              var delegate = context2.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context2);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel)
                    continue;
                  return delegateResult;
                }
              }
              if (context2.method === "next") {
                context2.sent = context2._sent = context2.arg;
              } else if (context2.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context2.arg;
                }
                context2.dispatchException(context2.arg);
              } else if (context2.method === "return") {
                context2.abrupt("return", context2.arg);
              }
              state = GenStateExecuting;
              var record = tryCatch2(innerFn, self2, context2);
              if (record.type === "normal") {
                state = context2.done ? GenStateCompleted : GenStateSuspendedYield;
                if (record.arg === ContinueSentinel) {
                  continue;
                }
                return {
                  value: record.arg,
                  done: context2.done
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted;
                context2.method = "throw";
                context2.arg = record.arg;
              }
            }
          };
        }
        function maybeInvokeDelegate(delegate, context2) {
          var method = delegate.iterator[context2.method];
          if (method === undefined2) {
            context2.delegate = null;
            if (context2.method === "throw") {
              if (delegate.iterator["return"]) {
                context2.method = "return";
                context2.arg = undefined2;
                maybeInvokeDelegate(delegate, context2);
                if (context2.method === "throw") {
                  return ContinueSentinel;
                }
              }
              context2.method = "throw";
              context2.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
          }
          var record = tryCatch2(method, delegate.iterator, context2.arg);
          if (record.type === "throw") {
            context2.method = "throw";
            context2.arg = record.arg;
            context2.delegate = null;
            return ContinueSentinel;
          }
          var info = record.arg;
          if (!info) {
            context2.method = "throw";
            context2.arg = new TypeError("iterator result is not an object");
            context2.delegate = null;
            return ContinueSentinel;
          }
          if (info.done) {
            context2[delegate.resultName] = info.value;
            context2.next = delegate.nextLoc;
            if (context2.method !== "return") {
              context2.method = "next";
              context2.arg = undefined2;
            }
          } else {
            return info;
          }
          context2.delegate = null;
          return ContinueSentinel;
        }
        defineIteratorMethods(Gp);
        define2(Gp, toStringTagSymbol, "Generator");
        define2(Gp, iteratorSymbol, function() {
          return this;
        });
        define2(Gp, "toString", function() {
          return "[object Generator]";
        });
        function pushTryEntry(locs) {
          var entry = { tryLoc: locs[0] };
          if (1 in locs) {
            entry.catchLoc = locs[1];
          }
          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }
          this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{ tryLoc: "root" }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }
        exports2.keys = function(object) {
          var keys = [];
          for (var key in object) {
            keys.push(key);
          }
          keys.reverse();
          return function next() {
            while (keys.length) {
              var key2 = keys.pop();
              if (key2 in object) {
                next.value = key2;
                next.done = false;
                return next;
              }
            }
            next.done = true;
            return next;
          };
        };
        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
              return iterable;
            }
            if (!isNaN(iterable.length)) {
              var i = -1, next = function next2() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next2.value = iterable[i];
                    next2.done = false;
                    return next2;
                  }
                }
                next2.value = undefined2;
                next2.done = true;
                return next2;
              };
              return next.next = next;
            }
          }
          return { next: doneResult };
        }
        exports2.values = values;
        function doneResult() {
          return { value: undefined2, done: true };
        }
        Context.prototype = {
          constructor: Context,
          reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            this.sent = this._sent = undefined2;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined2;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
              for (var name in this) {
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                  this[name] = undefined2;
                }
              }
            }
          },
          stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }
            return this.rval;
          },
          dispatchException: function(exception) {
            if (this.done) {
              throw exception;
            }
            var context2 = this;
            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context2.next = loc;
              if (caught) {
                context2.method = "next";
                context2.arg = undefined2;
              }
              return !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;
              if (entry.tryLoc === "root") {
                return handle("end");
              }
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }
            return this.complete(record);
          },
          complete: function(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }
            return ContinueSentinel;
          },
          finish: function(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName,
              nextLoc
            };
            if (this.method === "next") {
              this.arg = undefined2;
            }
            return ContinueSentinel;
          }
        };
        return exports2;
      }(typeof module === "object" ? module.exports : {});
      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        if (typeof globalThis === "object") {
          globalThis.regeneratorRuntime = runtime;
        } else {
          Function("r", "regeneratorRuntime = r")(runtime);
        }
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign2 = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign2();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement2(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config2, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                key = "" + config2.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape2("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator2 = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator2.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context2) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context2, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context2 = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context2.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context2
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context2,
                _calculateChangedBits: context2._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context2.Provider;
                  },
                  set: function(_Provider) {
                    context2.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context2._currentValue;
                  },
                  set: function(_currentValue) {
                    context2._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context2._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context2._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context2._threadCount;
                  },
                  set: function(_threadCount) {
                    context2._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context2.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context2.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context2.Consumer = Consumer;
            }
            {
              context2._currentRenderer = null;
              context2._currentRenderer2 = null;
            }
            return context2;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved2 = payload;
                  resolved2._status = Resolved;
                  resolved2._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState10(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef7(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect9(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback4(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator2 = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator2.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement2.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback4;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect9;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo4;
          exports.useReducer = useReducer;
          exports.useRef = useRef7;
          exports.useState = useState10;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last2 = heap.pop();
              if (last2 !== first) {
                heap[0] = last2;
                siftDown(heap, last2, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer2 = peek(timerQueue);
            while (timer2 !== null) {
              if (timer2.callback === null) {
                pop(timerQueue);
              } else if (timer2.startTime <= currentTime) {
                pop(timerQueue);
                timer2.sortIndex = timer2.expirationTime;
                push(taskQueue, timer2);
              } else {
                return;
              }
              timer2 = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay2 = options.delay;
              if (typeof delay2 === "number" && delay2 > 0) {
                startTime = currentTime + delay2;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      if (true) {
        (function() {
          "use strict";
          var React48 = require_react();
          var _assign = require_object_assign2();
          var Scheduler2 = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React48.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React48) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment7 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React48.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React48.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray5 = Array.isArray(props[propName]);
                if (props.multiple && !isArray5) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray5) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b, c, d) {
            return fn(a, b, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context2, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context2, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context2, a, b, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context2, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context2, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler2.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler2.unstable_scheduleCallback(Scheduler2.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event = eventTypes[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler2.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler2.unstable_UserBlockingPriority, runWithPriority = Scheduler2.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported2(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported2("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win2;
            if (nativeEventTarget.window === nativeEventTarget) {
              win2 = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win2 = doc.defaultView || doc.parentWindow;
              } else {
                win2 = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win2 : getNodeFromInstance(from2);
            var toNode = to == null ? win2 : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win2 = ownerDocument && ownerDocument.defaultView || window;
            var selection = win2.getSelection && win2.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win2 = doc && doc.defaultView || window;
            if (!win2.getSelection) {
              return;
            }
            var selection = win2.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win2 = window;
            var element = getActiveElement();
            while (element instanceof win2.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win2 = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win2.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win2 = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win2.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE3 = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE3) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE3) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement2(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE3) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE3) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE3]);
              }
              (updatePayload = updatePayload || []).push(STYLE3, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE3) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement2(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context2 = {};
              for (var key in contextTypes) {
                context2[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context2, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context2);
              }
              return context2;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context2, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context2, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler2.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler2.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler2.unstable_cancelCallback, Scheduler_shouldYield = Scheduler2.unstable_shouldYield, Scheduler_requestPaint = Scheduler2.unstable_requestPaint, Scheduler_now$1 = Scheduler2.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler2.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler2.unstable_NormalPriority, Scheduler_LowPriority = Scheduler2.unstable_LowPriority, Scheduler_IdlePriority = Scheduler2.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context2 = providerFiber.type._context;
            {
              push(valueCursor, context2._currentValue, providerFiber);
              context2._currentValue = nextValue;
              {
                if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context2._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context2 = providerFiber.type._context;
            {
              context2._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context2, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context2._calculateChangedBits === "function" ? context2._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context2, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context2 && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context2, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context2)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context2;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context: context2,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context2._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context2) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context2);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray4 = Array.isArray;
          var emptyRefsObject = new React48.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray4(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context2 = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context2 = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context2);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context2);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last2 = returnFiber.lastEffect;
              if (last2 !== null) {
                last2.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment7) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment7: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject2 = typeof newChild === "object" && newChild !== null;
              if (isObject2) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject2) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context2 = requiredContext(contextStackCursor$1.current);
            return context2;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context2 = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context2, fiber.type);
            if (context2 === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context2, observedBits) {
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context2, observedBits) {
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context2, observedBits) {
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context2, observedBits) {
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context2, observedBits) {
                warnInvalidContextAccess();
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context2, observedBits) {
                warnInvalidContextAccess();
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context2, observedBits) {
                warnInvalidContextAccess();
                return readContext(context2, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler2.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context2, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context2, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context2, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context2, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray5 = Array.isArray(childSlot);
              var isIterable2 = !isArray5 && typeof getIteratorFn(childSlot) === "function";
              if (isArray5 || isIterable2) {
                var type = isArray5 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context2 = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context2, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context2, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context2 = workInProgress2.type;
            {
              if (context2._context === void 0) {
                if (context2 !== context2.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context2 = context2._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context2, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last2 = returnFiber.lastEffect;
              if (last2 !== null) {
                last2.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment7:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment7:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler2.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment7, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context2 = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context2;
            } else {
              container.pendingContext = context2;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/rxjs/node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/rxjs/node_modules/tslib/tslib.js"(exports, module) {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var __extends2;
      var __assign2;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __spreadArray2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __createBinding2;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v) {
            return exports2[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
              d[p] = b[p];
        };
        __extends2 = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign2 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest2 = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate2 = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator2 = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar2 = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding2(o, m, p);
        };
        __createBinding2 = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          Object.defineProperty(o, k2, { enumerable: true, get: function() {
            return m[k];
          } });
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values2 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read2(arguments[i]));
          return ar;
        };
        __spreadArrays2 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __spreadArray2 = function(to, from2) {
          for (var i = 0, il = from2.length, j = to.length; i < il; i++, j++)
            to[j] = from2[i];
          return to;
        };
        __await2 = function(v) {
          return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator2 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues2 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar2 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding2(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault2 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet2 = function(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return privateMap.get(receiver);
        };
        __classPrivateFieldSet2 = function(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
          }
          privateMap.set(receiver, value);
          return value;
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign2);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate2);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter2);
        exporter("__generator", __generator2);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values2);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays2);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues2);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      });
    }
  });

  // node_modules/rxjs/node_modules/tslib/modules/index.js
  var import_tslib, __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __createBinding, __values, __read, __spread, __spreadArrays, __spreadArray, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet;
  var init_modules = __esm({
    "node_modules/rxjs/node_modules/tslib/modules/index.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      import_tslib = __toESM(require_tslib(), 1);
      ({
        __extends,
        __assign,
        __rest,
        __decorate,
        __param,
        __metadata,
        __awaiter,
        __generator,
        __exportStar,
        __createBinding,
        __values,
        __read,
        __spread,
        __spreadArrays,
        __spreadArray,
        __await,
        __asyncGenerator,
        __asyncDelegator,
        __asyncValues,
        __makeTemplateObject,
        __importStar,
        __importDefault,
        __classPrivateFieldGet,
        __classPrivateFieldSet
      } = import_tslib.default);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isFunction.js
  function isFunction(value) {
    return typeof value === "function";
  }
  var init_isFunction = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isFunction.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
  function createErrorClass(createImpl) {
    var _super = function(instance) {
      Error.call(instance);
      instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }
  var init_createErrorClass = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
  var UnsubscriptionError;
  var init_UnsubscriptionError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_createErrorClass();
      UnsubscriptionError = createErrorClass(function(_super) {
        return function UnsubscriptionErrorImpl(errors) {
          _super(this);
          this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
            return i + 1 + ") " + err.toString();
          }).join("\n  ") : "";
          this.name = "UnsubscriptionError";
          this.errors = errors;
        };
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
  function arrRemove(arr, item) {
    if (arr) {
      var index = arr.indexOf(item);
      0 <= index && arr.splice(index, 1);
    }
  }
  var init_arrRemove = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/arrRemove.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Subscription.js
  function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
  }
  function execTeardown(teardown) {
    if (isFunction(teardown)) {
      teardown();
    } else {
      teardown.unsubscribe();
    }
  }
  var Subscription, EMPTY_SUBSCRIPTION;
  var init_Subscription = __esm({
    "node_modules/rxjs/dist/esm5/internal/Subscription.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_isFunction();
      init_UnsubscriptionError();
      init_arrRemove();
      Subscription = function() {
        function Subscription7(initialTeardown) {
          this.initialTeardown = initialTeardown;
          this.closed = false;
          this._parentage = null;
          this._teardowns = null;
        }
        Subscription7.prototype.unsubscribe = function() {
          var e_1, _a2, e_2, _b2;
          var errors;
          if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
              this._parentage = null;
              if (Array.isArray(_parentage)) {
                try {
                  for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                    var parent_1 = _parentage_1_1.value;
                    parent_1.remove(this);
                  }
                } catch (e_1_1) {
                  e_1 = { error: e_1_1 };
                } finally {
                  try {
                    if (_parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return))
                      _a2.call(_parentage_1);
                  } finally {
                    if (e_1)
                      throw e_1.error;
                  }
                }
              } else {
                _parentage.remove(this);
              }
            }
            var initialTeardown = this.initialTeardown;
            if (isFunction(initialTeardown)) {
              try {
                initialTeardown();
              } catch (e) {
                errors = e instanceof UnsubscriptionError ? e.errors : [e];
              }
            }
            var _teardowns = this._teardowns;
            if (_teardowns) {
              this._teardowns = null;
              try {
                for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {
                  var teardown_1 = _teardowns_1_1.value;
                  try {
                    execTeardown(teardown_1);
                  } catch (err) {
                    errors = errors !== null && errors !== void 0 ? errors : [];
                    if (err instanceof UnsubscriptionError) {
                      errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                    } else {
                      errors.push(err);
                    }
                  }
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (_teardowns_1_1 && !_teardowns_1_1.done && (_b2 = _teardowns_1.return))
                    _b2.call(_teardowns_1);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
            }
            if (errors) {
              throw new UnsubscriptionError(errors);
            }
          }
        };
        Subscription7.prototype.add = function(teardown) {
          var _a2;
          if (teardown && teardown !== this) {
            if (this.closed) {
              execTeardown(teardown);
            } else {
              if (teardown instanceof Subscription7) {
                if (teardown.closed || teardown._hasParent(this)) {
                  return;
                }
                teardown._addParent(this);
              }
              (this._teardowns = (_a2 = this._teardowns) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
            }
          }
        };
        Subscription7.prototype._hasParent = function(parent) {
          var _parentage = this._parentage;
          return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
        };
        Subscription7.prototype._addParent = function(parent) {
          var _parentage = this._parentage;
          this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
        };
        Subscription7.prototype._removeParent = function(parent) {
          var _parentage = this._parentage;
          if (_parentage === parent) {
            this._parentage = null;
          } else if (Array.isArray(_parentage)) {
            arrRemove(_parentage, parent);
          }
        };
        Subscription7.prototype.remove = function(teardown) {
          var _teardowns = this._teardowns;
          _teardowns && arrRemove(_teardowns, teardown);
          if (teardown instanceof Subscription7) {
            teardown._removeParent(this);
          }
        };
        Subscription7.EMPTY = function() {
          var empty = new Subscription7();
          empty.closed = true;
          return empty;
        }();
        return Subscription7;
      }();
      EMPTY_SUBSCRIPTION = Subscription.EMPTY;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/config.js
  var config;
  var init_config = __esm({
    "node_modules/rxjs/dist/esm5/internal/config.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      config = {
        onUnhandledError: null,
        onStoppedNotification: null,
        Promise: void 0,
        useDeprecatedSynchronousErrorHandling: false,
        useDeprecatedNextContext: false
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
  var timeoutProvider;
  var init_timeoutProvider = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      timeoutProvider = {
        setTimeout: function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var delegate = timeoutProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray([], __read(args)));
        },
        clearTimeout: function(handle) {
          var delegate = timeoutProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
        },
        delegate: void 0
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
  function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function() {
      var onUnhandledError = config.onUnhandledError;
      if (onUnhandledError) {
        onUnhandledError(err);
      } else {
        throw err;
      }
    });
  }
  var init_reportUnhandledError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config();
      init_timeoutProvider();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/noop.js
  function noop() {
  }
  var init_noop = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/noop.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
  function errorNotification(error) {
    return createNotification("E", void 0, error);
  }
  function nextNotification(value) {
    return createNotification("N", value, void 0);
  }
  function createNotification(kind, value, error) {
    return {
      kind,
      value,
      error
    };
  }
  var COMPLETE_NOTIFICATION;
  var init_NotificationFactories = __esm({
    "node_modules/rxjs/dist/esm5/internal/NotificationFactories.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      COMPLETE_NOTIFICATION = function() {
        return createNotification("C", void 0, void 0);
      }();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/errorContext.js
  function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      var isRoot = !context;
      if (isRoot) {
        context = { errorThrown: false, error: null };
      }
      cb();
      if (isRoot) {
        var _a2 = context, errorThrown = _a2.errorThrown, error = _a2.error;
        context = null;
        if (errorThrown) {
          throw error;
        }
      }
    } else {
      cb();
    }
  }
  function captureError(err) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
      context.errorThrown = true;
      context.error = err;
    }
  }
  var context;
  var init_errorContext = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/errorContext.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config();
      context = null;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Subscriber.js
  function wrapForErrorHandling(handler, instance) {
    return function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      try {
        handler.apply(void 0, __spreadArray([], __read(args)));
      } catch (err) {
        if (config.useDeprecatedSynchronousErrorHandling) {
          captureError(err);
        } else {
          reportUnhandledError(err);
        }
      }
    };
  }
  function defaultErrorHandler(err) {
    throw err;
  }
  function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function() {
      return onStoppedNotification(notification, subscriber);
    });
  }
  var Subscriber, SafeSubscriber, EMPTY_OBSERVER;
  var init_Subscriber = __esm({
    "node_modules/rxjs/dist/esm5/internal/Subscriber.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_isFunction();
      init_Subscription();
      init_config();
      init_reportUnhandledError();
      init_noop();
      init_NotificationFactories();
      init_timeoutProvider();
      init_errorContext();
      Subscriber = function(_super) {
        __extends(Subscriber4, _super);
        function Subscriber4(destination) {
          var _this = _super.call(this) || this;
          _this.isStopped = false;
          if (destination) {
            _this.destination = destination;
            if (isSubscription(destination)) {
              destination.add(_this);
            }
          } else {
            _this.destination = EMPTY_OBSERVER;
          }
          return _this;
        }
        Subscriber4.create = function(next, error, complete) {
          return new SafeSubscriber(next, error, complete);
        };
        Subscriber4.prototype.next = function(value) {
          if (this.isStopped) {
            handleStoppedNotification(nextNotification(value), this);
          } else {
            this._next(value);
          }
        };
        Subscriber4.prototype.error = function(err) {
          if (this.isStopped) {
            handleStoppedNotification(errorNotification(err), this);
          } else {
            this.isStopped = true;
            this._error(err);
          }
        };
        Subscriber4.prototype.complete = function() {
          if (this.isStopped) {
            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
          } else {
            this.isStopped = true;
            this._complete();
          }
        };
        Subscriber4.prototype.unsubscribe = function() {
          if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
          }
        };
        Subscriber4.prototype._next = function(value) {
          this.destination.next(value);
        };
        Subscriber4.prototype._error = function(err) {
          try {
            this.destination.error(err);
          } finally {
            this.unsubscribe();
          }
        };
        Subscriber4.prototype._complete = function() {
          try {
            this.destination.complete();
          } finally {
            this.unsubscribe();
          }
        };
        return Subscriber4;
      }(Subscription);
      SafeSubscriber = function(_super) {
        __extends(SafeSubscriber2, _super);
        function SafeSubscriber2(observerOrNext, error, complete) {
          var _this = _super.call(this) || this;
          var next;
          if (isFunction(observerOrNext)) {
            next = observerOrNext;
          } else if (observerOrNext) {
            next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete;
            var context_1;
            if (_this && config.useDeprecatedNextContext) {
              context_1 = Object.create(observerOrNext);
              context_1.unsubscribe = function() {
                return _this.unsubscribe();
              };
            } else {
              context_1 = observerOrNext;
            }
            next = next === null || next === void 0 ? void 0 : next.bind(context_1);
            error = error === null || error === void 0 ? void 0 : error.bind(context_1);
            complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);
          }
          _this.destination = {
            next: next ? wrapForErrorHandling(next, _this) : noop,
            error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler, _this),
            complete: complete ? wrapForErrorHandling(complete, _this) : noop
          };
          return _this;
        }
        return SafeSubscriber2;
      }(Subscriber);
      EMPTY_OBSERVER = {
        closed: true,
        next: noop,
        error: defaultErrorHandler,
        complete: noop
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/symbol/observable.js
  var observable;
  var init_observable = __esm({
    "node_modules/rxjs/dist/esm5/internal/symbol/observable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      observable = function() {
        return typeof Symbol === "function" && Symbol.observable || "@@observable";
      }();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/identity.js
  function identity(x) {
    return x;
  }
  var init_identity = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/identity.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/pipe.js
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input) {
      return fns.reduce(function(prev, fn) {
        return fn(prev);
      }, input);
    };
  }
  var init_pipe = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/pipe.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_identity();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Observable.js
  function getPromiseCtor(promiseCtor) {
    var _a2;
    return (_a2 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
  }
  function isObserver(value) {
    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
  }
  function isSubscriber(value) {
    return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
  }
  var Observable;
  var init_Observable = __esm({
    "node_modules/rxjs/dist/esm5/internal/Observable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Subscriber();
      init_Subscription();
      init_observable();
      init_pipe();
      init_config();
      init_isFunction();
      init_errorContext();
      Observable = function() {
        function Observable51(subscribe) {
          if (subscribe) {
            this._subscribe = subscribe;
          }
        }
        Observable51.prototype.lift = function(operator) {
          var observable2 = new Observable51();
          observable2.source = this;
          observable2.operator = operator;
          return observable2;
        };
        Observable51.prototype.subscribe = function(observerOrNext, error, complete) {
          var _this = this;
          var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
          errorContext(function() {
            var _a2 = _this, operator = _a2.operator, source = _a2.source;
            subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
          });
          return subscriber;
        };
        Observable51.prototype._trySubscribe = function(sink) {
          try {
            return this._subscribe(sink);
          } catch (err) {
            sink.error(err);
          }
        };
        Observable51.prototype.forEach = function(next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function(resolve, reject) {
            var subscription;
            subscription = _this.subscribe(function(value) {
              try {
                next(value);
              } catch (err) {
                reject(err);
                subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
              }
            }, reject, resolve);
          });
        };
        Observable51.prototype._subscribe = function(subscriber) {
          var _a2;
          return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
        };
        Observable51.prototype[observable] = function() {
          return this;
        };
        Observable51.prototype.pipe = function() {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
          }
          return pipeFromArray(operations)(this);
        };
        Observable51.prototype.toPromise = function(promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function(resolve, reject) {
            var value;
            _this.subscribe(function(x) {
              return value = x;
            }, function(err) {
              return reject(err);
            }, function() {
              return resolve(value);
            });
          });
        };
        Observable51.create = function(subscribe) {
          return new Observable51(subscribe);
        };
        return Observable51;
      }();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/lift.js
  function hasLift(source) {
    return isFunction(source === null || source === void 0 ? void 0 : source.lift);
  }
  function operate(init) {
    return function(source) {
      if (hasLift(source)) {
        return source.lift(function(liftedSource) {
          try {
            return init(liftedSource, this);
          } catch (err) {
            this.error(err);
          }
        });
      }
      throw new TypeError("Unable to lift unknown Observable type");
    };
  }
  var init_lift = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/lift.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
  var OperatorSubscriber;
  var init_OperatorSubscriber = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_Subscriber();
      OperatorSubscriber = function(_super) {
        __extends(OperatorSubscriber2, _super);
        function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize) {
          var _this = _super.call(this, destination) || this;
          _this.onFinalize = onFinalize;
          _this._next = onNext ? function(value) {
            try {
              onNext(value);
            } catch (err) {
              destination.error(err);
            }
          } : _super.prototype._next;
          _this._error = onError ? function(err) {
            try {
              onError(err);
            } catch (err2) {
              destination.error(err2);
            } finally {
              this.unsubscribe();
            }
          } : _super.prototype._error;
          _this._complete = onComplete ? function() {
            try {
              onComplete();
            } catch (err) {
              destination.error(err);
            } finally {
              this.unsubscribe();
            }
          } : _super.prototype._complete;
          return _this;
        }
        OperatorSubscriber2.prototype.unsubscribe = function() {
          var _a2;
          var closed = this.closed;
          _super.prototype.unsubscribe.call(this);
          !closed && ((_a2 = this.onFinalize) === null || _a2 === void 0 ? void 0 : _a2.call(this));
        };
        return OperatorSubscriber2;
      }(Subscriber);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
  var ObjectUnsubscribedError;
  var init_ObjectUnsubscribedError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_createErrorClass();
      ObjectUnsubscribedError = createErrorClass(function(_super) {
        return function ObjectUnsubscribedErrorImpl() {
          _super(this);
          this.name = "ObjectUnsubscribedError";
          this.message = "object unsubscribed";
        };
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Subject.js
  var Subject, AnonymousSubject;
  var init_Subject = __esm({
    "node_modules/rxjs/dist/esm5/internal/Subject.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_Observable();
      init_Subscription();
      init_ObjectUnsubscribedError();
      init_arrRemove();
      init_errorContext();
      Subject = function(_super) {
        __extends(Subject2, _super);
        function Subject2() {
          var _this = _super.call(this) || this;
          _this.closed = false;
          _this.observers = [];
          _this.isStopped = false;
          _this.hasError = false;
          _this.thrownError = null;
          return _this;
        }
        Subject2.prototype.lift = function(operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
        };
        Subject2.prototype._throwIfClosed = function() {
          if (this.closed) {
            throw new ObjectUnsubscribedError();
          }
        };
        Subject2.prototype.next = function(value) {
          var _this = this;
          errorContext(function() {
            var e_1, _a2;
            _this._throwIfClosed();
            if (!_this.isStopped) {
              var copy = _this.observers.slice();
              try {
                for (var copy_1 = __values(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {
                  var observer = copy_1_1.value;
                  observer.next(value);
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (copy_1_1 && !copy_1_1.done && (_a2 = copy_1.return))
                    _a2.call(copy_1);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
            }
          });
        };
        Subject2.prototype.error = function(err) {
          var _this = this;
          errorContext(function() {
            _this._throwIfClosed();
            if (!_this.isStopped) {
              _this.hasError = _this.isStopped = true;
              _this.thrownError = err;
              var observers = _this.observers;
              while (observers.length) {
                observers.shift().error(err);
              }
            }
          });
        };
        Subject2.prototype.complete = function() {
          var _this = this;
          errorContext(function() {
            _this._throwIfClosed();
            if (!_this.isStopped) {
              _this.isStopped = true;
              var observers = _this.observers;
              while (observers.length) {
                observers.shift().complete();
              }
            }
          });
        };
        Subject2.prototype.unsubscribe = function() {
          this.isStopped = this.closed = true;
          this.observers = null;
        };
        Object.defineProperty(Subject2.prototype, "observed", {
          get: function() {
            var _a2;
            return ((_a2 = this.observers) === null || _a2 === void 0 ? void 0 : _a2.length) > 0;
          },
          enumerable: false,
          configurable: true
        });
        Subject2.prototype._trySubscribe = function(subscriber) {
          this._throwIfClosed();
          return _super.prototype._trySubscribe.call(this, subscriber);
        };
        Subject2.prototype._subscribe = function(subscriber) {
          this._throwIfClosed();
          this._checkFinalizedStatuses(subscriber);
          return this._innerSubscribe(subscriber);
        };
        Subject2.prototype._innerSubscribe = function(subscriber) {
          var _a2 = this, hasError = _a2.hasError, isStopped = _a2.isStopped, observers = _a2.observers;
          return hasError || isStopped ? EMPTY_SUBSCRIPTION : (observers.push(subscriber), new Subscription(function() {
            return arrRemove(observers, subscriber);
          }));
        };
        Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
          var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, isStopped = _a2.isStopped;
          if (hasError) {
            subscriber.error(thrownError);
          } else if (isStopped) {
            subscriber.complete();
          }
        };
        Subject2.prototype.asObservable = function() {
          var observable2 = new Observable();
          observable2.source = this;
          return observable2;
        };
        Subject2.create = function(destination, source) {
          return new AnonymousSubject(destination, source);
        };
        return Subject2;
      }(Observable);
      AnonymousSubject = function(_super) {
        __extends(AnonymousSubject2, _super);
        function AnonymousSubject2(destination, source) {
          var _this = _super.call(this) || this;
          _this.destination = destination;
          _this.source = source;
          return _this;
        }
        AnonymousSubject2.prototype.next = function(value) {
          var _a2, _b2;
          (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.next) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, value);
        };
        AnonymousSubject2.prototype.error = function(err) {
          var _a2, _b2;
          (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, err);
        };
        AnonymousSubject2.prototype.complete = function() {
          var _a2, _b2;
          (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.complete) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
        };
        AnonymousSubject2.prototype._subscribe = function(subscriber) {
          var _a2, _b2;
          return (_b2 = (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber)) !== null && _b2 !== void 0 ? _b2 : EMPTY_SUBSCRIPTION;
        };
        return AnonymousSubject2;
      }(Subject);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
  var dateTimestampProvider;
  var init_dateTimestampProvider = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      dateTimestampProvider = {
        now: function() {
          return (dateTimestampProvider.delegate || Date).now();
        },
        delegate: void 0
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
  var ReplaySubject;
  var init_ReplaySubject = __esm({
    "node_modules/rxjs/dist/esm5/internal/ReplaySubject.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_Subject();
      init_dateTimestampProvider();
      ReplaySubject = function(_super) {
        __extends(ReplaySubject2, _super);
        function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
          if (_bufferSize === void 0) {
            _bufferSize = Infinity;
          }
          if (_windowTime === void 0) {
            _windowTime = Infinity;
          }
          if (_timestampProvider === void 0) {
            _timestampProvider = dateTimestampProvider;
          }
          var _this = _super.call(this) || this;
          _this._bufferSize = _bufferSize;
          _this._windowTime = _windowTime;
          _this._timestampProvider = _timestampProvider;
          _this._buffer = [];
          _this._infiniteTimeWindow = true;
          _this._infiniteTimeWindow = _windowTime === Infinity;
          _this._bufferSize = Math.max(1, _bufferSize);
          _this._windowTime = Math.max(1, _windowTime);
          return _this;
        }
        ReplaySubject2.prototype.next = function(value) {
          var _a2 = this, isStopped = _a2.isStopped, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow, _timestampProvider = _a2._timestampProvider, _windowTime = _a2._windowTime;
          if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
          }
          this._trimBuffer();
          _super.prototype.next.call(this, value);
        };
        ReplaySubject2.prototype._subscribe = function(subscriber) {
          this._throwIfClosed();
          this._trimBuffer();
          var subscription = this._innerSubscribe(subscriber);
          var _a2 = this, _infiniteTimeWindow = _a2._infiniteTimeWindow, _buffer = _a2._buffer;
          var copy = _buffer.slice();
          for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
            subscriber.next(copy[i]);
          }
          this._checkFinalizedStatuses(subscriber);
          return subscription;
        };
        ReplaySubject2.prototype._trimBuffer = function() {
          var _a2 = this, _bufferSize = _a2._bufferSize, _timestampProvider = _a2._timestampProvider, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow;
          var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
          _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
          if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last2 = 0;
            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
              last2 = i;
            }
            last2 && _buffer.splice(0, last2 + 1);
          }
        };
        return ReplaySubject2;
      }(Subject);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
  var Action;
  var init_Action = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/Action.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_Subscription();
      Action = function(_super) {
        __extends(Action2, _super);
        function Action2(scheduler, work) {
          return _super.call(this) || this;
        }
        Action2.prototype.schedule = function(state, delay2) {
          if (delay2 === void 0) {
            delay2 = 0;
          }
          return this;
        };
        return Action2;
      }(Subscription);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
  var intervalProvider;
  var init_intervalProvider = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      intervalProvider = {
        setInterval: function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var delegate = intervalProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) || setInterval).apply(void 0, __spreadArray([], __read(args)));
        },
        clearInterval: function(handle) {
          var delegate = intervalProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
        },
        delegate: void 0
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
  var AsyncAction;
  var init_AsyncAction = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_Action();
      init_intervalProvider();
      init_arrRemove();
      AsyncAction = function(_super) {
        __extends(AsyncAction2, _super);
        function AsyncAction2(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.pending = false;
          return _this;
        }
        AsyncAction2.prototype.schedule = function(state, delay2) {
          if (delay2 === void 0) {
            delay2 = 0;
          }
          if (this.closed) {
            return this;
          }
          this.state = state;
          var id = this.id;
          var scheduler = this.scheduler;
          if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay2);
          }
          this.pending = true;
          this.delay = delay2;
          this.id = this.id || this.requestAsyncId(scheduler, this.id, delay2);
          return this;
        };
        AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
          if (delay2 === void 0) {
            delay2 = 0;
          }
          return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
        };
        AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay2) {
          if (delay2 === void 0) {
            delay2 = 0;
          }
          if (delay2 != null && this.delay === delay2 && this.pending === false) {
            return id;
          }
          intervalProvider.clearInterval(id);
          return void 0;
        };
        AsyncAction2.prototype.execute = function(state, delay2) {
          if (this.closed) {
            return new Error("executing a cancelled action");
          }
          this.pending = false;
          var error = this._execute(state, delay2);
          if (error) {
            return error;
          } else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
          }
        };
        AsyncAction2.prototype._execute = function(state, _delay) {
          var errored = false;
          var errorValue;
          try {
            this.work(state);
          } catch (e) {
            errored = true;
            errorValue = e ? e : new Error("Scheduled action threw falsy error");
          }
          if (errored) {
            this.unsubscribe();
            return errorValue;
          }
        };
        AsyncAction2.prototype.unsubscribe = function() {
          if (!this.closed) {
            var _a2 = this, id = _a2.id, scheduler = _a2.scheduler;
            var actions = scheduler.actions;
            this.work = this.state = this.scheduler = null;
            this.pending = false;
            arrRemove(actions, this);
            if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
            _super.prototype.unsubscribe.call(this);
          }
        };
        return AsyncAction2;
      }(Action);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/Immediate.js
  function findAndClearHandle(handle) {
    if (handle in activeHandles) {
      delete activeHandles[handle];
      return true;
    }
    return false;
  }
  var nextHandle, resolved, activeHandles, Immediate;
  var init_Immediate = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/Immediate.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      nextHandle = 1;
      activeHandles = {};
      Immediate = {
        setImmediate: function(cb) {
          var handle = nextHandle++;
          activeHandles[handle] = true;
          if (!resolved) {
            resolved = Promise.resolve();
          }
          resolved.then(function() {
            return findAndClearHandle(handle) && cb();
          });
          return handle;
        },
        clearImmediate: function(handle) {
          findAndClearHandle(handle);
        }
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
  var setImmediate2, clearImmediate, immediateProvider;
  var init_immediateProvider = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_Immediate();
      setImmediate2 = Immediate.setImmediate;
      clearImmediate = Immediate.clearImmediate;
      immediateProvider = {
        setImmediate: function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          var delegate = immediateProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate2).apply(void 0, __spreadArray([], __read(args)));
        },
        clearImmediate: function(handle) {
          var delegate = immediateProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
        },
        delegate: void 0
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
  var AsapAction;
  var init_AsapAction = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_AsyncAction();
      init_immediateProvider();
      AsapAction = function(_super) {
        __extends(AsapAction2, _super);
        function AsapAction2(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
        }
        AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
          if (delay2 === void 0) {
            delay2 = 0;
          }
          if (delay2 !== null && delay2 > 0) {
            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
          }
          scheduler.actions.push(this);
          return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
        };
        AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
          if (delay2 === void 0) {
            delay2 = 0;
          }
          if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
          }
          if (scheduler.actions.length === 0) {
            immediateProvider.clearImmediate(id);
            scheduler._scheduled = void 0;
          }
          return void 0;
        };
        return AsapAction2;
      }(AsyncAction);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/Scheduler.js
  var Scheduler;
  var init_Scheduler = __esm({
    "node_modules/rxjs/dist/esm5/internal/Scheduler.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_dateTimestampProvider();
      Scheduler = function() {
        function Scheduler2(schedulerActionCtor, now) {
          if (now === void 0) {
            now = Scheduler2.now;
          }
          this.schedulerActionCtor = schedulerActionCtor;
          this.now = now;
        }
        Scheduler2.prototype.schedule = function(work, delay2, state) {
          if (delay2 === void 0) {
            delay2 = 0;
          }
          return new this.schedulerActionCtor(this, work).schedule(state, delay2);
        };
        Scheduler2.now = dateTimestampProvider.now;
        return Scheduler2;
      }();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
  var AsyncScheduler;
  var init_AsyncScheduler = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_Scheduler();
      AsyncScheduler = function(_super) {
        __extends(AsyncScheduler2, _super);
        function AsyncScheduler2(SchedulerAction, now) {
          if (now === void 0) {
            now = Scheduler.now;
          }
          var _this = _super.call(this, SchedulerAction, now) || this;
          _this.actions = [];
          _this._active = false;
          _this._scheduled = void 0;
          return _this;
        }
        AsyncScheduler2.prototype.flush = function(action) {
          var actions = this.actions;
          if (this._active) {
            actions.push(action);
            return;
          }
          var error;
          this._active = true;
          do {
            if (error = action.execute(action.state, action.delay)) {
              break;
            }
          } while (action = actions.shift());
          this._active = false;
          if (error) {
            while (action = actions.shift()) {
              action.unsubscribe();
            }
            throw error;
          }
        };
        return AsyncScheduler2;
      }(Scheduler);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
  var AsapScheduler;
  var init_AsapScheduler = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_AsyncScheduler();
      AsapScheduler = function(_super) {
        __extends(AsapScheduler2, _super);
        function AsapScheduler2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        AsapScheduler2.prototype.flush = function(action) {
          this._active = true;
          this._scheduled = void 0;
          var actions = this.actions;
          var error;
          var index = -1;
          action = action || actions.shift();
          var count = actions.length;
          do {
            if (error = action.execute(action.state, action.delay)) {
              break;
            }
          } while (++index < count && (action = actions.shift()));
          this._active = false;
          if (error) {
            while (++index < count && (action = actions.shift())) {
              action.unsubscribe();
            }
            throw error;
          }
        };
        return AsapScheduler2;
      }(AsyncScheduler);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
  var asapScheduler;
  var init_asap = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/asap.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_AsapAction();
      init_AsapScheduler();
      asapScheduler = new AsapScheduler(AsapAction);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduler/async.js
  var asyncScheduler, async;
  var init_async = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduler/async.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_AsyncAction();
      init_AsyncScheduler();
      asyncScheduler = new AsyncScheduler(AsyncAction);
      async = asyncScheduler;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/empty.js
  var EMPTY;
  var init_empty = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/empty.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      EMPTY = new Observable(function(subscriber) {
        return subscriber.complete();
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
  function isScheduler(value) {
    return value && isFunction(value.schedule);
  }
  var init_isScheduler = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isScheduler.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/args.js
  function last(arr) {
    return arr[arr.length - 1];
  }
  function popResultSelector(args) {
    return isFunction(last(args)) ? args.pop() : void 0;
  }
  function popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : void 0;
  }
  function popNumber(args, defaultValue) {
    return typeof last(args) === "number" ? args.pop() : defaultValue;
  }
  var init_args = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/args.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isFunction();
      init_isScheduler();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
  var isArrayLike;
  var init_isArrayLike = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      isArrayLike = function(x) {
        return x && typeof x.length === "number" && typeof x !== "function";
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isPromise.js
  function isPromise(value) {
    return isFunction(value === null || value === void 0 ? void 0 : value.then);
  }
  var init_isPromise = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isPromise.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
  function isInteropObservable(input) {
    return isFunction(input[observable]);
  }
  var init_isInteropObservable = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_observable();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
  function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
  }
  var init_isAsyncIterable = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
  function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  }
  var init_throwUnobservableError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
  function getSymbolIterator() {
    if (typeof Symbol !== "function" || !Symbol.iterator) {
      return "@@iterator";
    }
    return Symbol.iterator;
  }
  var iterator;
  var init_iterator = __esm({
    "node_modules/rxjs/dist/esm5/internal/symbol/iterator.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      iterator = getSymbolIterator();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isIterable.js
  function isIterable(input) {
    return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
  }
  var init_isIterable = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isIterable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_iterator();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
  function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
      var reader, _a2, value, done;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            reader = readableStream.getReader();
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, , 9, 10]);
            _b2.label = 2;
          case 2:
            if (false)
              return [3, 8];
            return [4, __await(reader.read())];
          case 3:
            _a2 = _b2.sent(), value = _a2.value, done = _a2.done;
            if (!done)
              return [3, 5];
            return [4, __await(void 0)];
          case 4:
            return [2, _b2.sent()];
          case 5:
            return [4, __await(value)];
          case 6:
            return [4, _b2.sent()];
          case 7:
            _b2.sent();
            return [3, 2];
          case 8:
            return [3, 10];
          case 9:
            reader.releaseLock();
            return [7];
          case 10:
            return [2];
        }
      });
    });
  }
  function isReadableStreamLike(obj) {
    return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }
  var init_isReadableStreamLike = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
  function innerFrom(input) {
    if (input instanceof Observable) {
      return input;
    }
    if (input != null) {
      if (isInteropObservable(input)) {
        return fromInteropObservable(input);
      }
      if (isArrayLike(input)) {
        return fromArrayLike(input);
      }
      if (isPromise(input)) {
        return fromPromise(input);
      }
      if (isAsyncIterable(input)) {
        return fromAsyncIterable(input);
      }
      if (isIterable(input)) {
        return fromIterable(input);
      }
      if (isReadableStreamLike(input)) {
        return fromReadableStreamLike(input);
      }
    }
    throw createInvalidObservableTypeError(input);
  }
  function fromInteropObservable(obj) {
    return new Observable(function(subscriber) {
      var obs = obj[observable]();
      if (isFunction(obs.subscribe)) {
        return obs.subscribe(subscriber);
      }
      throw new TypeError("Provided object does not correctly implement Symbol.observable");
    });
  }
  function fromArrayLike(array) {
    return new Observable(function(subscriber) {
      for (var i = 0; i < array.length && !subscriber.closed; i++) {
        subscriber.next(array[i]);
      }
      subscriber.complete();
    });
  }
  function fromPromise(promise) {
    return new Observable(function(subscriber) {
      promise.then(function(value) {
        if (!subscriber.closed) {
          subscriber.next(value);
          subscriber.complete();
        }
      }, function(err) {
        return subscriber.error(err);
      }).then(null, reportUnhandledError);
    });
  }
  function fromIterable(iterable) {
    return new Observable(function(subscriber) {
      var e_1, _a2;
      try {
        for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
          var value = iterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (iterable_1_1 && !iterable_1_1.done && (_a2 = iterable_1.return))
            _a2.call(iterable_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      subscriber.complete();
    });
  }
  function fromAsyncIterable(asyncIterable) {
    return new Observable(function(subscriber) {
      process2(asyncIterable, subscriber).catch(function(err) {
        return subscriber.error(err);
      });
    });
  }
  function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
  }
  function process2(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a2;
    return __awaiter(this, void 0, void 0, function() {
      var value, e_2_1;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            _b2.trys.push([0, 5, 6, 11]);
            asyncIterable_1 = __asyncValues(asyncIterable);
            _b2.label = 1;
          case 1:
            return [4, asyncIterable_1.next()];
          case 2:
            if (!(asyncIterable_1_1 = _b2.sent(), !asyncIterable_1_1.done))
              return [3, 4];
            value = asyncIterable_1_1.value;
            subscriber.next(value);
            if (subscriber.closed) {
              return [2];
            }
            _b2.label = 3;
          case 3:
            return [3, 1];
          case 4:
            return [3, 11];
          case 5:
            e_2_1 = _b2.sent();
            e_2 = { error: e_2_1 };
            return [3, 11];
          case 6:
            _b2.trys.push([6, , 9, 10]);
            if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a2 = asyncIterable_1.return)))
              return [3, 8];
            return [4, _a2.call(asyncIterable_1)];
          case 7:
            _b2.sent();
            _b2.label = 8;
          case 8:
            return [3, 10];
          case 9:
            if (e_2)
              throw e_2.error;
            return [7];
          case 10:
            return [7];
          case 11:
            subscriber.complete();
            return [2];
        }
      });
    });
  }
  var init_innerFrom = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_isArrayLike();
      init_isPromise();
      init_Observable();
      init_isInteropObservable();
      init_isAsyncIterable();
      init_throwUnobservableError();
      init_isIterable();
      init_isReadableStreamLike();
      init_isFunction();
      init_reportUnhandledError();
      init_observable();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
  function executeSchedule(parentSubscription, scheduler, work, delay2, repeat) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (repeat === void 0) {
      repeat = false;
    }
    var scheduleSubscription = scheduler.schedule(function() {
      work();
      if (repeat) {
        parentSubscription.add(this.schedule(null, delay2));
      } else {
        this.unsubscribe();
      }
    }, delay2);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
      return scheduleSubscription;
    }
  }
  var init_executeSchedule = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
  function observeOn(scheduler, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return operate(function(source, subscriber) {
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.next(value);
        }, delay2);
      }, function() {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.complete();
        }, delay2);
      }, function(err) {
        return executeSchedule(subscriber, scheduler, function() {
          return subscriber.error(err);
        }, delay2);
      }));
    });
  }
  var init_observeOn = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/observeOn.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_executeSchedule();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
  function subscribeOn(scheduler, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return operate(function(source, subscriber) {
      subscriber.add(scheduler.schedule(function() {
        return source.subscribe(subscriber);
      }, delay2));
    });
  }
  var init_subscribeOn = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
  function scheduleObservable(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }
  var init_scheduleObservable = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_innerFrom();
      init_observeOn();
      init_subscribeOn();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
  function schedulePromise(input, scheduler) {
    return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }
  var init_schedulePromise = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_innerFrom();
      init_observeOn();
      init_subscribeOn();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
  function scheduleArray(input, scheduler) {
    return new Observable(function(subscriber) {
      var i = 0;
      return scheduler.schedule(function() {
        if (i === input.length) {
          subscriber.complete();
        } else {
          subscriber.next(input[i++]);
          if (!subscriber.closed) {
            this.schedule();
          }
        }
      });
    });
  }
  var init_scheduleArray = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
  function scheduleIterable(input, scheduler) {
    return new Observable(function(subscriber) {
      var iterator2;
      executeSchedule(subscriber, scheduler, function() {
        iterator2 = input[iterator]();
        executeSchedule(subscriber, scheduler, function() {
          var _a2;
          var value;
          var done;
          try {
            _a2 = iterator2.next(), value = _a2.value, done = _a2.done;
          } catch (err) {
            subscriber.error(err);
            return;
          }
          if (done) {
            subscriber.complete();
          } else {
            subscriber.next(value);
          }
        }, 0, true);
      });
      return function() {
        return isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
      };
    });
  }
  var init_scheduleIterable = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_iterator();
      init_isFunction();
      init_executeSchedule();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
  function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
      throw new Error("Iterable cannot be null");
    }
    return new Observable(function(subscriber) {
      executeSchedule(subscriber, scheduler, function() {
        var iterator2 = input[Symbol.asyncIterator]();
        executeSchedule(subscriber, scheduler, function() {
          iterator2.next().then(function(result) {
            if (result.done) {
              subscriber.complete();
            } else {
              subscriber.next(result.value);
            }
          });
        }, 0, true);
      });
    });
  }
  var init_scheduleAsyncIterable = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_executeSchedule();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
  function scheduleReadableStreamLike(input, scheduler) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
  }
  var init_scheduleReadableStreamLike = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_scheduleAsyncIterable();
      init_isReadableStreamLike();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
  function scheduled(input, scheduler) {
    if (input != null) {
      if (isInteropObservable(input)) {
        return scheduleObservable(input, scheduler);
      }
      if (isArrayLike(input)) {
        return scheduleArray(input, scheduler);
      }
      if (isPromise(input)) {
        return schedulePromise(input, scheduler);
      }
      if (isAsyncIterable(input)) {
        return scheduleAsyncIterable(input, scheduler);
      }
      if (isIterable(input)) {
        return scheduleIterable(input, scheduler);
      }
      if (isReadableStreamLike(input)) {
        return scheduleReadableStreamLike(input, scheduler);
      }
    }
    throw createInvalidObservableTypeError(input);
  }
  var init_scheduled = __esm({
    "node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_scheduleObservable();
      init_schedulePromise();
      init_scheduleArray();
      init_scheduleIterable();
      init_scheduleAsyncIterable();
      init_isInteropObservable();
      init_isPromise();
      init_isArrayLike();
      init_isIterable();
      init_isAsyncIterable();
      init_throwUnobservableError();
      init_isReadableStreamLike();
      init_scheduleReadableStreamLike();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/from.js
  function from(input, scheduler) {
    return scheduler ? scheduled(input, scheduler) : innerFrom(input);
  }
  var init_from = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/from.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_scheduled();
      init_innerFrom();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/of.js
  function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    return from(args, scheduler);
  }
  var init_of = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/of.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_args();
      init_from();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/throwError.js
  function throwError(errorOrErrorFactory, scheduler) {
    var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
      return errorOrErrorFactory;
    };
    var init = function(subscriber) {
      return subscriber.error(errorFactory());
    };
    return new Observable(scheduler ? function(subscriber) {
      return scheduler.schedule(init, 0, subscriber);
    } : init);
  }
  var init_throwError = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/throwError.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
  var EmptyError;
  var init_EmptyError = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/EmptyError.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_createErrorClass();
      EmptyError = createErrorClass(function(_super) {
        return function EmptyErrorImpl() {
          _super(this);
          this.name = "EmptyError";
          this.message = "no elements in sequence";
        };
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
  function lastValueFrom(source, config2) {
    var hasConfig = typeof config2 === "object";
    return new Promise(function(resolve, reject) {
      var _hasValue = false;
      var _value;
      source.subscribe({
        next: function(value) {
          _value = value;
          _hasValue = true;
        },
        error: reject,
        complete: function() {
          if (_hasValue) {
            resolve(_value);
          } else if (hasConfig) {
            resolve(config2.defaultValue);
          } else {
            reject(new EmptyError());
          }
        }
      });
    });
  }
  var init_lastValueFrom = __esm({
    "node_modules/rxjs/dist/esm5/internal/lastValueFrom.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_EmptyError();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/isDate.js
  function isValidDate(value) {
    return value instanceof Date && !isNaN(value);
  }
  var init_isDate = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/isDate.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/timeout.js
  function timeout(config2, schedulerArg) {
    var _a2 = isValidDate(config2) ? { first: config2 } : typeof config2 === "number" ? { each: config2 } : config2, first = _a2.first, each = _a2.each, _b2 = _a2.with, _with = _b2 === void 0 ? timeoutErrorFactory : _b2, _c = _a2.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler : _c, _d = _a2.meta, meta = _d === void 0 ? null : _d;
    if (first == null && each == null) {
      throw new TypeError("No timeout provided.");
    }
    return operate(function(source, subscriber) {
      var originalSourceSubscription;
      var timerSubscription;
      var lastValue = null;
      var seen = 0;
      var startTimer = function(delay2) {
        timerSubscription = executeSchedule(subscriber, scheduler, function() {
          try {
            originalSourceSubscription.unsubscribe();
            innerFrom(_with({
              meta,
              lastValue,
              seen
            })).subscribe(subscriber);
          } catch (err) {
            subscriber.error(err);
          }
        }, delay2);
      };
      originalSourceSubscription = source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
        seen++;
        subscriber.next(lastValue = value);
        each > 0 && startTimer(each);
      }, void 0, void 0, function() {
        if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
          timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
        }
        lastValue = null;
      }));
      startTimer(first != null ? typeof first === "number" ? first : +first - scheduler.now() : each);
    });
  }
  function timeoutErrorFactory(info) {
    throw new TimeoutError(info);
  }
  var TimeoutError;
  var init_timeout = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/timeout.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_async();
      init_isDate();
      init_lift();
      init_innerFrom();
      init_createErrorClass();
      init_OperatorSubscriber();
      init_executeSchedule();
      TimeoutError = createErrorClass(function(_super) {
        return function TimeoutErrorImpl(info) {
          if (info === void 0) {
            info = null;
          }
          _super(this);
          this.message = "Timeout has occurred";
          this.name = "TimeoutError";
          this.info = info;
        };
      });
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/map.js
  function map(project, thisArg) {
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        subscriber.next(project.call(thisArg, value, index++));
      }));
    });
  }
  var init_map = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/map.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
  function callOrApply(fn, args) {
    return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
  }
  function mapOneOrManyArgs(fn) {
    return map(function(args) {
      return callOrApply(fn, args);
    });
  }
  var isArray;
  var init_mapOneOrManyArgs = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_map();
      isArray = Array.isArray;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
  function argsArgArrayOrObject(args) {
    if (args.length === 1) {
      var first_1 = args[0];
      if (isArray2(first_1)) {
        return { args: first_1, keys: null };
      }
      if (isPOJO(first_1)) {
        var keys = getKeys(first_1);
        return {
          args: keys.map(function(key) {
            return first_1[key];
          }),
          keys
        };
      }
    }
    return { args, keys: null };
  }
  function isPOJO(obj) {
    return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
  }
  var isArray2, getPrototypeOf, objectProto, getKeys;
  var init_argsArgArrayOrObject = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      isArray2 = Array.isArray;
      getPrototypeOf = Object.getPrototypeOf;
      objectProto = Object.prototype;
      getKeys = Object.keys;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/createObject.js
  function createObject(keys, values) {
    return keys.reduce(function(result, key, i) {
      return result[key] = values[i], result;
    }, {});
  }
  var init_createObject = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/createObject.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
  function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a2 = argsArgArrayOrObject(args), observables = _a2.args, keys = _a2.keys;
    if (observables.length === 0) {
      return from([], scheduler);
    }
    var result = new Observable(combineLatestInit(observables, scheduler, keys ? function(values) {
      return createObject(keys, values);
    } : identity));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
  }
  function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) {
      valueTransform = identity;
    }
    return function(subscriber) {
      maybeSchedule(scheduler, function() {
        var length = observables.length;
        var values = new Array(length);
        var active = length;
        var remainingFirstValues = length;
        var _loop_1 = function(i2) {
          maybeSchedule(scheduler, function() {
            var source = from(observables[i2], scheduler);
            var hasFirstValue = false;
            source.subscribe(new OperatorSubscriber(subscriber, function(value) {
              values[i2] = value;
              if (!hasFirstValue) {
                hasFirstValue = true;
                remainingFirstValues--;
              }
              if (!remainingFirstValues) {
                subscriber.next(valueTransform(values.slice()));
              }
            }, function() {
              if (!--active) {
                subscriber.complete();
              }
            }));
          }, subscriber);
        };
        for (var i = 0; i < length; i++) {
          _loop_1(i);
        }
      }, subscriber);
    };
  }
  function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
      executeSchedule(subscription, scheduler, execute);
    } else {
      execute();
    }
  }
  var init_combineLatest = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_argsArgArrayOrObject();
      init_from();
      init_identity();
      init_mapOneOrManyArgs();
      init_args();
      init_createObject();
      init_OperatorSubscriber();
      init_executeSchedule();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
  function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      if (isComplete && !buffer.length && !active) {
        subscriber.complete();
      }
    };
    var outerNext = function(value) {
      return active < concurrent ? doInnerSub(value) : buffer.push(value);
    };
    var doInnerSub = function(value) {
      expand && subscriber.next(value);
      active++;
      var innerComplete = false;
      innerFrom(project(value, index++)).subscribe(new OperatorSubscriber(subscriber, function(innerValue) {
        onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
        if (expand) {
          outerNext(innerValue);
        } else {
          subscriber.next(innerValue);
        }
      }, function() {
        innerComplete = true;
      }, void 0, function() {
        if (innerComplete) {
          try {
            active--;
            var _loop_1 = function() {
              var bufferedValue = buffer.shift();
              if (innerSubScheduler) {
                executeSchedule(subscriber, innerSubScheduler, function() {
                  return doInnerSub(bufferedValue);
                });
              } else {
                doInnerSub(bufferedValue);
              }
            };
            while (buffer.length && active < concurrent) {
              _loop_1();
            }
            checkComplete();
          } catch (err) {
            subscriber.error(err);
          }
        }
      }));
    };
    source.subscribe(new OperatorSubscriber(subscriber, outerNext, function() {
      isComplete = true;
      checkComplete();
    }));
    return function() {
      additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();
    };
  }
  var init_mergeInternals = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_innerFrom();
      init_executeSchedule();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
  function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    if (isFunction(resultSelector)) {
      return mergeMap(function(a, i) {
        return map(function(b, ii) {
          return resultSelector(a, b, i, ii);
        })(innerFrom(project(a, i)));
      }, concurrent);
    } else if (typeof resultSelector === "number") {
      concurrent = resultSelector;
    }
    return operate(function(source, subscriber) {
      return mergeInternals(source, subscriber, project, concurrent);
    });
  }
  var init_mergeMap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_map();
      init_innerFrom();
      init_lift();
      init_mergeInternals();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
  function mergeAll(concurrent) {
    if (concurrent === void 0) {
      concurrent = Infinity;
    }
    return mergeMap(identity, concurrent);
  }
  var init_mergeAll = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_mergeMap();
      init_identity();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
  function concatAll() {
    return mergeAll(1);
  }
  var init_concatAll = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/concatAll.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_mergeAll();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/concat.js
  function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return concatAll()(from(args, popScheduler(args)));
  }
  var init_concat = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/concat.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_concatAll();
      init_args();
      init_from();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/defer.js
  function defer(observableFactory) {
    return new Observable(function(subscriber) {
      innerFrom(observableFactory()).subscribe(subscriber);
    });
  }
  var init_defer = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/defer.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_innerFrom();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/connectable.js
  function connectable(source, config2) {
    if (config2 === void 0) {
      config2 = DEFAULT_CONFIG;
    }
    var connection = null;
    var connector = config2.connector, _a2 = config2.resetOnDisconnect, resetOnDisconnect = _a2 === void 0 ? true : _a2;
    var subject = connector();
    var result = new Observable(function(subscriber) {
      return subject.subscribe(subscriber);
    });
    result.connect = function() {
      if (!connection || connection.closed) {
        connection = defer(function() {
          return source;
        }).subscribe(subject);
        if (resetOnDisconnect) {
          connection.add(function() {
            return subject = connector();
          });
        }
      }
      return connection;
    };
    return result;
  }
  var DEFAULT_CONFIG;
  var init_connectable = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/connectable.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Subject();
      init_Observable();
      init_defer();
      DEFAULT_CONFIG = {
        connector: function() {
          return new Subject();
        },
        resetOnDisconnect: true
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js
  function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction(options)) {
      resultSelector = options;
      options = void 0;
    }
    if (resultSelector) {
      return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));
    }
    var _a2 = __read(isEventTarget(target) ? eventTargetMethods.map(function(methodName) {
      return function(handler) {
        return target[methodName](eventName, handler, options);
      };
    }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2), add = _a2[0], remove = _a2[1];
    if (!add) {
      if (isArrayLike(target)) {
        return mergeMap(function(subTarget) {
          return fromEvent(subTarget, eventName, options);
        })(innerFrom(target));
      }
    }
    if (!add) {
      throw new TypeError("Invalid event target");
    }
    return new Observable(function(subscriber) {
      var handler = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return subscriber.next(1 < args.length ? args : args[0]);
      };
      add(handler);
      return function() {
        return remove(handler);
      };
    });
  }
  function toCommonHandlerRegistry(target, eventName) {
    return function(methodName) {
      return function(handler) {
        return target[methodName](eventName, handler);
      };
    };
  }
  function isNodeStyleEventEmitter(target) {
    return isFunction(target.addListener) && isFunction(target.removeListener);
  }
  function isJQueryStyleEventEmitter(target) {
    return isFunction(target.on) && isFunction(target.off);
  }
  function isEventTarget(target) {
    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);
  }
  var nodeEventEmitterMethods, eventTargetMethods, jqueryMethods;
  var init_fromEvent = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_innerFrom();
      init_Observable();
      init_mergeMap();
      init_isArrayLike();
      init_isFunction();
      init_mapOneOrManyArgs();
      nodeEventEmitterMethods = ["addListener", "removeListener"];
      eventTargetMethods = ["addEventListener", "removeEventListener"];
      jqueryMethods = ["on", "off"];
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/timer.js
  function timer(dueTime, intervalOrScheduler, scheduler) {
    if (dueTime === void 0) {
      dueTime = 0;
    }
    if (scheduler === void 0) {
      scheduler = async;
    }
    var intervalDuration = -1;
    if (intervalOrScheduler != null) {
      if (isScheduler(intervalOrScheduler)) {
        scheduler = intervalOrScheduler;
      } else {
        intervalDuration = intervalOrScheduler;
      }
    }
    return new Observable(function(subscriber) {
      var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
      if (due < 0) {
        due = 0;
      }
      var n = 0;
      return scheduler.schedule(function() {
        if (!subscriber.closed) {
          subscriber.next(n++);
          if (0 <= intervalDuration) {
            this.schedule(void 0, intervalDuration);
          } else {
            subscriber.complete();
          }
        }
      }, due);
    });
  }
  var init_timer = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/timer.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_async();
      init_isScheduler();
      init_isDate();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/interval.js
  function interval(period, scheduler) {
    if (period === void 0) {
      period = 0;
    }
    if (scheduler === void 0) {
      scheduler = asyncScheduler;
    }
    if (period < 0) {
      period = 0;
    }
    return timer(period, period, scheduler);
  }
  var init_interval = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/interval.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_async();
      init_timer();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/merge.js
  function merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var concurrent = popNumber(args, Infinity);
    var sources = args;
    return !sources.length ? EMPTY : sources.length === 1 ? innerFrom(sources[0]) : mergeAll(concurrent)(from(sources, scheduler));
  }
  var init_merge = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/merge.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_mergeAll();
      init_innerFrom();
      init_empty();
      init_args();
      init_from();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/never.js
  var NEVER;
  var init_never = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/never.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_noop();
      NEVER = new Observable(noop);
    }
  });

  // node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
  function argsOrArgArray(args) {
    return args.length === 1 && isArray3(args[0]) ? args[0] : args;
  }
  var isArray3;
  var init_argsOrArgArray = __esm({
    "node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      isArray3 = Array.isArray;
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/filter.js
  function filter(predicate, thisArg) {
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        return predicate.call(thisArg, value, index++) && subscriber.next(value);
      }));
    });
  }
  var init_filter = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/filter.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/observable/race.js
  function race() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      sources[_i] = arguments[_i];
    }
    sources = argsOrArgArray(sources);
    return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));
  }
  function raceInit(sources) {
    return function(subscriber) {
      var subscriptions = [];
      var _loop_1 = function(i2) {
        subscriptions.push(innerFrom(sources[i2]).subscribe(new OperatorSubscriber(subscriber, function(value) {
          if (subscriptions) {
            for (var s = 0; s < subscriptions.length; s++) {
              s !== i2 && subscriptions[s].unsubscribe();
            }
            subscriptions = null;
          }
          subscriber.next(value);
        })));
      };
      for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
        _loop_1(i);
      }
    };
  }
  var init_race = __esm({
    "node_modules/rxjs/dist/esm5/internal/observable/race.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_innerFrom();
      init_argsOrArgArray();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/types.js
  var init_types = __esm({
    "node_modules/rxjs/dist/esm5/internal/types.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/catchError.js
  function catchError(selector) {
    return operate(function(source, subscriber) {
      var innerSub = null;
      var syncUnsub = false;
      var handledResult;
      innerSub = source.subscribe(new OperatorSubscriber(subscriber, void 0, void 0, function(err) {
        handledResult = innerFrom(selector(err, catchError(selector)(source)));
        if (innerSub) {
          innerSub.unsubscribe();
          innerSub = null;
          handledResult.subscribe(subscriber);
        } else {
          syncUnsub = true;
        }
      }));
      if (syncUnsub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      }
    });
  }
  var init_catchError = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/catchError.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_innerFrom();
      init_OperatorSubscriber();
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
  function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function(source, subscriber) {
      var hasState = hasSeed;
      var state = seed;
      var index = 0;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        var i = index++;
        state = hasState ? accumulator(state, value, i) : (hasState = true, value);
        emitOnNext && subscriber.next(state);
      }, emitBeforeComplete && function() {
        hasState && subscriber.next(state);
        subscriber.complete();
      }));
    };
  }
  var init_scanInternals = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
  function concatMap(project, resultSelector) {
    return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
  }
  var init_concatMap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/concatMap.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_mergeMap();
      init_isFunction();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/take.js
  function take(count) {
    return count <= 0 ? function() {
      return EMPTY;
    } : operate(function(source, subscriber) {
      var seen = 0;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        if (++seen <= count) {
          subscriber.next(value);
          if (count <= seen) {
            subscriber.complete();
          }
        }
      }));
    });
  }
  var init_take = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/take.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_empty();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js
  function ignoreElements() {
    return operate(function(source, subscriber) {
      source.subscribe(new OperatorSubscriber(subscriber, noop));
    });
  }
  var init_ignoreElements = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_OperatorSubscriber();
      init_noop();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/mapTo.js
  function mapTo(value) {
    return map(function() {
      return value;
    });
  }
  var init_mapTo = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/mapTo.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_map();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js
  function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
      return function(source) {
        return concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));
      };
    }
    return mergeMap(function(value, index) {
      return delayDurationSelector(value, index).pipe(take(1), mapTo(value));
    });
  }
  var init_delayWhen = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_concat();
      init_take();
      init_ignoreElements();
      init_mapTo();
      init_mergeMap();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/delay.js
  function delay(due, scheduler) {
    if (scheduler === void 0) {
      scheduler = asyncScheduler;
    }
    var duration = timer(due, scheduler);
    return delayWhen(function() {
      return duration;
    });
  }
  var init_delay = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/delay.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_async();
      init_delayWhen();
      init_timer();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
  function distinctUntilChanged(comparator, keySelector) {
    if (keySelector === void 0) {
      keySelector = identity;
    }
    comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
    return operate(function(source, subscriber) {
      var previousKey;
      var first = true;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        var currentKey = keySelector(value);
        if (first || !comparator(previousKey, currentKey)) {
          first = false;
          previousKey = currentKey;
          subscriber.next(value);
        }
      }));
    });
  }
  function defaultCompare(a, b) {
    return a === b;
  }
  var init_distinctUntilChanged = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_identity();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js
  function exhaustMap(project, resultSelector) {
    if (resultSelector) {
      return function(source) {
        return source.pipe(exhaustMap(function(a, i) {
          return innerFrom(project(a, i)).pipe(map(function(b, ii) {
            return resultSelector(a, b, i, ii);
          }));
        }));
      };
    }
    return operate(function(source, subscriber) {
      var index = 0;
      var innerSub = null;
      var isComplete = false;
      source.subscribe(new OperatorSubscriber(subscriber, function(outerValue) {
        if (!innerSub) {
          innerSub = new OperatorSubscriber(subscriber, void 0, function() {
            innerSub = null;
            isComplete && subscriber.complete();
          });
          innerFrom(project(outerValue, index++)).subscribe(innerSub);
        }
      }, function() {
        isComplete = true;
        !innerSub && subscriber.complete();
      }));
    });
  }
  var init_exhaustMap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_map();
      init_innerFrom();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/finalize.js
  function finalize(callback) {
    return operate(function(source, subscriber) {
      try {
        source.subscribe(subscriber);
      } finally {
        subscriber.add(callback);
      }
    });
  }
  var init_finalize = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/finalize.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/takeLast.js
  function takeLast(count) {
    return count <= 0 ? function() {
      return EMPTY;
    } : operate(function(source, subscriber) {
      var buffer = [];
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        buffer.push(value);
        count < buffer.length && buffer.shift();
      }, function() {
        var e_1, _a2;
        try {
          for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
            var value = buffer_1_1.value;
            subscriber.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (buffer_1_1 && !buffer_1_1.done && (_a2 = buffer_1.return))
              _a2.call(buffer_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        subscriber.complete();
      }, void 0, function() {
        buffer = null;
      }));
    });
  }
  var init_takeLast = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/takeLast.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_empty();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/pairwise.js
  function pairwise() {
    return operate(function(source, subscriber) {
      var prev;
      var hasPrev = false;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        var p = prev;
        prev = value;
        hasPrev && subscriber.next([p, value]);
        hasPrev = true;
      }));
    });
  }
  var init_pairwise = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/pairwise.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/scan.js
  function scan(accumulator, seed) {
    return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
  }
  var init_scan = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/scan.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_scanInternals();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/share.js
  function share(options) {
    if (options === void 0) {
      options = {};
    }
    var _a2 = options.connector, connector = _a2 === void 0 ? function() {
      return new Subject();
    } : _a2, _b2 = options.resetOnError, resetOnError = _b2 === void 0 ? true : _b2, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
    return function(wrapperSource) {
      var connection = null;
      var resetConnection = null;
      var subject = null;
      var refCount = 0;
      var hasCompleted = false;
      var hasErrored = false;
      var cancelReset = function() {
        resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
        resetConnection = null;
      };
      var reset = function() {
        cancelReset();
        connection = subject = null;
        hasCompleted = hasErrored = false;
      };
      var resetAndUnsubscribe = function() {
        var conn = connection;
        reset();
        conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
      };
      return operate(function(source, subscriber) {
        refCount++;
        if (!hasErrored && !hasCompleted) {
          cancelReset();
        }
        var dest = subject = subject !== null && subject !== void 0 ? subject : connector();
        subscriber.add(function() {
          refCount--;
          if (refCount === 0 && !hasErrored && !hasCompleted) {
            resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
          }
        });
        dest.subscribe(subscriber);
        if (!connection) {
          connection = new SafeSubscriber({
            next: function(value) {
              return dest.next(value);
            },
            error: function(err) {
              hasErrored = true;
              cancelReset();
              resetConnection = handleReset(reset, resetOnError, err);
              dest.error(err);
            },
            complete: function() {
              hasCompleted = true;
              cancelReset();
              resetConnection = handleReset(reset, resetOnComplete);
              dest.complete();
            }
          });
          from(source).subscribe(connection);
        }
      })(wrapperSource);
    };
  }
  function handleReset(reset, on) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    if (on === true) {
      reset();
      return null;
    }
    if (on === false) {
      return null;
    }
    return on.apply(void 0, __spreadArray([], __read(args))).pipe(take(1)).subscribe(function() {
      return reset();
    });
  }
  var init_share = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/share.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_from();
      init_take();
      init_Subject();
      init_Subscriber();
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js
  function shareReplay(configOrBufferSize, windowTime, scheduler) {
    var _a2, _b2;
    var bufferSize;
    var refCount = false;
    if (configOrBufferSize && typeof configOrBufferSize === "object") {
      bufferSize = (_a2 = configOrBufferSize.bufferSize) !== null && _a2 !== void 0 ? _a2 : Infinity;
      windowTime = (_b2 = configOrBufferSize.windowTime) !== null && _b2 !== void 0 ? _b2 : Infinity;
      refCount = !!configOrBufferSize.refCount;
      scheduler = configOrBufferSize.scheduler;
    } else {
      bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
    }
    return share({
      connector: function() {
        return new ReplaySubject(bufferSize, windowTime, scheduler);
      },
      resetOnError: true,
      resetOnComplete: false,
      resetOnRefCountZero: refCount
    });
  }
  var init_shareReplay = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_ReplaySubject();
      init_share();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/skip.js
  function skip(count) {
    return filter(function(_, index) {
      return count <= index;
    });
  }
  var init_skip = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/skip.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_filter();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js
  function skipWhile(predicate) {
    return operate(function(source, subscriber) {
      var taking = false;
      var index = 0;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        return (taking || (taking = !predicate(value, index++))) && subscriber.next(value);
      }));
    });
  }
  var init_skipWhile = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/startWith.js
  function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      values[_i] = arguments[_i];
    }
    var scheduler = popScheduler(values);
    return operate(function(source, subscriber) {
      (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
    });
  }
  var init_startWith = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/startWith.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_concat();
      init_args();
      init_lift();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
  function switchMap(project, resultSelector) {
    return operate(function(source, subscriber) {
      var innerSubscriber = null;
      var index = 0;
      var isComplete = false;
      var checkComplete = function() {
        return isComplete && !innerSubscriber && subscriber.complete();
      };
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
        var innerIndex = 0;
        var outerIndex = index++;
        innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = new OperatorSubscriber(subscriber, function(innerValue) {
          return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
        }, function() {
          innerSubscriber = null;
          checkComplete();
        }));
      }, function() {
        isComplete = true;
        checkComplete();
      }));
    });
  }
  var init_switchMap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_innerFrom();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
  function takeUntil(notifier) {
    return operate(function(source, subscriber) {
      innerFrom(notifier).subscribe(new OperatorSubscriber(subscriber, function() {
        return subscriber.complete();
      }, noop));
      !subscriber.closed && source.subscribe(subscriber);
    });
  }
  var init_takeUntil = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_OperatorSubscriber();
      init_innerFrom();
      init_noop();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js
  function takeWhile(predicate, inclusive) {
    if (inclusive === void 0) {
      inclusive = false;
    }
    return operate(function(source, subscriber) {
      var index = 0;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        var result = predicate(value, index++);
        (result || inclusive) && subscriber.next(value);
        !result && subscriber.complete();
      }));
    });
  }
  var init_takeWhile = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_OperatorSubscriber();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/tap.js
  function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
    return tapObserver ? operate(function(source, subscriber) {
      var _a2;
      (_a2 = tapObserver.subscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      var isUnsub = true;
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        var _a3;
        (_a3 = tapObserver.next) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver, value);
        subscriber.next(value);
      }, function() {
        var _a3;
        isUnsub = false;
        (_a3 = tapObserver.complete) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
        subscriber.complete();
      }, function(err) {
        var _a3;
        isUnsub = false;
        (_a3 = tapObserver.error) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver, err);
        subscriber.error(err);
      }, function() {
        var _a3, _b2;
        if (isUnsub) {
          (_a3 = tapObserver.unsubscribe) === null || _a3 === void 0 ? void 0 : _a3.call(tapObserver);
        }
        (_b2 = tapObserver.finalize) === null || _b2 === void 0 ? void 0 : _b2.call(tapObserver);
      }));
    }) : identity;
  }
  var init_tap = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/tap.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isFunction();
      init_lift();
      init_OperatorSubscriber();
      init_identity();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/throttle.js
  function throttle(durationSelector, _a2) {
    var _b2 = _a2 === void 0 ? defaultThrottleConfig : _a2, leading = _b2.leading, trailing = _b2.trailing;
    return operate(function(source, subscriber) {
      var hasValue = false;
      var sendValue = null;
      var throttled = null;
      var isComplete = false;
      var endThrottling = function() {
        throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
        throttled = null;
        if (trailing) {
          send();
          isComplete && subscriber.complete();
        }
      };
      var cleanupThrottling = function() {
        throttled = null;
        isComplete && subscriber.complete();
      };
      var startThrottle = function(value) {
        return throttled = innerFrom(durationSelector(value)).subscribe(new OperatorSubscriber(subscriber, endThrottling, cleanupThrottling));
      };
      var send = function() {
        if (hasValue) {
          hasValue = false;
          var value = sendValue;
          sendValue = null;
          subscriber.next(value);
          !isComplete && startThrottle(value);
        }
      };
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        hasValue = true;
        sendValue = value;
        !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
      }, function() {
        isComplete = true;
        !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
      }));
    });
  }
  var defaultThrottleConfig;
  var init_throttle = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/throttle.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_lift();
      init_OperatorSubscriber();
      init_innerFrom();
      defaultThrottleConfig = {
        leading: true,
        trailing: false
      };
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js
  function throttleTime(duration, scheduler, config2) {
    if (scheduler === void 0) {
      scheduler = asyncScheduler;
    }
    if (config2 === void 0) {
      config2 = defaultThrottleConfig;
    }
    var duration$ = timer(duration, scheduler);
    return throttle(function() {
      return duration$;
    }, config2);
  }
  var init_throttleTime = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_async();
      init_throttle();
      init_timer();
    }
  });

  // node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js
  function withLatestFrom() {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      inputs[_i] = arguments[_i];
    }
    var project = popResultSelector(inputs);
    return operate(function(source, subscriber) {
      var len = inputs.length;
      var otherValues = new Array(len);
      var hasValue = inputs.map(function() {
        return false;
      });
      var ready = false;
      var _loop_1 = function(i2) {
        innerFrom(inputs[i2]).subscribe(new OperatorSubscriber(subscriber, function(value) {
          otherValues[i2] = value;
          if (!ready && !hasValue[i2]) {
            hasValue[i2] = true;
            (ready = hasValue.every(identity)) && (hasValue = null);
          }
        }, noop));
      };
      for (var i = 0; i < len; i++) {
        _loop_1(i);
      }
      source.subscribe(new OperatorSubscriber(subscriber, function(value) {
        if (ready) {
          var values = __spreadArray([value], __read(otherValues));
          subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
        }
      }));
    });
  }
  var init_withLatestFrom = __esm({
    "node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_modules();
      init_lift();
      init_OperatorSubscriber();
      init_innerFrom();
      init_identity();
      init_noop();
      init_args();
    }
  });

  // node_modules/rxjs/dist/esm5/index.js
  var init_esm5 = __esm({
    "node_modules/rxjs/dist/esm5/index.js"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Observable();
      init_Subject();
      init_ReplaySubject();
      init_asap();
      init_identity();
      init_lastValueFrom();
      init_timeout();
      init_combineLatest();
      init_concat();
      init_connectable();
      init_defer();
      init_from();
      init_fromEvent();
      init_interval();
      init_merge();
      init_of();
      init_race();
      init_throwError();
      init_timer();
      init_empty();
      init_never();
      init_types();
      init_catchError();
      init_concatAll();
      init_concatMap();
      init_delay();
      init_distinctUntilChanged();
      init_exhaustMap();
      init_filter();
      init_finalize();
      init_ignoreElements();
      init_map();
      init_mergeMap();
      init_pairwise();
      init_scan();
      init_share();
      init_shareReplay();
      init_skip();
      init_skipWhile();
      init_startWith();
      init_subscribeOn();
      init_switchMap();
      init_take();
      init_takeLast();
      init_takeUntil();
      init_takeWhile();
      init_tap();
      init_throttleTime();
      init_timeout();
      init_withLatestFrom();
    }
  });

  // src/default_config.ts
  var DEFAULT_CONFIG2, default_config_default;
  var init_default_config = __esm({
    "src/default_config.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      DEFAULT_CONFIG2 = {
        DEFAULT_UNMUTED_VOLUME: 0.1,
        DEFAULT_REQUEST_TIMEOUT: 30 * 1e3,
        DEFAULT_TEXT_TRACK_MODE: "native",
        DEFAULT_MANUAL_BITRATE_SWITCHING_MODE: "seamless",
        DEFAULT_ENABLE_FAST_SWITCHING: true,
        DEFAULT_AUDIO_TRACK_SWITCHING_MODE: "seamless",
        DELTA_POSITION_AFTER_RELOAD: {
          bitrateSwitch: -0.1,
          trackSwitch: {
            audio: -0.7,
            video: -0.1,
            other: 0
          }
        },
        DEFAULT_CODEC_SWITCHING_BEHAVIOR: "continue",
        DEFAULT_AUTO_PLAY: false,
        DEFAULT_SHOW_NATIVE_SUBTITLE: true,
        DEFAULT_STOP_AT_END: true,
        DEFAULT_WANTED_BUFFER_AHEAD: 30,
        DEFAULT_MAX_BUFFER_AHEAD: Infinity,
        DEFAULT_MAX_BUFFER_BEHIND: Infinity,
        DEFAULT_MAX_VIDEO_BUFFER_SIZE: Infinity,
        MAXIMUM_MAX_BUFFER_AHEAD: {
          text: 5 * 60 * 60
        },
        MAXIMUM_MAX_BUFFER_BEHIND: {
          text: 5 * 60 * 60
        },
        DEFAULT_INITIAL_BITRATES: {
          audio: 0,
          video: 0,
          other: 0
        },
        DEFAULT_MIN_BITRATES: {
          audio: 0,
          video: 0,
          other: 0
        },
        DEFAULT_MAX_BITRATES: {
          audio: Infinity,
          video: Infinity,
          other: Infinity
        },
        INACTIVITY_DELAY: 60 * 1e3,
        DEFAULT_THROTTLE_WHEN_HIDDEN: false,
        DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN: false,
        DEFAULT_LIMIT_VIDEO_WIDTH: false,
        DEFAULT_LIVE_GAP: {
          DEFAULT: 10,
          LOW_LATENCY: 3.5
        },
        BUFFER_DISCONTINUITY_THRESHOLD: 0.2,
        FORCE_DISCONTINUITY_SEEK_DELAY: 2e3,
        BITRATE_REBUFFERING_RATIO: 1.5,
        BUFFER_GC_GAPS: {
          CALM: 240,
          BEEFY: 30
        },
        DEFAULT_MAX_MANIFEST_REQUEST_RETRY: 4,
        DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR: 4,
        DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE: Infinity,
        INITIAL_BACKOFF_DELAY_BASE: {
          REGULAR: 200,
          LOW_LATENCY: 50
        },
        MAX_BACKOFF_DELAY_BASE: {
          REGULAR: 3e3,
          LOW_LATENCY: 1e3
        },
        SAMPLING_INTERVAL_MEDIASOURCE: 1e3,
        SAMPLING_INTERVAL_LOW_LATENCY: 250,
        SAMPLING_INTERVAL_NO_MEDIASOURCE: 500,
        ABR_MINIMUM_TOTAL_BYTES: 15e4,
        ABR_MINIMUM_CHUNK_SIZE: 16e3,
        ABR_STARVATION_FACTOR: {
          DEFAULT: 0.72,
          LOW_LATENCY: 0.72
        },
        ABR_REGULAR_FACTOR: {
          DEFAULT: 0.8,
          LOW_LATENCY: 0.8
        },
        ABR_STARVATION_GAP: {
          DEFAULT: 5,
          LOW_LATENCY: 5
        },
        OUT_OF_STARVATION_GAP: {
          DEFAULT: 7,
          LOW_LATENCY: 7
        },
        ABR_STARVATION_DURATION_DELTA: 0.1,
        ABR_FAST_EMA: 2,
        ABR_SLOW_EMA: 10,
        RESUME_GAP_AFTER_SEEKING: {
          DEFAULT: 1.5,
          LOW_LATENCY: 0.5
        },
        RESUME_GAP_AFTER_NOT_ENOUGH_DATA: {
          DEFAULT: 0.5,
          LOW_LATENCY: 0.5
        },
        RESUME_GAP_AFTER_BUFFERING: {
          DEFAULT: 5,
          LOW_LATENCY: 0.5
        },
        REBUFFERING_GAP: {
          DEFAULT: 0.5,
          LOW_LATENCY: 0.2
        },
        MINIMUM_BUFFER_AMOUNT_BEFORE_FREEZING: 2,
        UNFREEZING_SEEK_DELAY: 6e3,
        FREEZING_STALLED_DELAY: 600,
        UNFREEZING_DELTA_POSITION: 1e-3,
        MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT: 0.15,
        MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE: 0.4,
        MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE: 0.3,
        MINIMUM_SEGMENT_SIZE: 5e-3,
        APPEND_WINDOW_SECURITIES: {
          START: 0.2,
          END: 0.1
        },
        MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL: 50,
        TEXT_TRACK_SIZE_CHECKS_INTERVAL: 250,
        BUFFER_PADDING: {
          audio: 1,
          video: 3,
          other: 1
        },
        SEGMENT_PRIORITIES_STEPS: [
          2,
          4,
          8,
          12,
          18,
          25
        ],
        MAX_HIGH_PRIORITY_LEVEL: 1,
        MIN_CANCELABLE_PRIORITY: 3,
        EME_DEFAULT_WIDEVINE_ROBUSTNESSES: [
          "HW_SECURE_ALL",
          "HW_SECURE_DECODE",
          "HW_SECURE_CRYPTO",
          "SW_SECURE_DECODE",
          "SW_SECURE_CRYPTO"
        ],
        EME_KEY_SYSTEMS: {
          clearkey: [
            "webkit-org.w3.clearkey",
            "org.w3.clearkey"
          ],
          widevine: ["com.widevine.alpha"],
          playready: [
            "com.microsoft.playready",
            "com.chromecast.playready",
            "com.youtube.playready"
          ],
          fairplay: ["com.apple.fps.1_0"]
        },
        MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE: 10,
        MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE: 200,
        MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY: 300,
        OUT_OF_SYNC_MANIFEST_REFRESH_DELAY: 3e3,
        FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY: 3e3,
        DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0: 3,
        EME_DEFAULT_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS: 15,
        EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION: 1e3,
        EME_WAITING_DELAY_LOADED_SESSION_EMPTY_KEYSTATUSES: 100,
        FORCED_ENDED_THRESHOLD: 8e-4,
        ADAPTATION_SWITCH_BUFFER_PADDINGS: {
          video: { before: 5, after: 5 },
          audio: { before: 2, after: 2.5 },
          text: { before: 0, after: 0 },
          image: { before: 0, after: 0 }
        },
        SOURCE_BUFFER_FLUSHING_INTERVAL: 500,
        CONTENT_REPLACEMENT_PADDING: 1.2,
        CACHE_LOAD_DURATION_THRESHOLDS: {
          video: 50,
          audio: 10
        },
        STREAM_EVENT_EMITTER_POLL_INTERVAL: 250,
        DEFAULT_MAXIMUM_TIME_ROUNDING_ERROR: 1 / 1e3,
        BUFFERED_HISTORY_RETENTION_TIME: 6e4,
        BUFFERED_HISTORY_MAXIMUM_ENTRIES: 200,
        MIN_BUFFER_AHEAD: 5,
        UPTO_CURRENT_POSITION_CLEANUP: 5
      };
      default_config_default = DEFAULT_CONFIG2;
    }
  });

  // src/utils/object_assign.ts
  function objectAssign(target, ...sources) {
    if (target === null || target === void 0) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    const to = Object(target);
    for (let i = 0; i < sources.length; i++) {
      const source = sources[i];
      for (const key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          to[key] = source[key];
        }
      }
    }
    return to;
  }
  var object_assign_default;
  var init_object_assign = __esm({
    "src/utils/object_assign.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      object_assign_default = typeof Object.assign === "function" ? Object.assign : objectAssign;
    }
  });

  // src/utils/deep_merge.ts
  function isObject(item) {
    return item !== null && item !== void 0 && !Array.isArray(item) && typeof item === "object";
  }
  function deepMerge(target, ...sources) {
    if (sources.length === 0) {
      return target;
    }
    const source = sources.shift();
    if (isObject(target) && isObject(source)) {
      for (const key in source) {
        if (isObject(source[key])) {
          if (target[key] === void 0) {
            object_assign_default(target, { [key]: {} });
          }
          const newTarget = target[key];
          deepMerge(newTarget, source[key]);
        } else {
          object_assign_default(target, { [key]: source[key] });
        }
      }
    }
    return deepMerge(target, ...sources);
  }
  var init_deep_merge = __esm({
    "src/utils/deep_merge.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_object_assign();
    }
  });

  // src/config.ts
  var ConfigHandler, configHandler, config_default;
  var init_config2 = __esm({
    "src/config.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_default_config();
      init_deep_merge();
      ConfigHandler = class {
        constructor() {
          this._config = default_config_default;
        }
        update(config2) {
          const newConfig = deepMerge(this._config, config2);
          this._config = newConfig;
        }
        getCurrent() {
          return this._config;
        }
      };
      configHandler = new ConfigHandler();
      config_default = configHandler;
    }
  });

  // src/utils/noop.ts
  function noop_default() {
  }
  var init_noop2 = __esm({
    "src/utils/noop.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/utils/logger.ts
  var DEFAULT_LOG_LEVEL, Logger;
  var init_logger = __esm({
    "src/utils/logger.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_noop2();
      DEFAULT_LOG_LEVEL = "NONE";
      Logger = class {
        constructor() {
          this.error = noop_default;
          this.warn = noop_default;
          this.info = noop_default;
          this.debug = noop_default;
          this._levels = {
            NONE: 0,
            ERROR: 1,
            WARNING: 2,
            INFO: 3,
            DEBUG: 4
          };
          this._currentLevel = DEFAULT_LOG_LEVEL;
        }
        setLevel(levelStr) {
          let level;
          const foundLevel = this._levels[levelStr];
          if (typeof foundLevel === "number") {
            level = foundLevel;
            this._currentLevel = levelStr;
          } else {
            level = 0;
            this._currentLevel = "NONE";
          }
          this.error = level >= this._levels.ERROR ? console.error.bind(console) : noop_default;
          this.warn = level >= this._levels.WARNING ? console.warn.bind(console) : noop_default;
          this.info = level >= this._levels.INFO ? console.info.bind(console) : noop_default;
          this.debug = level >= this._levels.DEBUG ? console.log.bind(console) : noop_default;
        }
        getLevel() {
          return this._currentLevel;
        }
      };
    }
  });

  // src/log.ts
  var logger, log_default;
  var init_log = __esm({
    "src/log.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_logger();
      logger = new Logger();
      log_default = logger;
    }
  });

  // src/utils/ranges.ts
  function nearlyEqual(a, b) {
    return Math.abs(a - b) < EPSILON;
  }
  function createRangeUnion(range1, range2) {
    const start = Math.min(range1.start, range2.start);
    const end = Math.max(range1.end, range2.end);
    return { start, end };
  }
  function removeEmptyRanges(ranges) {
    for (let index = 0; index < ranges.length; index++) {
      const range = ranges[index];
      if (range.start === range.end) {
        ranges.splice(index--, 1);
      }
    }
    return ranges;
  }
  function mergeContiguousRanges(ranges) {
    for (let index = 1; index < ranges.length; index++) {
      const prevRange = ranges[index - 1];
      const currRange = ranges[index];
      if (areRangesNearlyContiguous(prevRange, currRange)) {
        const unionRange = createRangeUnion(prevRange, currRange);
        ranges.splice(--index, 2, unionRange);
      }
    }
    return ranges;
  }
  function isBefore(range1, range2) {
    return range1.end <= range2.start;
  }
  function isTimeInRanges(ranges, time) {
    for (let i = 0; i < ranges.length; i++) {
      if (isTimeInRange(ranges[i], time)) {
        return true;
      }
    }
    return false;
  }
  function isTimeInRange({ start, end }, time) {
    return start <= time && time < end;
  }
  function areRangesOverlapping(range1, range2) {
    return isTimeInRange(range1, range2.start) || range1.start < range2.end && range2.end < range1.end || isTimeInRange(range2, range1.start);
  }
  function areRangesNearlyContiguous(range1, range2) {
    return nearlyEqual(range2.start, range1.end) || nearlyEqual(range2.end, range1.start);
  }
  function convertToRanges(timeRanges) {
    const ranges = [];
    for (let i = 0; i < timeRanges.length; i++) {
      ranges.push({
        start: timeRanges.start(i),
        end: timeRanges.end(i)
      });
    }
    return ranges;
  }
  function getRange(timeRanges, time) {
    for (let i = timeRanges.length - 1; i >= 0; i--) {
      const start = timeRanges.start(i);
      if (time >= start) {
        const end = timeRanges.end(i);
        if (time < end) {
          return {
            start,
            end
          };
        }
      }
    }
    return null;
  }
  function getNextRangeGap(timeRanges, time) {
    const len = timeRanges.length;
    for (let i = 0; i < len; i++) {
      const start = timeRanges.start(i);
      if (time < start) {
        return start - time;
      }
    }
    return Infinity;
  }
  function getInnerAndOuterTimeRanges(timeRanges, time) {
    let innerRange = null;
    const outerRanges = [];
    for (let i = 0; i < timeRanges.length; i++) {
      const start = timeRanges.start(i);
      const end = timeRanges.end(i);
      if (time < start || time >= end) {
        outerRanges.push({ start, end });
      } else {
        innerRange = { start, end };
      }
    }
    return { outerRanges, innerRange };
  }
  function getSizeOfRange(timeRanges, currentTime) {
    const range = getRange(timeRanges, currentTime);
    return range !== null ? range.end - range.start : 0;
  }
  function getPlayedSizeOfRange(timeRanges, currentTime) {
    const range = getRange(timeRanges, currentTime);
    return range !== null ? currentTime - range.start : 0;
  }
  function getLeftSizeOfRange(timeRanges, currentTime) {
    const range = getRange(timeRanges, currentTime);
    return range !== null ? range.end - currentTime : Infinity;
  }
  function insertInto(ranges, rangeToAddArg) {
    if (rangeToAddArg.start === rangeToAddArg.end) {
      return ranges;
    }
    let rangeToAdd = rangeToAddArg;
    let index = 0;
    for (; index < ranges.length; index++) {
      const range = ranges[index];
      const overlapping = areRangesOverlapping(rangeToAdd, range);
      const contiguous = areRangesNearlyContiguous(rangeToAdd, range);
      if (overlapping || contiguous) {
        rangeToAdd = createRangeUnion(rangeToAdd, range);
        ranges.splice(index--, 1);
      } else {
        if (index === 0) {
          if (isBefore(rangeToAdd, ranges[0])) {
            break;
          }
        } else {
          if (isBefore(ranges[index - 1], rangeToAdd) && isBefore(rangeToAdd, range)) {
            break;
          }
        }
      }
    }
    ranges.splice(index, 0, rangeToAdd);
    return mergeContiguousRanges(removeEmptyRanges(ranges));
  }
  function findOverlappingRanges(range, ranges) {
    const resultingRanges = [];
    for (let i = 0; i < ranges.length; i++) {
      if (areRangesOverlapping(range, ranges[i])) {
        resultingRanges.push(ranges[i]);
      }
    }
    return resultingRanges;
  }
  function keepRangeIntersection(ranges1, ranges2) {
    const result = [];
    for (let i = 0; i < ranges1.length; i++) {
      const range = ranges1[i];
      const overlappingRanges = findOverlappingRanges(range, ranges2);
      if (overlappingRanges.length > 0) {
        for (let j = 0; j < overlappingRanges.length; j++) {
          const overlappingRange = overlappingRanges[j];
          result.push({
            start: Math.max(range.start, overlappingRange.start),
            end: Math.min(range.end, overlappingRange.end)
          });
        }
      }
    }
    return result;
  }
  function excludeFromRanges(baseRanges, rangesToExclude) {
    const result = [];
    for (let i = 0; i < baseRanges.length; i++) {
      const range = baseRanges[i];
      const intersections = [];
      const overlappingRanges = findOverlappingRanges(range, rangesToExclude);
      if (overlappingRanges.length > 0) {
        for (let j = 0; j < overlappingRanges.length; j++) {
          const overlappingRange = overlappingRanges[j];
          intersections.push({
            start: Math.max(range.start, overlappingRange.start),
            end: Math.min(range.end, overlappingRange.end)
          });
        }
      }
      if (intersections.length === 0) {
        result.push(range);
      } else {
        let lastStart = range.start;
        for (let j = 0; j < intersections.length; j++) {
          if (intersections[j].start > lastStart) {
            result.push({
              start: lastStart,
              end: intersections[j].start
            });
          }
          lastStart = intersections[j].end;
        }
        if (lastStart < range.end) {
          result.push({
            start: lastStart,
            end: range.end
          });
        }
      }
    }
    return result;
  }
  var EPSILON;
  var init_ranges = __esm({
    "src/utils/ranges.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      EPSILON = 1 / 60;
    }
  });

  // src/compat/add_class_name.ts
  function addClassName(elt, className) {
    if (hasClassList === void 0) {
      hasClassList = elt.classList !== void 0 && typeof elt.classList.add === "function";
    }
    if (hasClassList) {
      elt.classList.add(className);
    } else {
      const classNamesWithSpaces = " " + elt.className + " ";
      if (classNamesWithSpaces.indexOf(" " + className + " ") < 0) {
        elt.className += " " + className;
      }
    }
  }
  var hasClassList;
  var init_add_class_name = __esm({
    "src/compat/add_class_name.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/is_node.ts
  var isNode, is_node_default;
  var init_is_node = __esm({
    "src/compat/is_node.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      isNode = typeof window === "undefined";
      is_node_default = isNode;
    }
  });

  // src/compat/browser_detection.ts
  var isIE11, isIEOrEdge, isEdgeChromium, isFirefox, isSamsungBrowser, isTizen, _a, _b, isSafariDesktop, isSafariMobile;
  var init_browser_detection = __esm({
    "src/compat/browser_detection.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_node();
      isIE11 = !is_node_default && typeof window.MSInputMethodContext !== "undefined" && typeof document.documentMode !== "undefined";
      isIEOrEdge = is_node_default ? false : navigator.appName === "Microsoft Internet Explorer" || navigator.appName === "Netscape" && /(Trident|Edge)\//.test(navigator.userAgent);
      isEdgeChromium = !is_node_default && navigator.userAgent.toLowerCase().indexOf("edg/") !== -1;
      isFirefox = !is_node_default && navigator.userAgent.toLowerCase().indexOf("firefox") !== -1;
      isSamsungBrowser = !is_node_default && /SamsungBrowser/.test(navigator.userAgent);
      isTizen = !is_node_default && /Tizen/.test(navigator.userAgent);
      isSafariDesktop = !is_node_default && (Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") >= 0 || ((_b = (_a = window.safari) == null ? void 0 : _a.pushNotification) == null ? void 0 : _b.toString()) === "[object SafariRemoteNotification]");
      isSafariMobile = !is_node_default && typeof navigator.platform === "string" && /iPad|iPhone|iPod/.test(navigator.platform);
    }
  });

  // src/compat/add_text_track.ts
  function addTextTrack(mediaElement, hidden) {
    var _a2, _b2;
    let track;
    let trackElement;
    const kind = "subtitles";
    if (isIEOrEdge) {
      const tracksLength = mediaElement.textTracks.length;
      track = tracksLength > 0 ? mediaElement.textTracks[tracksLength - 1] : mediaElement.addTextTrack(kind);
      track.mode = hidden ? (_a2 = track.HIDDEN) != null ? _a2 : "hidden" : (_b2 = track.SHOWING) != null ? _b2 : "showing";
    } else {
      trackElement = document.createElement("track");
      mediaElement.appendChild(trackElement);
      track = trackElement.track;
      trackElement.kind = kind;
      track.mode = hidden ? "hidden" : "showing";
    }
    return { track, trackElement };
  }
  var init_add_text_track = __esm({
    "src/compat/add_text_track.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_detection();
    }
  });

  // src/utils/is_null_or_undefined.ts
  function isNullOrUndefined(x) {
    return x === null || x === void 0;
  }
  var init_is_null_or_undefined = __esm({
    "src/utils/is_null_or_undefined.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/browser_compatibility_types.ts
  var win, MediaSource_, READY_STATES;
  var init_browser_compatibility_types = __esm({
    "src/compat/browser_compatibility_types.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_null_or_undefined();
      init_is_node();
      win = is_node_default ? void 0 : window;
      MediaSource_ = win === void 0 ? void 0 : !isNullOrUndefined(win.MediaSource) ? win.MediaSource : !isNullOrUndefined(win.MozMediaSource) ? win.MozMediaSource : !isNullOrUndefined(win.WebKitMediaSource) ? win.WebKitMediaSource : win.MSMediaSource;
      READY_STATES = {
        HAVE_NOTHING: 0,
        HAVE_METADATA: 1,
        HAVE_CURRENT_DATA: 2,
        HAVE_FUTURE_DATA: 3,
        HAVE_ENOUGH_DATA: 4
      };
    }
  });

  // src/compat/can_patch_isobmff.ts
  function canPatchISOBMFFSegment() {
    return !isIEOrEdge;
  }
  var init_can_patch_isobmff = __esm({
    "src/compat/can_patch_isobmff.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_detection();
    }
  });

  // src/compat/change_source_buffer_type.ts
  function tryToChangeSourceBufferType(sourceBuffer, codec) {
    if (typeof sourceBuffer.changeType === "function") {
      try {
        sourceBuffer.changeType(codec);
      } catch (e) {
        log_default.warn("Could not call 'changeType' on the given SourceBuffer:", e);
        return false;
      }
      return true;
    }
    return false;
  }
  var init_change_source_buffer_type = __esm({
    "src/compat/change_source_buffer_type.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
    }
  });

  // src/compat/clear_element_src.ts
  function clearElementSrc(element) {
    const { textTracks } = element;
    if (!isNullOrUndefined(textTracks)) {
      for (let i = 0; i < textTracks.length; i++) {
        textTracks[i].mode = "disabled";
      }
      if (element.hasChildNodes()) {
        const { childNodes } = element;
        for (let j = childNodes.length - 1; j >= 0; j--) {
          if (childNodes[j].nodeName === "track") {
            try {
              element.removeChild(childNodes[j]);
            } catch (err) {
              log_default.warn("Compat: Could not remove text track child from element.");
            }
          }
        }
      }
    }
    element.src = "";
    element.removeAttribute("src");
  }
  var init_clear_element_src = __esm({
    "src/compat/clear_element_src.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_is_null_or_undefined();
    }
  });

  // src/utils/cancellable_sleep.ts
  function cancellableSleep(delay2, cancellationSignal) {
    return new Promise((res, rej) => {
      const timeout2 = setTimeout(() => {
        unregisterCancelSignal();
        res();
      }, delay2);
      const unregisterCancelSignal = cancellationSignal.register(function onCancel(cancellationError) {
        clearTimeout(timeout2);
        rej(cancellationError);
      });
    });
  }
  var init_cancellable_sleep = __esm({
    "src/utils/cancellable_sleep.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/errors/assertion_error.ts
  var AssertionError;
  var init_assertion_error = __esm({
    "src/errors/assertion_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      AssertionError = class extends Error {
        constructor(message) {
          super();
          Object.setPrototypeOf(this, AssertionError.prototype);
          this.name = "AssertionError";
          this.message = message;
        }
      };
    }
  });

  // src/errors/custom_loader_error.ts
  var CustomLoaderError;
  var init_custom_loader_error = __esm({
    "src/errors/custom_loader_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      CustomLoaderError = class extends Error {
        constructor(message, canRetry, isOfflineError, xhr) {
          super();
          Object.setPrototypeOf(this, CustomLoaderError.prototype);
          this.name = "CustomLoaderError";
          this.message = message;
          this.canRetry = canRetry;
          this.isOfflineError = isOfflineError;
          this.xhr = xhr;
        }
      };
    }
  });

  // src/errors/error_codes.ts
  var ErrorTypes, NetworkErrorTypes, ErrorCodes;
  var init_error_codes = __esm({
    "src/errors/error_codes.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      ErrorTypes = {
        NETWORK_ERROR: "NETWORK_ERROR",
        MEDIA_ERROR: "MEDIA_ERROR",
        ENCRYPTED_MEDIA_ERROR: "ENCRYPTED_MEDIA_ERROR",
        OTHER_ERROR: "OTHER_ERROR"
      };
      NetworkErrorTypes = {
        TIMEOUT: "TIMEOUT",
        ERROR_EVENT: "ERROR_EVENT",
        ERROR_HTTP_CODE: "ERROR_HTTP_CODE",
        PARSE_ERROR: "PARSE_ERROR"
      };
      ErrorCodes = {
        PIPELINE_LOAD_ERROR: "PIPELINE_LOAD_ERROR",
        PIPELINE_PARSE_ERROR: "PIPELINE_PARSE_ERROR",
        INTEGRITY_ERROR: "INTEGRITY_ERROR",
        MANIFEST_PARSE_ERROR: "MANIFEST_PARSE_ERROR",
        MANIFEST_INCOMPATIBLE_CODECS_ERROR: "MANIFEST_INCOMPATIBLE_CODECS_ERROR",
        MANIFEST_UPDATE_ERROR: "MANIFEST_UPDATE_ERROR",
        MANIFEST_UNSUPPORTED_ADAPTATION_TYPE: "MANIFEST_UNSUPPORTED_ADAPTATION_TYPE",
        MEDIA_STARTING_TIME_NOT_FOUND: "MEDIA_STARTING_TIME_NOT_FOUND",
        MEDIA_TIME_BEFORE_MANIFEST: "MEDIA_TIME_BEFORE_MANIFEST",
        MEDIA_TIME_AFTER_MANIFEST: "MEDIA_TIME_AFTER_MANIFEST",
        MEDIA_TIME_NOT_FOUND: "MEDIA_TIME_NOT_FOUND",
        NO_PLAYABLE_REPRESENTATION: "NO_PLAYABLE_REPRESENTATION",
        MEDIA_IS_ENCRYPTED_ERROR: "MEDIA_IS_ENCRYPTED_ERROR",
        CREATE_MEDIA_KEYS_ERROR: "CREATE_MEDIA_KEYS_ERROR",
        KEY_ERROR: "KEY_ERROR",
        KEY_STATUS_CHANGE_ERROR: "KEY_STATUS_CHANGE_ERROR",
        KEY_UPDATE_ERROR: "KEY_UPDATE_ERROR",
        KEY_LOAD_ERROR: "KEY_LOAD_ERROR",
        KEY_LOAD_TIMEOUT: "KEY_LOAD_TIMEOUT",
        KEY_GENERATE_REQUEST_ERROR: "KEY_GENERATE_REQUEST_ERROR",
        INCOMPATIBLE_KEYSYSTEMS: "INCOMPATIBLE_KEYSYSTEMS",
        INVALID_ENCRYPTED_EVENT: "INVALID_ENCRYPTED_EVENT",
        INVALID_KEY_SYSTEM: "INVALID_KEY_SYSTEM",
        LICENSE_SERVER_CERTIFICATE_ERROR: "LICENSE_SERVER_CERTIFICATE_ERROR",
        MULTIPLE_SESSIONS_SAME_INIT_DATA: "MULTIPLE_SESSIONS_SAME_INIT_DATA",
        BUFFER_APPEND_ERROR: "BUFFER_APPEND_ERROR",
        BUFFER_FULL_ERROR: "BUFFER_FULL_ERROR",
        BUFFER_TYPE_UNKNOWN: "BUFFER_TYPE_UNKNOWN",
        MEDIA_ERR_BLOCKED_AUTOPLAY: "MEDIA_ERR_BLOCKED_AUTOPLAY",
        MEDIA_ERR_PLAY_NOT_ALLOWED: "MEDIA_ERR_PLAY_NOT_ALLOWED",
        MEDIA_ERR_NOT_LOADED_METADATA: "MEDIA_ERR_NOT_LOADED_METADATA",
        MEDIA_ERR_ABORTED: "MEDIA_ERR_ABORTED",
        MEDIA_ERR_NETWORK: "MEDIA_ERR_NETWORK",
        MEDIA_ERR_DECODE: "MEDIA_ERR_DECODE",
        MEDIA_ERR_SRC_NOT_SUPPORTED: "MEDIA_ERR_SRC_NOT_SUPPORTED",
        MEDIA_ERR_UNKNOWN: "MEDIA_ERR_UNKNOWN",
        MEDIA_SOURCE_NOT_SUPPORTED: "MEDIA_SOURCE_NOT_SUPPORTED",
        MEDIA_KEYS_NOT_SUPPORTED: "MEDIA_KEYS_NOT_SUPPORTED",
        DISCONTINUITY_ENCOUNTERED: "DISCONTINUITY_ENCOUNTERED",
        NONE: "NONE"
      };
    }
  });

  // src/errors/error_message.ts
  function errorMessage(name, code, reason) {
    return `${name} (${code}) ${reason}`;
  }
  var init_error_message = __esm({
    "src/errors/error_message.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/errors/encrypted_media_error.ts
  var EncryptedMediaError;
  var init_encrypted_media_error = __esm({
    "src/errors/encrypted_media_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_error_codes();
      init_error_message();
      EncryptedMediaError = class extends Error {
        constructor(code, reason) {
          super();
          Object.setPrototypeOf(this, EncryptedMediaError.prototype);
          this.name = "EncryptedMediaError";
          this.type = ErrorTypes.ENCRYPTED_MEDIA_ERROR;
          this.code = code;
          this.message = errorMessage(this.name, this.code, reason);
          this.fatal = false;
        }
      };
    }
  });

  // src/errors/media_error.ts
  var MediaError;
  var init_media_error = __esm({
    "src/errors/media_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_error_codes();
      init_error_message();
      MediaError = class extends Error {
        constructor(code, reason) {
          super();
          Object.setPrototypeOf(this, MediaError.prototype);
          this.name = "MediaError";
          this.type = ErrorTypes.MEDIA_ERROR;
          this.code = code;
          this.message = errorMessage(this.name, this.code, reason);
          this.fatal = false;
        }
      };
    }
  });

  // src/errors/network_error.ts
  var NetworkError;
  var init_network_error = __esm({
    "src/errors/network_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_error_codes();
      init_error_message();
      NetworkError = class extends Error {
        constructor(code, baseError) {
          super();
          Object.setPrototypeOf(this, NetworkError.prototype);
          this.name = "NetworkError";
          this.type = ErrorTypes.NETWORK_ERROR;
          this.xhr = baseError.xhr === void 0 ? null : baseError.xhr;
          this.url = baseError.url;
          this.status = baseError.status;
          this.errorType = baseError.type;
          this.code = code;
          this.message = errorMessage(this.name, this.code, baseError.message);
          this.fatal = false;
        }
        isHttpError(httpErrorCode) {
          return this.errorType === NetworkErrorTypes.ERROR_HTTP_CODE && this.status === httpErrorCode;
        }
      };
    }
  });

  // src/errors/other_error.ts
  var OtherError;
  var init_other_error = __esm({
    "src/errors/other_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_error_codes();
      init_error_message();
      OtherError = class extends Error {
        constructor(code, reason) {
          super();
          Object.setPrototypeOf(this, OtherError.prototype);
          this.name = "OtherError";
          this.type = ErrorTypes.OTHER_ERROR;
          this.code = code;
          this.message = errorMessage(this.name, this.code, reason);
          this.fatal = false;
        }
      };
    }
  });

  // src/errors/is_known_error.ts
  function isKnownError(error) {
    return (error instanceof EncryptedMediaError || error instanceof MediaError || error instanceof OtherError || error instanceof NetworkError) && Object.keys(ErrorTypes).indexOf(error.type) >= 0;
  }
  var init_is_known_error = __esm({
    "src/errors/is_known_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_encrypted_media_error();
      init_error_codes();
      init_media_error();
      init_network_error();
      init_other_error();
    }
  });

  // src/errors/format_error.ts
  function formatError(error, { defaultCode, defaultReason }) {
    if (isKnownError(error)) {
      return error;
    }
    const reason = error instanceof Error ? error.toString() : defaultReason;
    return new OtherError(defaultCode, reason);
  }
  var init_format_error = __esm({
    "src/errors/format_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_known_error();
      init_other_error();
    }
  });

  // src/errors/request_error.ts
  var RequestError;
  var init_request_error = __esm({
    "src/errors/request_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      RequestError = class extends Error {
        constructor(url, status, type, xhr) {
          super();
          Object.setPrototypeOf(this, RequestError.prototype);
          this.name = "RequestError";
          this.url = url;
          if (xhr !== void 0) {
            this.xhr = xhr;
          }
          this.status = status;
          this.type = type;
          this.message = type;
        }
      };
    }
  });

  // src/errors/index.ts
  var init_errors = __esm({
    "src/errors/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_assertion_error();
      init_custom_loader_error();
      init_encrypted_media_error();
      init_error_codes();
      init_format_error();
      init_is_known_error();
      init_media_error();
      init_network_error();
      init_other_error();
      init_request_error();
    }
  });

  // src/utils/assert.ts
  function assert(assertion, message) {
    if (define_ENVIRONMENT_default.DEV === define_ENVIRONMENT_default.CURRENT_ENV && !assertion) {
      throw new AssertionError(message === void 0 ? "invalid assertion" : message);
    }
  }
  function assertInterface(o, iface, name = "object") {
    assert(!isNullOrUndefined(o), `${name} should be an object`);
    for (const k in iface) {
      if (iface.hasOwnProperty(k)) {
        assert(typeof o[k] === iface[k], `${name} should have property ${k} as a ${iface[k]}`);
      }
    }
  }
  var init_assert = __esm({
    "src/utils/assert.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_is_null_or_undefined();
    }
  });

  // src/utils/task_canceller.ts
  function createCancellationFunctions() {
    let listener = noop_default;
    return [
      function trigger(error) {
        listener(error);
      },
      function register(newListener) {
        listener = newListener;
      }
    ];
  }
  var TaskCanceller, CancellationSignal, CancellationError;
  var init_task_canceller = __esm({
    "src/utils/task_canceller.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_assert();
      init_noop2();
      TaskCanceller = class {
        constructor(options) {
          const [trigger, register] = createCancellationFunctions();
          this.isUsed = false;
          this._trigger = trigger;
          this.signal = new CancellationSignal(register);
          if ((options == null ? void 0 : options.cancelOn) !== void 0) {
            const unregisterParent = options.cancelOn.register(() => {
              this.cancel();
            });
            this.signal.register(unregisterParent);
          }
        }
        cancel(srcError) {
          if (this.isUsed) {
            return;
          }
          this.isUsed = true;
          const cancellationError = srcError != null ? srcError : new CancellationError();
          this._trigger(cancellationError);
        }
        static isCancellationError(error) {
          return error instanceof CancellationError;
        }
      };
      CancellationSignal = class {
        constructor(registerToSource) {
          this.isCancelled = false;
          this.cancellationError = null;
          this._listeners = [];
          registerToSource((cancellationError) => {
            this.cancellationError = cancellationError;
            this.isCancelled = true;
            while (this._listeners.length > 0) {
              const listener = this._listeners.splice(this._listeners.length - 1, 1)[0];
              listener(cancellationError);
            }
          });
        }
        register(fn) {
          if (this.isCancelled) {
            assert(this.cancellationError !== null);
            fn(this.cancellationError);
          }
          this._listeners.push(fn);
          return () => this.deregister(fn);
        }
        deregister(fn) {
          if (this.isCancelled) {
            return;
          }
          for (let i = 0; i < this._listeners.length; i++) {
            if (this._listeners[i] === fn) {
              this._listeners.splice(i, 1);
              return;
            }
          }
        }
      };
      CancellationError = class extends Error {
        constructor() {
          super();
          Object.setPrototypeOf(this, CancellationError.prototype);
          this.name = "CancellationError";
          this.message = "This task was cancelled.";
        }
      };
    }
  });

  // src/compat/eme/close_session.ts
  function closeSession(session) {
    const timeoutCanceller = new TaskCanceller();
    return Promise.race([
      session.close().then(() => {
        timeoutCanceller.cancel();
      }),
      session.closed.then(() => {
        timeoutCanceller.cancel();
      }),
      waitTimeoutAndCheck()
    ]);
    async function waitTimeoutAndCheck() {
      try {
        await cancellableSleep(1e3, timeoutCanceller.signal);
        await tryUpdatingSession();
      } catch (err) {
        if (err instanceof CancellationError) {
          return;
        }
        const message = err instanceof Error ? err.message : "Unknown error made it impossible to close the session";
        log_default.error(`DRM: ${message}`);
      }
    }
    async function tryUpdatingSession() {
      try {
        await session.update(new Uint8Array(1));
      } catch (err) {
        if (timeoutCanceller.isUsed) {
          return;
        }
        if (err instanceof Error && err.message === "The session is already closed.") {
          return;
        }
        await cancellableSleep(1e3, timeoutCanceller.signal);
      }
      if (timeoutCanceller.isUsed) {
        return;
      }
      throw new Error("Compat: Couldn't know if session is closed");
    }
  }
  var init_close_session = __esm({
    "src/compat/eme/close_session.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_cancellable_sleep();
      init_task_canceller();
    }
  });

  // src/compat/eme/custom_key_system_access.ts
  var CustomMediaKeySystemAccess;
  var init_custom_key_system_access = __esm({
    "src/compat/eme/custom_key_system_access.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      CustomMediaKeySystemAccess = class {
        constructor(_keyType, _mediaKeys, _configuration) {
          this._keyType = _keyType;
          this._mediaKeys = _mediaKeys;
          this._configuration = _configuration;
        }
        get keySystem() {
          return this._keyType;
        }
        createMediaKeys() {
          return new Promise((res) => res(this._mediaKeys));
        }
        getConfiguration() {
          return this._configuration;
        }
      };
    }
  });

  // src/compat/eme/custom_media_keys/webkit_media_keys_constructor.ts
  var WebKitMediaKeysConstructor;
  var init_webkit_media_keys_constructor = __esm({
    "src/compat/eme/custom_media_keys/webkit_media_keys_constructor.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_node();
      if (!is_node_default) {
        const { WebKitMediaKeys } = window;
        if (WebKitMediaKeys !== void 0 && typeof WebKitMediaKeys.isTypeSupported === "function" && typeof WebKitMediaKeys.prototype.createSession === "function" && typeof HTMLMediaElement.prototype.webkitSetMediaKeys === "function") {
          WebKitMediaKeysConstructor = WebKitMediaKeys;
        }
      }
    }
  });

  // src/compat/should_favour_custom_safari_EME.ts
  function shouldFavourCustomSafariEME() {
    return (isSafariDesktop || isSafariMobile) && WebKitMediaKeysConstructor !== void 0;
  }
  var init_should_favour_custom_safari_EME = __esm({
    "src/compat/should_favour_custom_safari_EME.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_detection();
      init_webkit_media_keys_constructor();
    }
  });

  // src/utils/event_emitter.ts
  function fromEvent2(target, eventName) {
    return new Observable((obs) => {
      function handler(event) {
        obs.next(event);
      }
      target.addEventListener(eventName, handler);
      return () => {
        target.removeEventListener(eventName, handler);
      };
    });
  }
  var EventEmitter;
  var init_event_emitter = __esm({
    "src/utils/event_emitter.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_log();
      init_is_null_or_undefined();
      EventEmitter = class {
        constructor() {
          this._listeners = {};
        }
        addEventListener(evt, fn) {
          const listeners = this._listeners[evt];
          if (!Array.isArray(listeners)) {
            this._listeners[evt] = [fn];
          } else {
            listeners.push(fn);
          }
        }
        removeEventListener(evt, fn) {
          if (isNullOrUndefined(evt)) {
            this._listeners = {};
            return;
          }
          const listeners = this._listeners[evt];
          if (!Array.isArray(listeners)) {
            return;
          }
          if (isNullOrUndefined(fn)) {
            delete this._listeners[evt];
            return;
          }
          const index = listeners.indexOf(fn);
          if (index !== -1) {
            listeners.splice(index, 1);
          }
          if (listeners.length === 0) {
            delete this._listeners[evt];
          }
        }
        trigger(evt, arg) {
          const listeners = this._listeners[evt];
          if (!Array.isArray(listeners)) {
            return;
          }
          listeners.slice().forEach((listener) => {
            try {
              listener(arg);
            } catch (e) {
              log_default.error(e, e instanceof Error ? e.stack : null);
            }
          });
        }
      };
    }
  });

  // src/utils/is_non_empty_string.ts
  function isNonEmptyString(x) {
    return typeof x === "string" && x.length > 0;
  }
  var init_is_non_empty_string = __esm({
    "src/utils/is_non_empty_string.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/event_listeners.ts
  var event_listeners_exports = {};
  __export(event_listeners_exports, {
    isPageActive: () => isPageActive,
    isVideoVisible: () => isVideoVisible,
    onEncrypted$: () => onEncrypted$,
    onEnded$: () => onEnded$,
    onFullscreenChange$: () => onFullscreenChange$,
    onKeyAdded$: () => onKeyAdded$,
    onKeyError$: () => onKeyError$,
    onKeyMessage$: () => onKeyMessage$,
    onKeyStatusesChange$: () => onKeyStatusesChange$,
    onLoadedMetadata$: () => onLoadedMetadata$,
    onPictureInPictureEvent$: () => onPictureInPictureEvent$,
    onPlayPause$: () => onPlayPause$,
    onRemoveSourceBuffers$: () => onRemoveSourceBuffers$,
    onSeeked$: () => onSeeked$,
    onSeeking$: () => onSeeking$,
    onSourceClose$: () => onSourceClose$,
    onSourceEnded$: () => onSourceEnded$,
    onSourceOpen$: () => onSourceOpen$,
    onTextTrackChanges$: () => onTextTrackChanges$,
    onTimeUpdate$: () => onTimeUpdate$,
    onUpdate$: () => onUpdate$,
    videoWidth$: () => videoWidth$
  });
  function isEventSupported(element, eventNameSuffix) {
    const clone = document.createElement(element.tagName);
    const eventName = "on" + eventNameSuffix;
    if (eventName in clone) {
      return true;
    } else {
      clone.setAttribute(eventName, "return;");
      return typeof clone[eventName] === "function";
    }
  }
  function findSupportedEvent(element, eventNames) {
    return eventNames.filter((name) => isEventSupported(element, name))[0];
  }
  function eventPrefixed(eventNames, prefixes) {
    return eventNames.reduce((parent, name) => parent.concat((prefixes == null ? BROWSER_PREFIXES : prefixes).map((p) => p + name)), []);
  }
  function compatibleListener(eventNames, prefixes) {
    let mem;
    const prefixedEvents = eventPrefixed(eventNames, prefixes);
    return (element) => {
      if (element instanceof HTMLElement) {
        if (typeof mem === "undefined") {
          mem = findSupportedEvent(element, prefixedEvents);
        }
        if (isNonEmptyString(mem)) {
          return fromEvent(element, mem);
        } else {
          if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
            log_default.warn(`compat: element ${element.tagName} does not support any of these events: ` + prefixedEvents.join(", "));
          }
          return NEVER;
        }
      }
      return merge(...prefixedEvents.map((eventName) => fromEvent(element, eventName)));
    };
  }
  function visibilityChange() {
    let prefix;
    const doc = document;
    if (doc.hidden != null) {
      prefix = "";
    } else if (doc.mozHidden != null) {
      prefix = "moz";
    } else if (doc.msHidden != null) {
      prefix = "ms";
    } else if (doc.webkitHidden != null) {
      prefix = "webkit";
    }
    const hidden = isNonEmptyString(prefix) ? prefix + "Hidden" : "hidden";
    const visibilityChangeEvent = isNonEmptyString(prefix) ? prefix + "visibilitychange" : "visibilitychange";
    return defer(() => {
      const isHidden = document[hidden];
      return fromEvent(document, visibilityChangeEvent).pipe(map(() => !document[hidden]), startWith(!isHidden), distinctUntilChanged());
    });
  }
  function isPageActive() {
    const { INACTIVITY_DELAY } = config_default.getCurrent();
    return visibilityChange().pipe(switchMap((x) => {
      if (!x) {
        return of(x).pipe(delay(INACTIVITY_DELAY));
      }
      return of(x);
    }));
  }
  function getVideoWidthFromPIPWindow(mediaElement, pipWindow) {
    const { width, height } = pipWindow;
    const videoRatio = mediaElement.clientHeight / mediaElement.clientWidth;
    const calcWidth = height / videoRatio;
    return Math.min(width, calcWidth);
  }
  function onPictureInPictureEvent$(elt) {
    return defer(() => {
      const mediaElement = elt;
      if (mediaElement.webkitSupportsPresentationMode === true && typeof mediaElement.webkitSetPresentationMode === "function") {
        const isWebKitPIPEnabled = mediaElement.webkitPresentationMode === "picture-in-picture";
        return fromEvent(mediaElement, "webkitpresentationmodechanged").pipe(map(() => ({
          isEnabled: mediaElement.webkitPresentationMode === "picture-in-picture",
          pipWindow: null
        })), startWith({ isEnabled: isWebKitPIPEnabled, pipWindow: null }));
      }
      const isPIPEnabled = document.pictureInPictureElement === mediaElement;
      const initialState = { isEnabled: isPIPEnabled, pipWindow: null };
      return merge(fromEvent(mediaElement, "enterpictureinpicture").pipe(map((evt) => {
        var _a2;
        return {
          isEnabled: true,
          pipWindow: (_a2 = evt.pictureInPictureWindow) != null ? _a2 : null
        };
      })), fromEvent(mediaElement, "leavepictureinpicture").pipe(map(() => ({ isEnabled: false, pipWindow: null })))).pipe(startWith(initialState));
    });
  }
  function isVideoVisible(pip$) {
    const { INACTIVITY_DELAY } = config_default.getCurrent();
    return combineLatest([visibilityChange(), pip$]).pipe(switchMap(([isVisible, pip]) => {
      if (pip.isEnabled || isVisible) {
        return of(true);
      }
      return of(false).pipe(delay(INACTIVITY_DELAY));
    }), distinctUntilChanged());
  }
  function videoWidth$(mediaElement, pip$) {
    return combineLatest([
      pip$,
      interval(2e4).pipe(startWith(null)),
      fromEvent(window, "resize").pipe(throttleTime(500), startWith(null))
    ]).pipe(switchMap(([pip]) => {
      if (!pip.isEnabled) {
        return of(mediaElement.clientWidth * pixelRatio);
      } else if (pip.pipWindow != null) {
        const { pipWindow } = pip;
        const firstWidth = getVideoWidthFromPIPWindow(mediaElement, pipWindow);
        return fromEvent(pipWindow, "resize").pipe(startWith(firstWidth * pixelRatio), map(() => getVideoWidthFromPIPWindow(mediaElement, pipWindow) * pixelRatio));
      } else {
        return of(Infinity);
      }
    }), distinctUntilChanged());
  }
  var BROWSER_PREFIXES, pixelRatio, onLoadedMetadata$, onSeeking$, onSeeked$, onEnded$, onTimeUpdate$, onFullscreenChange$, onPlayPause$, onTextTrackChanges$, onSourceOpen$, onSourceClose$, onSourceEnded$, onUpdate$, onRemoveSourceBuffers$, onEncrypted$, onKeyMessage$, onKeyAdded$, onKeyError$, onKeyStatusesChange$;
  var init_event_listeners = __esm({
    "src/compat/event_listeners.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_config2();
      init_log();
      init_is_non_empty_string();
      init_is_node();
      init_should_favour_custom_safari_EME();
      BROWSER_PREFIXES = ["", "webkit", "moz", "ms"];
      pixelRatio = is_node_default || window.devicePixelRatio == null || window.devicePixelRatio === 0 ? 1 : window.devicePixelRatio;
      onLoadedMetadata$ = compatibleListener(["loadedmetadata"]);
      onSeeking$ = compatibleListener(["seeking"]);
      onSeeked$ = compatibleListener(["seeked"]);
      onEnded$ = compatibleListener(["ended"]);
      onTimeUpdate$ = compatibleListener(["timeupdate"]);
      onFullscreenChange$ = compatibleListener(["fullscreenchange", "FullscreenChange"], BROWSER_PREFIXES.concat("MS"));
      onPlayPause$ = (mediaElement) => merge(compatibleListener(["play"])(mediaElement), compatibleListener(["pause"])(mediaElement));
      onTextTrackChanges$ = (textTrackList) => merge(compatibleListener(["addtrack"])(textTrackList), compatibleListener(["removetrack"])(textTrackList));
      onSourceOpen$ = compatibleListener(["sourceopen", "webkitsourceopen"]);
      onSourceClose$ = compatibleListener(["sourceclose", "webkitsourceclose"]);
      onSourceEnded$ = compatibleListener(["sourceended", "webkitsourceended"]);
      onUpdate$ = compatibleListener(["update"]);
      onRemoveSourceBuffers$ = compatibleListener(["onremovesourcebuffer"]);
      onEncrypted$ = compatibleListener(shouldFavourCustomSafariEME() ? ["needkey"] : ["encrypted", "needkey"]);
      onKeyMessage$ = compatibleListener(["keymessage", "message"]);
      onKeyAdded$ = compatibleListener(["keyadded", "ready"]);
      onKeyError$ = compatibleListener(["keyerror", "error"]);
      onKeyStatusesChange$ = compatibleListener(["keystatuseschange"]);
    }
  });

  // src/compat/eme/custom_media_keys/ms_media_keys_constructor.ts
  var MSMediaKeysConstructor;
  var init_ms_media_keys_constructor = __esm({
    "src/compat/eme/custom_media_keys/ms_media_keys_constructor.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_node();
      if (!is_node_default) {
        const { MSMediaKeys: MSMediaKeys2 } = window;
        if (MSMediaKeys2 !== void 0 && MSMediaKeys2.prototype !== void 0 && typeof MSMediaKeys2.isTypeSupported === "function" && typeof MSMediaKeys2.prototype.createSession === "function") {
          MSMediaKeysConstructor = MSMediaKeys2;
        }
      }
    }
  });

  // src/compat/eme/custom_media_keys/ie11_media_keys.ts
  function getIE11MediaKeysCallbacks() {
    const isTypeSupported = (keySystem, type) => {
      if (MSMediaKeysConstructor === void 0) {
        throw new Error("No MSMediaKeys API.");
      }
      if (type !== void 0) {
        return MSMediaKeysConstructor.isTypeSupported(keySystem, type);
      }
      return MSMediaKeysConstructor.isTypeSupported(keySystem);
    };
    const createCustomMediaKeys = (keyType) => new IE11CustomMediaKeys(keyType);
    const setMediaKeys2 = (elt, mediaKeys) => {
      if (mediaKeys === null) {
        return;
      }
      if (!(mediaKeys instanceof IE11CustomMediaKeys)) {
        throw new Error("Custom setMediaKeys is supposed to be called with IE11 custom MediaKeys.");
      }
      return mediaKeys._setVideo(elt);
    };
    return {
      isTypeSupported,
      createCustomMediaKeys,
      setMediaKeys: setMediaKeys2
    };
  }
  var IE11MediaKeySession, IE11CustomMediaKeys;
  var init_ie11_media_keys = __esm({
    "src/compat/eme/custom_media_keys/ie11_media_keys.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_event_emitter();
      init_event_listeners();
      init_ms_media_keys_constructor();
      IE11MediaKeySession = class extends EventEmitter {
        constructor(mk) {
          super();
          this.expiration = NaN;
          this.keyStatuses = /* @__PURE__ */ new Map();
          this._mk = mk;
          this._closeSession$ = new Subject();
          this.closed = new Promise((resolve) => {
            this._closeSession$.subscribe(resolve);
          });
          this.update = (license) => {
            return new Promise((resolve, reject) => {
              if (this._ss === void 0) {
                return reject("MediaKeySession not set.");
              }
              try {
                resolve(this._ss.update(license, ""));
              } catch (err) {
                reject(err);
              }
            });
          };
        }
        generateRequest(_initDataType, initData) {
          return new Promise((resolve) => {
            const initDataU8 = initData instanceof Uint8Array ? initData : initData instanceof ArrayBuffer ? new Uint8Array(initData) : new Uint8Array(initData.buffer);
            this._ss = this._mk.createSession("video/mp4", initDataU8);
            merge(onKeyMessage$(this._ss), onKeyAdded$(this._ss), onKeyError$(this._ss)).pipe(takeUntil(this._closeSession$)).subscribe((evt) => this.trigger(evt.type, evt));
            resolve();
          });
        }
        close() {
          return new Promise((resolve) => {
            if (this._ss != null) {
              this._ss.close();
              this._ss = void 0;
            }
            this._closeSession$.next();
            this._closeSession$.complete();
            resolve();
          });
        }
        load() {
          return Promise.resolve(false);
        }
        remove() {
          return Promise.resolve();
        }
        get sessionId() {
          var _a2, _b2;
          return (_b2 = (_a2 = this._ss) == null ? void 0 : _a2.sessionId) != null ? _b2 : "";
        }
      };
      IE11CustomMediaKeys = class {
        constructor(keyType) {
          if (MSMediaKeysConstructor === void 0) {
            throw new Error("No MSMediaKeys API.");
          }
          this._mediaKeys = new MSMediaKeysConstructor(keyType);
        }
        _setVideo(videoElement) {
          this._videoElement = videoElement;
          if (this._videoElement.msSetMediaKeys !== void 0) {
            return this._videoElement.msSetMediaKeys(this._mediaKeys);
          }
        }
        createSession() {
          if (this._videoElement === void 0 || this._mediaKeys === void 0) {
            throw new Error("Video not attached to the MediaKeys");
          }
          return new IE11MediaKeySession(this._mediaKeys);
        }
        setServerCertificate() {
          throw new Error("Server certificate is not implemented in your browser");
        }
      };
    }
  });

  // src/compat/eme/custom_media_keys/moz_media_keys_constructor.ts
  function getMozMediaKeysCallbacks() {
    const isTypeSupported = (keySystem, type) => {
      if (MozMediaKeysConstructor === void 0) {
        throw new Error("No MozMediaKeys API.");
      }
      if (type !== void 0) {
        return MozMediaKeysConstructor.isTypeSupported(keySystem, type);
      }
      return MozMediaKeysConstructor.isTypeSupported(keySystem);
    };
    const createCustomMediaKeys = (keyType) => {
      if (MozMediaKeysConstructor === void 0) {
        throw new Error("No MozMediaKeys API.");
      }
      return new MozMediaKeysConstructor(keyType);
    };
    const setMediaKeys2 = (mediaElement, mediaKeys) => {
      const elt = mediaElement;
      if (elt.mozSetMediaKeys === void 0 || typeof elt.mozSetMediaKeys !== "function") {
        throw new Error("Can't set video on MozMediaKeys.");
      }
      return elt.mozSetMediaKeys(mediaKeys);
    };
    return {
      isTypeSupported,
      createCustomMediaKeys,
      setMediaKeys: setMediaKeys2
    };
  }
  var MozMediaKeysConstructor;
  var init_moz_media_keys_constructor = __esm({
    "src/compat/eme/custom_media_keys/moz_media_keys_constructor.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_node();
      if (!is_node_default) {
        const { MozMediaKeys } = window;
        if (MozMediaKeys !== void 0 && MozMediaKeys.prototype !== void 0 && typeof MozMediaKeys.isTypeSupported === "function" && typeof MozMediaKeys.prototype.createSession === "function") {
          MozMediaKeysConstructor = MozMediaKeys;
        }
      }
    }
  });

  // src/utils/base64.ts
  function getBase64Code(charCode) {
    if (charCode >= base64codes.length) {
      throw new Error("Unable to parse base64 string.");
    }
    const code = base64codes[charCode];
    if (code === 255) {
      throw new Error("Unable to parse base64 string.");
    }
    return code;
  }
  function bytesToBase64(bytes) {
    let result = "";
    let i;
    const length = bytes.length;
    for (i = 2; i < length; i += 3) {
      result += base64abc[bytes[i - 2] >> 2];
      result += base64abc[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];
      result += base64abc[(bytes[i - 1] & 15) << 2 | bytes[i] >> 6];
      result += base64abc[bytes[i] & 63];
    }
    if (i === length + 1) {
      result += base64abc[bytes[i - 2] >> 2];
      result += base64abc[(bytes[i - 2] & 3) << 4];
      result += "==";
    }
    if (i === length) {
      result += base64abc[bytes[i - 2] >> 2];
      result += base64abc[(bytes[i - 2] & 3) << 4 | bytes[i - 1] >> 4];
      result += base64abc[(bytes[i - 1] & 15) << 2];
      result += "=";
    }
    return result;
  }
  function base64ToBytes(str) {
    const paddingNeeded = str.length % 4;
    let paddedStr = str;
    if (paddingNeeded !== 0) {
      log_default.warn("base64ToBytes: base64 given miss padding");
      paddedStr += paddingNeeded === 3 ? "=" : paddingNeeded === 2 ? "==" : "===";
    }
    const index = paddedStr.indexOf("=");
    if (index !== -1 && index < paddedStr.length - 2) {
      throw new Error("Unable to parse base64 string.");
    }
    const missingOctets = paddedStr.endsWith("==") ? 2 : paddedStr.endsWith("=") ? 1 : 0;
    const n = paddedStr.length;
    const result = new Uint8Array(n / 4 * 3);
    let buffer;
    for (let i = 0, j = 0; i < n; i += 4, j += 3) {
      buffer = getBase64Code(paddedStr.charCodeAt(i)) << 18 | getBase64Code(paddedStr.charCodeAt(i + 1)) << 12 | getBase64Code(paddedStr.charCodeAt(i + 2)) << 6 | getBase64Code(paddedStr.charCodeAt(i + 3));
      result[j] = buffer >> 16;
      result[j + 1] = buffer >> 8 & 255;
      result[j + 2] = buffer & 255;
    }
    return result.subarray(0, result.length - missingOctets);
  }
  var base64abc, base64codes;
  var init_base64 = __esm({
    "src/utils/base64.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      base64abc = [
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "+",
        "/"
      ];
      base64codes = [
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        62,
        255,
        255,
        255,
        63,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        255,
        255,
        255,
        0,
        255,
        255,
        255,
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        255,
        255,
        255,
        255,
        255,
        255,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51
      ];
    }
  });

  // src/utils/string_parsing.ts
  function strToUtf16LE(str) {
    const buffer = new ArrayBuffer(str.length * 2);
    const res = new Uint8Array(buffer);
    for (let i = 0; i < res.length; i += 2) {
      const value = str.charCodeAt(i / 2);
      res[i] = value & 255;
      res[i + 1] = value >> 8 & 255;
    }
    return res;
  }
  function utf16LEToStr(bytes) {
    if (hasTextDecoder) {
      try {
        const decoder = new TextDecoder("utf-16le");
        return decoder.decode(bytes);
      } catch (e) {
        log_default.warn("Utils: could not use TextDecoder to parse UTF-16LE, fallbacking to another implementation", e);
      }
    }
    let str = "";
    for (let i = 0; i < bytes.length; i += 2) {
      str += String.fromCharCode((bytes[i + 1] << 8) + bytes[i]);
    }
    return str;
  }
  function strToUtf8(str) {
    if (hasTextEncoder) {
      try {
        const encoder = new TextEncoder();
        return encoder.encode(str);
      } catch (e) {
        log_default.warn("Utils: could not use TextEncoder to encode string into UTF-8, fallbacking to another implementation", e);
      }
    }
    let utf8Str;
    const pcStr = encodeURIComponent(str);
    if (typeof unescape === "function") {
      utf8Str = unescape(pcStr);
    } else {
      const isHexChar = /[0-9a-fA-F]/;
      const pcStrLen = pcStr.length;
      utf8Str = "";
      for (let i = 0; i < pcStr.length; i++) {
        let wasPercentEncoded = false;
        if (pcStr[i] === "%") {
          if (i <= pcStrLen - 6 && pcStr[i + 1] === "u" && isHexChar.test(pcStr[i + 2]) && isHexChar.test(pcStr[i + 3]) && isHexChar.test(pcStr[i + 4]) && isHexChar.test(pcStr[i + 5])) {
            const charCode = parseInt(pcStr.substring(i + 1, i + 6), 16);
            utf8Str += String.fromCharCode(charCode);
            wasPercentEncoded = true;
            i += 5;
          } else if (i <= pcStrLen - 3 && isHexChar.test(pcStr[i + 1]) && isHexChar.test(pcStr[i + 2])) {
            const charCode = parseInt(pcStr.substring(i + 1, i + 3), 16);
            utf8Str += String.fromCharCode(charCode);
            wasPercentEncoded = true;
            i += 2;
          }
        }
        if (!wasPercentEncoded) {
          utf8Str += pcStr[i];
        }
      }
    }
    const res = new Uint8Array(utf8Str.length);
    for (let i = 0; i < utf8Str.length; i++) {
      res[i] = utf8Str.charCodeAt(i) & 255;
    }
    return res;
  }
  function stringFromCharCodes(args) {
    const max = 16e3;
    let ret = "";
    for (let i = 0; i < args.length; i += max) {
      const subArray = args.subarray(i, i + max);
      ret += String.fromCharCode.apply(null, subArray);
    }
    return ret;
  }
  function intToHex(num, size) {
    const toStr = num.toString(16);
    return toStr.length >= size ? toStr : new Array(size - toStr.length + 1).join("0") + toStr;
  }
  function utf8ToStr(data) {
    if (hasTextDecoder) {
      try {
        const decoder = new TextDecoder();
        return decoder.decode(data);
      } catch (e) {
        log_default.warn("Utils: could not use TextDecoder to parse UTF-8, fallbacking to another implementation", e);
      }
    }
    let uint8 = data;
    if (uint8[0] === 239 && uint8[1] === 187 && uint8[2] === 191) {
      uint8 = uint8.subarray(3);
    }
    const utf8Str = stringFromCharCodes(uint8);
    let escaped;
    if (typeof escape === "function") {
      escaped = escape(utf8Str);
    } else {
      const nonEscapedChar = /[A-Za-z0-9*_\+-\.\/]/;
      escaped = "";
      for (let i = 0; i < utf8Str.length; i++) {
        if (nonEscapedChar.test(utf8Str[i])) {
          escaped += utf8Str[i];
        } else {
          const charCode = utf8Str.charCodeAt(i);
          escaped += charCode >= 256 ? "%u" + intToHex(charCode, 4) : "%" + intToHex(charCode, 2);
        }
      }
    }
    return decodeURIComponent(escaped);
  }
  function hexToBytes(str) {
    const len = str.length;
    const arr = new Uint8Array(len / 2);
    for (let i = 0, j = 0; i < len; i += 2, j++) {
      arr[j] = parseInt(str.substring(i, i + 2), 16) & 255;
    }
    return arr;
  }
  function bytesToHex(bytes, sep = "") {
    let hex = "";
    for (let i = 0; i < bytes.byteLength; i++) {
      hex += (bytes[i] >>> 4).toString(16);
      hex += (bytes[i] & 15).toString(16);
      if (sep.length > 0 && i < bytes.byteLength - 1) {
        hex += sep;
      }
    }
    return hex;
  }
  function guidToUuid(guid) {
    assert(guid.length === 16, "GUID length should be 16");
    const p1A = guid[0];
    const p1B = guid[1];
    const p1C = guid[2];
    const p1D = guid[3];
    const p2A = guid[4];
    const p2B = guid[5];
    const p3A = guid[6];
    const p3B = guid[7];
    const uuid = new Uint8Array(16);
    uuid[0] = p1D;
    uuid[1] = p1C;
    uuid[2] = p1B;
    uuid[3] = p1A;
    uuid[4] = p2B;
    uuid[5] = p2A;
    uuid[6] = p3B;
    uuid[7] = p3A;
    uuid.set(guid.subarray(8, 16), 8);
    return uuid;
  }
  function readNullTerminatedString(buffer, offset) {
    let position = offset;
    while (position < buffer.length) {
      const value = buffer[position];
      if (value === 0) {
        break;
      }
      position += 1;
    }
    const bytes = buffer.subarray(offset, position);
    return {
      end: position + 1,
      string: utf8ToStr(bytes)
    };
  }
  var hasTextDecoder, hasTextEncoder;
  var init_string_parsing = __esm({
    "src/utils/string_parsing.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_assert();
      hasTextDecoder = typeof window === "object" && typeof window.TextDecoder === "function";
      hasTextEncoder = typeof window === "object" && typeof window.TextEncoder === "function";
    }
  });

  // src/compat/eme/custom_media_keys/old_webkit_media_keys.ts
  function isOldWebkitMediaElement(element) {
    return typeof element.webkitGenerateKeyRequest === "function";
  }
  function getOldWebKitMediaKeysCallbacks() {
    const isTypeSupported = function(keyType) {
      let videoElement = document.querySelector("video");
      if (videoElement == null) {
        videoElement = document.createElement("video");
      }
      if (videoElement != null && typeof videoElement.canPlayType === "function") {
        return !!videoElement.canPlayType("video/mp4", keyType);
      } else {
        return false;
      }
    };
    const createCustomMediaKeys = (keyType) => new OldWebKitCustomMediaKeys(keyType);
    const setMediaKeys2 = (elt, mediaKeys) => {
      if (mediaKeys === null) {
        return;
      }
      if (!(mediaKeys instanceof OldWebKitCustomMediaKeys)) {
        throw new Error("Custom setMediaKeys is supposed to be called with old webkit custom MediaKeys.");
      }
      return mediaKeys._setVideo(elt);
    };
    return {
      isTypeSupported,
      createCustomMediaKeys,
      setMediaKeys: setMediaKeys2
    };
  }
  var OldWebkitMediaKeySession, OldWebKitCustomMediaKeys;
  var init_old_webkit_media_keys = __esm({
    "src/compat/eme/custom_media_keys/old_webkit_media_keys.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_base64();
      init_event_emitter();
      init_noop2();
      init_string_parsing();
      OldWebkitMediaKeySession = class extends EventEmitter {
        constructor(mediaElement, keySystem) {
          super();
          this._vid = mediaElement;
          this._key = keySystem;
          this.sessionId = "";
          this._closeSession = noop_default;
          this.keyStatuses = /* @__PURE__ */ new Map();
          this.expiration = NaN;
          const onSessionRelatedEvent = (evt) => {
            this.trigger(evt.type, evt);
          };
          this.closed = new Promise((resolve) => {
            this._closeSession = () => {
              ["keymessage", "message", "keyadded", "ready", "keyerror", "error"].forEach((evt) => {
                mediaElement.removeEventListener(evt, onSessionRelatedEvent);
                mediaElement.removeEventListener(`webkit${evt}`, onSessionRelatedEvent);
              });
              resolve();
            };
          });
          ["keymessage", "message", "keyadded", "ready", "keyerror", "error"].forEach((evt) => {
            mediaElement.addEventListener(evt, onSessionRelatedEvent);
            mediaElement.addEventListener(`webkit${evt}`, onSessionRelatedEvent);
          });
        }
        update(license) {
          return new Promise((resolve, reject) => {
            try {
              if (this._key.indexOf("clearkey") >= 0) {
                const licenseTypedArray = license instanceof ArrayBuffer ? new Uint8Array(license) : license;
                const json = JSON.parse(utf8ToStr(licenseTypedArray));
                const key = base64ToBytes(json.keys[0].k);
                const kid = base64ToBytes(json.keys[0].kid);
                resolve(this._vid.webkitAddKey(this._key, key, kid, ""));
              } else {
                resolve(this._vid.webkitAddKey(this._key, license, null, ""));
              }
            } catch (err) {
              reject(err);
            }
          });
        }
        generateRequest(_initDataType, initData) {
          return new Promise((resolve) => {
            this._vid.webkitGenerateKeyRequest(this._key, initData);
            resolve();
          });
        }
        close() {
          return new Promise((resolve) => {
            this._closeSession();
            resolve();
          });
        }
        load() {
          return Promise.resolve(false);
        }
        remove() {
          return Promise.resolve();
        }
      };
      OldWebKitCustomMediaKeys = class {
        constructor(keySystem) {
          this._keySystem = keySystem;
        }
        _setVideo(videoElement) {
          if (!isOldWebkitMediaElement(videoElement)) {
            throw new Error("Video not attached to the MediaKeys");
          }
          this._videoElement = videoElement;
        }
        createSession() {
          if (this._videoElement == null) {
            throw new Error("Video not attached to the MediaKeys");
          }
          return new OldWebkitMediaKeySession(this._videoElement, this._keySystem);
        }
        setServerCertificate() {
          throw new Error("Server certificate is not implemented in your browser");
        }
      };
    }
  });

  // src/utils/byte_parsing.ts
  function concat2(...args) {
    const l = args.length;
    let i = -1;
    let len = 0;
    let arg;
    while (++i < l) {
      arg = args[i];
      len += typeof arg === "number" ? arg : arg.length;
    }
    const arr = new Uint8Array(len);
    let offset = 0;
    i = -1;
    while (++i < l) {
      arg = args[i];
      if (typeof arg === "number") {
        offset += arg;
      } else if (arg.length > 0) {
        arr.set(arg, offset);
        offset += arg.length;
      }
    }
    return arr;
  }
  function be2toi(bytes, offset) {
    return (bytes[offset + 0] << 8) + (bytes[offset + 1] << 0);
  }
  function be3toi(bytes, offset) {
    return bytes[offset + 0] * 65536 + bytes[offset + 1] * 256 + bytes[offset + 2];
  }
  function be4toi(bytes, offset) {
    return bytes[offset + 0] * 16777216 + bytes[offset + 1] * 65536 + bytes[offset + 2] * 256 + bytes[offset + 3];
  }
  function be8toi(bytes, offset) {
    return (bytes[offset + 0] * 16777216 + bytes[offset + 1] * 65536 + bytes[offset + 2] * 256 + bytes[offset + 3]) * 4294967296 + bytes[offset + 4] * 16777216 + bytes[offset + 5] * 65536 + bytes[offset + 6] * 256 + bytes[offset + 7];
  }
  function itobe2(num) {
    return new Uint8Array([
      num >>> 8 & 255,
      num & 255
    ]);
  }
  function itobe4(num) {
    return new Uint8Array([
      num >>> 24 & 255,
      num >>> 16 & 255,
      num >>> 8 & 255,
      num & 255
    ]);
  }
  function itobe8(num) {
    const l = num % 4294967296;
    const h = (num - l) / 4294967296;
    return new Uint8Array([
      h >>> 24 & 255,
      h >>> 16 & 255,
      h >>> 8 & 255,
      h & 255,
      l >>> 24 & 255,
      l >>> 16 & 255,
      l >>> 8 & 255,
      l & 255
    ]);
  }
  function le2toi(bytes, offset) {
    return (bytes[offset + 0] << 0) + (bytes[offset + 1] << 8);
  }
  function le4toi(bytes, offset) {
    return bytes[offset + 0] + bytes[offset + 1] * 256 + bytes[offset + 2] * 65536 + bytes[offset + 3] * 16777216;
  }
  function itole4(num) {
    return new Uint8Array([
      num & 255,
      num >>> 8 & 255,
      num >>> 16 & 255,
      num >>> 24 & 255
    ]);
  }
  function toUint8Array(input) {
    return input instanceof Uint8Array ? input : input instanceof ArrayBuffer ? new Uint8Array(input) : new Uint8Array(input.buffer);
  }
  var init_byte_parsing = __esm({
    "src/utils/byte_parsing.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/eme/get_webkit_fairplay_initdata.ts
  function getWebKitFairPlayInitData(initDataBytes, serverCertificateBytes) {
    const initData = initDataBytes instanceof Uint8Array ? initDataBytes : new Uint8Array(initDataBytes);
    const serverCertificate = serverCertificateBytes instanceof Uint8Array ? serverCertificateBytes : new Uint8Array(serverCertificateBytes);
    const length = le4toi(initData, 0);
    if (length + 4 !== initData.length) {
      throw new Error("Unsupported WebKit initData.");
    }
    const initDataUri = utf16LEToStr(initData);
    const skdIndexInInitData = initDataUri.indexOf("skd://");
    const contentIdStr = skdIndexInInitData > -1 ? initDataUri.substring(skdIndexInInitData + 6) : initDataUri;
    const id = strToUtf16LE(contentIdStr);
    let offset = 0;
    const res = new Uint8Array(initData.byteLength + 4 + id.byteLength + 4 + serverCertificate.byteLength);
    res.set(initData);
    offset += initData.length;
    res.set(itole4(id.byteLength), offset);
    offset += 4;
    res.set(id, offset);
    offset += id.byteLength;
    res.set(itole4(serverCertificate.byteLength), offset);
    offset += 4;
    res.set(serverCertificate, offset);
    return res;
  }
  var init_get_webkit_fairplay_initdata = __esm({
    "src/compat/eme/get_webkit_fairplay_initdata.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_string_parsing();
    }
  });

  // src/compat/eme/custom_media_keys/webkit_media_keys.ts
  function isFairplayKeyType(keyType) {
    return keyType === "com.apple.fps.1_0" || keyType === "com.apple.fps.2_0";
  }
  function setWebKitMediaKeys(videoElement, mediaKeys) {
    const elt = videoElement;
    if (elt.webkitSetMediaKeys === void 0) {
      throw new Error("No webKitMediaKeys API.");
    }
    return elt.webkitSetMediaKeys(mediaKeys);
  }
  function getWebKitMediaKeysCallbacks() {
    if (WebKitMediaKeysConstructor === void 0) {
      throw new Error("No WebKitMediaKeys API.");
    }
    const isTypeSupported = WebKitMediaKeysConstructor.isTypeSupported;
    const createCustomMediaKeys = (keyType) => new WebKitCustomMediaKeys(keyType);
    const setMediaKeys2 = (elt, mediaKeys) => {
      if (mediaKeys === null) {
        return setWebKitMediaKeys(elt, mediaKeys);
      }
      if (!(mediaKeys instanceof WebKitCustomMediaKeys)) {
        throw new Error("Custom setMediaKeys is supposed to be called with webkit custom MediaKeys.");
      }
      return mediaKeys._setVideo(elt);
    };
    return {
      isTypeSupported,
      createCustomMediaKeys,
      setMediaKeys: setMediaKeys2
    };
  }
  var WebkitMediaKeySession, WebKitCustomMediaKeys;
  var init_webkit_media_keys = __esm({
    "src/compat/eme/custom_media_keys/webkit_media_keys.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_event_emitter();
      init_noop2();
      init_get_webkit_fairplay_initdata();
      init_webkit_media_keys_constructor();
      WebkitMediaKeySession = class extends EventEmitter {
        constructor(mediaElement, keyType, serverCertificate) {
          super();
          this._serverCertificate = serverCertificate;
          this._videoElement = mediaElement;
          this._keyType = keyType;
          this._unbindSession = noop_default;
          this._closeSession = noop_default;
          this.closed = new Promise((resolve) => {
            this._closeSession = resolve;
          });
          this.keyStatuses = /* @__PURE__ */ new Map();
          this.expiration = NaN;
        }
        update(license) {
          return new Promise((resolve, reject) => {
            if (this._nativeSession === void 0 || this._nativeSession.update === void 0 || typeof this._nativeSession.update !== "function") {
              return reject("Unavailable WebKit key session.");
            }
            try {
              let uInt8Arraylicense;
              if (license instanceof ArrayBuffer) {
                uInt8Arraylicense = new Uint8Array(license);
              } else if (license instanceof Uint8Array) {
                uInt8Arraylicense = license;
              } else {
                uInt8Arraylicense = new Uint8Array(license.buffer);
              }
              resolve(this._nativeSession.update(uInt8Arraylicense));
            } catch (err) {
              reject(err);
            }
          });
        }
        generateRequest(_initDataType, initData) {
          return new Promise((resolve) => {
            var _a2;
            const elt = this._videoElement;
            if (((_a2 = elt.webkitKeys) == null ? void 0 : _a2.createSession) === void 0) {
              throw new Error("No WebKitMediaKeys API.");
            }
            let formattedInitData;
            if (isFairplayKeyType(this._keyType)) {
              if (this._serverCertificate === void 0) {
                throw new Error("A server certificate is needed for creating fairplay session.");
              }
              formattedInitData = getWebKitFairPlayInitData(initData, this._serverCertificate);
            } else {
              formattedInitData = initData;
            }
            const keySession = elt.webkitKeys.createSession("video/mp4", formattedInitData);
            if (keySession === void 0 || keySession === null) {
              throw new Error("Impossible to get the key sessions");
            }
            this._listenEvent(keySession);
            this._nativeSession = keySession;
            resolve();
          });
        }
        close() {
          return new Promise((resolve, reject) => {
            this._unbindSession();
            this._closeSession();
            if (this._nativeSession === void 0) {
              reject("No session to close.");
              return;
            }
            this._nativeSession.close();
            resolve();
          });
        }
        load() {
          return Promise.resolve(false);
        }
        remove() {
          return Promise.resolve();
        }
        get sessionId() {
          var _a2, _b2;
          return (_b2 = (_a2 = this._nativeSession) == null ? void 0 : _a2.sessionId) != null ? _b2 : "";
        }
        _listenEvent(session) {
          this._unbindSession();
          const onEvent = (evt) => {
            this.trigger(evt.type, evt);
          };
          ["keymessage", "message", "keyadded", "ready", "keyerror", "error"].forEach((evt) => {
            session.addEventListener(evt, onEvent);
            session.addEventListener(`webkit${evt}`, onEvent);
          });
          this._unbindSession = () => {
            ["keymessage", "message", "keyadded", "ready", "keyerror", "error"].forEach((evt) => {
              session.removeEventListener(evt, onEvent);
              session.removeEventListener(`webkit${evt}`, onEvent);
            });
          };
        }
      };
      WebKitCustomMediaKeys = class {
        constructor(keyType) {
          if (WebKitMediaKeysConstructor === void 0) {
            throw new Error("No WebKitMediaKeys API.");
          }
          this._keyType = keyType;
          this._mediaKeys = new WebKitMediaKeysConstructor(keyType);
        }
        _setVideo(videoElement) {
          this._videoElement = videoElement;
          if (this._videoElement === void 0) {
            throw new Error("Video not attached to the MediaKeys");
          }
          return setWebKitMediaKeys(this._videoElement, this._mediaKeys);
        }
        createSession() {
          if (this._videoElement === void 0 || this._mediaKeys === void 0) {
            throw new Error("Video not attached to the MediaKeys");
          }
          return new WebkitMediaKeySession(this._videoElement, this._keyType, this._serverCertificate);
        }
        setServerCertificate(serverCertificate) {
          this._serverCertificate = serverCertificate;
          return Promise.resolve();
        }
      };
    }
  });

  // src/compat/eme/custom_media_keys/index.ts
  var requestMediaKeySystemAccess, setMediaKeys;
  var init_custom_media_keys = __esm({
    "src/compat/eme/custom_media_keys/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_assert();
      init_browser_detection();
      init_is_node();
      init_should_favour_custom_safari_EME();
      init_custom_key_system_access();
      init_ie11_media_keys();
      init_moz_media_keys_constructor();
      init_old_webkit_media_keys();
      init_webkit_media_keys();
      init_webkit_media_keys_constructor();
      requestMediaKeySystemAccess = null;
      setMediaKeys = function defaultSetMediaKeys(mediaElement, mediaKeys) {
        const elt = mediaElement;
        if (typeof elt.setMediaKeys === "function") {
          return elt.setMediaKeys(mediaKeys);
        }
        if (typeof elt.webkitSetMediaKeys === "function") {
          return elt.webkitSetMediaKeys(mediaKeys);
        }
        if (typeof elt.mozSetMediaKeys === "function") {
          return elt.mozSetMediaKeys(mediaKeys);
        }
        if (typeof elt.msSetMediaKeys === "function" && mediaKeys !== null) {
          return elt.msSetMediaKeys(mediaKeys);
        }
      };
      if (is_node_default || navigator.requestMediaKeySystemAccess != null && !shouldFavourCustomSafariEME()) {
        requestMediaKeySystemAccess = (...args) => navigator.requestMediaKeySystemAccess(...args);
      } else {
        let isTypeSupported;
        let createCustomMediaKeys;
        if (isOldWebkitMediaElement(HTMLVideoElement.prototype)) {
          const callbacks = getOldWebKitMediaKeysCallbacks();
          isTypeSupported = callbacks.isTypeSupported;
          createCustomMediaKeys = callbacks.createCustomMediaKeys;
          setMediaKeys = callbacks.setMediaKeys;
        } else if (WebKitMediaKeysConstructor !== void 0) {
          const callbacks = getWebKitMediaKeysCallbacks();
          isTypeSupported = callbacks.isTypeSupported;
          createCustomMediaKeys = callbacks.createCustomMediaKeys;
          setMediaKeys = callbacks.setMediaKeys;
        } else if (isIE11 && MSMediaKeysConstructor !== void 0) {
          const callbacks = getIE11MediaKeysCallbacks();
          isTypeSupported = callbacks.isTypeSupported;
          createCustomMediaKeys = callbacks.createCustomMediaKeys;
          setMediaKeys = callbacks.setMediaKeys;
        } else if (MozMediaKeysConstructor !== void 0) {
          const callbacks = getMozMediaKeysCallbacks();
          isTypeSupported = callbacks.isTypeSupported;
          createCustomMediaKeys = callbacks.createCustomMediaKeys;
          setMediaKeys = callbacks.setMediaKeys;
        } else {
          const MK = window.MediaKeys;
          const checkForStandardMediaKeys = () => {
            if (MK === void 0) {
              throw new MediaError("MEDIA_KEYS_NOT_SUPPORTED", "No `MediaKeys` implementation found in the current browser.");
            }
            if (typeof MK.isTypeSupported === "undefined") {
              const message = "This browser seems to be unable to play encrypted contents currently. Note: Some browsers do not allow decryption in some situations, like when not using HTTPS.";
              throw new Error(message);
            }
          };
          isTypeSupported = (keyType) => {
            checkForStandardMediaKeys();
            assert(typeof MK.isTypeSupported === "function");
            return MK.isTypeSupported(keyType);
          };
          createCustomMediaKeys = (keyType) => {
            checkForStandardMediaKeys();
            return new MK(keyType);
          };
        }
        requestMediaKeySystemAccess = function(keyType, keySystemConfigurations) {
          if (!isTypeSupported(keyType)) {
            return Promise.reject(new Error("Unsupported key type"));
          }
          for (let i = 0; i < keySystemConfigurations.length; i++) {
            const keySystemConfiguration = keySystemConfigurations[i];
            const {
              videoCapabilities,
              audioCapabilities,
              initDataTypes,
              distinctiveIdentifier
            } = keySystemConfiguration;
            let supported = true;
            supported = supported && (initDataTypes == null || initDataTypes.some((idt) => idt === "cenc"));
            supported = supported && distinctiveIdentifier !== "required";
            if (supported) {
              const keySystemConfigurationResponse = {
                initDataTypes: ["cenc"],
                distinctiveIdentifier: "not-allowed",
                persistentState: "required",
                sessionTypes: ["temporary", "persistent-license"]
              };
              if (videoCapabilities !== void 0) {
                keySystemConfigurationResponse.videoCapabilities = videoCapabilities;
              }
              if (audioCapabilities !== void 0) {
                keySystemConfigurationResponse.audioCapabilities = audioCapabilities;
              }
              const customMediaKeys = createCustomMediaKeys(keyType);
              return Promise.resolve(new CustomMediaKeySystemAccess(keyType, customMediaKeys, keySystemConfigurationResponse));
            }
          }
          return Promise.reject(new Error("Unsupported configuration"));
        };
      }
    }
  });

  // src/utils/slice_uint8array.ts
  function arraySlice(arr, start, end) {
    return new Uint8Array(Array.prototype.slice.call(arr, start, end));
  }
  function uint8ArraySlice(arr, start, end) {
    return arr.slice(start, end);
  }
  var slice_uint8array_default;
  var init_slice_uint8array = __esm({
    "src/utils/slice_uint8array.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      slice_uint8array_default = typeof Uint8Array.prototype.slice === "function" ? uint8ArraySlice : arraySlice;
    }
  });

  // src/parsers/containers/isobmff/get_box.ts
  function getBoxContent(buf, boxName2) {
    const offsets = getBoxOffsets(buf, boxName2);
    return offsets !== null ? buf.subarray(offsets[1], offsets[2]) : null;
  }
  function getBoxesContent(buf, boxName2) {
    const ret = [];
    let currentBuf = buf;
    while (true) {
      const offsets = getBoxOffsets(currentBuf, boxName2);
      if (offsets === null) {
        return ret;
      }
      assert(offsets[2] !== 0 && currentBuf.length !== 0);
      ret.push(currentBuf.subarray(offsets[1], offsets[2]));
      currentBuf = currentBuf.subarray(offsets[2]);
    }
  }
  function getBox(buf, boxName2) {
    const offsets = getBoxOffsets(buf, boxName2);
    return offsets !== null ? buf.subarray(offsets[0], offsets[2]) : null;
  }
  function getBoxOffsets(buf, boxName2) {
    const len = buf.length;
    let boxBaseOffset = 0;
    let name;
    let lastBoxSize = 0;
    let lastOffset;
    while (boxBaseOffset + 8 <= len) {
      lastOffset = boxBaseOffset;
      lastBoxSize = be4toi(buf, lastOffset);
      lastOffset += 4;
      name = be4toi(buf, lastOffset);
      lastOffset += 4;
      if (lastBoxSize === 0) {
        lastBoxSize = len - boxBaseOffset;
      } else if (lastBoxSize === 1) {
        if (lastOffset + 8 > len) {
          return null;
        }
        lastBoxSize = be8toi(buf, lastOffset);
        lastOffset += 8;
      }
      if (lastBoxSize < 0) {
        throw new Error("ISOBMFF: Size out of range");
      }
      if (name === boxName2) {
        if (boxName2 === 1970628964) {
          lastOffset += 16;
        }
        return [boxBaseOffset, lastOffset, boxBaseOffset + lastBoxSize];
      } else {
        boxBaseOffset += lastBoxSize;
      }
    }
    return null;
  }
  function getUuidContent(buf, id1, id2, id3, id4) {
    const len = buf.length;
    let boxSize;
    for (let boxBaseOffset = 0; boxBaseOffset < len; boxBaseOffset += boxSize) {
      let currentOffset = boxBaseOffset;
      boxSize = be4toi(buf, currentOffset);
      currentOffset += 4;
      const boxName2 = be4toi(buf, currentOffset);
      currentOffset += 4;
      if (boxSize === 0) {
        boxSize = len - boxBaseOffset;
      } else if (boxSize === 1) {
        if (currentOffset + 8 > len) {
          return void 0;
        }
        boxSize = be8toi(buf, currentOffset);
        currentOffset += 8;
      }
      if (boxName2 === 1970628964 && currentOffset + 16 <= len && be4toi(buf, currentOffset) === id1 && be4toi(buf, currentOffset + 4) === id2 && be4toi(buf, currentOffset + 8) === id3 && be4toi(buf, currentOffset + 12) === id4) {
        currentOffset += 16;
        return buf.subarray(currentOffset, boxBaseOffset + boxSize);
      }
    }
  }
  function getNextBoxOffsets(buf) {
    const len = buf.length;
    if (len < 8) {
      log_default.warn("ISOBMFF: box inferior to 8 bytes, cannot find offsets");
      return null;
    }
    let lastOffset = 0;
    let boxSize = be4toi(buf, lastOffset);
    lastOffset += 4;
    const name = be4toi(buf, lastOffset);
    lastOffset += 4;
    if (boxSize === 0) {
      boxSize = len;
    } else if (boxSize === 1) {
      if (lastOffset + 8 > len) {
        log_default.warn("ISOBMFF: box too short, cannot find offsets");
        return null;
      }
      boxSize = be8toi(buf, lastOffset);
      lastOffset += 8;
    }
    if (boxSize < 0) {
      throw new Error("ISOBMFF: Size out of range");
    }
    if (name === 1970628964) {
      lastOffset += 16;
    }
    return [0, lastOffset, boxSize];
  }
  var init_get_box = __esm({
    "src/parsers/containers/isobmff/get_box.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_assert();
      init_byte_parsing();
    }
  });

  // src/parsers/containers/isobmff/take_pssh_out.ts
  function takePSSHOut(data) {
    let cursor = 0;
    const moov = getBoxContent(data, 1836019574);
    if (moov === null) {
      return [];
    }
    const psshBoxes = [];
    while (cursor < moov.length) {
      let psshOffsets;
      try {
        psshOffsets = getBoxOffsets(moov, 1886614376);
      } catch (e) {
        log_default.warn("ISOBMFF:", e);
        return psshBoxes;
      }
      if (psshOffsets == null) {
        return psshBoxes;
      }
      const pssh = slice_uint8array_default(moov, psshOffsets[0], psshOffsets[2]);
      const systemId = getPsshSystemID(pssh, psshOffsets[1] - psshOffsets[0]);
      if (systemId !== void 0) {
        psshBoxes.push({ systemId, data: pssh });
      }
      moov[psshOffsets[1] - 4] = 102;
      moov[psshOffsets[1] - 3] = 114;
      moov[psshOffsets[1] - 2] = 101;
      moov[psshOffsets[1] - 1] = 101;
      cursor = psshOffsets[2];
    }
    return psshBoxes;
  }
  function getPsshSystemID(buff, initialDataOffset) {
    if (buff[initialDataOffset] > 1) {
      log_default.warn("ISOBMFF: un-handled PSSH version");
      return void 0;
    }
    const offset = initialDataOffset + 4;
    if (offset + 16 > buff.length) {
      return void 0;
    }
    const systemIDBytes = slice_uint8array_default(buff, offset, offset + 16);
    return bytesToHex(systemIDBytes);
  }
  var init_take_pssh_out = __esm({
    "src/parsers/containers/isobmff/take_pssh_out.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_slice_uint8array();
      init_string_parsing();
      init_get_box();
    }
  });

  // src/parsers/containers/isobmff/constants.ts
  var MAX_32_BIT_INT;
  var init_constants = __esm({
    "src/parsers/containers/isobmff/constants.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      MAX_32_BIT_INT = Math.pow(2, 32) - 1;
    }
  });

  // src/parsers/containers/isobmff/create_box.ts
  function boxName(str) {
    if (boxNamesMem[str] != null) {
      return boxNamesMem[str];
    }
    const nameInBytes = strToUtf8(str);
    boxNamesMem[str] = nameInBytes;
    return nameInBytes;
  }
  function createBox(name, buff) {
    const len = buff.length + 8;
    return len <= MAX_32_BIT_INT ? concat2(itobe4(len), boxName(name), buff) : concat2(itobe4(1), boxName(name), itobe8(len + 8), buff);
  }
  function createBoxWithChildren(name, children) {
    return createBox(name, concat2(...children));
  }
  var boxNamesMem;
  var init_create_box = __esm({
    "src/parsers/containers/isobmff/create_box.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_string_parsing();
      init_constants();
      boxNamesMem = {};
    }
  });

  // src/parsers/containers/isobmff/read.ts
  function getTRAF(buffer) {
    const moof = getBoxContent(buffer, 1836019558);
    if (moof === null) {
      return null;
    }
    return getBoxContent(moof, 1953653094);
  }
  function getTRAFs(buffer) {
    const moofs = getBoxesContent(buffer, 1836019558);
    return moofs.reduce((acc, moof) => {
      const traf = getBoxContent(moof, 1953653094);
      if (traf !== null) {
        acc.push(traf);
      }
      return acc;
    }, []);
  }
  function getMDAT(buf) {
    return getBoxContent(buf, 1835295092);
  }
  function getMDIA(buf) {
    const moov = getBoxContent(buf, 1836019574);
    if (moov === null) {
      return null;
    }
    const trak = getBoxContent(moov, 1953653099);
    if (trak === null) {
      return null;
    }
    return getBoxContent(trak, 1835297121);
  }
  function getEMSG(buffer, offset = 0) {
    return getBoxContent(buffer.subarray(offset), 1701671783);
  }
  var init_read = __esm({
    "src/parsers/containers/isobmff/read.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_get_box();
    }
  });

  // src/parsers/containers/isobmff/drm/playready.ts
  function getPlayReadyKIDFromPrivateData(data) {
    const xmlLength = le2toi(data, 8);
    const xml = utf16LEToStr(data.subarray(10, xmlLength + 10));
    const doc = new DOMParser().parseFromString(xml, "application/xml");
    const kidElement = doc.querySelector("KID");
    if (kidElement === null) {
      throw new Error("Cannot parse PlayReady private data: invalid XML");
    }
    const b64guidKid = kidElement.textContent === null ? "" : kidElement.textContent;
    const uuidKid = guidToUuid(base64ToBytes(b64guidKid));
    return bytesToHex(uuidKid).toLowerCase();
  }
  var init_playready = __esm({
    "src/parsers/containers/isobmff/drm/playready.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_base64();
      init_byte_parsing();
      init_string_parsing();
    }
  });

  // src/parsers/containers/isobmff/drm/index.ts
  var init_drm = __esm({
    "src/parsers/containers/isobmff/drm/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_playready();
    }
  });

  // src/parsers/containers/isobmff/utils.ts
  function fakeEncryptionDataInInitSegment(segment) {
    var _a2;
    const buf = segment instanceof Uint8Array ? segment : segment instanceof ArrayBuffer ? new Uint8Array(segment) : new Uint8Array(segment.buffer);
    const parentBoxesOffsets = [];
    {
      const parentBoxes = [
        1836019574,
        1953653099,
        1835297121,
        1835626086,
        1937007212,
        1937011556
      ];
      let currBox = buf;
      let relativeOffset = 0;
      for (const parentBoxName of parentBoxes) {
        const offsets = getBoxOffsets(currBox, parentBoxName);
        if (offsets === null) {
          return buf;
        }
        currBox = currBox.subarray(offsets[1], offsets[2]);
        parentBoxesOffsets.push(offsets.map((offset) => offset + relativeOffset));
        relativeOffset += offsets[1];
      }
    }
    const stsdOffsets = parentBoxesOffsets[parentBoxesOffsets.length - 1];
    const stsdSubBoxesStart = stsdOffsets[1] + 8;
    const stsdSubBoxes = buf.subarray(stsdSubBoxesStart, stsdOffsets[2]);
    const encv = getBoxContent(stsdSubBoxes, 1701733238);
    const enca = getBoxContent(stsdSubBoxes, 1701733217);
    if (encv !== null || enca !== null) {
      return buf;
    }
    const boxesToUpdate = [
      {
        type: "video",
        name: AVC1_BOX_NAME,
        relativeOffsets: getBoxOffsets(stsdSubBoxes, AVC1_BOX_NAME)
      },
      {
        type: "video",
        name: AVC3_BOX_NAME,
        relativeOffsets: getBoxOffsets(stsdSubBoxes, AVC3_BOX_NAME)
      },
      {
        type: "audio",
        name: AC3_BOX_NAME,
        relativeOffsets: getBoxOffsets(stsdSubBoxes, AC3_BOX_NAME)
      },
      {
        type: "audio",
        name: EC3_BOX_NAME,
        relativeOffsets: getBoxOffsets(stsdSubBoxes, EC3_BOX_NAME)
      },
      {
        type: "audio",
        name: MP4A_BOX_NAME,
        relativeOffsets: getBoxOffsets(stsdSubBoxes, MP4A_BOX_NAME)
      }
    ].filter((b) => b.relativeOffsets !== null);
    boxesToUpdate.sort((a, b) => b.relativeOffsets[0] - a.relativeOffsets[0]);
    let updatedSeg = buf;
    for (const box of boxesToUpdate) {
      const boxLen = box.relativeOffsets[2] - box.relativeOffsets[0];
      let newBox = new Uint8Array(boxLen + FAKE_SINF_BOX.length);
      const boxContent = stsdSubBoxes.subarray(box.relativeOffsets[0], box.relativeOffsets[2]);
      newBox.set(boxContent, 0);
      const titleOffsetForBox = box.relativeOffsets[1] - box.relativeOffsets[0] - 4;
      if (box.type === "audio") {
        newBox.set(itobe4(1701733217), titleOffsetForBox);
      } else {
        newBox.set(itobe4(1701733238), titleOffsetForBox);
      }
      newBox.set(FAKE_SINF_BOX, boxLen);
      const sinfOffsets = getBoxOffsets(newBox, 1936289382);
      if (sinfOffsets === null) {
        log_default.warn("ISOBMFF: sinf not found, this should not be possible.");
        return buf;
      }
      const sinfContent = newBox.subarray(sinfOffsets[1], sinfOffsets[2]);
      const frmaOffsets = (_a2 = getBoxOffsets(sinfContent, 1718775137)) == null ? void 0 : _a2.map((val) => val + sinfOffsets[1]);
      if (frmaOffsets === void 0) {
        log_default.warn("ISOBMFF: frma not found in sinf, this should not be possible.");
        return buf;
      }
      newBox.set(itobe4(box.name), frmaOffsets[1]);
      newBox = updateBoxLength(newBox);
      const previousUpdatedSeg = updatedSeg;
      updatedSeg = new Uint8Array(previousUpdatedSeg.length + newBox.byteLength);
      const absoluteBoxEnd = stsdSubBoxesStart + box.relativeOffsets[2];
      updatedSeg.set(previousUpdatedSeg.subarray(0, absoluteBoxEnd), 0);
      updatedSeg.set(previousUpdatedSeg.subarray(absoluteBoxEnd), absoluteBoxEnd + newBox.length);
      updatedSeg.set(newBox, absoluteBoxEnd);
      for (const parentBoxesOffset of parentBoxesOffsets) {
        const parentBox = updatedSeg.subarray(parentBoxesOffset[0], parentBoxesOffset[2] + newBox.length);
        updateBoxLength(parentBox);
      }
      let nbStsdEntries = be2toi(updatedSeg, stsdOffsets[1] + 6);
      nbStsdEntries += 1;
      updatedSeg.set(itobe2(nbStsdEntries), stsdOffsets[1] + 6);
    }
    return updatedSeg;
  }
  function getSegmentsFromSidx(buf, sidxOffsetInWholeSegment) {
    const sidxOffsets = getBoxOffsets(buf, 1936286840);
    if (sidxOffsets === null) {
      return null;
    }
    let offset = sidxOffsetInWholeSegment;
    const boxSize = sidxOffsets[2] - sidxOffsets[0];
    let cursor = sidxOffsets[1];
    const version = buf[cursor];
    cursor += 4 + 4;
    const timescale = be4toi(buf, cursor);
    cursor += 4;
    let time;
    if (version === 0) {
      time = be4toi(buf, cursor);
      cursor += 4;
      offset += be4toi(buf, cursor) + boxSize;
      cursor += 4;
    } else if (version === 1) {
      time = be8toi(buf, cursor);
      cursor += 8;
      offset += be8toi(buf, cursor) + boxSize;
      cursor += 8;
    } else {
      return null;
    }
    const segments = [];
    cursor += 2;
    let count = be2toi(buf, cursor);
    cursor += 2;
    while (--count >= 0) {
      const refChunk = be4toi(buf, cursor);
      cursor += 4;
      const refType = (refChunk & 2147483648) >>> 31;
      const refSize = refChunk & 2147483647;
      if (refType === 1) {
        throw new Error("sidx with reference_type `1` not yet implemented");
      }
      const duration = be4toi(buf, cursor);
      cursor += 4;
      cursor += 4;
      segments.push({
        time,
        duration,
        timescale,
        range: [offset, offset + refSize - 1]
      });
      time += duration;
      offset += refSize;
    }
    return segments;
  }
  function getTrackFragmentDecodeTime(buffer) {
    const traf = getTRAF(buffer);
    if (traf === null) {
      return void 0;
    }
    const tfdt = getBoxContent(traf, 1952867444);
    if (tfdt === null) {
      return void 0;
    }
    const version = tfdt[0];
    return version === 1 ? be8toi(tfdt, 4) : version === 0 ? be4toi(tfdt, 4) : void 0;
  }
  function getDefaultDurationFromTFHDInTRAF(traf) {
    const tfhd = getBoxContent(traf, 1952868452);
    if (tfhd === null) {
      return void 0;
    }
    let cursor = 1;
    const flags = be3toi(tfhd, cursor);
    cursor += 3;
    const hasBaseDataOffset = (flags & 1) > 0;
    const hasSampleDescriptionIndex = (flags & 2) > 0;
    const hasDefaultSampleDuration = (flags & 8) > 0;
    if (!hasDefaultSampleDuration) {
      return void 0;
    }
    cursor += 4;
    if (hasBaseDataOffset) {
      cursor += 8;
    }
    if (hasSampleDescriptionIndex) {
      cursor += 4;
    }
    const defaultDuration = be4toi(tfhd, cursor);
    return defaultDuration;
  }
  function getDurationFromTrun(buffer) {
    const trafs = getTRAFs(buffer);
    if (trafs.length === 0) {
      return void 0;
    }
    let completeDuration = 0;
    for (const traf of trafs) {
      const trun = getBoxContent(traf, 1953658222);
      if (trun === null) {
        return void 0;
      }
      let cursor = 0;
      const version = trun[cursor];
      cursor += 1;
      if (version > 1) {
        return void 0;
      }
      const flags = be3toi(trun, cursor);
      cursor += 3;
      const hasSampleDuration = (flags & 256) > 0;
      let defaultDuration = 0;
      if (!hasSampleDuration) {
        defaultDuration = getDefaultDurationFromTFHDInTRAF(traf);
        if (defaultDuration === void 0) {
          return void 0;
        }
      }
      const hasDataOffset = (flags & 1) > 0;
      const hasFirstSampleFlags = (flags & 4) > 0;
      const hasSampleSize = (flags & 512) > 0;
      const hasSampleFlags = (flags & 1024) > 0;
      const hasSampleCompositionOffset = (flags & 2048) > 0;
      const sampleCounts = be4toi(trun, cursor);
      cursor += 4;
      if (hasDataOffset) {
        cursor += 4;
      }
      if (hasFirstSampleFlags) {
        cursor += 4;
      }
      let i = sampleCounts;
      let duration = 0;
      while (i-- > 0) {
        if (hasSampleDuration) {
          duration += be4toi(trun, cursor);
          cursor += 4;
        } else {
          duration += defaultDuration;
        }
        if (hasSampleSize) {
          cursor += 4;
        }
        if (hasSampleFlags) {
          cursor += 4;
        }
        if (hasSampleCompositionOffset) {
          cursor += 4;
        }
      }
      completeDuration += duration;
    }
    return completeDuration;
  }
  function getMDHDTimescale(buffer) {
    const mdia = getMDIA(buffer);
    if (mdia === null) {
      return void 0;
    }
    const mdhd = getBoxContent(mdia, 1835296868);
    if (mdhd === null) {
      return void 0;
    }
    let cursor = 0;
    const version = mdhd[cursor];
    cursor += 4;
    return version === 1 ? be4toi(mdhd, cursor + 16) : version === 0 ? be4toi(mdhd, cursor + 8) : void 0;
  }
  function updateBoxLength(buf) {
    const newLen = buf.length;
    if (newLen < 4) {
      throw new Error("Cannot update box length: box too short");
    }
    const oldSize = be4toi(buf, 0);
    if (oldSize === 0) {
      if (newLen > MAX_32_BIT_INT) {
        const newBox = new Uint8Array(newLen + 8);
        newBox.set(itobe4(1), 0);
        newBox.set(buf.subarray(4, 8), 4);
        newBox.set(itobe8(newLen + 8), 8);
        newBox.set(buf.subarray(8, newLen), 16);
        return newBox;
      } else {
        buf.set(itobe4(newLen), 0);
        return buf;
      }
    } else if (oldSize === 1) {
      if (newLen < 16) {
        throw new Error("Cannot update box length: box too short");
      }
      buf.set(itobe8(newLen), 8);
      return buf;
    } else if (newLen <= MAX_32_BIT_INT) {
      buf.set(itobe4(newLen), 0);
      return buf;
    } else {
      const newBox = new Uint8Array(newLen + 8);
      newBox.set(itobe4(1), 0);
      newBox.set(buf.subarray(4, 8), 4);
      newBox.set(itobe8(newLen + 8), 8);
      newBox.set(buf.subarray(8, newLen), 16);
      return newBox;
    }
  }
  function parseEmsgBoxes(buffer) {
    const emsgs = [];
    let offset = 0;
    while (offset < buffer.length) {
      const emsg = getEMSG(buffer, offset);
      if (emsg === null) {
        break;
      }
      const length = emsg.length;
      offset += length;
      const version = emsg[0];
      if (version !== 0) {
        log_default.warn("ISOBMFF: EMSG version " + version.toString() + " not supported.");
      } else {
        let position = 4;
        const { end: schemeIdEnd, string: schemeIdUri } = readNullTerminatedString(emsg, position);
        position = schemeIdEnd;
        const { end: valueEnd, string: value } = readNullTerminatedString(emsg, position);
        position = valueEnd;
        const timescale = be4toi(emsg, position);
        position += 4;
        const presentationTimeDelta = be4toi(emsg, position);
        position += 4;
        const eventDuration = be4toi(emsg, position);
        position += 4;
        const id = be4toi(emsg, position);
        position += 4;
        const messageData = emsg.subarray(position, length);
        const emsgData = {
          schemeIdUri,
          value,
          timescale,
          presentationTimeDelta,
          eventDuration,
          id,
          messageData
        };
        emsgs.push(emsgData);
      }
    }
    if (emsgs.length === 0) {
      return void 0;
    }
    return emsgs;
  }
  var AVC1_BOX_NAME, AVC3_BOX_NAME, AC3_BOX_NAME, EC3_BOX_NAME, MP4A_BOX_NAME, FAKE_SINF_BOX;
  var init_utils = __esm({
    "src/parsers/containers/isobmff/utils.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_byte_parsing();
      init_string_parsing();
      init_constants();
      init_drm();
      init_get_box();
      init_read();
      AVC1_BOX_NAME = 1635148593;
      AVC3_BOX_NAME = 1635148595;
      AC3_BOX_NAME = 1633889587;
      EC3_BOX_NAME = 1700998451;
      MP4A_BOX_NAME = 1836069985;
      FAKE_SINF_BOX = new Uint8Array([
        0,
        0,
        0,
        80,
        115,
        105,
        110,
        102,
        0,
        0,
        0,
        12,
        102,
        114,
        109,
        97,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        20,
        115,
        99,
        104,
        109,
        0,
        0,
        0,
        0,
        99,
        101,
        110,
        99,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        40,
        115,
        99,
        104,
        105,
        0,
        0,
        0,
        32,
        116,
        101,
        110,
        99,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        8,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
      ]);
    }
  });

  // src/parsers/containers/isobmff/index.ts
  var init_isobmff = __esm({
    "src/parsers/containers/isobmff/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_take_pssh_out();
      init_create_box();
      init_get_box();
      init_read();
      init_utils();
    }
  });

  // src/compat/eme/constants.ts
  var PSSH_TO_INTEGER;
  var init_constants2 = __esm({
    "src/compat/eme/constants.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_string_parsing();
      PSSH_TO_INTEGER = be4toi(strToUtf8("pssh"), 0);
    }
  });

  // src/compat/eme/generate_key_request.ts
  function patchInitData(initData) {
    log_default.info("Compat: Trying to move CENC PSSH from init data at the end of it.");
    let foundCencV1 = false;
    let concatenatedCencs = new Uint8Array();
    let resInitData = new Uint8Array();
    let offset = 0;
    while (offset < initData.length) {
      if (initData.length < offset + 8 || be4toi(initData, offset + 4) !== PSSH_TO_INTEGER) {
        log_default.warn("Compat: unrecognized initialization data. Cannot patch it.");
        throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
      }
      const len = be4toi(new Uint8Array(initData), offset);
      if (offset + len > initData.length) {
        log_default.warn("Compat: unrecognized initialization data. Cannot patch it.");
        throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
      }
      const currentPSSH = initData.subarray(offset, offset + len);
      if (initData[offset + 12] === 16 && initData[offset + 13] === 119 && initData[offset + 14] === 239 && initData[offset + 15] === 236 && initData[offset + 16] === 192 && initData[offset + 17] === 178 && initData[offset + 18] === 77 && initData[offset + 19] === 2 && initData[offset + 20] === 172 && initData[offset + 21] === 227 && initData[offset + 22] === 60 && initData[offset + 23] === 30 && initData[offset + 24] === 82 && initData[offset + 25] === 226 && initData[offset + 26] === 251 && initData[offset + 27] === 75) {
        const cencOffsets = getNextBoxOffsets(currentPSSH);
        const version = cencOffsets === null ? void 0 : currentPSSH[cencOffsets[1]];
        log_default.info("Compat: CENC PSSH found with version", version);
        if (version === void 0) {
          log_default.warn("Compat: could not read version of CENC PSSH");
        } else if (foundCencV1 === (version === 1)) {
          concatenatedCencs = concat2(concatenatedCencs, currentPSSH);
        } else if (version === 1) {
          log_default.warn("Compat: cenc version 1 encountered, removing every other cenc pssh box.");
          concatenatedCencs = currentPSSH;
          foundCencV1 = true;
        } else {
          log_default.warn("Compat: filtering out cenc pssh box with wrong version", version);
        }
      } else {
        resInitData = concat2(resInitData, currentPSSH);
      }
      offset += len;
    }
    if (offset !== initData.length) {
      log_default.warn("Compat: unrecognized initialization data. Cannot patch it.");
      throw new Error("Compat: unrecognized initialization data. Cannot patch it.");
    }
    return concat2(resInitData, concatenatedCencs);
  }
  function generateKeyRequest(session, initializationDataType, initializationData) {
    log_default.debug("Compat: Calling generateRequest on the MediaKeySession");
    let patchedInit;
    try {
      patchedInit = patchInitData(initializationData);
    } catch (_e) {
      patchedInit = initializationData;
    }
    const initDataType = initializationDataType != null ? initializationDataType : "";
    return session.generateRequest(initDataType, patchedInit).catch((error) => {
      if (initDataType !== "" || !(error instanceof TypeError)) {
        throw error;
      }
      log_default.warn('Compat: error while calling `generateRequest` with an empty initialization data type. Retrying with a default "cenc" value.', error);
      return session.generateRequest("cenc", patchedInit);
    });
  }
  var init_generate_key_request = __esm({
    "src/compat/eme/generate_key_request.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_isobmff();
      init_byte_parsing();
      init_constants2();
    }
  });

  // src/utils/are_arrays_of_numbers_equal.ts
  function areArraysOfNumbersEqual(arr1, arr2) {
    if (arr1.length !== arr2.length) {
      return false;
    }
    for (let i = arr1.length - 1; i >= 0; i--) {
      if (arr1[i] !== arr2[i]) {
        return false;
      }
    }
    return true;
  }
  var init_are_arrays_of_numbers_equal = __esm({
    "src/utils/are_arrays_of_numbers_equal.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/eme/get_init_data.ts
  function getInitializationDataValues(initData) {
    const result = [];
    let offset = 0;
    while (offset < initData.length) {
      if (initData.length < offset + 8 || be4toi(initData, offset + 4) !== PSSH_TO_INTEGER) {
        log_default.warn("Compat: Unrecognized initialization data. Use as is.");
        return [{
          systemId: void 0,
          data: initData
        }];
      }
      const len = be4toi(new Uint8Array(initData), offset);
      if (offset + len > initData.length) {
        log_default.warn("Compat: Unrecognized initialization data. Use as is.");
        return [{
          systemId: void 0,
          data: initData
        }];
      }
      const currentPSSH = initData.subarray(offset, offset + len);
      const systemId = getPsshSystemID(currentPSSH, 8);
      const currentItem = { systemId, data: currentPSSH };
      if (isPSSHAlreadyEncountered(result, currentItem)) {
        log_default.warn("Compat: Duplicated PSSH found in initialization data, removing it.");
      } else {
        result.push(currentItem);
      }
      offset += len;
    }
    if (offset !== initData.length) {
      log_default.warn("Compat: Unrecognized initialization data. Use as is.");
      return [{
        systemId: void 0,
        data: initData
      }];
    }
    return result;
  }
  function isPSSHAlreadyEncountered(encounteredPSSHs, pssh) {
    for (let i = 0; i < encounteredPSSHs.length; i++) {
      const item = encounteredPSSHs[i];
      if (pssh.systemId === void 0 || item.systemId === void 0 || pssh.systemId === item.systemId) {
        if (areArraysOfNumbersEqual(pssh.data, item.data)) {
          return true;
        }
      }
    }
    return false;
  }
  function getInitData(encryptedEvent) {
    const { initData, initDataType } = encryptedEvent;
    if (initData == null) {
      log_default.warn("Compat: No init data found on media encrypted event.");
      return null;
    }
    const initDataBytes = new Uint8Array(initData);
    const values = getInitializationDataValues(initDataBytes);
    return { type: initDataType, values };
  }
  var init_get_init_data = __esm({
    "src/compat/eme/get_init_data.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_isobmff();
      init_are_arrays_of_numbers_equal();
      init_byte_parsing();
      init_constants2();
    }
  });

  // src/compat/eme/load_session.ts
  async function loadSession(session, sessionId) {
    log_default.info("Compat/DRM: Load persisted session", sessionId);
    const isLoaded = await session.load(sessionId);
    if (!isLoaded || session.keyStatuses.size > 0) {
      return isLoaded;
    }
    return new Promise((resolve) => {
      session.addEventListener("keystatuseschange", resolveWithLoadedStatus);
      const timeout2 = setTimeout(resolveWithLoadedStatus, EME_WAITING_DELAY_LOADED_SESSION_EMPTY_KEYSTATUSES);
      function resolveWithLoadedStatus() {
        cleanUp();
        resolve(isLoaded);
      }
      function cleanUp() {
        clearTimeout(timeout2);
        session.removeEventListener("keystatuseschange", resolveWithLoadedStatus);
      }
    });
  }
  var EME_WAITING_DELAY_LOADED_SESSION_EMPTY_KEYSTATUSES;
  var init_load_session = __esm({
    "src/compat/eme/load_session.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      EME_WAITING_DELAY_LOADED_SESSION_EMPTY_KEYSTATUSES = 100;
    }
  });

  // src/compat/eme/index.ts
  var init_eme = __esm({
    "src/compat/eme/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_close_session();
      init_custom_media_keys();
      init_generate_key_request();
      init_get_init_data();
      init_load_session();
    }
  });

  // src/compat/fullscreen.ts
  function requestFullscreen(element) {
    if (!isFullscreen()) {
      const elt = element;
      if (typeof elt.requestFullscreen === "function") {
        elt.requestFullscreen();
      } else if (typeof elt.msRequestFullscreen === "function") {
        elt.msRequestFullscreen();
      } else if (typeof elt.mozRequestFullScreen === "function") {
        elt.mozRequestFullScreen();
      } else if (typeof elt.webkitRequestFullscreen === "function") {
        elt.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      }
    }
  }
  function exitFullscreen() {
    if (isFullscreen()) {
      const doc = document;
      if (typeof doc.exitFullscreen === "function") {
        doc.exitFullscreen();
      } else if (typeof doc.msExitFullscreen === "function") {
        doc.msExitFullscreen();
      } else if (typeof doc.mozCancelFullScreen === "function") {
        doc.mozCancelFullScreen();
      } else if (typeof doc.webkitExitFullscreen === "function") {
        doc.webkitExitFullscreen();
      }
    }
  }
  function isFullscreen() {
    const doc = document;
    return doc.fullscreenElement != null || doc.mozFullScreenElement != null || doc.webkitFullscreenElement != null || doc.msFullscreenElement != null;
  }
  var init_fullscreen = __esm({
    "src/compat/fullscreen.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/get_start_date.ts
  function getStartDate(mediaElement) {
    const _mediaElement = mediaElement;
    if (typeof _mediaElement.getStartDate === "function") {
      const startDate = _mediaElement.getStartDate();
      if (typeof startDate === "object" && startDate !== null) {
        const startDateNum = +startDate;
        if (!isNaN(startDateNum)) {
          return startDateNum / 1e3;
        }
      } else if (typeof startDate === "number" && !isNaN(startDate)) {
        return startDate;
      }
    }
  }
  var init_get_start_date = __esm({
    "src/compat/get_start_date.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/has_eme_apis.ts
  function hasEMEAPIs() {
    return typeof requestMediaKeySystemAccess === "function";
  }
  var init_has_eme_apis = __esm({
    "src/compat/has_eme_apis.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_eme();
    }
  });

  // src/compat/is_codec_supported.ts
  function isCodecSupported(mimeType) {
    if (MediaSource_ == null) {
      return false;
    }
    if (typeof MediaSource_.isTypeSupported === "function") {
      return MediaSource_.isTypeSupported(mimeType);
    }
    return true;
  }
  var init_is_codec_supported = __esm({
    "src/compat/is_codec_supported.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_compatibility_types();
    }
  });

  // src/compat/is_offline.ts
  function isOffline() {
    return navigator.onLine === false;
  }
  var init_is_offline = __esm({
    "src/compat/is_offline.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/is_vtt_cue.ts
  function isVTTCue(cue) {
    return typeof window.VTTCue === "function" && cue instanceof window.VTTCue;
  }
  var init_is_vtt_cue = __esm({
    "src/compat/is_vtt_cue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/make_vtt_cue.ts
  function makeCue(startTime, endTime, payload) {
    if (startTime >= endTime) {
      log_default.warn(`Compat: Invalid cue times: ${startTime} - ${endTime}`);
      return null;
    }
    if (isNullOrUndefined(window.VTTCue)) {
      if (isNullOrUndefined(window.TextTrackCue)) {
        throw new Error("VTT cues not supported in your target");
      }
      return new TextTrackCue(startTime, endTime, payload);
    } else {
      return new VTTCue(startTime, endTime, payload);
    }
  }
  var init_make_vtt_cue = __esm({
    "src/compat/make_vtt_cue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_is_null_or_undefined();
    }
  });

  // src/compat/on_height_width_change.ts
  function onHeightWidthChange(element, interval2) {
    return defer(() => {
      if (_ResizeObserver !== void 0) {
        let lastHeight = -1;
        let lastWidth = -1;
        return new Observable((obs) => {
          const resizeObserver = new _ResizeObserver((entries) => {
            if (entries.length === 0) {
              log_default.error("Compat: Resized but no observed element.");
              return;
            }
            const entry = entries[0];
            const { height, width } = entry.contentRect;
            if (height !== lastHeight || width !== lastWidth) {
              lastHeight = height;
              lastWidth = width;
              obs.next({ height, width });
            }
          });
          resizeObserver.observe(element);
          return () => {
            resizeObserver.disconnect();
          };
        });
      }
      return interval(interval2).pipe(startWith(null), map(() => {
        const { height, width } = element.getBoundingClientRect();
        return { height, width };
      }), distinctUntilChanged((o, n) => {
        return o.height === n.height && o.width === n.width;
      }));
    });
  }
  var _ResizeObserver;
  var init_on_height_width_change = __esm({
    "src/compat/on_height_width_change.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_log();
      init_is_node();
      _ResizeObserver = is_node_default ? void 0 : window.ResizeObserver;
    }
  });

  // node_modules/next-tick/index.js
  var require_next_tick = __commonJS({
    "node_modules/next-tick/index.js"(exports, module) {
      "use strict";
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      var ensureCallable = function(fn) {
        if (typeof fn !== "function")
          throw new TypeError(fn + " is not a function");
        return fn;
      };
      var byObserver = function(Observer7) {
        var node = document.createTextNode(""), queue, currentQueue, i = 0;
        new Observer7(function() {
          var callback;
          if (!queue) {
            if (!currentQueue)
              return;
            queue = currentQueue;
          } else if (currentQueue) {
            queue = currentQueue.concat(queue);
          }
          currentQueue = queue;
          queue = null;
          if (typeof currentQueue === "function") {
            callback = currentQueue;
            currentQueue = null;
            callback();
            return;
          }
          node.data = i = ++i % 2;
          while (currentQueue) {
            callback = currentQueue.shift();
            if (!currentQueue.length)
              currentQueue = null;
            callback();
          }
        }).observe(node, { characterData: true });
        return function(fn) {
          ensureCallable(fn);
          if (queue) {
            if (typeof queue === "function")
              queue = [queue, fn];
            else
              queue.push(fn);
            return;
          }
          queue = fn;
          node.data = i = ++i % 2;
        };
      };
      module.exports = function() {
        if (typeof process === "object" && process && typeof process.nextTick === "function") {
          return process.nextTick;
        }
        if (typeof queueMicrotask === "function") {
          return function(cb) {
            queueMicrotask(ensureCallable(cb));
          };
        }
        if (typeof document === "object" && document) {
          if (typeof MutationObserver === "function")
            return byObserver(MutationObserver);
          if (typeof WebKitMutationObserver === "function")
            return byObserver(WebKitMutationObserver);
        }
        if (typeof setImmediate === "function") {
          return function(cb) {
            setImmediate(ensureCallable(cb));
          };
        }
        if (typeof setTimeout === "function" || typeof setTimeout === "object") {
          return function(cb) {
            setTimeout(ensureCallable(cb), 0);
          };
        }
        return null;
      }();
    }
  });

  // src/compat/patch_webkit_source_buffer.ts
  function patchWebkitSourceBuffer() {
    if (!is_node_default && window.WebKitSourceBuffer != null && window.WebKitSourceBuffer.prototype.addEventListener === void 0) {
      const sourceBufferWebkitRef = window.WebKitSourceBuffer;
      const sourceBufferWebkitProto = sourceBufferWebkitRef.prototype;
      for (const fnName in EventEmitter.prototype) {
        if (EventEmitter.prototype.hasOwnProperty(fnName)) {
          sourceBufferWebkitProto[fnName] = EventEmitter.prototype[fnName];
        }
      }
      sourceBufferWebkitProto._listeners = [];
      sourceBufferWebkitProto._emitUpdate = function(eventName, val) {
        (0, import_next_tick.default)(() => {
          this.trigger(eventName, val);
          this.updating = false;
          this.trigger("updateend");
        });
      };
      sourceBufferWebkitProto.appendBuffer = function(data) {
        if (this.updating) {
          throw new Error("updating");
        }
        this.trigger("updatestart");
        this.updating = true;
        try {
          this.append(data);
        } catch (error) {
          this._emitUpdate("error", error);
          return;
        }
        this._emitUpdate("update");
      };
    }
  }
  var import_next_tick;
  var init_patch_webkit_source_buffer = __esm({
    "src/compat/patch_webkit_source_buffer.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      import_next_tick = __toESM(require_next_tick());
      init_event_emitter();
      init_is_node();
    }
  });

  // src/utils/cast_to_observable.ts
  function castToObservable(value) {
    if (value instanceof Observable) {
      return value;
    } else if (value instanceof Promise || !isNullOrUndefined(value) && typeof value.then === "function") {
      return from(value);
    }
    return of(value);
  }
  var cast_to_observable_default;
  var init_cast_to_observable = __esm({
    "src/utils/cast_to_observable.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_is_null_or_undefined();
      cast_to_observable_default = castToObservable;
    }
  });

  // src/utils/rx-try_catch.ts
  function tryCatch(func, argsForFunc) {
    try {
      return func(argsForFunc);
    } catch (e) {
      return throwError(() => e);
    }
  }
  var init_rx_try_catch = __esm({
    "src/utils/rx-try_catch.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
    }
  });

  // src/compat/play.ts
  function play(mediaElement) {
    return defer(() => tryCatch(() => cast_to_observable_default(mediaElement.play()), void 0));
  }
  var init_play = __esm({
    "src/compat/play.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_cast_to_observable();
      init_rx_try_catch();
    }
  });

  // src/compat/set_element_src.ts
  function setElementSrc$(mediaElement, url) {
    return new Observable((observer) => {
      log_default.info("Setting URL to HTMLMediaElement", url);
      mediaElement.src = url;
      observer.next(void 0);
      return () => {
        clearElementSrc(mediaElement);
      };
    });
  }
  var init_set_element_src = __esm({
    "src/compat/set_element_src.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_log();
      init_clear_element_src();
    }
  });

  // src/compat/should_reload_media_source_on_decipherability_update.ts
  function shouldReloadMediaSourceOnDecipherabilityUpdate(currentKeySystem) {
    return currentKeySystem === null || currentKeySystem.indexOf("widevine") < 0;
  }
  var init_should_reload_media_source_on_decipherability_update = __esm({
    "src/compat/should_reload_media_source_on_decipherability_update.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/compat/should_renew_media_keys.ts
  function shouldRenewMediaKeys() {
    return isIE11;
  }
  var init_should_renew_media_keys = __esm({
    "src/compat/should_renew_media_keys.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_detection();
    }
  });

  // src/compat/should_unset_media_keys.ts
  function shouldUnsetMediaKeys() {
    return isIE11;
  }
  var init_should_unset_media_keys = __esm({
    "src/compat/should_unset_media_keys.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_detection();
    }
  });

  // src/compat/should_validate_metadata.ts
  function shouldValidateMetadata() {
    return isSamsungBrowser;
  }
  var init_should_validate_metadata = __esm({
    "src/compat/should_validate_metadata.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_detection();
    }
  });

  // src/compat/should_wait_for_data_before_loaded.ts
  function shouldWaitForDataBeforeLoaded(isDirectfile, mustPlayInline) {
    if (isDirectfile && isSafariMobile) {
      return mustPlayInline;
    }
    return true;
  }
  var init_should_wait_for_data_before_loaded = __esm({
    "src/compat/should_wait_for_data_before_loaded.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_detection();
    }
  });

  // src/compat/when_loaded_metadata.ts
  function whenLoadedMetadata$(mediaElement) {
    if (mediaElement.readyState >= READY_STATES.HAVE_METADATA) {
      return of(null);
    } else {
      return onLoadedMetadata$(mediaElement).pipe(take(1));
    }
  }
  var init_when_loaded_metadata = __esm({
    "src/compat/when_loaded_metadata.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_browser_compatibility_types();
      init_event_listeners();
    }
  });

  // src/compat/index.ts
  var init_compat = __esm({
    "src/compat/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_add_class_name();
      init_add_text_track();
      init_browser_compatibility_types();
      init_can_patch_isobmff();
      init_change_source_buffer_type();
      init_clear_element_src();
      init_eme();
      init_event_listeners();
      init_fullscreen();
      init_get_start_date();
      init_has_eme_apis();
      init_is_codec_supported();
      init_is_offline();
      init_is_vtt_cue();
      init_make_vtt_cue();
      init_on_height_width_change();
      init_patch_webkit_source_buffer();
      init_play();
      init_set_element_src();
      init_should_reload_media_source_on_decipherability_update();
      init_should_renew_media_keys();
      init_should_unset_media_keys();
      init_should_validate_metadata();
      init_should_wait_for_data_before_loaded();
      init_when_loaded_metadata();
      patchWebkitSourceBuffer();
    }
  });

  // src/features/features_object.ts
  var features, features_object_default;
  var init_features_object = __esm({
    "src/features/features_object.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      features = {
        dashParsers: {
          wasm: null,
          js: null
        },
        directfile: null,
        ContentDecryptor: null,
        htmlTextTracksBuffer: null,
        htmlTextTracksParsers: {},
        imageBuffer: null,
        imageParser: null,
        nativeTextTracksBuffer: null,
        nativeTextTracksParsers: {},
        transports: {}
      };
      features_object_default = features;
    }
  });

  // src/features/index.ts
  var features_default;
  var init_features = __esm({
    "src/features/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_features_object();
      features_default = features_object_default;
    }
  });

  // src/utils/array_find.ts
  function arrayFind(arr, predicate, thisArg) {
    if (typeof Array.prototype.find === "function") {
      return arr.find(predicate, thisArg);
    }
    const len = arr.length >>> 0;
    for (let i = 0; i < len; i++) {
      const val = arr[i];
      if (predicate.call(thisArg, val, i, arr)) {
        return val;
      }
    }
    return void 0;
  }
  var init_array_find = __esm({
    "src/utils/array_find.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/utils/languages/ISO_639-1_to_ISO_639-3.ts
  var ISO_MAP_1_TO_3, ISO_639_1_to_ISO_639_3_default;
  var init_ISO_639_1_to_ISO_639_3 = __esm({
    "src/utils/languages/ISO_639-1_to_ISO_639-3.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      ISO_MAP_1_TO_3 = {
        aa: "aar",
        ab: "abk",
        ae: "ave",
        af: "afr",
        ak: "aka",
        am: "amh",
        an: "arg",
        ar: "ara",
        as: "asm",
        av: "ava",
        ay: "aym",
        az: "aze",
        ba: "bak",
        be: "bel",
        bg: "bul",
        bi: "bis",
        bm: "bam",
        bn: "ben",
        bo: "bod",
        br: "bre",
        bs: "bos",
        ca: "cat",
        ce: "che",
        ch: "cha",
        co: "cos",
        cr: "cre",
        cs: "ces",
        cu: "chu",
        cv: "chv",
        cy: "cym",
        da: "dan",
        de: "deu",
        dv: "div",
        dz: "dzo",
        ee: "ewe",
        el: "ell",
        en: "eng",
        eo: "epo",
        es: "spa",
        et: "est",
        eu: "eus",
        fa: "fas",
        ff: "ful",
        fi: "fin",
        fj: "fij",
        fo: "fao",
        fr: "fra",
        fy: "fry",
        ga: "gle",
        gd: "gla",
        gl: "glg",
        gn: "grn",
        gu: "guj",
        gv: "glv",
        ha: "hau",
        he: "heb",
        hi: "hin",
        ho: "hmo",
        hr: "hrv",
        ht: "hat",
        hu: "hun",
        hy: "hye",
        hz: "her",
        ia: "ina",
        id: "ind",
        ie: "ile",
        ig: "ibo",
        ii: "iii",
        ik: "ipk",
        io: "ido",
        is: "isl",
        it: "ita",
        iu: "iku",
        ja: "jpn",
        jv: "jav",
        ka: "kat",
        kg: "kon",
        ki: "kik",
        kj: "kua",
        kk: "kaz",
        kl: "kal",
        km: "khm",
        kn: "kan",
        ko: "kor",
        kr: "kau",
        ks: "kas",
        ku: "kur",
        kv: "kom",
        kw: "cor",
        ky: "kir",
        la: "lat",
        lb: "ltz",
        lg: "lug",
        li: "lim",
        ln: "lin",
        lo: "lao",
        lt: "lit",
        lu: "lub",
        lv: "lav",
        mg: "mlg",
        mh: "mah",
        mi: "mri",
        mk: "mkd",
        ml: "mal",
        mn: "mon",
        mr: "mar",
        ms: "msa",
        mt: "mlt",
        my: "mya",
        na: "nau",
        nb: "nob",
        nd: "nde",
        ne: "nep",
        ng: "ndo",
        nl: "nld",
        nn: "nno",
        no: "nor",
        nr: "nbl",
        nv: "nav",
        ny: "nya",
        oc: "oci",
        oj: "oji",
        om: "orm",
        or: "ori",
        os: "oss",
        pa: "pan",
        pi: "pli",
        pl: "pol",
        ps: "pus",
        pt: "por",
        qu: "que",
        rm: "roh",
        rn: "run",
        ro: "ron",
        ru: "rus",
        rw: "kin",
        sa: "san",
        sc: "srd",
        sd: "snd",
        se: "sme",
        sg: "sag",
        si: "sin",
        sk: "slk",
        sl: "slv",
        sm: "smo",
        sn: "sna",
        so: "som",
        sq: "sqi",
        sr: "srp",
        ss: "ssw",
        st: "sot",
        su: "sun",
        sv: "swe",
        sw: "swa",
        ta: "tam",
        te: "tel",
        tg: "tgk",
        th: "tha",
        ti: "tir",
        tk: "tuk",
        tl: "tgl",
        tn: "tsn",
        to: "ton",
        tr: "tur",
        ts: "tso",
        tt: "tat",
        tw: "twi",
        ty: "tah",
        ug: "uig",
        uk: "ukr",
        ur: "urd",
        uz: "uzb",
        ve: "ven",
        vi: "vie",
        vo: "vol",
        wa: "wln",
        wo: "wol",
        xh: "xho",
        yi: "yid",
        yo: "yor",
        za: "zha",
        zh: "zho",
        zu: "zul"
      };
      ISO_639_1_to_ISO_639_3_default = ISO_MAP_1_TO_3;
    }
  });

  // src/utils/languages/ISO_639-2_to_ISO_639-3.ts
  var ISO_MAP_2_TO_3, ISO_639_2_to_ISO_639_3_default;
  var init_ISO_639_2_to_ISO_639_3 = __esm({
    "src/utils/languages/ISO_639-2_to_ISO_639-3.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      ISO_MAP_2_TO_3 = {
        alb: "sqi",
        arm: "hye",
        baq: "eus",
        bur: "mya",
        chi: "zho",
        cze: "ces",
        dut: "nld",
        fre: "fra",
        geo: "kat",
        ger: "deu",
        gre: "ell",
        ice: "isl",
        mac: "mkd",
        mao: "mri",
        may: "msa",
        per: "fas",
        slo: "slk",
        rum: "ron",
        tib: "bod",
        wel: "cym"
      };
      ISO_639_2_to_ISO_639_3_default = ISO_MAP_2_TO_3;
    }
  });

  // src/utils/languages/normalize.ts
  function normalizeLanguage(_language) {
    if (isNullOrUndefined(_language) || _language === "") {
      return "";
    }
    const fields = ("" + _language).toLowerCase().split("-");
    const base = fields[0];
    const normalizedBase = normalizeBase(base);
    if (isNonEmptyString(normalizedBase)) {
      return normalizedBase;
    }
    return _language;
  }
  function normalizeBase(base) {
    let result;
    switch (base.length) {
      case 2:
        result = ISO_639_1_to_ISO_639_3_default[base];
        break;
      case 3:
        result = ISO_639_2_to_ISO_639_3_default[base];
        break;
    }
    return result;
  }
  function normalizeTextTrack(_language) {
    if (!isNullOrUndefined(_language)) {
      let language;
      let closedCaption = false;
      if (typeof _language === "string") {
        language = _language;
      } else {
        language = _language.language;
        if (_language.closedCaption === true) {
          closedCaption = true;
        }
      }
      return {
        language,
        closedCaption,
        normalized: normalizeLanguage(language)
      };
    }
    return _language;
  }
  function normalizeAudioTrack(_language) {
    if (isNullOrUndefined(_language)) {
      return _language;
    }
    if (typeof _language === "string") {
      return {
        language: _language,
        audioDescription: false,
        normalized: normalizeLanguage(_language)
      };
    }
    const normalized = {
      language: _language.language,
      audioDescription: _language.audioDescription === true,
      normalized: normalizeLanguage(normalizeLanguage(_language.language))
    };
    if (_language.isDub === true) {
      normalized.isDub = true;
    }
    return normalized;
  }
  var normalize_default;
  var init_normalize = __esm({
    "src/utils/languages/normalize.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_is_null_or_undefined();
      init_ISO_639_1_to_ISO_639_3();
      init_ISO_639_2_to_ISO_639_3();
      normalize_default = normalizeLanguage;
    }
  });

  // src/utils/languages/index.ts
  var languages_default;
  var init_languages = __esm({
    "src/utils/languages/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_normalize();
      languages_default = normalize_default;
    }
  });

  // src/utils/uniq.ts
  function uniqFromFilter(arr) {
    return arr.filter((val, i, self2) => self2.indexOf(val) === i);
  }
  function uniqFromSet(arr) {
    return Array.from(new Set(arr));
  }
  var uniq_default;
  var init_uniq = __esm({
    "src/utils/uniq.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      uniq_default = typeof window !== "undefined" && typeof window.Set === "function" && typeof Array.from === "function" ? uniqFromSet : uniqFromFilter;
    }
  });

  // src/manifest/representation.ts
  var Representation, representation_default;
  var init_representation = __esm({
    "src/manifest/representation.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_are_arrays_of_numbers_equal();
      Representation = class {
        constructor(args, opts) {
          this.id = args.id;
          this.bitrate = args.bitrate;
          this.codec = args.codecs;
          if (args.height !== void 0) {
            this.height = args.height;
          }
          if (args.width !== void 0) {
            this.width = args.width;
          }
          if (args.mimeType !== void 0) {
            this.mimeType = args.mimeType;
          }
          if (args.contentProtections !== void 0) {
            this.contentProtections = args.contentProtections;
          }
          if (args.frameRate !== void 0) {
            this.frameRate = args.frameRate;
          }
          if (args.hdrInfo !== void 0) {
            this.hdrInfo = args.hdrInfo;
          }
          this.index = args.index;
          this.isSupported = opts.type === "audio" || opts.type === "video" ? isCodecSupported(this.getMimeTypeString()) : true;
        }
        getMimeTypeString() {
          var _a2, _b2;
          return `${(_a2 = this.mimeType) != null ? _a2 : ""};codecs="${(_b2 = this.codec) != null ? _b2 : ""}"`;
        }
        getEncryptionData(drmSystemId) {
          var _a2, _b2;
          const allInitData = this.getAllEncryptionData();
          const filtered = [];
          for (let i = 0; i < allInitData.length; i++) {
            let createdObjForType = false;
            const initData = allInitData[i];
            for (let j = 0; j < initData.values.length; j++) {
              if (initData.values[j].systemId.toLowerCase() === drmSystemId.toLowerCase()) {
                if (!createdObjForType) {
                  const keyIds = (_b2 = (_a2 = this.contentProtections) == null ? void 0 : _a2.keyIds) == null ? void 0 : _b2.map((val) => val.keyId);
                  filtered.push({
                    type: initData.type,
                    keyIds,
                    values: [initData.values[j]]
                  });
                  createdObjForType = true;
                } else {
                  filtered[filtered.length - 1].values.push(initData.values[j]);
                }
              }
            }
          }
          return filtered;
        }
        getAllEncryptionData() {
          var _a2, _b2;
          if (this.contentProtections === void 0 || this.contentProtections.initData.length === 0) {
            return [];
          }
          const keyIds = (_b2 = (_a2 = this.contentProtections) == null ? void 0 : _a2.keyIds) == null ? void 0 : _b2.map((val) => val.keyId);
          return this.contentProtections.initData.map((x) => {
            return {
              type: x.type,
              keyIds,
              values: x.values
            };
          });
        }
        _addProtectionData(initDataType, data) {
          let hasUpdatedProtectionData = false;
          if (this.contentProtections === void 0) {
            this.contentProtections = {
              keyIds: [],
              initData: [{
                type: initDataType,
                values: data
              }]
            };
            return true;
          }
          const cInitData = this.contentProtections.initData;
          for (let i = 0; i < cInitData.length; i++) {
            if (cInitData[i].type === initDataType) {
              const cValues = cInitData[i].values;
              for (let dataI = 0; dataI < data.length; dataI++) {
                const dataToAdd = data[dataI];
                let cValuesIdx;
                for (cValuesIdx = 0; cValuesIdx < cValues.length; cValuesIdx++) {
                  if (dataToAdd.systemId === cValues[cValuesIdx].systemId) {
                    if (areArraysOfNumbersEqual(dataToAdd.data, cValues[cValuesIdx].data)) {
                      break;
                    } else {
                      log_default.warn("Manifest: different init data for the same system ID");
                    }
                  }
                }
                if (cValuesIdx === cValues.length) {
                  cValues.push(dataToAdd);
                  hasUpdatedProtectionData = true;
                }
              }
              return hasUpdatedProtectionData;
            }
          }
          this.contentProtections.initData.push({
            type: initDataType,
            values: data
          });
          return true;
        }
      };
      representation_default = Representation;
    }
  });

  // src/manifest/adaptation.ts
  var SUPPORTED_ADAPTATIONS_TYPE, Adaptation;
  var init_adaptation = __esm({
    "src/manifest/adaptation.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_array_find();
      init_is_null_or_undefined();
      init_languages();
      init_uniq();
      init_representation();
      SUPPORTED_ADAPTATIONS_TYPE = [
        "audio",
        "video",
        "text",
        "image"
      ];
      Adaptation = class {
        constructor(parsedAdaptation, options = {}) {
          const { trickModeTracks } = parsedAdaptation;
          const { representationFilter, isManuallyAdded } = options;
          this.id = parsedAdaptation.id;
          this.type = parsedAdaptation.type;
          if (parsedAdaptation.isTrickModeTrack !== void 0) {
            this.isTrickModeTrack = parsedAdaptation.isTrickModeTrack;
          }
          if (parsedAdaptation.language !== void 0) {
            this.language = parsedAdaptation.language;
            this.normalizedLanguage = languages_default(parsedAdaptation.language);
          }
          if (parsedAdaptation.closedCaption !== void 0) {
            this.isClosedCaption = parsedAdaptation.closedCaption;
          }
          if (parsedAdaptation.audioDescription !== void 0) {
            this.isAudioDescription = parsedAdaptation.audioDescription;
          }
          if (parsedAdaptation.isDub !== void 0) {
            this.isDub = parsedAdaptation.isDub;
          }
          if (parsedAdaptation.isSignInterpreted !== void 0) {
            this.isSignInterpreted = parsedAdaptation.isSignInterpreted;
          }
          if (trickModeTracks !== void 0 && trickModeTracks.length > 0) {
            this.trickModeTracks = trickModeTracks.map((track) => new Adaptation(track));
          }
          const argsRepresentations = parsedAdaptation.representations;
          const representations = [];
          let isSupported = false;
          for (let i = 0; i < argsRepresentations.length; i++) {
            const representation = new representation_default(argsRepresentations[i], { type: this.type });
            const shouldAdd = isNullOrUndefined(representationFilter) || representationFilter(representation, {
              bufferType: this.type,
              language: this.language,
              normalizedLanguage: this.normalizedLanguage,
              isClosedCaption: this.isClosedCaption,
              isDub: this.isDub,
              isAudioDescription: this.isAudioDescription,
              isSignInterpreted: this.isSignInterpreted
            });
            if (shouldAdd) {
              representations.push(representation);
              if (!isSupported && representation.isSupported) {
                isSupported = true;
              }
            }
          }
          representations.sort((a, b) => a.bitrate - b.bitrate);
          this.representations = representations;
          this.isSupported = isSupported;
          this.manuallyAdded = isManuallyAdded === true;
        }
        getAvailableBitrates() {
          const bitrates = [];
          for (let i = 0; i < this.representations.length; i++) {
            const representation = this.representations[i];
            if (representation.decipherable !== false) {
              bitrates.push(representation.bitrate);
            }
          }
          return uniq_default(bitrates);
        }
        getPlayableRepresentations() {
          return this.representations.filter((rep) => {
            return rep.isSupported && rep.decipherable !== false;
          });
        }
        getRepresentation(wantedId) {
          return arrayFind(this.representations, ({ id }) => wantedId === id);
        }
      };
    }
  });

  // src/utils/id_generator.ts
  function idGenerator() {
    let prefix = "";
    let currId = -1;
    return function generateNewId() {
      currId++;
      if (currId >= Number.MAX_SAFE_INTEGER) {
        prefix += "0";
        currId = 0;
      }
      return prefix + String(currId);
    };
  }
  var init_id_generator = __esm({
    "src/utils/id_generator.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/utils/array_includes.ts
  function arrayIncludes(arr, searchElement, fromIndex) {
    if (typeof Array.prototype.includes === "function") {
      return arr.includes(searchElement, fromIndex);
    }
    const len = arr.length >>> 0;
    if (len === 0) {
      return false;
    }
    const n = fromIndex | 0;
    let k = n >= 0 ? Math.min(n, len - 1) : Math.max(len + n, 0);
    const areTheSame = (x, y) => x === y || typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y);
    while (k < len) {
      if (areTheSame(arr[k], searchElement)) {
        return true;
      }
      k++;
    }
    return false;
  }
  var init_array_includes = __esm({
    "src/utils/array_includes.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/utils/warn_once.ts
  function warnOnce(message) {
    if (!arrayIncludes(WARNED_MESSAGES, message)) {
      console.warn(message);
      WARNED_MESSAGES.push(message);
    }
  }
  var WARNED_MESSAGES;
  var init_warn_once = __esm({
    "src/utils/warn_once.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_array_includes();
      WARNED_MESSAGES = [];
    }
  });

  // src/utils/object_values.ts
  function objectValues(o) {
    return Object.keys(o).map((k) => o[k]);
  }
  var object_values_default;
  var init_object_values = __esm({
    "src/utils/object_values.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      object_values_default = typeof Object.values === "function" ? Object.values : objectValues;
    }
  });

  // src/manifest/period.ts
  var Period;
  var init_period = __esm({
    "src/manifest/period.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_array_find();
      init_object_values();
      init_adaptation();
      Period = class {
        constructor(args, representationFilter) {
          this.contentWarnings = [];
          this.id = args.id;
          this.adaptations = Object.keys(args.adaptations).reduce((acc, type) => {
            const adaptationsForType = args.adaptations[type];
            if (adaptationsForType == null) {
              return acc;
            }
            const filteredAdaptations = adaptationsForType.map((adaptation) => {
              const newAdaptation = new Adaptation(adaptation, { representationFilter });
              if (newAdaptation.representations.length > 0 && !newAdaptation.isSupported) {
                const error = new MediaError("MANIFEST_INCOMPATIBLE_CODECS_ERROR", "An Adaptation contains only incompatible codecs.");
                this.contentWarnings.push(error);
              }
              return newAdaptation;
            }).filter((adaptation) => adaptation.representations.length > 0);
            if (filteredAdaptations.every((adaptation) => !adaptation.isSupported) && adaptationsForType.length > 0 && (type === "video" || type === "audio")) {
              throw new MediaError("MANIFEST_PARSE_ERROR", "No supported " + type + " adaptations");
            }
            if (filteredAdaptations.length > 0) {
              acc[type] = filteredAdaptations;
            }
            return acc;
          }, {});
          if (!Array.isArray(this.adaptations.video) && !Array.isArray(this.adaptations.audio)) {
            throw new MediaError("MANIFEST_PARSE_ERROR", "No supported audio and video tracks.");
          }
          this.duration = args.duration;
          this.start = args.start;
          if (this.duration != null && this.start != null) {
            this.end = this.start + this.duration;
          }
          this.streamEvents = args.streamEvents === void 0 ? [] : args.streamEvents;
        }
        getAdaptations() {
          const adaptationsByType = this.adaptations;
          return object_values_default(adaptationsByType).reduce((acc, adaptations) => adaptations != null ? acc.concat(adaptations) : acc, []);
        }
        getAdaptationsForType(adaptationType) {
          const adaptationsForType = this.adaptations[adaptationType];
          return adaptationsForType == null ? [] : adaptationsForType;
        }
        getAdaptation(wantedId) {
          return arrayFind(this.getAdaptations(), ({ id }) => wantedId === id);
        }
        getSupportedAdaptations(type) {
          if (type === void 0) {
            return this.getAdaptations().filter((ada) => {
              return ada.isSupported;
            });
          }
          const adaptationsForType = this.adaptations[type];
          if (adaptationsForType === void 0) {
            return [];
          }
          return adaptationsForType.filter((ada) => {
            return ada.isSupported;
          });
        }
        containsTime(time) {
          return time >= this.start && (this.end === void 0 || time < this.end);
        }
      };
    }
  });

  // src/manifest/representation_index/static.ts
  var StaticRepresentationIndex;
  var init_static = __esm({
    "src/manifest/representation_index/static.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      StaticRepresentationIndex = class {
        constructor(infos) {
          this._mediaURLs = infos.media;
        }
        getInitSegment() {
          return null;
        }
        getSegments() {
          return [{
            id: "0",
            isInit: false,
            number: 0,
            mediaURLs: [this._mediaURLs],
            time: 0,
            end: Number.MAX_VALUE,
            duration: Number.MAX_VALUE,
            complete: true,
            timescale: 1
          }];
        }
        getFirstPosition() {
          return;
        }
        getLastPosition() {
          return;
        }
        shouldRefresh() {
          return false;
        }
        checkDiscontinuity() {
          return null;
        }
        areSegmentsChronologicallyGenerated() {
          return true;
        }
        isSegmentStillAvailable() {
          return true;
        }
        canBeOutOfSyncError() {
          return false;
        }
        isFinished() {
          return true;
        }
        isInitialized() {
          return true;
        }
        _replace() {
          log_default.warn("Tried to replace a static RepresentationIndex");
        }
        _update() {
          log_default.warn("Tried to update a static RepresentationIndex");
        }
      };
    }
  });

  // src/manifest/representation_index/index.ts
  var init_representation_index = __esm({
    "src/manifest/representation_index/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_static();
    }
  });

  // src/manifest/types.ts
  var init_types2 = __esm({
    "src/manifest/types.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/utils/array_find_index.ts
  function arrayFindIndex(arr, predicate, thisArg) {
    if (typeof Array.prototype.findIndex === "function") {
      return arr.findIndex(predicate, thisArg);
    }
    const len = arr.length >>> 0;
    for (let i = 0; i < len; i++) {
      if (predicate.call(thisArg, arr[i], i, arr)) {
        return i;
      }
    }
    return -1;
  }
  var init_array_find_index = __esm({
    "src/utils/array_find_index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/manifest/update_period_in_place.ts
  function updatePeriodInPlace(oldPeriod, newPeriod, updateType) {
    oldPeriod.start = newPeriod.start;
    oldPeriod.end = newPeriod.end;
    oldPeriod.duration = newPeriod.duration;
    oldPeriod.streamEvents = newPeriod.streamEvents;
    const oldAdaptations = oldPeriod.getAdaptations();
    const newAdaptations = newPeriod.getAdaptations();
    for (let j = 0; j < oldAdaptations.length; j++) {
      const oldAdaptation = oldAdaptations[j];
      const newAdaptation = arrayFind(newAdaptations, (a) => a.id === oldAdaptation.id);
      if (newAdaptation === void 0) {
        log_default.warn('Manifest: Adaptation "' + oldAdaptations[j].id + '" not found when merging.');
      } else {
        const oldRepresentations = oldAdaptations[j].representations;
        const newRepresentations = newAdaptation.representations;
        for (let k = 0; k < oldRepresentations.length; k++) {
          const oldRepresentation = oldRepresentations[k];
          const newRepresentation = arrayFind(newRepresentations, (representation) => representation.id === oldRepresentation.id);
          if (newRepresentation === void 0) {
            log_default.warn(`Manifest: Representation "${oldRepresentations[k].id}" not found when merging.`);
          } else {
            if (updateType === 0 /* Full */) {
              oldRepresentation.index._replace(newRepresentation.index);
            } else {
              oldRepresentation.index._update(newRepresentation.index);
            }
          }
        }
      }
    }
  }
  var init_update_period_in_place = __esm({
    "src/manifest/update_period_in_place.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_array_find();
    }
  });

  // src/manifest/update_periods.ts
  function replacePeriods(oldPeriods, newPeriods) {
    let firstUnhandledPeriodIdx = 0;
    for (let i = 0; i < newPeriods.length; i++) {
      const newPeriod = newPeriods[i];
      let j = firstUnhandledPeriodIdx;
      let oldPeriod = oldPeriods[j];
      while (oldPeriod != null && oldPeriod.id !== newPeriod.id) {
        j++;
        oldPeriod = oldPeriods[j];
      }
      if (oldPeriod != null) {
        updatePeriodInPlace(oldPeriod, newPeriod, 0 /* Full */);
        const periodsToInclude = newPeriods.slice(firstUnhandledPeriodIdx, i);
        const nbrOfPeriodsToRemove = j - firstUnhandledPeriodIdx;
        oldPeriods.splice(firstUnhandledPeriodIdx, nbrOfPeriodsToRemove, ...periodsToInclude);
        firstUnhandledPeriodIdx = i + 1;
      }
    }
    if (firstUnhandledPeriodIdx > oldPeriods.length) {
      log_default.error("Manifest: error when updating Periods");
      return;
    }
    if (firstUnhandledPeriodIdx < oldPeriods.length) {
      oldPeriods.splice(firstUnhandledPeriodIdx, oldPeriods.length - firstUnhandledPeriodIdx);
    }
    const remainingNewPeriods = newPeriods.slice(firstUnhandledPeriodIdx, newPeriods.length);
    if (remainingNewPeriods.length > 0) {
      oldPeriods.push(...remainingNewPeriods);
    }
  }
  function updatePeriods(oldPeriods, newPeriods) {
    if (oldPeriods.length === 0) {
      oldPeriods.splice(0, 0, ...newPeriods);
      return;
    }
    if (newPeriods.length === 0) {
      return;
    }
    const oldLastPeriod = oldPeriods[oldPeriods.length - 1];
    if (oldLastPeriod.start < newPeriods[0].start) {
      if (oldLastPeriod.end !== newPeriods[0].start) {
        throw new MediaError("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: not enough data");
      }
      oldPeriods.push(...newPeriods);
      return;
    }
    const indexOfNewFirstPeriod = arrayFindIndex(oldPeriods, ({ id }) => id === newPeriods[0].id);
    if (indexOfNewFirstPeriod < 0) {
      throw new MediaError("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: incoherent data");
    }
    updatePeriodInPlace(oldPeriods[indexOfNewFirstPeriod], newPeriods[0], 1 /* Partial */);
    let prevIndexOfNewPeriod = indexOfNewFirstPeriod + 1;
    for (let i = 1; i < newPeriods.length; i++) {
      const newPeriod = newPeriods[i];
      let indexOfNewPeriod = -1;
      for (let j = prevIndexOfNewPeriod; j < oldPeriods.length; j++) {
        if (newPeriod.id === oldPeriods[j].id) {
          indexOfNewPeriod = j;
          break;
        }
      }
      if (indexOfNewPeriod < 0) {
        oldPeriods.splice(prevIndexOfNewPeriod, oldPeriods.length - prevIndexOfNewPeriod, ...newPeriods.slice(i, newPeriods.length));
        return;
      }
      if (indexOfNewPeriod > prevIndexOfNewPeriod) {
        oldPeriods.splice(prevIndexOfNewPeriod, indexOfNewPeriod - prevIndexOfNewPeriod);
        indexOfNewPeriod = prevIndexOfNewPeriod;
      }
      updatePeriodInPlace(oldPeriods[indexOfNewPeriod], newPeriod, 0 /* Full */);
      prevIndexOfNewPeriod++;
    }
    if (prevIndexOfNewPeriod < oldPeriods.length) {
      oldPeriods.splice(prevIndexOfNewPeriod, oldPeriods.length - prevIndexOfNewPeriod);
    }
  }
  var init_update_periods = __esm({
    "src/manifest/update_periods.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_log();
      init_array_find_index();
      init_update_period_in_place();
    }
  });

  // src/manifest/manifest.ts
  function updateDeciperability(manifest, isDecipherable) {
    const updates = [];
    for (const period of manifest.periods) {
      for (const adaptation of period.getAdaptations()) {
        for (const representation of adaptation.representations) {
          const result = isDecipherable(representation);
          if (result !== representation.decipherable) {
            updates.push({ manifest, period, adaptation, representation });
            representation.decipherable = result;
          }
        }
      }
    }
    return updates;
  }
  var generateSupplementaryTrackID, generateNewManifestId, Manifest;
  var init_manifest = __esm({
    "src/manifest/manifest.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_array_find();
      init_event_emitter();
      init_id_generator();
      init_warn_once();
      init_adaptation();
      init_period();
      init_representation_index();
      init_update_periods();
      generateSupplementaryTrackID = idGenerator();
      generateNewManifestId = idGenerator();
      Manifest = class extends EventEmitter {
        constructor(parsedManifest, options) {
          super();
          var _a2;
          const {
            supplementaryTextTracks = [],
            supplementaryImageTracks = [],
            representationFilter,
            manifestUpdateUrl
          } = options;
          this.contentWarnings = [];
          this.id = generateNewManifestId();
          this.expired = (_a2 = parsedManifest.expired) != null ? _a2 : null;
          this.transport = parsedManifest.transportType;
          this.clockOffset = parsedManifest.clockOffset;
          this.periods = parsedManifest.periods.map((parsedPeriod) => {
            const period = new Period(parsedPeriod, representationFilter);
            this.contentWarnings.push(...period.contentWarnings);
            return period;
          }).sort((a, b) => a.start - b.start);
          this.adaptations = this.periods[0] === void 0 ? {} : this.periods[0].adaptations;
          this._timeBounds = parsedManifest.timeBounds;
          this.isDynamic = parsedManifest.isDynamic;
          this.isLive = parsedManifest.isLive;
          this.isLastPeriodKnown = parsedManifest.isLastPeriodKnown;
          this.uris = parsedManifest.uris === void 0 ? [] : parsedManifest.uris;
          this.updateUrl = manifestUpdateUrl;
          this.lifetime = parsedManifest.lifetime;
          this.suggestedPresentationDelay = parsedManifest.suggestedPresentationDelay;
          this.availabilityStartTime = parsedManifest.availabilityStartTime;
          this.publishTime = parsedManifest.publishTime;
          if (supplementaryImageTracks.length > 0) {
            this._addSupplementaryImageAdaptations(supplementaryImageTracks);
          }
          if (supplementaryTextTracks.length > 0) {
            this._addSupplementaryTextAdaptations(supplementaryTextTracks);
          }
        }
        getPeriod(id) {
          return arrayFind(this.periods, (period) => {
            return id === period.id;
          });
        }
        getPeriodForTime(time) {
          return arrayFind(this.periods, (period) => {
            return time >= period.start && (period.end === void 0 || period.end > time);
          });
        }
        getNextPeriod(time) {
          return arrayFind(this.periods, (period) => {
            return period.start > time;
          });
        }
        getPeriodAfter(period) {
          const endOfPeriod = period.end;
          if (endOfPeriod === void 0) {
            return null;
          }
          const nextPeriod = arrayFind(this.periods, (_period) => {
            return _period.end === void 0 || endOfPeriod < _period.end;
          });
          return nextPeriod === void 0 ? null : nextPeriod;
        }
        getUrl() {
          return this.uris[0];
        }
        replace(newManifest) {
          this._performUpdate(newManifest, 0 /* Full */);
        }
        update(newManifest) {
          this._performUpdate(newManifest, 1 /* Partial */);
        }
        getMinimumSafePosition() {
          var _a2, _b2;
          const windowData = this._timeBounds;
          if (windowData.timeshiftDepth === null) {
            return (_a2 = windowData.minimumSafePosition) != null ? _a2 : 0;
          }
          const { maximumTimeData } = windowData;
          let maximumTime;
          if (!windowData.maximumTimeData.isLinear) {
            maximumTime = maximumTimeData.maximumSafePosition;
          } else {
            const timeDiff = performance.now() - maximumTimeData.time;
            maximumTime = maximumTimeData.maximumSafePosition + timeDiff / 1e3;
          }
          const theoricalMinimum = maximumTime - windowData.timeshiftDepth;
          return Math.max((_b2 = windowData.minimumSafePosition) != null ? _b2 : 0, theoricalMinimum);
        }
        getLivePosition() {
          const { maximumTimeData } = this._timeBounds;
          if (!this.isLive || maximumTimeData.livePosition === void 0) {
            return void 0;
          }
          if (!maximumTimeData.isLinear) {
            return maximumTimeData.livePosition;
          }
          const timeDiff = performance.now() - maximumTimeData.time;
          return maximumTimeData.livePosition + timeDiff / 1e3;
        }
        getMaximumSafePosition() {
          const { maximumTimeData } = this._timeBounds;
          if (!maximumTimeData.isLinear) {
            return maximumTimeData.maximumSafePosition;
          }
          const timeDiff = performance.now() - maximumTimeData.time;
          return maximumTimeData.maximumSafePosition + timeDiff / 1e3;
        }
        updateRepresentationsDeciperability(isDecipherableCb) {
          const updates = updateDeciperability(this, isDecipherableCb);
          if (updates.length > 0) {
            this.trigger("decipherabilityUpdate", updates);
          }
        }
        getAdaptations() {
          warnOnce("manifest.getAdaptations() is deprecated. Please use manifest.period[].getAdaptations() instead");
          const firstPeriod = this.periods[0];
          if (firstPeriod === void 0) {
            return [];
          }
          const adaptationsByType = firstPeriod.adaptations;
          const adaptationsList = [];
          for (const adaptationType in adaptationsByType) {
            if (adaptationsByType.hasOwnProperty(adaptationType)) {
              const adaptations = adaptationsByType[adaptationType];
              adaptationsList.push(...adaptations);
            }
          }
          return adaptationsList;
        }
        getAdaptationsForType(adaptationType) {
          warnOnce("manifest.getAdaptationsForType(type) is deprecated. Please use manifest.period[].getAdaptationsForType(type) instead");
          const firstPeriod = this.periods[0];
          if (firstPeriod === void 0) {
            return [];
          }
          const adaptationsForType = firstPeriod.adaptations[adaptationType];
          return adaptationsForType === void 0 ? [] : adaptationsForType;
        }
        getAdaptation(wantedId) {
          warnOnce("manifest.getAdaptation(id) is deprecated. Please use manifest.period[].getAdaptation(id) instead");
          return arrayFind(this.getAdaptations(), ({ id }) => wantedId === id);
        }
        _addSupplementaryImageAdaptations(imageTracks) {
          const _imageTracks = Array.isArray(imageTracks) ? imageTracks : [imageTracks];
          const newImageTracks = _imageTracks.map(({ mimeType, url }) => {
            const adaptationID = "gen-image-ada-" + generateSupplementaryTrackID();
            const representationID = "gen-image-rep-" + generateSupplementaryTrackID();
            const newAdaptation = new Adaptation({
              id: adaptationID,
              type: "image",
              representations: [{
                bitrate: 0,
                id: representationID,
                mimeType,
                index: new StaticRepresentationIndex({
                  media: url
                })
              }]
            }, { isManuallyAdded: true });
            if (newAdaptation.representations.length > 0 && !newAdaptation.isSupported) {
              const error = new MediaError("MANIFEST_INCOMPATIBLE_CODECS_ERROR", "An Adaptation contains only incompatible codecs.");
              this.contentWarnings.push(error);
            }
            return newAdaptation;
          });
          if (newImageTracks.length > 0 && this.periods.length > 0) {
            const { adaptations } = this.periods[0];
            adaptations.image = adaptations.image != null ? adaptations.image.concat(newImageTracks) : newImageTracks;
          }
        }
        _addSupplementaryTextAdaptations(textTracks) {
          const _textTracks = Array.isArray(textTracks) ? textTracks : [textTracks];
          const newTextAdaptations = _textTracks.reduce((allSubs, {
            mimeType,
            codecs,
            url,
            language,
            languages,
            closedCaption
          }) => {
            const langsToMapOn = language != null ? [language] : languages != null ? languages : [];
            return allSubs.concat(langsToMapOn.map((_language) => {
              const adaptationID = "gen-text-ada-" + generateSupplementaryTrackID();
              const representationID = "gen-text-rep-" + generateSupplementaryTrackID();
              const newAdaptation = new Adaptation({
                id: adaptationID,
                type: "text",
                language: _language,
                closedCaption,
                representations: [{
                  bitrate: 0,
                  id: representationID,
                  mimeType,
                  codecs,
                  index: new StaticRepresentationIndex({
                    media: url
                  })
                }]
              }, { isManuallyAdded: true });
              if (newAdaptation.representations.length > 0 && !newAdaptation.isSupported) {
                const error = new MediaError("MANIFEST_INCOMPATIBLE_CODECS_ERROR", "An Adaptation contains only incompatible codecs.");
                this.contentWarnings.push(error);
              }
              return newAdaptation;
            }));
          }, []);
          if (newTextAdaptations.length > 0 && this.periods.length > 0) {
            const { adaptations } = this.periods[0];
            adaptations.text = adaptations.text != null ? adaptations.text.concat(newTextAdaptations) : newTextAdaptations;
          }
        }
        _performUpdate(newManifest, updateType) {
          this.availabilityStartTime = newManifest.availabilityStartTime;
          this.expired = newManifest.expired;
          this.isDynamic = newManifest.isDynamic;
          this.isLive = newManifest.isLive;
          this.isLastPeriodKnown = newManifest.isLastPeriodKnown;
          this.lifetime = newManifest.lifetime;
          this.contentWarnings = newManifest.contentWarnings;
          this.suggestedPresentationDelay = newManifest.suggestedPresentationDelay;
          this.transport = newManifest.transport;
          this.publishTime = newManifest.publishTime;
          if (updateType === 0 /* Full */) {
            this._timeBounds = newManifest._timeBounds;
            this.uris = newManifest.uris;
            replacePeriods(this.periods, newManifest.periods);
          } else {
            this._timeBounds.maximumTimeData = newManifest._timeBounds.maximumTimeData;
            this.updateUrl = newManifest.uris[0];
            updatePeriods(this.periods, newManifest.periods);
            const min = this.getMinimumSafePosition();
            while (this.periods.length > 0) {
              const period = this.periods[0];
              if (period.end === void 0 || period.end > min) {
                break;
              }
              this.periods.shift();
            }
          }
          this.adaptations = this.periods[0] === void 0 ? {} : this.periods[0].adaptations;
          this.trigger("manifestUpdate", null);
        }
      };
    }
  });

  // src/manifest/utils.ts
  function areSameContent(content1, content2) {
    return content1.segment.id === content2.segment.id && content1.representation.id === content2.representation.id && content1.adaptation.id === content2.adaptation.id && content1.period.id === content2.period.id;
  }
  function getLoggableSegmentId(content) {
    if (isNullOrUndefined(content)) {
      return "";
    }
    const { period, adaptation, representation, segment } = content;
    return `${adaptation.type} P: ${period.id} A: ${adaptation.id} R: ${representation.id} S: ` + (segment.isInit ? "init" : segment.complete ? `${segment.time}-${segment.duration}` : `${segment.time}`);
  }
  var init_utils2 = __esm({
    "src/manifest/utils.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_null_or_undefined();
    }
  });

  // src/manifest/index.ts
  var manifest_default;
  var init_manifest2 = __esm({
    "src/manifest/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_adaptation();
      init_manifest();
      init_representation_index();
      init_utils2();
      init_types2();
      manifest_default = Manifest;
    }
  });

  // src/utils/reference.ts
  function createSharedReference(initialValue) {
    let value = initialValue;
    const cbs = [];
    let isFinished = false;
    return {
      getValue() {
        return value;
      },
      setValue(newVal) {
        if (isFinished) {
          if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
            throw new Error("Finished shared references cannot be updated");
          } else {
            return;
          }
        }
        value = newVal;
        if (cbs.length === 0) {
          return;
        }
        const clonedCbs = cbs.slice();
        for (const cbObj of clonedCbs) {
          try {
            if (!cbObj.hasBeenCleared) {
              cbObj.trigger(newVal);
            }
          } catch (_) {
          }
        }
      },
      setValueIfChanged(newVal) {
        if (newVal !== value) {
          this.setValue(newVal);
        }
      },
      asObservable(skipCurrentValue) {
        return new Observable((obs) => {
          if (skipCurrentValue !== true) {
            obs.next(value);
          }
          if (isFinished) {
            obs.complete();
            return void 0;
          }
          const cbObj = {
            trigger: obs.next.bind(obs),
            complete: obs.complete.bind(obs),
            hasBeenCleared: false
          };
          cbs.push(cbObj);
          return () => {
            cbObj.hasBeenCleared = true;
            const indexOf = cbs.indexOf(cbObj);
            if (indexOf >= 0) {
              cbs.splice(indexOf, 1);
            }
          };
        });
      },
      onUpdate(cb, options) {
        if ((options == null ? void 0 : options.emitCurrentValue) === true) {
          cb(value);
        }
        if (isFinished) {
          return;
        }
        const cbObj = {
          trigger: cb,
          complete: unlisten,
          hasBeenCleared: false
        };
        cbs.push(cbObj);
        if ((options == null ? void 0 : options.clearSignal) === void 0) {
          return;
        }
        options.clearSignal.register(unlisten);
        function unlisten() {
          cbObj.hasBeenCleared = true;
          const indexOf = cbs.indexOf(cbObj);
          if (indexOf >= 0) {
            cbs.splice(indexOf, 1);
          }
        }
      },
      finish() {
        isFinished = true;
        const clonedCbs = cbs.slice();
        for (const cbObj of clonedCbs) {
          try {
            if (!cbObj.hasBeenCleared) {
              cbObj.complete();
            }
          } catch (_) {
          }
        }
      }
    };
  }
  var reference_default;
  var init_reference = __esm({
    "src/utils/reference.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      reference_default = createSharedReference;
    }
  });

  // src/core/decrypt/utils/media_keys_infos_store.ts
  var currentMediaState, media_keys_infos_store_default;
  var init_media_keys_infos_store = __esm({
    "src/core/decrypt/utils/media_keys_infos_store.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      currentMediaState = /* @__PURE__ */ new WeakMap();
      media_keys_infos_store_default = {
        setState(mediaElement, state) {
          currentMediaState.set(mediaElement, state);
        },
        getState(mediaElement) {
          const currentState = currentMediaState.get(mediaElement);
          return currentState === void 0 ? null : currentState;
        },
        clearState(mediaElement) {
          currentMediaState.set(mediaElement, null);
        }
      };
    }
  });

  // src/core/decrypt/dispose_decryption_resources.ts
  async function disposeDecryptionResources(mediaElement) {
    const currentState = media_keys_infos_store_default.getState(mediaElement);
    if (currentState === null) {
      return;
    }
    log_default.info("DRM: Disposing of the current MediaKeys");
    const { loadedSessionsStore } = currentState;
    media_keys_infos_store_default.clearState(mediaElement);
    await loadedSessionsStore.closeAllSessions();
    setMediaKeys(mediaElement, null);
  }
  var init_dispose_decryption_resources = __esm({
    "src/core/decrypt/dispose_decryption_resources.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_media_keys_infos_store();
    }
  });

  // src/core/decrypt/clear_on_stop.ts
  function clearOnStop(mediaElement) {
    log_default.info("DRM: Clearing-up DRM session.");
    if (shouldUnsetMediaKeys()) {
      log_default.info("DRM: disposing current MediaKeys.");
      return disposeDecryptionResources(mediaElement);
    }
    const currentState = media_keys_infos_store_default.getState(mediaElement);
    if (currentState !== null && currentState.keySystemOptions.closeSessionsOnStop === true) {
      log_default.info("DRM: closing all current sessions.");
      return currentState.loadedSessionsStore.closeAllSessions();
    }
    log_default.info("DRM: Nothing to clear. Returning right away. No state =", currentState === null);
    return Promise.resolve();
  }
  var init_clear_on_stop = __esm({
    "src/core/decrypt/clear_on_stop.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_dispose_decryption_resources();
      init_media_keys_infos_store();
    }
  });

  // src/core/decrypt/attach_media_keys.ts
  function disableMediaKeys(mediaElement) {
    media_keys_infos_store_default.setState(mediaElement, null);
    setMediaKeys(mediaElement, null);
  }
  async function attachMediaKeys(mediaElement, {
    keySystemOptions,
    loadedSessionsStore,
    mediaKeySystemAccess,
    mediaKeys
  }, cancelSignal) {
    const previousState = media_keys_infos_store_default.getState(mediaElement);
    const closeAllSessions = previousState !== null && previousState.loadedSessionsStore !== loadedSessionsStore ? previousState.loadedSessionsStore.closeAllSessions() : Promise.resolve();
    await closeAllSessions;
    if (cancelSignal.isCancelled) {
      throw cancelSignal.cancellationError;
    }
    media_keys_infos_store_default.setState(mediaElement, {
      keySystemOptions,
      mediaKeySystemAccess,
      mediaKeys,
      loadedSessionsStore
    });
    if (mediaElement.mediaKeys === mediaKeys) {
      return;
    }
    log_default.info("DRM: Attaching MediaKeys to the media element");
    setMediaKeys(mediaElement, mediaKeys);
    log_default.info("DRM: MediaKeys attached with success");
  }
  var init_attach_media_keys = __esm({
    "src/core/decrypt/attach_media_keys.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_media_keys_infos_store();
    }
  });

  // src/core/decrypt/types.ts
  var MediaKeySessionLoadingType;
  var init_types3 = __esm({
    "src/core/decrypt/types.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      MediaKeySessionLoadingType = /* @__PURE__ */ ((MediaKeySessionLoadingType2) => {
        MediaKeySessionLoadingType2["Created"] = "created-session";
        MediaKeySessionLoadingType2["LoadedOpenSession"] = "loaded-open-session";
        MediaKeySessionLoadingType2["LoadedPersistentSession"] = "loaded-persistent-session";
        return MediaKeySessionLoadingType2;
      })(MediaKeySessionLoadingType || {});
    }
  });

  // src/core/decrypt/utils/is_session_usable.ts
  function isSessionUsable(loadedSession) {
    if (loadedSession.sessionId === "") {
      return false;
    }
    const keyStatusesMap = loadedSession.keyStatuses;
    const keyStatuses = [];
    keyStatusesMap.forEach((keyStatus) => {
      keyStatuses.push(keyStatus);
    });
    if (keyStatuses.length <= 0) {
      log_default.debug("DRM: isSessionUsable: MediaKeySession given has an empty keyStatuses", loadedSession.sessionId);
      return false;
    }
    if (arrayIncludes(keyStatuses, "expired")) {
      log_default.debug("DRM: isSessionUsable: MediaKeySession given has an expired key", loadedSession.sessionId);
      return false;
    }
    if (arrayIncludes(keyStatuses, "internal-error")) {
      log_default.debug("DRM: isSessionUsable: MediaKeySession given has a key with an internal-error", loadedSession.sessionId);
      return false;
    }
    log_default.debug("DRM: isSessionUsable: MediaKeySession is usable", loadedSession.sessionId);
    return true;
  }
  var init_is_session_usable = __esm({
    "src/core/decrypt/utils/is_session_usable.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_array_includes();
    }
  });

  // src/core/decrypt/create_session.ts
  function createSession(stores, initData, wantedSessionType, cancelSignal) {
    const {
      loadedSessionsStore,
      persistentSessionsStore
    } = stores;
    if (wantedSessionType === "temporary") {
      return createTemporarySession(loadedSessionsStore, initData);
    } else if (persistentSessionsStore === null) {
      log_default.warn("DRM: Cannot create persistent MediaKeySession, PersistentSessionsStore not created.");
      return createTemporarySession(loadedSessionsStore, initData);
    }
    return createAndTryToRetrievePersistentSession(loadedSessionsStore, persistentSessionsStore, initData, cancelSignal);
  }
  function createTemporarySession(loadedSessionsStore, initData) {
    log_default.info("DRM: Creating a new temporary session");
    const entry = loadedSessionsStore.createSession(initData, "temporary");
    return Promise.resolve({
      type: "created-session" /* Created */,
      value: entry
    });
  }
  async function createAndTryToRetrievePersistentSession(loadedSessionsStore, persistentSessionsStore, initData, cancelSignal) {
    if (cancelSignal.cancellationError !== null) {
      throw cancelSignal.cancellationError;
    }
    log_default.info("DRM: Creating persistent MediaKeySession");
    const entry = loadedSessionsStore.createSession(initData, "persistent-license");
    const storedEntry = persistentSessionsStore.getAndReuse(initData);
    if (storedEntry === null) {
      return {
        type: "created-session" /* Created */,
        value: entry
      };
    }
    try {
      const hasLoadedSession = await loadedSessionsStore.loadPersistentSession(entry.mediaKeySession, storedEntry.sessionId);
      if (!hasLoadedSession) {
        log_default.warn("DRM: No data stored for the loaded session");
        persistentSessionsStore.delete(storedEntry.sessionId);
        return {
          type: "created-session" /* Created */,
          value: entry
        };
      }
      if (hasLoadedSession && isSessionUsable(entry.mediaKeySession)) {
        persistentSessionsStore.add(initData, initData.keyIds, entry.mediaKeySession);
        log_default.info("DRM: Succeeded to load persistent session.");
        return {
          type: "loaded-persistent-session" /* LoadedPersistentSession */,
          value: entry
        };
      }
      log_default.warn("DRM: Previous persistent session not usable anymore.");
      return recreatePersistentSession();
    } catch (err) {
      log_default.warn("DRM: Unable to load persistent session: " + (err instanceof Error ? err.toString() : "Unknown Error"));
      return recreatePersistentSession();
    }
    async function recreatePersistentSession() {
      if (cancelSignal.cancellationError !== null) {
        throw cancelSignal.cancellationError;
      }
      log_default.info("DRM: Removing previous persistent session.");
      const persistentEntry = persistentSessionsStore.get(initData);
      if (persistentEntry !== null) {
        persistentSessionsStore.delete(persistentEntry.sessionId);
      }
      await loadedSessionsStore.closeSession(entry.mediaKeySession);
      if (cancelSignal.cancellationError !== null) {
        throw cancelSignal.cancellationError;
      }
      const newEntry = loadedSessionsStore.createSession(initData, "persistent-license");
      return {
        type: "created-session" /* Created */,
        value: newEntry
      };
    }
  }
  var init_create_session = __esm({
    "src/core/decrypt/create_session.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_is_session_usable();
    }
  });

  // src/core/decrypt/utils/clean_old_loaded_sessions.ts
  async function cleanOldLoadedSessions(loadedSessionsStore, limit) {
    if (limit < 0 || limit >= loadedSessionsStore.getLength()) {
      return;
    }
    const proms = [];
    const entries = loadedSessionsStore.getAll().slice();
    const toDelete = entries.length - limit;
    for (let i = 0; i < toDelete; i++) {
      const entry = entries[i];
      proms.push(loadedSessionsStore.closeSession(entry.mediaKeySession));
    }
    await Promise.all(proms);
  }
  var init_clean_old_loaded_sessions = __esm({
    "src/core/decrypt/utils/clean_old_loaded_sessions.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/core/decrypt/create_or_load_session.ts
  async function createOrLoadSession(initializationData, stores, wantedSessionType, maxSessionCacheSize, cancelSignal) {
    let previousLoadedSession = null;
    const { loadedSessionsStore, persistentSessionsStore } = stores;
    const entry = loadedSessionsStore.reuse(initializationData);
    if (entry !== null) {
      previousLoadedSession = entry.mediaKeySession;
      if (isSessionUsable(previousLoadedSession)) {
        log_default.info("DRM: Reuse loaded session", previousLoadedSession.sessionId);
        return {
          type: "loaded-open-session" /* LoadedOpenSession */,
          value: {
            mediaKeySession: previousLoadedSession,
            sessionType: entry.sessionType,
            keySessionRecord: entry.keySessionRecord
          }
        };
      } else if (persistentSessionsStore !== null) {
        if (entry.mediaKeySession.sessionId !== "") {
          persistentSessionsStore.delete(entry.mediaKeySession.sessionId);
        }
      }
    }
    if (previousLoadedSession !== null) {
      await loadedSessionsStore.closeSession(previousLoadedSession);
      if (cancelSignal.cancellationError !== null) {
        throw cancelSignal.cancellationError;
      }
    }
    await cleanOldLoadedSessions(loadedSessionsStore, maxSessionCacheSize);
    if (cancelSignal.cancellationError !== null) {
      throw cancelSignal.cancellationError;
    }
    const evt = await createSession(stores, initializationData, wantedSessionType, cancelSignal);
    return {
      type: evt.type,
      value: {
        mediaKeySession: evt.value.mediaKeySession,
        sessionType: evt.value.sessionType,
        keySessionRecord: evt.value.keySessionRecord
      }
    };
  }
  var init_create_or_load_session = __esm({
    "src/core/decrypt/create_or_load_session.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_create_session();
      init_clean_old_loaded_sessions();
      init_is_session_usable();
    }
  });

  // src/utils/flat_map.ts
  function flatMap(originalArray, fn) {
    if (typeof Array.prototype.flatMap === "function") {
      return originalArray.flatMap(fn);
    }
    return originalArray.reduce((acc, arg) => {
      const r = fn(arg);
      if (Array.isArray(r)) {
        acc.push(...r);
        return acc;
      }
      acc.push(r);
      return acc;
    }, []);
  }
  var init_flat_map = __esm({
    "src/utils/flat_map.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/core/decrypt/find_key_system.ts
  function checkCachedMediaKeySystemAccess(keySystems, currentKeySystemAccess, currentKeySystemOptions) {
    const mksConfiguration = currentKeySystemAccess.getConfiguration();
    if (shouldRenewMediaKeys() || mksConfiguration == null) {
      return null;
    }
    const firstCompatibleOption = keySystems.filter((ks) => {
      if (ks.type !== currentKeySystemOptions.type) {
        return false;
      }
      if ((ks.persistentLicense === true || ks.persistentStateRequired === true) && mksConfiguration.persistentState !== "required") {
        return false;
      }
      if (ks.distinctiveIdentifierRequired === true && mksConfiguration.distinctiveIdentifier !== "required") {
        return false;
      }
      return true;
    })[0];
    if (firstCompatibleOption != null) {
      return {
        keySystemOptions: firstCompatibleOption,
        keySystemAccess: currentKeySystemAccess
      };
    }
    return null;
  }
  function findKeySystemCanonicalName(ksType) {
    const { EME_KEY_SYSTEMS } = config_default.getCurrent();
    for (const ksName of Object.keys(EME_KEY_SYSTEMS)) {
      if (arrayIncludes(EME_KEY_SYSTEMS[ksName], ksType)) {
        return ksName;
      }
    }
    return void 0;
  }
  function buildKeySystemConfigurations(ksName, keySystem) {
    const sessionTypes = ["temporary"];
    let persistentState = "optional";
    let distinctiveIdentifier = "optional";
    if (keySystem.persistentLicense === true) {
      persistentState = "required";
      sessionTypes.push("persistent-license");
    }
    if (keySystem.persistentStateRequired === true) {
      persistentState = "required";
    }
    if (keySystem.distinctiveIdentifierRequired === true) {
      distinctiveIdentifier = "required";
    }
    const { EME_DEFAULT_WIDEVINE_ROBUSTNESSES } = config_default.getCurrent();
    const videoRobustnesses = keySystem.videoRobustnesses != null ? keySystem.videoRobustnesses : ksName === "widevine" ? EME_DEFAULT_WIDEVINE_ROBUSTNESSES : [];
    const audioRobustnesses = keySystem.audioRobustnesses != null ? keySystem.audioRobustnesses : ksName === "widevine" ? EME_DEFAULT_WIDEVINE_ROBUSTNESSES : [];
    if (videoRobustnesses.length === 0) {
      videoRobustnesses.push(void 0);
    }
    if (audioRobustnesses.length === 0) {
      audioRobustnesses.push(void 0);
    }
    const videoCapabilities = flatMap(audioRobustnesses, (robustness) => [
      'video/mp4;codecs="avc1.4d401e"',
      'video/mp4;codecs="avc1.42e01e"',
      'video/webm;codecs="vp8"'
    ].map((contentType) => {
      return robustness !== void 0 ? { contentType, robustness } : { contentType };
    }));
    const audioCapabilities = flatMap(audioRobustnesses, (robustness) => [
      'audio/mp4;codecs="mp4a.40.2"',
      "audio/webm;codecs=opus"
    ].map((contentType) => {
      return robustness !== void 0 ? { contentType, robustness } : { contentType };
    }));
    return [{
      initDataTypes: ["cenc"],
      videoCapabilities,
      audioCapabilities,
      distinctiveIdentifier,
      persistentState,
      sessionTypes
    }];
  }
  function getMediaKeySystemAccess(mediaElement, keySystemsConfigs, cancelSignal) {
    log_default.info("DRM: Searching for compatible MediaKeySystemAccess");
    const currentState = media_keys_infos_store_default.getState(mediaElement);
    if (currentState != null) {
      const cachedKeySystemAccess = checkCachedMediaKeySystemAccess(keySystemsConfigs, currentState.mediaKeySystemAccess, currentState.keySystemOptions);
      if (cachedKeySystemAccess !== null) {
        log_default.info("DRM: Found cached compatible keySystem");
        return Promise.resolve({
          type: "reuse-media-key-system-access",
          value: {
            mediaKeySystemAccess: cachedKeySystemAccess.keySystemAccess,
            options: cachedKeySystemAccess.keySystemOptions
          }
        });
      }
    }
    const keySystemsType = keySystemsConfigs.reduce((arr, keySystemOptions) => {
      const { EME_KEY_SYSTEMS } = config_default.getCurrent();
      const managedRDNs = EME_KEY_SYSTEMS[keySystemOptions.type];
      let ksType;
      if (managedRDNs != null) {
        ksType = managedRDNs.map((keyType) => {
          const keyName = keySystemOptions.type;
          return { keyName, keyType, keySystemOptions };
        });
      } else {
        const keyName = findKeySystemCanonicalName(keySystemOptions.type);
        const keyType = keySystemOptions.type;
        ksType = [{ keyName, keyType, keySystemOptions }];
      }
      return arr.concat(ksType);
    }, []);
    return recursivelyTestKeySystems(0);
    async function recursivelyTestKeySystems(index) {
      if (index >= keySystemsType.length) {
        throw new EncryptedMediaError("INCOMPATIBLE_KEYSYSTEMS", "No key system compatible with your wanted configuration has been found in the current browser.");
      }
      if (requestMediaKeySystemAccess == null) {
        throw new Error("requestMediaKeySystemAccess is not implemented in your browser.");
      }
      const { keyName, keyType, keySystemOptions } = keySystemsType[index];
      const keySystemConfigurations = buildKeySystemConfigurations(keyName, keySystemOptions);
      log_default.debug(`DRM: Request keysystem access ${keyType},${index + 1} of ${keySystemsType.length}`, keySystemConfigurations);
      try {
        const keySystemAccess = await requestMediaKeySystemAccess(keyType, keySystemConfigurations);
        log_default.info("DRM: Found compatible keysystem", keyType, keySystemConfigurations);
        return {
          type: "create-media-key-system-access",
          value: {
            options: keySystemOptions,
            mediaKeySystemAccess: keySystemAccess
          }
        };
      } catch (_) {
        log_default.debug("DRM: Rejected access to keysystem", keyType, keySystemConfigurations);
        if (cancelSignal.cancellationError !== null) {
          throw cancelSignal.cancellationError;
        }
        return recursivelyTestKeySystems(index + 1);
      }
    }
  }
  var init_find_key_system = __esm({
    "src/core/decrypt/find_key_system.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_config2();
      init_errors();
      init_log();
      init_array_includes();
      init_flat_map();
      init_media_keys_infos_store();
    }
  });

  // src/core/decrypt/utils/key_id_comparison.ts
  function areKeyIdsEqual(keyId1, keyId2) {
    return keyId1 === keyId2 || areArraysOfNumbersEqual(keyId1, keyId2);
  }
  function isKeyIdContainedIn(wantedKeyId, keyIdsArr) {
    return keyIdsArr.some((k) => areKeyIdsEqual(k, wantedKeyId));
  }
  function areAllKeyIdsContainedIn(wantedKeyIds, keyIdsArr) {
    for (const keyId of wantedKeyIds) {
      const found = keyIdsArr.some((k) => areKeyIdsEqual(k, keyId));
      if (!found) {
        return false;
      }
    }
    return true;
  }
  function areSomeKeyIdsContainedIn(wantedKeyIds, keyIdsArr) {
    for (const keyId of wantedKeyIds) {
      const found = keyIdsArr.some((k) => areKeyIdsEqual(k, keyId));
      if (found) {
        return true;
      }
    }
    return false;
  }
  var init_key_id_comparison = __esm({
    "src/core/decrypt/utils/key_id_comparison.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_are_arrays_of_numbers_equal();
    }
  });

  // src/core/decrypt/utils/key_session_record.ts
  var KeySessionRecord;
  var init_key_session_record = __esm({
    "src/core/decrypt/utils/key_session_record.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_key_id_comparison();
      KeySessionRecord = class {
        constructor(initializationData) {
          this._initializationData = initializationData;
          this._keyIds = null;
        }
        associateKeyIds(keyIds) {
          if (this._keyIds === null) {
            this._keyIds = [];
          }
          const keyIdsArr = Array.from(keyIds);
          for (const keyId of keyIdsArr) {
            if (!this.isAssociatedWithKeyId(keyId)) {
              this._keyIds.push(keyId);
            }
          }
        }
        isAssociatedWithKeyId(keyId) {
          if (this._keyIds === null) {
            return false;
          }
          for (const storedKeyId of this._keyIds) {
            if (areKeyIdsEqual(storedKeyId, keyId)) {
              return true;
            }
          }
          return false;
        }
        getAssociatedKeyIds() {
          if (this._keyIds === null) {
            return [];
          }
          return this._keyIds;
        }
        isCompatibleWith(initializationData) {
          const { keyIds } = initializationData;
          if (keyIds !== void 0 && keyIds.length > 0) {
            if (this._keyIds !== null && areAllKeyIdsContainedIn(keyIds, this._keyIds)) {
              return true;
            }
            if (this._initializationData.keyIds !== void 0) {
              return areAllKeyIdsContainedIn(keyIds, this._initializationData.keyIds);
            }
          }
          return this._checkInitializationDataCompatibility(initializationData);
        }
        _checkInitializationDataCompatibility(initializationData) {
          if (initializationData.keyIds !== void 0 && initializationData.keyIds.length > 0 && this._initializationData.keyIds !== void 0) {
            return areAllKeyIdsContainedIn(initializationData.keyIds, this._initializationData.keyIds);
          }
          if (this._initializationData.type !== initializationData.type) {
            return false;
          }
          return this._initializationData.values.isCompatibleWith(initializationData.values);
        }
      };
    }
  });

  // src/core/decrypt/utils/loaded_sessions_store.ts
  async function safelyCloseMediaKeySession(mediaKeySession) {
    log_default.debug("DRM: Trying to close a MediaKeySession", mediaKeySession.sessionId);
    try {
      await closeSession(mediaKeySession);
      log_default.debug("DRM: Succeeded to close MediaKeySession");
      return;
    } catch (err) {
      log_default.error("DRM: Could not close MediaKeySession: " + (err instanceof Error ? err.toString() : "Unknown error"));
      return;
    }
  }
  var LoadedSessionsStore;
  var init_loaded_sessions_store = __esm({
    "src/core/decrypt/utils/loaded_sessions_store.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_is_null_or_undefined();
      init_key_session_record();
      LoadedSessionsStore = class {
        constructor(mediaKeys) {
          this._mediaKeys = mediaKeys;
          this._storage = [];
        }
        createSession(initData, sessionType) {
          const keySessionRecord = new KeySessionRecord(initData);
          const mediaKeySession = this._mediaKeys.createSession(sessionType);
          const entry = {
            mediaKeySession,
            sessionType,
            keySessionRecord,
            isGeneratingRequest: false,
            isLoadingPersistentSession: false,
            closingStatus: { type: "none" }
          };
          if (!isNullOrUndefined(mediaKeySession.closed)) {
            mediaKeySession.closed.then(() => {
              const index = this.getIndex(keySessionRecord);
              if (index >= 0 && this._storage[index].mediaKeySession === mediaKeySession) {
                this._storage.splice(index, 1);
              }
            }).catch((e) => {
              log_default.warn(`DRM-LSS: MediaKeySession.closed rejected: ${e}`);
            });
          }
          log_default.debug("DRM-LSS: Add MediaKeySession", entry.sessionType);
          this._storage.push(__spreadValues({}, entry));
          return entry;
        }
        reuse(initializationData) {
          for (let i = this._storage.length - 1; i >= 0; i--) {
            const stored = this._storage[i];
            if (stored.keySessionRecord.isCompatibleWith(initializationData)) {
              this._storage.splice(i, 1);
              this._storage.push(stored);
              return __spreadValues({}, stored);
            }
          }
          return null;
        }
        getEntryForSession(mediaKeySession) {
          for (let i = this._storage.length - 1; i >= 0; i--) {
            const stored = this._storage[i];
            if (stored.mediaKeySession === mediaKeySession) {
              return __spreadValues({}, stored);
            }
          }
          return null;
        }
        async generateLicenseRequest(mediaKeySession, initializationDataType, initializationData) {
          let entry;
          for (const stored of this._storage) {
            if (stored.mediaKeySession === mediaKeySession) {
              entry = stored;
              break;
            }
          }
          if (entry === void 0) {
            log_default.error("DRM-LSS: generateRequest error. No MediaKeySession found with the given initData and initDataType");
            return generateKeyRequest(mediaKeySession, initializationDataType, initializationData);
          }
          entry.isGeneratingRequest = true;
          if (entry.closingStatus.type !== "none") {
            throw new Error("The `MediaKeySession` is being closed.");
          }
          try {
            await generateKeyRequest(mediaKeySession, initializationDataType, initializationData);
          } catch (err) {
            if (entry === void 0) {
              throw err;
            }
            entry.isGeneratingRequest = false;
            if (entry.closingStatus.type === "awaiting") {
              entry.closingStatus.start();
            }
            throw err;
          }
          if (entry === void 0) {
            return void 0;
          }
          entry.isGeneratingRequest = false;
          if (entry.closingStatus.type === "awaiting") {
            entry.closingStatus.start();
          }
        }
        async loadPersistentSession(mediaKeySession, sessionId) {
          let entry;
          for (const stored of this._storage) {
            if (stored.mediaKeySession === mediaKeySession) {
              entry = stored;
              break;
            }
          }
          if (entry === void 0) {
            log_default.error("DRM-LSS: loadPersistentSession error. No MediaKeySession found with the given initData and initDataType");
            return loadSession(mediaKeySession, sessionId);
          }
          entry.isLoadingPersistentSession = true;
          if (entry.closingStatus.type !== "none") {
            throw new Error("The `MediaKeySession` is being closed.");
          }
          let ret;
          try {
            ret = await loadSession(mediaKeySession, sessionId);
          } catch (err) {
            if (entry === void 0) {
              throw err;
            }
            entry.isLoadingPersistentSession = false;
            if (entry.closingStatus.type === "awaiting") {
              entry.closingStatus.start();
            }
            throw err;
          }
          if (entry === void 0) {
            return ret;
          }
          entry.isLoadingPersistentSession = false;
          if (entry.closingStatus.type === "awaiting") {
            entry.closingStatus.start();
          }
          return ret;
        }
        async closeSession(mediaKeySession) {
          let entry;
          for (const stored of this._storage) {
            if (stored.mediaKeySession === mediaKeySession) {
              entry = stored;
              break;
            }
          }
          if (entry === void 0) {
            log_default.warn("DRM-LSS: No MediaKeySession found with the given initData and initDataType");
            return Promise.resolve(false);
          }
          return this._closeEntry(entry);
        }
        getLength() {
          return this._storage.length;
        }
        getAll() {
          return this._storage;
        }
        async closeAllSessions() {
          const allEntries = this._storage;
          log_default.debug("DRM-LSS: Closing all current MediaKeySessions", allEntries.length);
          this._storage = [];
          const closingProms = allEntries.map((entry) => this._closeEntry(entry));
          await Promise.all(closingProms);
        }
        getIndex(record) {
          for (let i = 0; i < this._storage.length; i++) {
            const stored = this._storage[i];
            if (stored.keySessionRecord === record) {
              return i;
            }
          }
          return -1;
        }
        async _closeEntry(entry) {
          const { mediaKeySession } = entry;
          return new Promise((resolve, reject) => {
            if (entry !== void 0 && (entry.isLoadingPersistentSession || entry.isGeneratingRequest)) {
              entry.closingStatus = {
                type: "awaiting",
                start: tryClosingEntryAndResolve
              };
            } else {
              tryClosingEntryAndResolve();
            }
            function tryClosingEntryAndResolve() {
              if (entry !== void 0) {
                entry.closingStatus = { type: "pending" };
              }
              safelyCloseMediaKeySession(mediaKeySession).then(() => {
                if (entry !== void 0) {
                  entry.closingStatus = { type: "done" };
                }
                resolve(true);
              }).catch((err) => {
                if (entry !== void 0) {
                  entry.closingStatus = { type: "failed" };
                }
                reject(err);
              });
            }
          });
        }
      };
    }
  });

  // src/utils/hash_buffer.ts
  function hashBuffer(buffer) {
    let hash = 0;
    let char;
    for (let i = 0; i < buffer.length; i++) {
      char = buffer[i];
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return hash;
  }
  var init_hash_buffer = __esm({
    "src/utils/hash_buffer.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/core/decrypt/utils/serializable_bytes.ts
  var SerializableBytes;
  var init_serializable_bytes = __esm({
    "src/core/decrypt/utils/serializable_bytes.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_base64();
      SerializableBytes = class {
        constructor(initData) {
          this.initData = initData;
        }
        toJSON() {
          return bytesToBase64(this.initData);
        }
        static decode(base64) {
          return base64ToBytes(base64);
        }
      };
    }
  });

  // src/core/decrypt/utils/are_init_values_compatible.ts
  function areInitializationValuesCompatible(stored, newElts) {
    var _a2, _b2;
    return (_b2 = (_a2 = _isAInB(stored, newElts)) != null ? _a2 : _isAInB(newElts, stored)) != null ? _b2 : false;
  }
  function _isAInB(a, b) {
    if (a.length === 0) {
      return false;
    }
    if (b.length < a.length) {
      return null;
    }
    const firstAElt = a[0];
    let aIdx = 0;
    let bIdx = 0;
    for (; bIdx < b.length; bIdx++) {
      const bElt = b[bIdx];
      if (bElt.systemId !== firstAElt.systemId) {
        continue;
      }
      if (bElt.hash !== firstAElt.hash) {
        return false;
      }
      const aData = firstAElt.data instanceof Uint8Array ? firstAElt.data : typeof firstAElt.data === "string" ? SerializableBytes.decode(firstAElt.data) : firstAElt.data.initData;
      const bData = bElt.data instanceof Uint8Array ? bElt.data : typeof bElt.data === "string" ? SerializableBytes.decode(bElt.data) : bElt.data.initData;
      if (!areArraysOfNumbersEqual(aData, bData)) {
        return false;
      }
      if (b.length - bIdx < a.length) {
        return null;
      }
      for (aIdx = 1; aIdx < a.length; aIdx++) {
        const aElt = a[aIdx];
        for (bIdx += 1; bIdx < b.length; bIdx++) {
          const bNewElt = b[bIdx];
          if (aElt.systemId !== bNewElt.systemId) {
            continue;
          }
          if (aElt.hash !== bNewElt.hash) {
            return false;
          }
          const aNewData = aElt.data instanceof Uint8Array ? aElt.data : typeof aElt.data === "string" ? SerializableBytes.decode(aElt.data) : aElt.data.initData;
          const bNewData = bNewElt.data instanceof Uint8Array ? bNewElt.data : typeof bNewElt.data === "string" ? SerializableBytes.decode(bNewElt.data) : bNewElt.data.initData;
          if (!areArraysOfNumbersEqual(aNewData, bNewData)) {
            return false;
          }
          break;
        }
        if (aIdx === b.length) {
          return null;
        }
      }
      return true;
    }
    return null;
  }
  var init_are_init_values_compatible = __esm({
    "src/core/decrypt/utils/are_init_values_compatible.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_are_arrays_of_numbers_equal();
      init_serializable_bytes();
    }
  });

  // src/core/decrypt/utils/persistent_sessions_store.ts
  function checkStorage(storage) {
    assertInterface(storage, { save: "function", load: "function" }, "licenseStorage");
  }
  function prepareValuesForStore(initialValues) {
    return initialValues.map(({ systemId, data, hash }) => ({
      systemId,
      hash,
      data: new SerializableBytes(data)
    }));
  }
  var PersistentSessionsStore;
  var init_persistent_sessions_store = __esm({
    "src/core/decrypt/utils/persistent_sessions_store.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_are_arrays_of_numbers_equal();
      init_assert();
      init_base64();
      init_hash_buffer();
      init_is_non_empty_string();
      init_is_null_or_undefined();
      init_are_init_values_compatible();
      init_key_id_comparison();
      init_serializable_bytes();
      PersistentSessionsStore = class {
        constructor(storage) {
          checkStorage(storage);
          this._entries = [];
          this._storage = storage;
          try {
            let entries = this._storage.load();
            if (!Array.isArray(entries)) {
              entries = [];
            }
            this._entries = entries;
          } catch (e) {
            log_default.warn("DRM-PSS: Could not get entries from license storage", e);
            this.dispose();
          }
        }
        getLength() {
          return this._entries.length;
        }
        getAll() {
          return this._entries;
        }
        get(initData) {
          const index = this._getIndex(initData);
          return index === -1 ? null : this._entries[index];
        }
        getAndReuse(initData) {
          const index = this._getIndex(initData);
          if (index === -1) {
            return null;
          }
          const item = this._entries.splice(index, 1)[0];
          this._entries.push(item);
          return item;
        }
        add(initData, keyIds, session) {
          if (isNullOrUndefined(session) || !isNonEmptyString(session.sessionId)) {
            log_default.warn("DRM-PSS: Invalid Persisten Session given.");
            return;
          }
          const { sessionId } = session;
          const currentEntry = this.get(initData);
          if (currentEntry !== null && currentEntry.sessionId === sessionId) {
            return;
          } else if (currentEntry !== null) {
            this.delete(currentEntry.sessionId);
          }
          log_default.info("DRM-PSS: Add new session", sessionId);
          const storedValues = prepareValuesForStore(initData.values.getFormattedValues());
          if (keyIds === void 0) {
            this._entries.push({
              version: 3,
              sessionId,
              values: storedValues,
              initDataType: initData.type
            });
          } else {
            this._entries.push({
              version: 4,
              sessionId,
              keyIds: keyIds.map((k) => new SerializableBytes(k)),
              values: storedValues,
              initDataType: initData.type
            });
          }
          this._save();
        }
        delete(sessionId) {
          let index = -1;
          for (let i = 0; i < this._entries.length; i++) {
            const entry2 = this._entries[i];
            if (entry2.sessionId === sessionId) {
              index = i;
              break;
            }
          }
          if (index === -1) {
            log_default.warn("DRM-PSS: initData to delete not found.");
            return;
          }
          const entry = this._entries[index];
          log_default.warn("DRM-PSS: Delete session from store", entry.sessionId);
          this._entries.splice(index, 1);
          this._save();
        }
        deleteOldSessions(sessionsToDelete) {
          log_default.info(`DRM-PSS: Deleting last ${sessionsToDelete} sessions.`);
          if (sessionsToDelete <= 0) {
            return;
          }
          if (sessionsToDelete <= this._entries.length) {
            this._entries.splice(0, sessionsToDelete);
          } else {
            log_default.warn("DRM-PSS: Asked to remove more information that it contains", sessionsToDelete, this._entries.length);
            this._entries = [];
          }
          this._save();
        }
        dispose() {
          this._entries = [];
          this._save();
        }
        _getIndex(initData) {
          let lazyConcatenatedData = null;
          function getConcatenatedInitDataInfo() {
            if (lazyConcatenatedData === null) {
              const concatInitData = initData.values.constructRequestData();
              lazyConcatenatedData = {
                initData: concatInitData,
                initDataHash: hashBuffer(concatInitData)
              };
            }
            return lazyConcatenatedData;
          }
          for (let i = 0; i < this._entries.length; i++) {
            const entry = this._entries[i];
            if (entry.initDataType === initData.type) {
              switch (entry.version) {
                case 4:
                  if (initData.keyIds !== void 0) {
                    const foundCompatible = initData.keyIds.every((keyId) => {
                      const keyIdB64 = bytesToBase64(keyId);
                      for (const entryKid of entry.keyIds) {
                        if (typeof entryKid === "string") {
                          if (keyIdB64 === entryKid) {
                            return true;
                          }
                        } else if (areKeyIdsEqual(entryKid.initData, keyId)) {
                          return true;
                        }
                      }
                      return false;
                    });
                    if (foundCompatible) {
                      return i;
                    }
                  } else {
                    const formatted2 = initData.values.getFormattedValues();
                    if (areInitializationValuesCompatible(formatted2, entry.values)) {
                      return i;
                    }
                  }
                  break;
                case 3:
                  const formatted = initData.values.getFormattedValues();
                  if (areInitializationValuesCompatible(formatted, entry.values)) {
                    return i;
                  }
                  break;
                case 2: {
                  const {
                    initData: concatInitData,
                    initDataHash: concatHash
                  } = getConcatenatedInitDataInfo();
                  if (entry.initDataHash === concatHash) {
                    try {
                      const decodedInitData = typeof entry.initData === "string" ? SerializableBytes.decode(entry.initData) : entry.initData.initData;
                      if (areArraysOfNumbersEqual(decodedInitData, concatInitData)) {
                        return i;
                      }
                    } catch (e) {
                      log_default.warn("DRM-PSS: Could not decode initialization data.", e);
                    }
                  }
                  break;
                }
                case 1: {
                  const {
                    initData: concatInitData,
                    initDataHash: concatHash
                  } = getConcatenatedInitDataInfo();
                  if (entry.initDataHash === concatHash) {
                    if (typeof entry.initData.length === "undefined") {
                      return i;
                    } else if (areArraysOfNumbersEqual(entry.initData, concatInitData)) {
                      return i;
                    }
                  }
                  break;
                }
                default: {
                  const { initDataHash: concatHash } = getConcatenatedInitDataInfo();
                  if (entry.initData === concatHash) {
                    return i;
                  }
                }
              }
            }
          }
          return -1;
        }
        _save() {
          try {
            this._storage.save(this._entries);
          } catch (e) {
            log_default.warn("DRM-PSS: Could not save licenses in localStorage");
          }
        }
      };
    }
  });

  // src/core/decrypt/utils/server_certificate_store.ts
  var serverCertificateHashesMap, server_certificate_store_default;
  var init_server_certificate_store = __esm({
    "src/core/decrypt/utils/server_certificate_store.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_hash_buffer();
      serverCertificateHashesMap = /* @__PURE__ */ new WeakMap();
      server_certificate_store_default = {
        prepare(mediaKeys) {
          serverCertificateHashesMap.set(mediaKeys, null);
        },
        set(mediaKeys, serverCertificate) {
          const formattedServerCertificate = serverCertificate instanceof Uint8Array ? serverCertificate : new Uint8Array(serverCertificate instanceof ArrayBuffer ? serverCertificate : serverCertificate.buffer);
          const hash = hashBuffer(formattedServerCertificate);
          serverCertificateHashesMap.set(mediaKeys, { hash, serverCertificate: formattedServerCertificate });
        },
        hasOne(mediaKeys) {
          const currentServerCertificate = serverCertificateHashesMap.get(mediaKeys);
          return currentServerCertificate === void 0 ? false : currentServerCertificate === null ? void 0 : true;
        },
        has(mediaKeys, serverCertificate) {
          const serverCertificateHash = serverCertificateHashesMap.get(mediaKeys);
          if (serverCertificateHash === void 0 || serverCertificateHash === null) {
            return false;
          }
          const { hash: oldHash, serverCertificate: oldServerCertificate } = serverCertificateHash;
          const newServerCertificate = serverCertificate instanceof Uint8Array ? serverCertificate : new Uint8Array(serverCertificate instanceof ArrayBuffer ? serverCertificate : serverCertificate.buffer);
          const newHash = hashBuffer(newServerCertificate);
          if (newHash !== oldHash || oldServerCertificate.length !== newServerCertificate.length) {
            return false;
          }
          for (let i = 0; i < oldServerCertificate.length; i++) {
            if (oldServerCertificate[i] !== newServerCertificate[i]) {
              return false;
            }
          }
          return true;
        }
      };
    }
  });

  // src/core/decrypt/get_media_keys.ts
  function createPersistentSessionsStorage(keySystemOptions) {
    if (keySystemOptions.persistentLicense !== true) {
      return null;
    }
    const { licenseStorage } = keySystemOptions;
    if (licenseStorage == null) {
      throw new EncryptedMediaError("INVALID_KEY_SYSTEM", "No license storage found for persistent license.");
    }
    log_default.debug("DRM: Set the given license storage");
    return new PersistentSessionsStore(licenseStorage);
  }
  async function getMediaKeysInfos(mediaElement, keySystemsConfigs, cancelSignal) {
    const evt = await getMediaKeySystemAccess(mediaElement, keySystemsConfigs, cancelSignal);
    if (cancelSignal.cancellationError !== null) {
      throw cancelSignal.cancellationError;
    }
    const { options, mediaKeySystemAccess } = evt.value;
    const currentState = media_keys_infos_store_default.getState(mediaElement);
    const persistentSessionsStore = createPersistentSessionsStorage(options);
    if (currentState !== null && evt.type === "reuse-media-key-system-access") {
      const { mediaKeys: mediaKeys2, loadedSessionsStore: loadedSessionsStore2 } = currentState;
      if (server_certificate_store_default.hasOne(mediaKeys2) === false || !isNullOrUndefined(options.serverCertificate) && server_certificate_store_default.has(mediaKeys2, options.serverCertificate)) {
        return {
          mediaKeys: mediaKeys2,
          mediaKeySystemAccess,
          stores: { loadedSessionsStore: loadedSessionsStore2, persistentSessionsStore },
          options
        };
      }
    }
    const mediaKeys = await createMediaKeys(mediaKeySystemAccess);
    log_default.info("DRM: MediaKeys created with success");
    const loadedSessionsStore = new LoadedSessionsStore(mediaKeys);
    return {
      mediaKeys,
      mediaKeySystemAccess,
      stores: { loadedSessionsStore, persistentSessionsStore },
      options
    };
  }
  async function createMediaKeys(mediaKeySystemAccess) {
    log_default.info("DRM: Calling createMediaKeys on the MediaKeySystemAccess");
    try {
      const mediaKeys = await mediaKeySystemAccess.createMediaKeys();
      return mediaKeys;
    } catch (error) {
      const message = error instanceof Error ? error.message : "Unknown error when creating MediaKeys.";
      throw new EncryptedMediaError("CREATE_MEDIA_KEYS_ERROR", message);
    }
  }
  var init_get_media_keys = __esm({
    "src/core/decrypt/get_media_keys.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_log();
      init_is_null_or_undefined();
      init_find_key_system();
      init_loaded_sessions_store();
      init_media_keys_infos_store();
      init_persistent_sessions_store();
      init_server_certificate_store();
    }
  });

  // src/core/decrypt/init_media_keys.ts
  async function initMediaKeys(mediaElement, keySystemsConfigs, cancelSignal) {
    const mediaKeysInfo = await getMediaKeysInfos(mediaElement, keySystemsConfigs, cancelSignal);
    const { mediaKeys } = mediaKeysInfo;
    const shouldDisableOldMediaKeys = mediaElement.mediaKeys !== null && mediaElement.mediaKeys !== void 0 && mediaKeys !== mediaElement.mediaKeys;
    if (shouldDisableOldMediaKeys) {
      log_default.debug("DRM: Disabling old MediaKeys");
      disableMediaKeys(mediaElement);
    }
    return mediaKeysInfo;
  }
  var init_init_media_keys = __esm({
    "src/core/decrypt/init_media_keys.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_attach_media_keys();
      init_get_media_keys();
    }
  });

  // src/utils/get_fuzzed_delay.ts
  function getFuzzedDelay(retryDelay) {
    const fuzzingFactor = (Math.random() * 2 - 1) * FUZZ_FACTOR;
    return retryDelay * (fuzzingFactor + 1);
  }
  var FUZZ_FACTOR;
  var init_get_fuzzed_delay = __esm({
    "src/utils/get_fuzzed_delay.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      FUZZ_FACTOR = 0.3;
    }
  });

  // src/utils/rx-retry_with_backoff.ts
  function retryObsWithBackoff(obs$, options) {
    const {
      baseDelay,
      maxDelay,
      totalRetry,
      shouldRetry: shouldRetry2,
      onRetry
    } = options;
    let retryCount = 0;
    return obs$.pipe(catchError((error, source) => {
      if (!isNullOrUndefined(shouldRetry2) && !shouldRetry2(error) || retryCount++ >= totalRetry) {
        throw error;
      }
      if (typeof onRetry === "function") {
        onRetry(error, retryCount);
      }
      const delay2 = Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay);
      const fuzzedDelay = getFuzzedDelay(delay2);
      return timer(fuzzedDelay).pipe(mergeMap(() => source));
    }));
  }
  var init_rx_retry_with_backoff = __esm({
    "src/utils/rx-retry_with_backoff.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_get_fuzzed_delay();
      init_is_null_or_undefined();
    }
  });

  // src/compat/eme/get_uuid_kid_from_keystatus_kid.ts
  function getUUIDKIDFromKeyStatusKID(keySystem, baseKeyId) {
    if (keySystem.indexOf("playready") !== -1 && (isIEOrEdge || isEdgeChromium)) {
      return guidToUuid(baseKeyId);
    }
    return baseKeyId;
  }
  var init_get_uuid_kid_from_keystatus_kid = __esm({
    "src/compat/eme/get_uuid_kid_from_keystatus_kid.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_string_parsing();
      init_browser_detection();
    }
  });

  // src/core/decrypt/utils/check_key_statuses.ts
  function checkKeyStatuses(session, options, keySystem) {
    const warnings = [];
    const blacklistedKeyIDs = [];
    const whitelistedKeyIds = [];
    const { fallbackOn = {}, throwOnLicenseExpiration } = options;
    session.keyStatuses.forEach((_arg1, _arg2) => {
      const [keyStatus, keyStatusKeyId] = (() => {
        return typeof _arg1 === "string" ? [_arg1, _arg2] : [_arg2, _arg1];
      })();
      const keyId = getUUIDKIDFromKeyStatusKID(keySystem, new Uint8Array(keyStatusKeyId));
      switch (keyStatus) {
        case KEY_STATUSES.EXPIRED: {
          const error = new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", `A decryption key expired (${bytesToHex(keyId)})`);
          if (throwOnLicenseExpiration !== false) {
            throw error;
          }
          warnings.push({ type: "warning", value: error });
          whitelistedKeyIds.push(keyId);
          break;
        }
        case KEY_STATUSES.INTERNAL_ERROR: {
          const error = new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", `A "${keyStatus}" status has been encountered (${bytesToHex(keyId)})`);
          if (fallbackOn.keyInternalError !== true) {
            throw error;
          }
          warnings.push({ type: "warning", value: error });
          blacklistedKeyIDs.push(keyId);
          break;
        }
        case KEY_STATUSES.OUTPUT_RESTRICTED: {
          const error = new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", `A "${keyStatus}" status has been encountered (${bytesToHex(keyId)})`);
          if (fallbackOn.keyOutputRestricted !== true) {
            throw error;
          }
          warnings.push({ type: "warning", value: error });
          blacklistedKeyIDs.push(keyId);
          break;
        }
        default:
          whitelistedKeyIds.push(keyId);
          break;
      }
    });
    return { warnings, blacklistedKeyIDs, whitelistedKeyIds };
  }
  var KEY_STATUSES;
  var init_check_key_statuses = __esm({
    "src/core/decrypt/utils/check_key_statuses.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_get_uuid_kid_from_keystatus_kid();
      init_errors();
      init_string_parsing();
      KEY_STATUSES = {
        EXPIRED: "expired",
        INTERNAL_ERROR: "internal-error",
        OUTPUT_RESTRICTED: "output-restricted"
      };
    }
  });

  // src/core/decrypt/session_events_listener.ts
  function SessionEventsListener(session, keySystemOptions, keySystem) {
    log_default.info("DRM: Binding session events", session.sessionId);
    const sessionWarningSubject$ = new Subject();
    const { getLicenseConfig = {} } = keySystemOptions;
    const keyErrors = onKeyError$2(session).pipe(map((error) => {
      throw new EncryptedMediaError("KEY_ERROR", error.type);
    }));
    const keyStatusesChange$ = onKeyStatusesChange$2(session).pipe(mergeMap((keyStatusesEvent) => handleKeyStatusesChangeEvent(session, keySystemOptions, keySystem, keyStatusesEvent)));
    const keyMessages$ = onKeyMessage$2(session).pipe(mergeMap((messageEvent) => {
      const message = new Uint8Array(messageEvent.message);
      const messageType = isNonEmptyString(messageEvent.messageType) ? messageEvent.messageType : "license-request";
      log_default.info(`DRM: Received message event, type ${messageType}`, session.sessionId, messageEvent);
      const getLicense$ = defer(() => {
        const getLicense = keySystemOptions.getLicense(message, messageType);
        const getLicenseTimeout = isNullOrUndefined(getLicenseConfig.timeout) ? 10 * 1e3 : getLicenseConfig.timeout;
        return cast_to_observable_default(getLicense).pipe(getLicenseTimeout >= 0 ? timeout(getLicenseTimeout) : identity);
      });
      const backoffOptions = getLicenseBackoffOptions(sessionWarningSubject$, getLicenseConfig.retry);
      return retryObsWithBackoff(getLicense$, backoffOptions).pipe(map((licenseObject) => ({
        type: "key-message-handled",
        value: { session, license: licenseObject }
      })), catchError((err) => {
        const formattedError = formatGetLicenseError(err);
        if (!isNullOrUndefined(err)) {
          const { fallbackOnLastTry } = err;
          if (fallbackOnLastTry === true) {
            log_default.warn("DRM: Last `getLicense` attempt failed. Blacklisting the current session.");
            throw new BlacklistedSessionError(formattedError);
          }
        }
        throw formattedError;
      }));
    }));
    const sessionUpdates = merge(keyMessages$, keyStatusesChange$).pipe(concatMap((evt) => {
      switch (evt.type) {
        case "key-message-handled":
        case "key-status-change-handled":
          if (isNullOrUndefined(evt.value.license)) {
            log_default.info("DRM: No message given, skipping session.update");
            return EMPTY;
          }
          return updateSessionWithMessage(session, evt.value.license);
        default:
          return of(evt);
      }
    }));
    const sessionEvents = merge(getKeyStatusesEvents(session, keySystemOptions, keySystem), sessionUpdates, keyErrors, sessionWarningSubject$);
    return !isNullOrUndefined(session.closed) ? sessionEvents.pipe(takeUntil(cast_to_observable_default(session.closed))) : sessionEvents;
  }
  function getKeyStatusesEvents(session, options, keySystem) {
    return defer(() => {
      if (session.keyStatuses.size === 0) {
        return EMPTY;
      }
      const { warnings, blacklistedKeyIDs, whitelistedKeyIds } = checkKeyStatuses(session, options, keySystem);
      const warnings$ = warnings.length > 0 ? of(...warnings) : EMPTY;
      const keysUpdate$ = of({
        type: "keys-update",
        value: {
          whitelistedKeyIds,
          blacklistedKeyIDs
        }
      });
      return concat(warnings$, keysUpdate$);
    });
  }
  function formatGetLicenseError(error) {
    if (error instanceof TimeoutError) {
      return new EncryptedMediaError("KEY_LOAD_TIMEOUT", "The license server took too much time to respond.");
    }
    const err = new EncryptedMediaError("KEY_LOAD_ERROR", "An error occured when calling `getLicense`.");
    if (!isNullOrUndefined(error) && isNonEmptyString(error.message)) {
      err.message = error.message;
    }
    return err;
  }
  function updateSessionWithMessage(session, message) {
    log_default.info("DRM: Updating MediaKeySession with message");
    return cast_to_observable_default(session.update(message)).pipe(catchError((error) => {
      const reason = error instanceof Error ? error.toString() : "`session.update` failed";
      throw new EncryptedMediaError("KEY_UPDATE_ERROR", reason);
    }), tap(() => {
      log_default.info("DRM: MediaKeySession update succeeded.");
    }), ignoreElements());
  }
  function handleKeyStatusesChangeEvent(session, keySystemOptions, keySystem, keyStatusesEvent) {
    log_default.info("DRM: keystatuseschange event received", session.sessionId);
    const callback$ = defer(() => {
      return tryCatch(() => {
        if (typeof keySystemOptions.onKeyStatusesChange !== "function") {
          return EMPTY;
        }
        return cast_to_observable_default(keySystemOptions.onKeyStatusesChange(keyStatusesEvent, session));
      }, void 0);
    }).pipe(map((licenseObject) => ({
      type: "key-status-change-handled",
      value: { session, license: licenseObject }
    })), catchError((error) => {
      const err = new EncryptedMediaError("KEY_STATUS_CHANGE_ERROR", "Unknown `onKeyStatusesChange` error");
      if (!isNullOrUndefined(error) && isNonEmptyString(error.message)) {
        err.message = error.message;
      }
      throw err;
    }));
    return merge(getKeyStatusesEvents(session, keySystemOptions, keySystem), callback$);
  }
  function getLicenseBackoffOptions(sessionWarningSubject$, numberOfRetry) {
    return {
      totalRetry: numberOfRetry != null ? numberOfRetry : 2,
      baseDelay: 200,
      maxDelay: 3e3,
      shouldRetry: (error) => error instanceof TimeoutError || isNullOrUndefined(error) || error.noRetry !== true,
      onRetry: (error) => sessionWarningSubject$.next({
        type: "warning",
        value: formatGetLicenseError(error)
      })
    };
  }
  var onKeyError$2, onKeyMessage$2, onKeyStatusesChange$2, BlacklistedSessionError;
  var init_session_events_listener = __esm({
    "src/core/decrypt/session_events_listener.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_compat();
      init_errors();
      init_log();
      init_cast_to_observable();
      init_is_non_empty_string();
      init_is_null_or_undefined();
      init_rx_retry_with_backoff();
      init_rx_try_catch();
      init_check_key_statuses();
      ({
        onKeyError$: onKeyError$2,
        onKeyMessage$: onKeyMessage$2,
        onKeyStatusesChange$: onKeyStatusesChange$2
      } = event_listeners_exports);
      BlacklistedSessionError = class extends Error {
        constructor(sessionError) {
          super();
          Object.setPrototypeOf(this, BlacklistedSessionError.prototype);
          this.sessionError = sessionError;
        }
      };
    }
  });

  // src/core/decrypt/set_server_certificate.ts
  async function setServerCertificate(mediaKeys, serverCertificate) {
    try {
      const res = await mediaKeys.setServerCertificate(serverCertificate);
      return res;
    } catch (error) {
      log_default.warn("DRM: mediaKeys.setServerCertificate returned an error", error);
      const reason = error instanceof Error ? error.toString() : "`setServerCertificate` error";
      throw new EncryptedMediaError("LICENSE_SERVER_CERTIFICATE_ERROR", reason);
    }
  }
  async function trySettingServerCertificate(mediaKeys, serverCertificate) {
    if (server_certificate_store_default.hasOne(mediaKeys) === true) {
      log_default.info("DRM: The MediaKeys already has a server certificate, skipping...");
      return { type: "already-has-one" };
    }
    if (typeof mediaKeys.setServerCertificate !== "function") {
      log_default.warn("DRM: Could not set the server certificate. mediaKeys.setServerCertificate is not a function");
      return { type: "method-not-implemented" };
    }
    log_default.info("DRM: Setting server certificate on the MediaKeys");
    server_certificate_store_default.prepare(mediaKeys);
    try {
      const result = await setServerCertificate(mediaKeys, serverCertificate);
      server_certificate_store_default.set(mediaKeys, serverCertificate);
      return { type: "success", value: result };
    } catch (error) {
      const formattedErr = isKnownError(error) ? error : new EncryptedMediaError("LICENSE_SERVER_CERTIFICATE_ERROR", "Unknown error when setting the server certificate.");
      return { type: "error", value: formattedErr };
    }
  }
  var init_set_server_certificate = __esm({
    "src/core/decrypt/set_server_certificate.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_log();
      init_server_certificate_store();
    }
  });

  // src/core/decrypt/utils/clean_old_stored_persistent_info.ts
  function cleanOldStoredPersistentInfo(persistentSessionsStore, limit) {
    if (isNaN(limit) || limit < 0 || limit >= persistentSessionsStore.getLength()) {
      return;
    }
    const numberOfPersistentSessions = persistentSessionsStore.getLength();
    const toDelete = numberOfPersistentSessions - limit;
    log_default.info("DRM: Too many stored persistent sessions, removing some.", numberOfPersistentSessions, toDelete);
    persistentSessionsStore.deleteOldSessions(toDelete);
  }
  var init_clean_old_stored_persistent_info = __esm({
    "src/core/decrypt/utils/clean_old_stored_persistent_info.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
    }
  });

  // src/utils/starts_with.ts
  function startsWith(completeString, searchString, position) {
    if (typeof String.prototype.startsWith === "function") {
      return completeString.startsWith(searchString, position);
    }
    const initialPosition = typeof position === "number" ? Math.max(position, 0) : 0;
    return completeString.substring(initialPosition, initialPosition + searchString.length) === searchString;
  }
  var init_starts_with = __esm({
    "src/utils/starts_with.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/core/decrypt/utils/get_drm_system_id.ts
  function getDrmSystemId(keySystem) {
    if (startsWith(keySystem, "com.microsoft.playready") || keySystem === "com.chromecast.playready" || keySystem === "com.youtube.playready") {
      return "9a04f07998404286ab92e65be0885f95";
    }
    if (keySystem === "com.widevine.alpha") {
      return "edef8ba979d64acea3c827dcd51d21ed";
    }
    if (startsWith(keySystem, "com.apple.fps")) {
      return "94ce86fb07ff4f43adb893d2fa968ca2";
    }
    if (startsWith(keySystem, "com.nagra.")) {
      return "adb41c242dbf4a6d958b4457c0d27b95";
    }
    return void 0;
  }
  var init_get_drm_system_id = __esm({
    "src/core/decrypt/utils/get_drm_system_id.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_starts_with();
    }
  });

  // src/core/decrypt/utils/init_data_values_container.ts
  function formatInitDataValues(initialValues) {
    return initialValues.slice().sort((a, b) => a.systemId === b.systemId ? 0 : a.systemId === void 0 ? 1 : b.systemId === void 0 ? -1 : a.systemId < b.systemId ? -1 : 1).map(({ systemId, data }) => ({
      systemId,
      data,
      hash: hashBuffer(data)
    }));
  }
  var InitDataValuesContainer;
  var init_init_data_values_container = __esm({
    "src/core/decrypt/utils/init_data_values_container.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_hash_buffer();
      init_are_init_values_compatible();
      InitDataValuesContainer = class {
        constructor(initDataValues) {
          this._innerValues = initDataValues;
          this._lazyFormattedValues = null;
        }
        constructRequestData() {
          return concat2(...this._innerValues.map((i) => i.data));
        }
        isCompatibleWith(initDataValues) {
          const formatted = initDataValues instanceof InitDataValuesContainer ? initDataValues.getFormattedValues() : initDataValues;
          return areInitializationValuesCompatible(this.getFormattedValues(), formatted);
        }
        getFormattedValues() {
          if (this._lazyFormattedValues === null) {
            this._lazyFormattedValues = formatInitDataValues(this._innerValues);
          }
          return this._lazyFormattedValues;
        }
      };
    }
  });

  // src/core/decrypt/content_decryptor.ts
  function canCreatePersistentSession(mediaKeySystemAccess) {
    const { sessionTypes } = mediaKeySystemAccess.getConfiguration();
    return sessionTypes !== void 0 && arrayIncludes(sessionTypes, "persistent-license");
  }
  function updateDecipherability(manifest, whitelistedKeyIds, blacklistedKeyIDs) {
    manifest.updateRepresentationsDeciperability((representation) => {
      if (representation.contentProtections === void 0) {
        return representation.decipherable;
      }
      const contentKIDs = representation.contentProtections.keyIds;
      if (contentKIDs !== void 0) {
        for (let i = 0; i < contentKIDs.length; i++) {
          const elt = contentKIDs[i];
          for (let j = 0; j < blacklistedKeyIDs.length; j++) {
            if (areKeyIdsEqual(blacklistedKeyIDs[j], elt.keyId)) {
              return false;
            }
          }
          for (let j = 0; j < whitelistedKeyIds.length; j++) {
            if (areKeyIdsEqual(whitelistedKeyIds[j], elt.keyId)) {
              return true;
            }
          }
        }
      }
      return representation.decipherable;
    });
  }
  function blackListProtectionData(manifest, initData) {
    manifest.updateRepresentationsDeciperability((representation) => {
      var _a2, _b2;
      if (representation.decipherable === false) {
        return false;
      }
      const segmentProtections = (_b2 = (_a2 = representation.contentProtections) == null ? void 0 : _a2.initData) != null ? _b2 : [];
      for (let i = 0; i < segmentProtections.length; i++) {
        if (initData.type === void 0 || segmentProtections[i].type === initData.type) {
          const containedInitData = initData.values.getFormattedValues().every((undecipherableVal) => {
            return segmentProtections[i].values.some((currVal) => {
              return (undecipherableVal.systemId === void 0 || currVal.systemId === undecipherableVal.systemId) && areArraysOfNumbersEqual(currVal.data, undecipherableVal.data);
            });
          });
          if (containedInitData) {
            return false;
          }
        }
      }
      return representation.decipherable;
    });
  }
  function getFetchedLicenseKeysInfo(initializationData, singleLicensePer, usableKeyIds, unusableKeyIds) {
    var _a2;
    const associatedKeyIds = [
      ...usableKeyIds,
      ...unusableKeyIds
    ];
    if (singleLicensePer !== void 0 && singleLicensePer !== "init-data") {
      const {
        keyIds: expectedKeyIds,
        content
      } = initializationData;
      if (expectedKeyIds !== void 0) {
        const missingKeyIds = expectedKeyIds.filter((expected) => {
          return !associatedKeyIds.some((k) => areKeyIdsEqual(k, expected));
        });
        if (missingKeyIds.length > 0) {
          associatedKeyIds.push(...missingKeyIds);
        }
      }
      if (content !== void 0) {
        if (singleLicensePer === "content") {
          const contentKeys = /* @__PURE__ */ new Set();
          const { manifest } = content;
          for (const period of manifest.periods) {
            addKeyIdsFromPeriod(contentKeys, period);
          }
          mergeKeyIdSetIntoArray(contentKeys, associatedKeyIds);
        } else if (singleLicensePer === "periods") {
          const { manifest } = content;
          for (const period of manifest.periods) {
            const periodKeys = /* @__PURE__ */ new Set();
            addKeyIdsFromPeriod(periodKeys, period);
            if (((_a2 = initializationData.content) == null ? void 0 : _a2.period.id) === period.id) {
              mergeKeyIdSetIntoArray(periodKeys, associatedKeyIds);
            } else {
              const periodKeysArr = Array.from(periodKeys);
              for (const kid of periodKeysArr) {
                const isFound = associatedKeyIds.some((k) => areKeyIdsEqual(k, kid));
                if (isFound) {
                  mergeKeyIdSetIntoArray(periodKeys, associatedKeyIds);
                  break;
                }
              }
            }
          }
        }
      }
    }
    return {
      whitelisted: usableKeyIds,
      blacklisted: associatedKeyIds.slice(usableKeyIds.length)
    };
  }
  function mergeKeyIdSetIntoArray(set, arr) {
    const setArr = Array.from(set.values());
    for (const kid of setArr) {
      const isFound = arr.some((k) => areKeyIdsEqual(k, kid));
      if (!isFound) {
        arr.push(kid);
      }
    }
  }
  function addKeyIdsFromPeriod(set, period) {
    for (const adaptation of period.getAdaptations()) {
      for (const representation of adaptation.representations) {
        if (representation.contentProtections !== void 0 && representation.contentProtections.keyIds !== void 0) {
          for (const kidInf of representation.contentProtections.keyIds) {
            set.add(kidInf.keyId);
          }
        }
      }
    }
  }
  var onEncrypted$2, ContentDecryptor, ContentDecryptorState;
  var init_content_decryptor = __esm({
    "src/core/decrypt/content_decryptor.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_config2();
      init_errors();
      init_log();
      init_are_arrays_of_numbers_equal();
      init_array_find();
      init_array_includes();
      init_event_emitter();
      init_is_null_or_undefined();
      init_string_parsing();
      init_task_canceller();
      init_attach_media_keys();
      init_create_or_load_session();
      init_init_media_keys();
      init_session_events_listener();
      init_set_server_certificate();
      init_clean_old_stored_persistent_info();
      init_get_drm_system_id();
      init_init_data_values_container();
      init_key_id_comparison();
      ({ onEncrypted$: onEncrypted$2 } = event_listeners_exports);
      ContentDecryptor = class extends EventEmitter {
        constructor(mediaElement, ksOptions) {
          super();
          log_default.debug("DRM: Starting ContentDecryptor logic.");
          const canceller = new TaskCanceller();
          this._currentSessions = [];
          this._canceller = canceller;
          this._wasAttachCalled = false;
          this._initDataQueue = [];
          this._stateData = {
            state: ContentDecryptorState.Initializing,
            isMediaKeysAttached: false,
            isInitDataQueueLocked: true,
            data: null
          };
          this.error = null;
          const listenerSub = onEncrypted$2(mediaElement).subscribe((evt) => {
            log_default.debug("DRM: Encrypted event received from media element.");
            const initData = getInitData(evt);
            if (initData !== null) {
              this.onInitializationData(initData);
            }
          });
          canceller.signal.register(() => {
            listenerSub.unsubscribe();
          });
          initMediaKeys(mediaElement, ksOptions, canceller.signal).then((mediaKeysInfo) => {
            const { options, mediaKeySystemAccess } = mediaKeysInfo;
            let systemId;
            if (isNullOrUndefined(options.licenseStorage) || options.licenseStorage.disableRetroCompatibility === true) {
              systemId = getDrmSystemId(mediaKeySystemAccess.keySystem);
            }
            this.systemId = systemId;
            if (this._stateData.state === ContentDecryptorState.Initializing) {
              this._stateData = {
                state: ContentDecryptorState.WaitingForAttachment,
                isInitDataQueueLocked: true,
                isMediaKeysAttached: false,
                data: {
                  mediaKeysInfo,
                  mediaElement
                }
              };
              this.trigger("stateChange", this._stateData.state);
            }
          }).catch((err) => {
            this._onFatalError(err);
          });
        }
        getState() {
          return this._stateData.state;
        }
        attach() {
          if (this._stateData.state !== ContentDecryptorState.WaitingForAttachment) {
            throw new Error("`attach` should only be called when in the WaitingForAttachment state");
          } else if (this._wasAttachCalled) {
            log_default.warn("DRM: ContentDecryptor's `attach` method called more than once.");
            return;
          }
          this._wasAttachCalled = true;
          const { mediaElement, mediaKeysInfo } = this._stateData.data;
          const { options, mediaKeys, mediaKeySystemAccess, stores } = mediaKeysInfo;
          const stateToAttatch = {
            loadedSessionsStore: stores.loadedSessionsStore,
            mediaKeySystemAccess,
            mediaKeys,
            keySystemOptions: options
          };
          const shouldDisableLock = options.disableMediaKeysAttachmentLock === true;
          if (shouldDisableLock) {
            this._stateData = {
              state: ContentDecryptorState.ReadyForContent,
              isInitDataQueueLocked: true,
              isMediaKeysAttached: false,
              data: null
            };
            this.trigger("stateChange", this._stateData.state);
            if (this._isStopped()) {
              return;
            }
          }
          log_default.debug("DRM: Attaching current MediaKeys");
          attachMediaKeys(mediaElement, stateToAttatch, this._canceller.signal).then(async () => {
            const { serverCertificate } = options;
            if (!isNullOrUndefined(serverCertificate)) {
              const resSsc = await trySettingServerCertificate(mediaKeys, serverCertificate);
              if (resSsc.type === "error") {
                this.trigger("warning", resSsc.value);
              }
            }
            if (this._isStopped()) {
              return;
            }
            const prevState = this._stateData.state;
            this._stateData = {
              state: ContentDecryptorState.ReadyForContent,
              isMediaKeysAttached: true,
              isInitDataQueueLocked: false,
              data: { mediaKeysData: mediaKeysInfo }
            };
            if (prevState !== ContentDecryptorState.ReadyForContent) {
              this.trigger("stateChange", ContentDecryptorState.ReadyForContent);
            }
            if (!this._isStopped()) {
              this._processCurrentInitDataQueue();
            }
          }).catch((err) => {
            this._onFatalError(err);
          });
        }
        dispose() {
          this.removeEventListener();
          this._stateData = {
            state: ContentDecryptorState.Disposed,
            isMediaKeysAttached: void 0,
            isInitDataQueueLocked: void 0,
            data: null
          };
          this._canceller.cancel();
          this.trigger("stateChange", this._stateData.state);
        }
        onInitializationData(initializationData) {
          if (this._stateData.isInitDataQueueLocked !== false) {
            if (this._isStopped()) {
              throw new Error("ContentDecryptor either disposed or stopped.");
            }
            this._initDataQueue.push(initializationData);
            return;
          }
          const { mediaKeysData } = this._stateData.data;
          const processedInitializationData = __spreadProps(__spreadValues({}, initializationData), {
            values: new InitDataValuesContainer(initializationData.values)
          });
          this._processInitializationData(processedInitializationData, mediaKeysData).catch((err) => {
            this._onFatalError(err);
          });
        }
        async _processInitializationData(initializationData, mediaKeysData) {
          const { mediaKeySystemAccess, stores, options } = mediaKeysData;
          if (this._tryToUseAlreadyCreatedSession(initializationData, mediaKeysData) || this._isStopped()) {
            return;
          }
          if (options.singleLicensePer === "content") {
            const firstCreatedSession = arrayFind(this._currentSessions, (x) => x.source === "created-session" /* Created */);
            if (firstCreatedSession !== void 0) {
              const keyIds = initializationData.keyIds;
              if (keyIds === void 0) {
                if (initializationData.content === void 0) {
                  log_default.warn("DRM: Unable to fallback from a non-decipherable quality.");
                } else {
                  blackListProtectionData(initializationData.content.manifest, initializationData);
                }
                return;
              }
              firstCreatedSession.record.associateKeyIds(keyIds);
              if (initializationData.content !== void 0) {
                if (log_default.getLevel() === "DEBUG") {
                  const hexKids = keyIds.reduce((acc, kid) => `${acc}, ${bytesToHex(kid)}`, "");
                  log_default.debug("DRM: Blacklisting new key ids", hexKids);
                }
                updateDecipherability(initializationData.content.manifest, [], keyIds);
              }
              return;
            }
          } else if (options.singleLicensePer === "periods" && initializationData.content !== void 0) {
            const { period } = initializationData.content;
            const createdSessions = this._currentSessions.filter((x) => x.source === "created-session" /* Created */);
            const periodKeys = /* @__PURE__ */ new Set();
            addKeyIdsFromPeriod(periodKeys, period);
            for (const createdSess of createdSessions) {
              const periodKeysArr = Array.from(periodKeys);
              for (const kid of periodKeysArr) {
                if (createdSess.record.isAssociatedWithKeyId(kid)) {
                  createdSess.record.associateKeyIds(periodKeys.values());
                  for (const innerKid of periodKeysArr) {
                    if (!isKeyIdContainedIn(innerKid, createdSess.keyStatuses.whitelisted) && !isKeyIdContainedIn(innerKid, createdSess.keyStatuses.blacklisted)) {
                      createdSess.keyStatuses.blacklisted.push(innerKid);
                    }
                  }
                  updateDecipherability(initializationData.content.manifest, createdSess.keyStatuses.whitelisted, createdSess.keyStatuses.blacklisted);
                  return;
                }
              }
            }
          }
          this._lockInitDataQueue();
          let wantedSessionType;
          if (options.persistentLicense !== true) {
            wantedSessionType = "temporary";
          } else if (!canCreatePersistentSession(mediaKeySystemAccess)) {
            log_default.warn('DRM: Cannot create "persistent-license" session: not supported');
            wantedSessionType = "temporary";
          } else {
            wantedSessionType = "persistent-license";
          }
          const {
            EME_DEFAULT_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS,
            EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION
          } = config_default.getCurrent();
          const maxSessionCacheSize = typeof options.maxSessionCacheSize === "number" ? options.maxSessionCacheSize : EME_DEFAULT_MAX_SIMULTANEOUS_MEDIA_KEY_SESSIONS;
          const sessionRes = await createOrLoadSession(initializationData, stores, wantedSessionType, maxSessionCacheSize, this._canceller.signal);
          if (this._isStopped()) {
            return;
          }
          const sessionInfo = {
            record: sessionRes.value.keySessionRecord,
            source: sessionRes.type,
            keyStatuses: { whitelisted: [], blacklisted: [] },
            blacklistedSessionError: null
          };
          this._currentSessions.push(sessionInfo);
          const { mediaKeySession, sessionType } = sessionRes.value;
          let isSessionPersisted = false;
          const sub = SessionEventsListener(mediaKeySession, options, mediaKeySystemAccess.keySystem).subscribe({
            next: (evt) => {
              switch (evt.type) {
                case "warning":
                  this.trigger("warning", evt.value);
                  return;
              }
              let linkedKeys;
              if (sessionInfo.source === "created-session" /* Created */) {
                linkedKeys = getFetchedLicenseKeysInfo(initializationData, options.singleLicensePer, evt.value.whitelistedKeyIds, evt.value.blacklistedKeyIDs);
              } else {
                linkedKeys = {
                  whitelisted: evt.value.whitelistedKeyIds,
                  blacklisted: evt.value.blacklistedKeyIDs
                };
              }
              sessionInfo.record.associateKeyIds(linkedKeys.whitelisted);
              sessionInfo.record.associateKeyIds(linkedKeys.blacklisted);
              sessionInfo.keyStatuses = {
                whitelisted: linkedKeys.whitelisted,
                blacklisted: linkedKeys.blacklisted
              };
              if (sessionInfo.record.getAssociatedKeyIds().length !== 0 && sessionType === "persistent-license" && stores.persistentSessionsStore !== null && !isSessionPersisted) {
                const { persistentSessionsStore } = stores;
                cleanOldStoredPersistentInfo(persistentSessionsStore, EME_MAX_STORED_PERSISTENT_SESSION_INFORMATION - 1);
                persistentSessionsStore.add(initializationData, sessionInfo.record.getAssociatedKeyIds(), mediaKeySession);
                isSessionPersisted = true;
              }
              if (initializationData.content !== void 0) {
                updateDecipherability(initializationData.content.manifest, linkedKeys.whitelisted, linkedKeys.blacklisted);
              }
              this._unlockInitDataQueue();
            },
            error: (err) => {
              if (!(err instanceof BlacklistedSessionError)) {
                this._onFatalError(err);
                return;
              }
              sessionInfo.blacklistedSessionError = err;
              if (initializationData.content !== void 0) {
                const { manifest } = initializationData.content;
                log_default.info("DRM: blacklisting Representations based on protection data.");
                blackListProtectionData(manifest, initializationData);
              }
              this._unlockInitDataQueue();
            }
          });
          this._canceller.signal.register(() => {
            sub.unsubscribe();
          });
          if (options.singleLicensePer === void 0 || options.singleLicensePer === "init-data") {
            this._unlockInitDataQueue();
          }
          if (sessionRes.type === "created-session" /* Created */) {
            const requestData = initializationData.values.constructRequestData();
            try {
              await stores.loadedSessionsStore.generateLicenseRequest(mediaKeySession, initializationData.type, requestData);
            } catch (error) {
              const entry = stores.loadedSessionsStore.getEntryForSession(mediaKeySession);
              if (entry === null || entry.closingStatus.type !== "none") {
                const indexInCurrent = this._currentSessions.indexOf(sessionInfo);
                if (indexInCurrent >= 0) {
                  this._currentSessions.splice(indexInCurrent, 1);
                }
                return Promise.resolve();
              }
              throw new EncryptedMediaError("KEY_GENERATE_REQUEST_ERROR", error instanceof Error ? error.toString() : "Unknown error");
            }
          }
          return Promise.resolve();
        }
        _tryToUseAlreadyCreatedSession(initializationData, mediaKeysData) {
          const { stores, options } = mediaKeysData;
          const compatibleSessionInfo = arrayFind(this._currentSessions, (x) => x.record.isCompatibleWith(initializationData));
          if (compatibleSessionInfo === void 0) {
            return false;
          }
          const blacklistedSessionError = compatibleSessionInfo.blacklistedSessionError;
          if (!isNullOrUndefined(blacklistedSessionError)) {
            if (initializationData.type === void 0 || initializationData.content === void 0) {
              log_default.error("DRM: This initialization data has already been blacklisted but the current content is not known.");
              return true;
            } else {
              log_default.info("DRM: This initialization data has already been blacklisted. Blacklisting the related content.");
              const { manifest } = initializationData.content;
              blackListProtectionData(manifest, initializationData);
              return true;
            }
          }
          if (initializationData.keyIds !== void 0) {
            let isUndecipherable;
            if (options.singleLicensePer === void 0 || options.singleLicensePer === "init-data") {
              const { blacklisted } = compatibleSessionInfo.keyStatuses;
              isUndecipherable = areSomeKeyIdsContainedIn(initializationData.keyIds, blacklisted);
            } else {
              const { whitelisted } = compatibleSessionInfo.keyStatuses;
              isUndecipherable = !areAllKeyIdsContainedIn(initializationData.keyIds, whitelisted);
            }
            if (isUndecipherable) {
              if (initializationData.content === void 0) {
                log_default.error("DRM: Cannot forbid key id, the content is unknown.");
                return true;
              }
              log_default.info("DRM: Current initialization data is linked to blacklisted keys. Marking Representations as not decipherable");
              updateDecipherability(initializationData.content.manifest, [], initializationData.keyIds);
              return true;
            }
          }
          const entry = stores.loadedSessionsStore.reuse(initializationData);
          if (entry !== null) {
            log_default.debug("DRM: Init data already processed. Skipping it.");
            return true;
          }
          const indexOf = this._currentSessions.indexOf(compatibleSessionInfo);
          if (indexOf === -1) {
            log_default.error("DRM: Unable to remove processed init data: not found.");
          } else {
            log_default.debug("DRM: A session from a processed init data is not available anymore. Re-processing it.");
            this._currentSessions.splice(indexOf, 1);
          }
          return false;
        }
        _onFatalError(err) {
          if (this._canceller.isUsed) {
            return;
          }
          const formattedErr = err instanceof Error ? err : new OtherError("NONE", "Unknown encryption error");
          this.error = formattedErr;
          this._initDataQueue.length = 0;
          this._stateData = {
            state: ContentDecryptorState.Error,
            isMediaKeysAttached: void 0,
            isInitDataQueueLocked: void 0,
            data: null
          };
          this._canceller.cancel();
          this.trigger("error", formattedErr);
          if (this._stateData.state === ContentDecryptorState.Error) {
            this.trigger("stateChange", this._stateData.state);
          }
        }
        _isStopped() {
          return this._stateData.state === ContentDecryptorState.Disposed || this._stateData.state === ContentDecryptorState.Error;
        }
        _processCurrentInitDataQueue() {
          while (this._stateData.isInitDataQueueLocked === false) {
            const initData = this._initDataQueue.shift();
            if (initData === void 0) {
              return;
            }
            this.onInitializationData(initData);
          }
        }
        _lockInitDataQueue() {
          if (this._stateData.isInitDataQueueLocked === false) {
            this._stateData.isInitDataQueueLocked = true;
          }
        }
        _unlockInitDataQueue() {
          if (this._stateData.isMediaKeysAttached !== true) {
            log_default.error("DRM: Trying to unlock in the wrong state");
            return;
          }
          this._stateData.isInitDataQueueLocked = false;
          this._processCurrentInitDataQueue();
        }
      };
      ContentDecryptorState = /* @__PURE__ */ ((ContentDecryptorState2) => {
        ContentDecryptorState2[ContentDecryptorState2["Initializing"] = 0] = "Initializing";
        ContentDecryptorState2[ContentDecryptorState2["WaitingForAttachment"] = 1] = "WaitingForAttachment";
        ContentDecryptorState2[ContentDecryptorState2["ReadyForContent"] = 2] = "ReadyForContent";
        ContentDecryptorState2[ContentDecryptorState2["Error"] = 3] = "Error";
        ContentDecryptorState2[ContentDecryptorState2["Disposed"] = 4] = "Disposed";
        return ContentDecryptorState2;
      })(ContentDecryptorState || {});
    }
  });

  // src/core/decrypt/get_current_key_system.ts
  function getCurrentKeySystem(mediaElement) {
    const currentState = media_keys_infos_store_default.getState(mediaElement);
    return currentState == null ? null : currentState.keySystemOptions.type;
  }
  var init_get_current_key_system = __esm({
    "src/core/decrypt/get_current_key_system.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_media_keys_infos_store();
    }
  });

  // src/core/decrypt/index.ts
  var decrypt_exports = {};
  __export(decrypt_exports, {
    ContentDecryptorState: () => ContentDecryptorState,
    MediaKeySessionLoadingType: () => MediaKeySessionLoadingType,
    clearOnStop: () => clearOnStop,
    default: () => decrypt_default,
    disposeDecryptionResources: () => disposeDecryptionResources,
    getCurrentKeySystem: () => getCurrentKeySystem
  });
  var decrypt_default;
  var init_decrypt = __esm({
    "src/core/decrypt/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_clear_on_stop();
      init_content_decryptor();
      init_dispose_decryption_resources();
      init_get_current_key_system();
      init_types3();
      decrypt_default = ContentDecryptor;
    }
  });

  // src/utils/defer_subscriptions.ts
  function deferSubscriptions() {
    return (source) => {
      return source.pipe(subscribeOn(asapScheduler));
    };
  }
  var init_defer_subscriptions = __esm({
    "src/utils/defer_subscriptions.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
    }
  });

  // src/utils/filter_map.ts
  function filterMap(callback, filteringToken) {
    return (source) => defer(() => {
      return source.pipe(map(callback), filter((x) => x !== filteringToken));
    });
  }
  var init_filter_map = __esm({
    "src/utils/filter_map.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
    }
  });

  // src/utils/take_first_set.ts
  function takeFirstSet(...args) {
    let i = 0;
    const len = args.length;
    while (i < len) {
      const arg = args[i];
      if (!isNullOrUndefined(arg)) {
        return arg;
      }
      i++;
    }
    return void 0;
  }
  var init_take_first_set = __esm({
    "src/utils/take_first_set.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_null_or_undefined();
    }
  });

  // src/core/init/events_generators.ts
  function loaded(segmentBuffersStore) {
    return { type: "loaded", value: { segmentBuffersStore } };
  }
  function stalled(rebuffering) {
    return { type: "stalled", value: rebuffering };
  }
  function unstalled() {
    return { type: "unstalled", value: null };
  }
  function decipherabilityUpdate(arg) {
    return { type: "decipherabilityUpdate", value: arg };
  }
  function manifestReady(manifest) {
    return { type: "manifestReady", value: { manifest } };
  }
  function manifestUpdate() {
    return { type: "manifestUpdate", value: null };
  }
  function nullRepresentation(type, period) {
    return {
      type: "representationChange",
      value: {
        type,
        representation: null,
        period
      }
    };
  }
  function warning(value) {
    return { type: "warning", value };
  }
  function reloadingMediaSource() {
    return { type: "reloading-media-source", value: void 0 };
  }
  var INIT_EVENTS, events_generators_default;
  var init_events_generators = __esm({
    "src/core/init/events_generators.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      INIT_EVENTS = {
        loaded,
        decipherabilityUpdate,
        manifestReady,
        manifestUpdate,
        nullRepresentation,
        reloadingMediaSource,
        stalled,
        unstalled,
        warning
      };
      events_generators_default = INIT_EVENTS;
    }
  });

  // src/core/init/link_drm_and_content.ts
  function linkDrmAndContent(mediaElement, keySystems, contentProtections$, linkingMedia$) {
    const encryptedEvents$ = merge(onEncrypted$3(mediaElement), contentProtections$);
    if (features_default.ContentDecryptor == null) {
      return merge(encryptedEvents$.pipe(map(() => {
        log_default.error("Init: Encrypted event but EME feature not activated");
        throw new EncryptedMediaError("MEDIA_IS_ENCRYPTED_ERROR", "EME feature not activated.");
      })), linkingMedia$.pipe(map((mediaSource) => ({
        type: "decryption-disabled",
        value: { drmSystemId: void 0, mediaSource }
      }))));
    }
    if (keySystems.length === 0) {
      return merge(encryptedEvents$.pipe(map(() => {
        log_default.error("Init: Ciphered media and no keySystem passed");
        throw new EncryptedMediaError("MEDIA_IS_ENCRYPTED_ERROR", "Media is encrypted and no `keySystems` given");
      })), linkingMedia$.pipe(map((mediaSource) => ({
        type: "decryption-disabled",
        value: { drmSystemId: void 0, mediaSource }
      }))));
    }
    if (!hasEMEAPIs()) {
      return merge(encryptedEvents$.pipe(map(() => {
        log_default.error("Init: Encrypted event but no EME API available");
        throw new EncryptedMediaError("MEDIA_IS_ENCRYPTED_ERROR", "Encryption APIs not found.");
      })), linkingMedia$.pipe(map((mediaSource) => ({
        type: "decryption-disabled",
        value: { drmSystemId: void 0, mediaSource }
      }))));
    }
    log_default.debug("Init: Creating ContentDecryptor");
    const ContentDecryptor2 = features_default.ContentDecryptor;
    return new Observable((obs) => {
      const contentDecryptor = new ContentDecryptor2(mediaElement, keySystems);
      let mediaSub;
      contentDecryptor.addEventListener("stateChange", (state) => {
        if (state === 1 /* WaitingForAttachment */) {
          contentDecryptor.removeEventListener("stateChange");
          mediaSub = linkingMedia$.subscribe((mediaSource) => {
            contentDecryptor.addEventListener("stateChange", (newState) => {
              if (newState === 2 /* ReadyForContent */) {
                obs.next({
                  type: "decryption-ready",
                  value: {
                    drmSystemId: contentDecryptor.systemId,
                    mediaSource
                  }
                });
                contentDecryptor.removeEventListener("stateChange");
              }
            });
            contentDecryptor.attach();
          });
        }
      });
      contentDecryptor.addEventListener("error", (e) => {
        obs.error(e);
      });
      contentDecryptor.addEventListener("warning", (w) => {
        obs.next({ type: "warning", value: w });
      });
      const protectionDataSub = contentProtections$.subscribe((data) => {
        contentDecryptor.onInitializationData(data);
      });
      return () => {
        protectionDataSub.unsubscribe();
        mediaSub == null ? void 0 : mediaSub.unsubscribe();
        contentDecryptor.dispose();
      };
    });
  }
  var onEncrypted$3;
  var init_link_drm_and_content = __esm({
    "src/core/init/link_drm_and_content.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_compat();
      init_errors();
      init_features();
      init_log();
      ({ onEncrypted$: onEncrypted$3 } = event_listeners_exports);
    }
  });

  // src/core/segment_buffers/garbage_collector.ts
  function BufferGarbageCollector({
    segmentBuffer,
    currentTime$,
    maxBufferBehind$,
    maxBufferAhead$
  }) {
    return combineLatest([currentTime$, maxBufferBehind$, maxBufferAhead$]).pipe(mergeMap(([currentTime, maxBufferBehind, maxBufferAhead]) => {
      return clearBuffer(segmentBuffer, currentTime, maxBufferBehind, maxBufferAhead);
    }));
  }
  function clearBuffer(segmentBuffer, position, maxBufferBehind, maxBufferAhead) {
    if (!isFinite(maxBufferBehind) && !isFinite(maxBufferAhead)) {
      return EMPTY;
    }
    const cleanedupRanges = [];
    const { innerRange, outerRanges } = getInnerAndOuterTimeRanges(segmentBuffer.getBufferedRanges(), position);
    const collectBufferBehind = () => {
      if (!isFinite(maxBufferBehind)) {
        return;
      }
      for (let i = 0; i < outerRanges.length; i++) {
        const outerRange = outerRanges[i];
        if (position - maxBufferBehind >= outerRange.end) {
          cleanedupRanges.push(outerRange);
        } else if (position >= outerRange.end && position - maxBufferBehind > outerRange.start && position - maxBufferBehind < outerRange.end) {
          cleanedupRanges.push({
            start: outerRange.start,
            end: position - maxBufferBehind
          });
        }
      }
      if (innerRange != null) {
        if (position - maxBufferBehind > innerRange.start) {
          cleanedupRanges.push({
            start: innerRange.start,
            end: position - maxBufferBehind
          });
        }
      }
    };
    const collectBufferAhead = () => {
      if (!isFinite(maxBufferAhead)) {
        return;
      }
      for (let i = 0; i < outerRanges.length; i++) {
        const outerRange = outerRanges[i];
        if (position + maxBufferAhead <= outerRange.start) {
          cleanedupRanges.push(outerRange);
        } else if (position <= outerRange.start && position + maxBufferAhead < outerRange.end && position + maxBufferAhead > outerRange.start) {
          cleanedupRanges.push({
            start: position + maxBufferAhead,
            end: outerRange.end
          });
        }
      }
      if (innerRange != null) {
        if (position + maxBufferAhead < innerRange.end) {
          cleanedupRanges.push({
            start: position + maxBufferAhead,
            end: innerRange.end
          });
        }
      }
    };
    collectBufferBehind();
    collectBufferAhead();
    const clean$ = from(cleanedupRanges.map((range) => {
      log_default.debug("GC: cleaning range from SegmentBuffer", range);
      if (range.start >= range.end) {
        return of(null);
      }
      return segmentBuffer.removeBuffer(range.start, range.end);
    })).pipe(concatAll(), ignoreElements());
    return clean$;
  }
  var init_garbage_collector = __esm({
    "src/core/segment_buffers/garbage_collector.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_log();
      init_ranges();
    }
  });

  // src/utils/assert_unreachable.ts
  function assertUnreachable(_) {
    throw new AssertionError("Unreachable path taken");
  }
  var init_assert_unreachable = __esm({
    "src/utils/assert_unreachable.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
    }
  });

  // src/core/segment_buffers/inventory/buffered_history.ts
  var BufferedHistory;
  var init_buffered_history = __esm({
    "src/core/segment_buffers/inventory/buffered_history.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_manifest2();
      BufferedHistory = class {
        constructor(lifetime, maxHistoryLength) {
          this._history = [];
          this._lifetime = lifetime;
          this._maxHistoryLength = maxHistoryLength;
        }
        addBufferedSegment(context2, bufferedStart, bufferedEnd) {
          const now = performance.now();
          this._history.push({
            date: now,
            bufferedStart,
            bufferedEnd,
            context: context2
          });
          this._cleanHistory(now);
        }
        getHistoryFor(context2) {
          return this._history.filter((el) => areSameContent(el.context, context2));
        }
        _cleanHistory(now) {
          const historyEarliestLimit = now - this._lifetime;
          let firstKeptIndex = 0;
          for (const event of this._history) {
            if (event.date < historyEarliestLimit) {
              firstKeptIndex++;
            } else {
              break;
            }
          }
          if (firstKeptIndex > 0) {
            this._history = this._history.splice(firstKeptIndex);
          }
          if (this._history.length > this._maxHistoryLength) {
            const toRemove = this._history.length - this._maxHistoryLength;
            this._history = this._history.splice(toRemove);
          }
        }
      };
    }
  });

  // src/core/segment_buffers/inventory/segment_inventory.ts
  function bufferedStartLooksCoherent(thisSegment) {
    if (thisSegment.bufferedStart === void 0 || thisSegment.partiallyPushed) {
      return false;
    }
    const { start, end } = thisSegment;
    const duration = end - start;
    const {
      MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE,
      MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE
    } = config_default.getCurrent();
    return Math.abs(start - thisSegment.bufferedStart) <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE && (thisSegment.bufferedEnd === void 0 || thisSegment.bufferedEnd > thisSegment.bufferedStart && Math.abs(thisSegment.bufferedEnd - thisSegment.bufferedStart - duration) <= Math.min(MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE, duration / 3));
  }
  function bufferedEndLooksCoherent(thisSegment) {
    if (thisSegment.bufferedEnd === void 0 || thisSegment.partiallyPushed) {
      return false;
    }
    const { start, end } = thisSegment;
    const duration = end - start;
    const {
      MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE,
      MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE
    } = config_default.getCurrent();
    return Math.abs(end - thisSegment.bufferedEnd) <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE && thisSegment.bufferedStart != null && thisSegment.bufferedEnd > thisSegment.bufferedStart && Math.abs(thisSegment.bufferedEnd - thisSegment.bufferedStart - duration) <= Math.min(MAX_MANIFEST_BUFFERED_DURATION_DIFFERENCE, duration / 3);
  }
  function guessBufferedStartFromRangeStart(firstSegmentInRange, rangeStart, lastDeletedSegmentInfos, bufferType) {
    const { MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE } = config_default.getCurrent();
    if (firstSegmentInRange.bufferedStart !== void 0) {
      if (firstSegmentInRange.bufferedStart < rangeStart) {
        log_default.debug("SI: Segment partially GCed at the start", bufferType, firstSegmentInRange.bufferedStart, rangeStart);
        firstSegmentInRange.bufferedStart = rangeStart;
      }
      if (!firstSegmentInRange.precizeStart && bufferedStartLooksCoherent(firstSegmentInRange)) {
        firstSegmentInRange.start = firstSegmentInRange.bufferedStart;
        firstSegmentInRange.precizeStart = true;
      }
    } else if (firstSegmentInRange.precizeStart) {
      log_default.debug("SI: buffered start is precize start", bufferType, firstSegmentInRange.start);
      firstSegmentInRange.bufferedStart = firstSegmentInRange.start;
    } else if (lastDeletedSegmentInfos !== null && lastDeletedSegmentInfos.end > rangeStart && (lastDeletedSegmentInfos.precizeEnd || firstSegmentInRange.start - lastDeletedSegmentInfos.end <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE)) {
      log_default.debug("SI: buffered start is end of previous segment", bufferType, rangeStart, firstSegmentInRange.start, lastDeletedSegmentInfos.end);
      firstSegmentInRange.bufferedStart = lastDeletedSegmentInfos.end;
      if (bufferedStartLooksCoherent(firstSegmentInRange)) {
        firstSegmentInRange.start = lastDeletedSegmentInfos.end;
        firstSegmentInRange.precizeStart = true;
      }
    } else if (firstSegmentInRange.start - rangeStart <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE) {
      log_default.debug("SI: found true buffered start", bufferType, rangeStart, firstSegmentInRange.start);
      firstSegmentInRange.bufferedStart = rangeStart;
      if (bufferedStartLooksCoherent(firstSegmentInRange)) {
        firstSegmentInRange.start = rangeStart;
        firstSegmentInRange.precizeStart = true;
      }
    } else if (rangeStart < firstSegmentInRange.start) {
      log_default.debug("SI: range start too far from expected start", bufferType, rangeStart, firstSegmentInRange.start);
    } else {
      log_default.debug("SI: Segment appears immediately garbage collected at the start", bufferType, firstSegmentInRange.bufferedStart, rangeStart);
      firstSegmentInRange.bufferedStart = rangeStart;
    }
  }
  function guessBufferedEndFromRangeEnd(lastSegmentInRange, rangeEnd, bufferType) {
    const { MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE } = config_default.getCurrent();
    if (lastSegmentInRange.bufferedEnd !== void 0) {
      if (lastSegmentInRange.bufferedEnd > rangeEnd) {
        log_default.debug("SI: Segment partially GCed at the end", bufferType, lastSegmentInRange.bufferedEnd, rangeEnd);
        lastSegmentInRange.bufferedEnd = rangeEnd;
      }
      if (!lastSegmentInRange.precizeEnd && rangeEnd - lastSegmentInRange.end <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE && bufferedEndLooksCoherent(lastSegmentInRange)) {
        lastSegmentInRange.precizeEnd = true;
        lastSegmentInRange.end = rangeEnd;
      }
    } else if (lastSegmentInRange.precizeEnd) {
      log_default.debug("SI: buffered end is precize end", bufferType, lastSegmentInRange.end);
      lastSegmentInRange.bufferedEnd = lastSegmentInRange.end;
    } else if (rangeEnd - lastSegmentInRange.end <= MAX_MANIFEST_BUFFERED_START_END_DIFFERENCE) {
      log_default.debug("SI: found true buffered end", bufferType, rangeEnd, lastSegmentInRange.end);
      lastSegmentInRange.bufferedEnd = rangeEnd;
      if (bufferedEndLooksCoherent(lastSegmentInRange)) {
        lastSegmentInRange.end = rangeEnd;
        lastSegmentInRange.precizeEnd = true;
      }
    } else if (rangeEnd > lastSegmentInRange.end) {
      log_default.debug("SI: range end too far from expected end", bufferType, rangeEnd, lastSegmentInRange.end);
      lastSegmentInRange.bufferedEnd = lastSegmentInRange.end;
    } else {
      log_default.debug("SI: Segment appears immediately garbage collected at the end", bufferType, lastSegmentInRange.bufferedEnd, rangeEnd);
      lastSegmentInRange.bufferedEnd = rangeEnd;
    }
  }
  function prettyPrintInventory(inventory) {
    const roundingError = 1 / 60;
    const encounteredReps = {};
    const letters = [];
    let lastChunk = null;
    let lastLetter = null;
    function generateNewLetter(infos) {
      const currentLetter = String.fromCharCode(letters.length + 65);
      letters.push({
        letter: currentLetter,
        periodId: infos.period.id,
        representationId: infos.representation.id,
        bitrate: infos.representation.bitrate
      });
      return currentLetter;
    }
    let str = "";
    for (let i = 0; i < inventory.length; i++) {
      const chunk = inventory[i];
      if (chunk.bufferedStart !== void 0 && chunk.bufferedEnd !== void 0) {
        const periodId = chunk.infos.period.id;
        const representationId = chunk.infos.representation.id;
        const encounteredPeriod = encounteredReps[periodId];
        let currentLetter;
        if (encounteredPeriod === void 0) {
          currentLetter = generateNewLetter(chunk.infos);
          encounteredReps[periodId] = { [representationId]: currentLetter };
        } else if (encounteredPeriod[representationId] === void 0) {
          currentLetter = generateNewLetter(chunk.infos);
          encounteredPeriod[representationId] = currentLetter;
        } else {
          currentLetter = encounteredPeriod[representationId];
        }
        if (lastChunk === null) {
          str += `${chunk.bufferedStart.toFixed(2)}|${currentLetter}|`;
        } else if (lastLetter === currentLetter) {
          if (lastChunk.bufferedEnd + roundingError < chunk.bufferedStart) {
            str += `${lastChunk.bufferedEnd.toFixed(2)} ~ ${chunk.bufferedStart.toFixed(2)}|${currentLetter}|`;
          }
        } else {
          str += `${lastChunk.bufferedEnd.toFixed(2)} ~ ${chunk.bufferedStart.toFixed(2)}|${currentLetter}|`;
        }
        lastChunk = chunk;
        lastLetter = currentLetter;
      }
    }
    if (lastChunk !== null) {
      str += String(lastChunk.end.toFixed(2));
    }
    letters.forEach((letterInfo) => {
      var _a2;
      str += `
[${letterInfo.letter}] P: ${letterInfo.periodId} || R: ${letterInfo.representationId}(${(_a2 = letterInfo.bitrate) != null ? _a2 : "unknown bitrate"})`;
    });
    return str;
  }
  var SegmentInventory;
  var init_segment_inventory = __esm({
    "src/core/segment_buffers/inventory/segment_inventory.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_log();
      init_manifest2();
      init_take_first_set();
      init_buffered_history();
      SegmentInventory = class {
        constructor() {
          const {
            BUFFERED_HISTORY_RETENTION_TIME,
            BUFFERED_HISTORY_MAXIMUM_ENTRIES
          } = config_default.getCurrent();
          this._inventory = [];
          this._bufferedHistory = new BufferedHistory(BUFFERED_HISTORY_RETENTION_TIME, BUFFERED_HISTORY_MAXIMUM_ENTRIES);
        }
        reset() {
          this._inventory.length = 0;
        }
        synchronizeBuffered(buffered) {
          const inventory = this._inventory;
          let inventoryIndex = 0;
          let thisSegment = inventory[0];
          const { MINIMUM_SEGMENT_SIZE } = config_default.getCurrent();
          const bufferType = thisSegment == null ? void 0 : thisSegment.infos.adaptation.type;
          const rangesLength = buffered.length;
          for (let i = 0; i < rangesLength; i++) {
            if (thisSegment === void 0) {
              return;
            }
            const rangeStart = buffered.start(i);
            const rangeEnd = buffered.end(i);
            if (rangeEnd - rangeStart < MINIMUM_SEGMENT_SIZE) {
              log_default.warn("SI: skipped TimeRange when synchronizing because it was too small", bufferType, rangeStart, rangeEnd);
              continue;
            }
            const indexBefore = inventoryIndex;
            while (thisSegment !== void 0 && takeFirstSet(thisSegment.bufferedEnd, thisSegment.end) - rangeStart < MINIMUM_SEGMENT_SIZE) {
              thisSegment = inventory[++inventoryIndex];
            }
            let lastDeletedSegmentInfos = null;
            const numberOfSegmentToDelete = inventoryIndex - indexBefore;
            if (numberOfSegmentToDelete > 0) {
              const lastDeletedSegment = inventory[indexBefore + numberOfSegmentToDelete - 1];
              lastDeletedSegmentInfos = {
                end: takeFirstSet(lastDeletedSegment.bufferedEnd, lastDeletedSegment.end),
                precizeEnd: lastDeletedSegment.precizeEnd
              };
              log_default.debug(`SI: ${numberOfSegmentToDelete} segments GCed.`, bufferType);
              inventory.splice(indexBefore, numberOfSegmentToDelete);
              inventoryIndex = indexBefore;
            }
            if (thisSegment === void 0) {
              return;
            }
            if (rangeEnd - takeFirstSet(thisSegment.bufferedStart, thisSegment.start) >= MINIMUM_SEGMENT_SIZE) {
              guessBufferedStartFromRangeStart(thisSegment, rangeStart, lastDeletedSegmentInfos, bufferType);
              if (inventoryIndex === inventory.length - 1) {
                guessBufferedEndFromRangeEnd(thisSegment, rangeEnd, bufferType);
                return;
              }
              thisSegment = inventory[++inventoryIndex];
              let thisSegmentStart = takeFirstSet(thisSegment.bufferedStart, thisSegment.start);
              let thisSegmentEnd = takeFirstSet(thisSegment.bufferedEnd, thisSegment.end);
              const nextRangeStart = i < rangesLength - 1 ? buffered.start(i + 1) : void 0;
              while (thisSegment !== void 0 && rangeEnd - thisSegmentStart >= MINIMUM_SEGMENT_SIZE && (nextRangeStart === void 0 || rangeEnd - thisSegmentStart >= thisSegmentEnd - nextRangeStart)) {
                const prevSegment = inventory[inventoryIndex - 1];
                if (prevSegment.bufferedEnd === void 0) {
                  prevSegment.bufferedEnd = thisSegment.precizeStart ? thisSegment.start : prevSegment.end;
                  log_default.debug("SI: calculating buffered end of contiguous segment", bufferType, prevSegment.bufferedEnd, prevSegment.end);
                }
                thisSegment.bufferedStart = prevSegment.bufferedEnd;
                thisSegment = inventory[++inventoryIndex];
                if (thisSegment !== void 0) {
                  thisSegmentStart = takeFirstSet(thisSegment.bufferedStart, thisSegment.start);
                  thisSegmentEnd = takeFirstSet(thisSegment.bufferedEnd, thisSegment.end);
                }
              }
            }
            const lastSegmentInRange = inventory[inventoryIndex - 1];
            if (lastSegmentInRange !== void 0) {
              guessBufferedEndFromRangeEnd(lastSegmentInRange, rangeEnd, bufferType);
            }
          }
          if (thisSegment != null) {
            log_default.debug("SI: last segments have been GCed", bufferType, inventoryIndex, inventory.length);
            inventory.splice(inventoryIndex, inventory.length - inventoryIndex);
          }
          if (bufferType !== void 0 && log_default.getLevel() === "DEBUG") {
            log_default.debug(`SI: current ${bufferType} inventory timeline:
` + prettyPrintInventory(this._inventory));
          }
        }
        insertChunk({
          period,
          adaptation,
          representation,
          segment,
          chunkSize,
          start,
          end
        }) {
          if (segment.isInit) {
            return;
          }
          const bufferType = adaptation.type;
          if (start >= end) {
            log_default.warn("SI: Invalid chunked inserted: starts before it ends", bufferType, start, end);
            return;
          }
          const inventory = this._inventory;
          const newSegment = {
            partiallyPushed: true,
            chunkSize,
            splitted: false,
            start,
            end,
            precizeStart: false,
            precizeEnd: false,
            bufferedStart: void 0,
            bufferedEnd: void 0,
            infos: { segment, period, adaptation, representation }
          };
          for (let i = inventory.length - 1; i >= 0; i--) {
            const segmentI = inventory[i];
            if (segmentI.start <= start) {
              if (segmentI.end <= start) {
                log_default.debug("SI: Pushing segment strictly after previous one.", bufferType, start, segmentI.end);
                this._inventory.splice(i + 1, 0, newSegment);
                i += 2;
                while (i < inventory.length && inventory[i].start < newSegment.end) {
                  if (inventory[i].end > newSegment.end) {
                    log_default.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
                    inventory[i].start = newSegment.end;
                    inventory[i].bufferedStart = void 0;
                    inventory[i].precizeStart = inventory[i].precizeStart && newSegment.precizeEnd;
                    return;
                  }
                  log_default.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
                  inventory.splice(i, 1);
                }
                return;
              } else {
                if (segmentI.start === start) {
                  if (segmentI.end <= end) {
                    log_default.debug("SI: Segment pushed replace another one", bufferType, start, end, segmentI.end);
                    this._inventory.splice(i, 1, newSegment);
                    i += 1;
                    while (i < inventory.length && inventory[i].start < newSegment.end) {
                      if (inventory[i].end > newSegment.end) {
                        log_default.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
                        inventory[i].start = newSegment.end;
                        inventory[i].bufferedStart = void 0;
                        inventory[i].precizeStart = inventory[i].precizeStart && newSegment.precizeEnd;
                        return;
                      }
                      log_default.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
                      inventory.splice(i, 1);
                    }
                    return;
                  } else {
                    log_default.debug("SI: Segment pushed ends before another with the same start", bufferType, start, end, segmentI.end);
                    inventory.splice(i, 0, newSegment);
                    segmentI.start = newSegment.end;
                    segmentI.bufferedStart = void 0;
                    segmentI.precizeStart = segmentI.precizeStart && newSegment.precizeEnd;
                    return;
                  }
                } else {
                  if (segmentI.end <= newSegment.end) {
                    log_default.debug("SI: Segment pushed updates end of previous one", bufferType, start, end, segmentI.start, segmentI.end);
                    this._inventory.splice(i + 1, 0, newSegment);
                    segmentI.end = newSegment.start;
                    segmentI.bufferedEnd = void 0;
                    segmentI.precizeEnd = segmentI.precizeEnd && newSegment.precizeStart;
                    i += 2;
                    while (i < inventory.length && inventory[i].start < newSegment.end) {
                      if (inventory[i].end > newSegment.end) {
                        log_default.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[i].start);
                        inventory[i].start = newSegment.end;
                        inventory[i].bufferedStart = void 0;
                        inventory[i].precizeStart = inventory[i].precizeStart && newSegment.precizeEnd;
                        return;
                      }
                      log_default.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[i].start, inventory[i].end);
                      inventory.splice(i, 1);
                    }
                    return;
                  } else {
                    log_default.warn("SI: Segment pushed is contained in a previous one", bufferType, start, end, segmentI.start, segmentI.end);
                    const nextSegment = {
                      partiallyPushed: segmentI.partiallyPushed,
                      chunkSize: segmentI.chunkSize,
                      splitted: true,
                      start: newSegment.end,
                      end: segmentI.end,
                      precizeStart: segmentI.precizeStart && segmentI.precizeEnd && newSegment.precizeEnd,
                      precizeEnd: segmentI.precizeEnd,
                      bufferedStart: void 0,
                      bufferedEnd: segmentI.end,
                      infos: segmentI.infos
                    };
                    segmentI.end = newSegment.start;
                    segmentI.splitted = true;
                    segmentI.bufferedEnd = void 0;
                    segmentI.precizeEnd = segmentI.precizeEnd && newSegment.precizeStart;
                    inventory.splice(i + 1, 0, newSegment);
                    inventory.splice(i + 2, 0, nextSegment);
                    return;
                  }
                }
              }
            }
          }
          const firstSegment = this._inventory[0];
          if (firstSegment === void 0) {
            log_default.debug("SI: first segment pushed", bufferType, start, end);
            this._inventory.push(newSegment);
            return;
          }
          if (firstSegment.start >= end) {
            log_default.debug("SI: Segment pushed comes before all previous ones", bufferType, start, end, firstSegment.start);
            this._inventory.splice(0, 0, newSegment);
          } else if (firstSegment.end <= end) {
            log_default.debug("SI: Segment pushed starts before and completely recovers the previous first one", bufferType, start, end, firstSegment.start, firstSegment.end);
            this._inventory.splice(0, 1, newSegment);
            while (inventory.length > 1 && inventory[1].start < newSegment.end) {
              if (inventory[1].end > newSegment.end) {
                log_default.debug("SI: Segment pushed updates the start of the next one", bufferType, newSegment.end, inventory[1].start);
                inventory[1].start = newSegment.end;
                inventory[1].bufferedStart = void 0;
                inventory[1].precizeStart = newSegment.precizeEnd;
                return;
              }
              log_default.debug("SI: Segment pushed removes the next one", bufferType, start, end, inventory[1].start, inventory[1].end);
              inventory.splice(1, 1);
            }
            return;
          } else {
            log_default.debug("SI: Segment pushed start of the next one", bufferType, start, end, firstSegment.start, firstSegment.end);
            firstSegment.start = end;
            firstSegment.bufferedStart = void 0;
            firstSegment.precizeStart = newSegment.precizeEnd;
            this._inventory.splice(0, 0, newSegment);
            return;
          }
        }
        completeSegment(content, newBuffered) {
          if (content.segment.isInit) {
            return;
          }
          const inventory = this._inventory;
          const resSegments = [];
          for (let i = 0; i < inventory.length; i++) {
            if (areSameContent(inventory[i].infos, content)) {
              let splitted = false;
              if (resSegments.length > 0) {
                splitted = true;
                if (resSegments.length === 1) {
                  log_default.warn("SI: Completed Segment is splitted.", content);
                  resSegments[0].splitted = true;
                }
              }
              const firstI = i;
              let segmentSize = inventory[i].chunkSize;
              i += 1;
              while (i < inventory.length && areSameContent(inventory[i].infos, content)) {
                const chunkSize = inventory[i].chunkSize;
                if (segmentSize !== void 0 && chunkSize !== void 0) {
                  segmentSize += chunkSize;
                }
                i++;
              }
              const lastI = i - 1;
              const length = lastI - firstI;
              const lastEnd = inventory[lastI].end;
              const lastBufferedEnd = inventory[lastI].bufferedEnd;
              if (length > 0) {
                this._inventory.splice(firstI + 1, length);
                i -= length;
              }
              this._inventory[firstI].partiallyPushed = false;
              this._inventory[firstI].chunkSize = segmentSize;
              this._inventory[firstI].end = lastEnd;
              this._inventory[firstI].bufferedEnd = lastBufferedEnd;
              this._inventory[firstI].splitted = splitted;
              resSegments.push(this._inventory[firstI]);
            }
          }
          if (resSegments.length === 0) {
            log_default.warn("SI: Completed Segment not found", content);
          } else {
            this.synchronizeBuffered(newBuffered);
            for (const seg of resSegments) {
              if (seg.bufferedStart !== void 0 && seg.bufferedEnd !== void 0) {
                this._bufferedHistory.addBufferedSegment(seg.infos, seg.bufferedStart, seg.bufferedEnd);
              } else {
                log_default.debug("SI: buffered range not known after sync. Skipping history.", seg);
              }
            }
          }
        }
        getInventory() {
          return this._inventory;
        }
        getHistoryFor(context2) {
          return this._bufferedHistory.getHistoryFor(context2);
        }
      };
    }
  });

  // src/core/segment_buffers/inventory/index.ts
  var inventory_default;
  var init_inventory = __esm({
    "src/core/segment_buffers/inventory/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_segment_inventory();
      inventory_default = SegmentInventory;
    }
  });

  // src/core/segment_buffers/implementations/types.ts
  var SegmentBuffer;
  var init_types4 = __esm({
    "src/core/segment_buffers/implementations/types.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_inventory();
      SegmentBuffer = class {
        constructor() {
          this._segmentInventory = new inventory_default();
        }
        synchronizeInventory() {
          this._segmentInventory.synchronizeBuffered(this.getBufferedRanges());
        }
        getInventory() {
          return this._segmentInventory.getInventory();
        }
        getPendingOperations() {
          return [];
        }
        getSegmentHistory(context2) {
          return this._segmentInventory.getHistoryFor(context2);
        }
      };
    }
  });

  // src/core/segment_buffers/implementations/audio_video/audio_video_segment_buffer.ts
  function assertPushedDataIsBufferSource(pushedData) {
    if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.PRODUCTION) {
      return;
    }
    const { chunk, initSegment } = pushedData.data;
    if (typeof chunk !== "object" || typeof initSegment !== "object" || chunk !== null && !(chunk instanceof ArrayBuffer) && !(chunk.buffer instanceof ArrayBuffer) || initSegment !== null && !(initSegment instanceof ArrayBuffer) && !(initSegment.buffer instanceof ArrayBuffer)) {
      throw new Error("Invalid data given to the AudioVideoSegmentBuffer");
    }
  }
  var AudioVideoSegmentBuffer;
  var init_audio_video_segment_buffer = __esm({
    "src/core/segment_buffers/implementations/audio_video/audio_video_segment_buffer.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_compat();
      init_config2();
      init_log();
      init_manifest2();
      init_utils();
      init_are_arrays_of_numbers_equal();
      init_assert_unreachable();
      init_byte_parsing();
      init_hash_buffer();
      init_object_assign();
      init_types4();
      AudioVideoSegmentBuffer = class extends SegmentBuffer {
        constructor(bufferType, codec, mediaSource) {
          super();
          const sourceBuffer = mediaSource.addSourceBuffer(codec);
          this._destroy$ = new Subject();
          this.bufferType = bufferType;
          this._mediaSource = mediaSource;
          this._sourceBuffer = sourceBuffer;
          this._queue = [];
          this._pendingTask = null;
          this._lastInitSegment = null;
          this.codec = codec;
          const { SOURCE_BUFFER_FLUSHING_INTERVAL } = config_default.getCurrent();
          interval(SOURCE_BUFFER_FLUSHING_INTERVAL).pipe(tap(() => this._flush()), takeUntil(this._destroy$)).subscribe();
          fromEvent(this._sourceBuffer, "error").pipe(tap((err) => this._onPendingTaskError(err)), takeUntil(this._destroy$)).subscribe();
          fromEvent(this._sourceBuffer, "updateend").pipe(tap(() => this._flush()), takeUntil(this._destroy$)).subscribe();
        }
        pushChunk(infos) {
          assertPushedDataIsBufferSource(infos);
          log_default.debug("AVSB: receiving order to push data to the SourceBuffer", this.bufferType, getLoggableSegmentId(infos.inventoryInfos));
          return this._addToQueue({
            type: 0 /* Push */,
            value: infos
          });
        }
        removeBuffer(start, end) {
          log_default.debug("AVSB: receiving order to remove data from the SourceBuffer", this.bufferType, start, end);
          return this._addToQueue({
            type: 1 /* Remove */,
            value: { start, end }
          });
        }
        endOfSegment(infos) {
          log_default.debug("AVSB: receiving order for validating end of segment", this.bufferType, getLoggableSegmentId(infos));
          return this._addToQueue({
            type: 2 /* EndOfSegment */,
            value: infos
          });
        }
        getBufferedRanges() {
          return this._sourceBuffer.buffered;
        }
        getPendingOperations() {
          const parseQueuedOperation = (op) => {
            switch (op.type) {
              case 0 /* Push */:
                return { type: op.type, value: op.value };
              case 1 /* Remove */:
                return { type: op.type, value: op.value };
              case 2 /* EndOfSegment */:
                return { type: op.type, value: op.value };
            }
          };
          const queued = this._queue.map(parseQueuedOperation);
          return this._pendingTask === null ? queued : [parseQueuedOperation(this._pendingTask)].concat(queued);
        }
        dispose() {
          this._destroy$.next();
          this._destroy$.complete();
          if (this._pendingTask !== null) {
            this._pendingTask.subject.complete();
            this._pendingTask = null;
          }
          while (this._queue.length > 0) {
            const nextElement = this._queue.shift();
            if (nextElement !== void 0) {
              nextElement.subject.complete();
            }
          }
          if (this._mediaSource.readyState === "open") {
            try {
              this._sourceBuffer.abort();
            } catch (e) {
              log_default.warn(`AVSB: Failed to abort a ${this.bufferType} SourceBuffer:`, e);
            }
          }
        }
        _onPendingTaskError(err) {
          this._lastInitSegment = null;
          if (this._pendingTask !== null) {
            const error = err instanceof Error ? err : new Error("An unknown error occured when doing operations on the SourceBuffer");
            this._pendingTask.subject.error(error);
          }
        }
        _addToQueue(operation) {
          return new Observable((obs) => {
            const shouldRestartQueue = this._queue.length === 0 && this._pendingTask === null;
            const subject = new Subject();
            const queueItem = object_assign_default({ subject }, operation);
            this._queue.push(queueItem);
            const subscription = subject.subscribe(obs);
            if (shouldRestartQueue) {
              this._flush();
            }
            return () => {
              subscription.unsubscribe();
              const index = this._queue.indexOf(queueItem);
              if (index >= 0) {
                this._queue.splice(index, 1);
              }
            };
          });
        }
        _flush() {
          if (this._sourceBuffer.updating) {
            return;
          }
          if (this._pendingTask !== null) {
            const task = this._pendingTask;
            if (task.type !== 0 /* Push */ || task.data.length === 0) {
              switch (task.type) {
                case 0 /* Push */:
                  if (task.inventoryData !== null) {
                    this._segmentInventory.insertChunk(task.inventoryData);
                  }
                  break;
                case 2 /* EndOfSegment */:
                  this._segmentInventory.completeSegment(task.value, this.getBufferedRanges());
                  break;
                case 1 /* Remove */:
                  this.synchronizeInventory();
                  break;
                default:
                  assertUnreachable(task);
              }
              const { subject } = task;
              this._pendingTask = null;
              subject.next();
              subject.complete();
              this._flush();
              return;
            }
          } else {
            const nextItem = this._queue.shift();
            if (nextItem === void 0) {
              return;
            } else if (nextItem.type !== 0 /* Push */) {
              this._pendingTask = nextItem;
            } else {
              const itemValue = nextItem.value;
              let dataToPush;
              try {
                dataToPush = this._preparePushOperation(itemValue.data);
              } catch (e) {
                this._pendingTask = object_assign_default({
                  data: [],
                  inventoryData: itemValue.inventoryInfos
                }, nextItem);
                const error = e instanceof Error ? e : new Error("An unknown error occured when preparing a push operation");
                this._lastInitSegment = null;
                nextItem.subject.error(error);
                return;
              }
              this._pendingTask = object_assign_default({
                data: dataToPush,
                inventoryData: itemValue.inventoryInfos
              }, nextItem);
            }
          }
          try {
            switch (this._pendingTask.type) {
              case 2 /* EndOfSegment */:
                log_default.debug("AVSB: Acknowledging complete segment", getLoggableSegmentId(this._pendingTask.value));
                this._flush();
                return;
              case 0 /* Push */:
                const segmentData = this._pendingTask.data.shift();
                if (segmentData === void 0) {
                  this._flush();
                  return;
                }
                log_default.debug("AVSB: pushing segment", this.bufferType, getLoggableSegmentId(this._pendingTask.inventoryData));
                this._sourceBuffer.appendBuffer(segmentData);
                break;
              case 1 /* Remove */:
                const { start, end } = this._pendingTask.value;
                log_default.debug("AVSB: removing data from SourceBuffer", this.bufferType, start, end);
                this._sourceBuffer.remove(start, end);
                break;
              default:
                assertUnreachable(this._pendingTask);
            }
          } catch (e) {
            this._onPendingTaskError(e);
          }
        }
        _preparePushOperation(data) {
          const dataToPush = [];
          const {
            codec,
            timestampOffset,
            appendWindow
          } = data;
          let hasUpdatedSourceBufferType = false;
          if (codec !== this.codec) {
            log_default.debug("AVSB: updating codec", codec);
            hasUpdatedSourceBufferType = tryToChangeSourceBufferType(this._sourceBuffer, codec);
            if (hasUpdatedSourceBufferType) {
              this.codec = codec;
            } else {
              log_default.debug("AVSB: could not update codec", codec, this.codec);
            }
          }
          if (this._sourceBuffer.timestampOffset !== timestampOffset) {
            const newTimestampOffset = timestampOffset;
            log_default.debug("AVSB: updating timestampOffset", this.bufferType, this._sourceBuffer.timestampOffset, newTimestampOffset);
            this._sourceBuffer.timestampOffset = newTimestampOffset;
          }
          if (appendWindow[0] === void 0) {
            if (this._sourceBuffer.appendWindowStart > 0) {
              this._sourceBuffer.appendWindowStart = 0;
            }
          } else if (appendWindow[0] !== this._sourceBuffer.appendWindowStart) {
            if (appendWindow[0] >= this._sourceBuffer.appendWindowEnd) {
              this._sourceBuffer.appendWindowEnd = appendWindow[0] + 1;
            }
            this._sourceBuffer.appendWindowStart = appendWindow[0];
          }
          if (appendWindow[1] === void 0) {
            if (this._sourceBuffer.appendWindowEnd !== Infinity) {
              this._sourceBuffer.appendWindowEnd = Infinity;
            }
          } else if (appendWindow[1] !== this._sourceBuffer.appendWindowEnd) {
            this._sourceBuffer.appendWindowEnd = appendWindow[1];
          }
          if (data.initSegment !== null && (hasUpdatedSourceBufferType || !this._isLastInitSegment(data.initSegment))) {
            const segmentData = fakeEncryptionDataInInitSegment(data.initSegment);
            dataToPush.push(segmentData);
            const initU8 = toUint8Array(segmentData);
            this._lastInitSegment = {
              data: initU8,
              hash: hashBuffer(initU8)
            };
          }
          if (data.chunk !== null) {
            dataToPush.push(data.chunk);
          }
          return dataToPush;
        }
        _isLastInitSegment(segmentData) {
          if (this._lastInitSegment === null) {
            return false;
          }
          if (this._lastInitSegment.data === segmentData) {
            return true;
          }
          const oldInit = this._lastInitSegment.data;
          if (oldInit.byteLength === segmentData.byteLength) {
            const newInitU8 = toUint8Array(segmentData);
            if (hashBuffer(newInitU8) === this._lastInitSegment.hash && areArraysOfNumbersEqual(oldInit, newInitU8)) {
              return true;
            }
          }
          return false;
        }
      };
    }
  });

  // src/core/segment_buffers/implementations/audio_video/index.ts
  var audio_video_default;
  var init_audio_video = __esm({
    "src/core/segment_buffers/implementations/audio_video/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_audio_video_segment_buffer();
      audio_video_default = AudioVideoSegmentBuffer;
    }
  });

  // src/core/segment_buffers/implementations/index.ts
  var init_implementations = __esm({
    "src/core/segment_buffers/implementations/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_audio_video();
      init_types4();
    }
  });

  // src/core/segment_buffers/segment_buffers_store.ts
  function shouldHaveNativeBuffer(bufferType) {
    return bufferType === "audio" || bufferType === "video";
  }
  var POSSIBLE_BUFFER_TYPES, SegmentBuffersStore;
  var init_segment_buffers_store = __esm({
    "src/core/segment_buffers/segment_buffers_store.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_errors();
      init_features();
      init_log();
      init_implementations();
      POSSIBLE_BUFFER_TYPES = [
        "audio",
        "video",
        "text",
        "image"
      ];
      SegmentBuffersStore = class {
        static isNative(bufferType) {
          return shouldHaveNativeBuffer(bufferType);
        }
        constructor(mediaElement, mediaSource) {
          this._mediaElement = mediaElement;
          this._mediaSource = mediaSource;
          this._initializedSegmentBuffers = {};
          this._onNativeBufferAddedOrDisabled = [];
        }
        getBufferTypes() {
          const bufferTypes = this.getNativeBufferTypes();
          if (features_default.nativeTextTracksBuffer != null || features_default.htmlTextTracksBuffer != null) {
            bufferTypes.push("text");
          }
          if (features_default.imageBuffer != null) {
            bufferTypes.push("image");
          }
          return bufferTypes;
        }
        getNativeBufferTypes() {
          return this._mediaElement.nodeName === "AUDIO" ? ["audio"] : ["video", "audio"];
        }
        getStatus(bufferType) {
          const initializedBuffer = this._initializedSegmentBuffers[bufferType];
          return initializedBuffer === void 0 ? { type: "uninitialized" } : initializedBuffer === null ? { type: "disabled" } : {
            type: "initialized",
            value: initializedBuffer
          };
        }
        waitForUsableBuffers() {
          if (this._areNativeBuffersUsable()) {
            return of(void 0);
          }
          return new Observable((obs) => {
            this._onNativeBufferAddedOrDisabled.push(() => {
              if (this._areNativeBuffersUsable()) {
                obs.next(void 0);
                obs.complete();
              }
            });
          });
        }
        disableSegmentBuffer(bufferType) {
          const currentValue = this._initializedSegmentBuffers[bufferType];
          if (currentValue === null) {
            log_default.warn(`SBS: The ${bufferType} SegmentBuffer was already disabled.`);
            return;
          }
          if (currentValue !== void 0) {
            throw new Error("Cannot disable an active SegmentBuffer.");
          }
          this._initializedSegmentBuffers[bufferType] = null;
          if (SegmentBuffersStore.isNative(bufferType)) {
            this._onNativeBufferAddedOrDisabled.forEach((cb) => cb());
          }
        }
        createSegmentBuffer(bufferType, codec, options = {}) {
          const memorizedSegmentBuffer = this._initializedSegmentBuffers[bufferType];
          if (shouldHaveNativeBuffer(bufferType)) {
            if (memorizedSegmentBuffer != null) {
              if (memorizedSegmentBuffer instanceof audio_video_default && memorizedSegmentBuffer.codec !== codec) {
                log_default.warn("SB: Reusing native SegmentBuffer with codec", memorizedSegmentBuffer.codec, "for codec", codec);
              } else {
                log_default.info("SB: Reusing native SegmentBuffer with codec", codec);
              }
              return memorizedSegmentBuffer;
            }
            log_default.info("SB: Adding native SegmentBuffer with codec", codec);
            const nativeSegmentBuffer = new audio_video_default(bufferType, codec, this._mediaSource);
            this._initializedSegmentBuffers[bufferType] = nativeSegmentBuffer;
            this._onNativeBufferAddedOrDisabled.forEach((cb) => cb());
            return nativeSegmentBuffer;
          }
          if (memorizedSegmentBuffer != null) {
            log_default.info("SB: Reusing a previous custom SegmentBuffer for the type", bufferType);
            return memorizedSegmentBuffer;
          }
          let segmentBuffer;
          if (bufferType === "text") {
            log_default.info("SB: Creating a new text SegmentBuffer");
            if (options.textTrackMode === "html") {
              if (features_default.htmlTextTracksBuffer == null) {
                throw new Error("HTML Text track feature not activated");
              }
              segmentBuffer = new features_default.htmlTextTracksBuffer(this._mediaElement, options.textTrackElement);
            } else {
              if (features_default.nativeTextTracksBuffer == null) {
                throw new Error("Native Text track feature not activated");
              }
              segmentBuffer = new features_default.nativeTextTracksBuffer(this._mediaElement, options.hideNativeSubtitle === true);
            }
            this._initializedSegmentBuffers.text = segmentBuffer;
            return segmentBuffer;
          } else if (bufferType === "image") {
            if (features_default.imageBuffer == null) {
              throw new Error("Image buffer feature not activated");
            }
            log_default.info("SB: Creating a new image SegmentBuffer");
            segmentBuffer = new features_default.imageBuffer();
            this._initializedSegmentBuffers.image = segmentBuffer;
            return segmentBuffer;
          }
          log_default.error("SB: Unknown buffer type:", bufferType);
          throw new MediaError("BUFFER_TYPE_UNKNOWN", "The player wants to create a SegmentBuffer of an unknown type.");
        }
        disposeSegmentBuffer(bufferType) {
          const memorizedSegmentBuffer = this._initializedSegmentBuffers[bufferType];
          if (memorizedSegmentBuffer == null) {
            log_default.warn("SB: Trying to dispose a SegmentBuffer that does not exist");
            return;
          }
          log_default.info("SB: Aborting SegmentBuffer", bufferType);
          memorizedSegmentBuffer.dispose();
          delete this._initializedSegmentBuffers[bufferType];
        }
        disposeAll() {
          POSSIBLE_BUFFER_TYPES.forEach((bufferType) => {
            if (this.getStatus(bufferType).type === "initialized") {
              this.disposeSegmentBuffer(bufferType);
            }
          });
        }
        _areNativeBuffersUsable() {
          const nativeBufferTypes = this.getNativeBufferTypes();
          const hasUnitializedBuffers = nativeBufferTypes.some((sbType) => this._initializedSegmentBuffers[sbType] === void 0);
          if (hasUnitializedBuffers) {
            return false;
          }
          const areAllDisabled = nativeBufferTypes.every((sbType) => this._initializedSegmentBuffers[sbType] === null);
          if (areAllDisabled) {
            return false;
          }
          return true;
        }
      };
    }
  });

  // src/core/segment_buffers/index.ts
  var segment_buffers_default;
  var init_segment_buffers = __esm({
    "src/core/segment_buffers/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_garbage_collector();
      init_segment_buffers_store();
      segment_buffers_default = SegmentBuffersStore;
    }
  });

  // src/utils/sorted_list.ts
  var SortedList;
  var init_sorted_list = __esm({
    "src/utils/sorted_list.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_array_find();
      init_array_includes();
      SortedList = class {
        constructor(sortingFunction) {
          this._array = [];
          this._sortingFn = sortingFunction;
        }
        add(...elements) {
          elements.sort(this._sortingFn);
          let j = 0;
          for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            let inserted = false;
            while (!inserted && j < this._array.length) {
              if (this._sortingFn(element, this._array[j]) < 0) {
                this._array.splice(j, 0, element);
                inserted = true;
              } else {
                j++;
              }
            }
            if (!inserted) {
              this._array.push(element);
            }
          }
        }
        length() {
          return this._array.length;
        }
        get(index) {
          if (index < 0 || index >= this._array.length) {
            throw new Error("Invalid index.");
          }
          return this._array[index];
        }
        findFirst(fn) {
          return arrayFind(this._array, fn);
        }
        has(element) {
          return arrayIncludes(this._array, element);
        }
        removeElement(element) {
          const indexOf = this._array.indexOf(element);
          if (indexOf >= 0) {
            this._array.splice(indexOf, 1);
            return indexOf;
          }
          return void 0;
        }
        head() {
          return this._array[0];
        }
        last() {
          return this._array[this._array.length - 1];
        }
        shift() {
          return this._array.shift();
        }
        pop() {
          return this._array.pop();
        }
      };
    }
  });

  // src/utils/weak_map_memory.ts
  var WeakMapMemory;
  var init_weak_map_memory = __esm({
    "src/utils/weak_map_memory.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      WeakMapMemory = class {
        constructor(fn) {
          this._weakMap = /* @__PURE__ */ new WeakMap();
          this._fn = fn;
        }
        get(obj) {
          const fromMemory = this._weakMap.get(obj);
          if (fromMemory === void 0) {
            const newElement = this._fn(obj);
            this._weakMap.set(obj, newElement);
            return newElement;
          } else {
            return fromMemory;
          }
        }
        destroy(obj) {
          this._weakMap.delete(obj);
        }
      };
    }
  });

  // src/core/stream/events_generators.ts
  var EVENTS, events_generators_default2;
  var init_events_generators2 = __esm({
    "src/core/stream/events_generators.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_object_assign();
      EVENTS = {
        activePeriodChanged(period) {
          return {
            type: "activePeriodChanged",
            value: { period }
          };
        },
        adaptationChange(bufferType, adaptation, period) {
          return {
            type: "adaptationChange",
            value: {
              type: bufferType,
              adaptation,
              period
            }
          };
        },
        addedSegment(content, segment, buffered, segmentData) {
          return {
            type: "added-segment",
            value: {
              content,
              segment,
              segmentData,
              buffered
            }
          };
        },
        bitrateEstimationChange(type, bitrate) {
          return {
            type: "bitrateEstimationChange",
            value: { type, bitrate }
          };
        },
        streamComplete(bufferType) {
          return {
            type: "complete-stream",
            value: { type: bufferType }
          };
        },
        endOfStream() {
          return {
            type: "end-of-stream",
            value: void 0
          };
        },
        needsManifestRefresh() {
          return {
            type: "needs-manifest-refresh",
            value: void 0
          };
        },
        manifestMightBeOufOfSync() {
          return {
            type: "manifest-might-be-out-of-sync",
            value: void 0
          };
        },
        needsMediaSourceReload(reloadAt, reloadOnPause) {
          return {
            type: "needs-media-source-reload",
            value: {
              position: reloadAt,
              autoPlay: reloadOnPause
            }
          };
        },
        lockedStream(bufferType, period) {
          return {
            type: "locked-stream",
            value: { bufferType, period }
          };
        },
        needsBufferFlush() {
          return { type: "needs-buffer-flush", value: void 0 };
        },
        needsDecipherabilityFlush(position, autoPlay2, duration) {
          return {
            type: "needs-decipherability-flush",
            value: { position, autoPlay: autoPlay2, duration }
          };
        },
        periodStreamReady(type, period, adaptation$) {
          return {
            type: "periodStreamReady",
            value: { type, period, adaptation$ }
          };
        },
        periodStreamCleared(type, period) {
          return {
            type: "periodStreamCleared",
            value: { type, period }
          };
        },
        encryptionDataEncountered(reprProtData, content) {
          return {
            type: "encryption-data-encountered",
            value: object_assign_default({ content }, reprProtData)
          };
        },
        representationChange(type, period, representation) {
          return {
            type: "representationChange",
            value: { type, period, representation }
          };
        },
        streamTerminating() {
          return {
            type: "stream-terminating",
            value: void 0
          };
        },
        resumeStream() {
          return {
            type: "resume-stream",
            value: void 0
          };
        },
        warning(value) {
          return { type: "warning", value };
        },
        waitingMediaSourceReload(bufferType, period, position, autoPlay2) {
          return {
            type: "waiting-media-source-reload",
            value: { bufferType, period, position, autoPlay: autoPlay2 }
          };
        }
      };
      events_generators_default2 = EVENTS;
    }
  });

  // src/core/stream/reload_after_switch.ts
  function reloadAfterSwitch(period, bufferType, playbackObserver, deltaPos) {
    return playbackObserver.observe(true).pipe(map((observation) => {
      var _a2;
      const currentTime = playbackObserver.getCurrentTime();
      const pos = currentTime + deltaPos;
      const reloadAt = Math.min(Math.max(period.start, pos), (_a2 = period.end) != null ? _a2 : Infinity);
      return events_generators_default2.waitingMediaSourceReload(bufferType, period, reloadAt, !observation.isPaused);
    }));
  }
  var init_reload_after_switch = __esm({
    "src/core/stream/reload_after_switch.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_events_generators2();
    }
  });

  // src/core/stream/representation/downloading_queue.ts
  var DownloadingQueue;
  var init_downloading_queue = __esm({
    "src/core/stream/representation/downloading_queue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_log();
      init_assert();
      init_assert_unreachable();
      init_object_assign();
      DownloadingQueue = class {
        constructor(content, downloadQueue, segmentFetcher, hasInitSegment) {
          this._content = content;
          this._currentObs$ = null;
          this._downloadQueue = downloadQueue;
          this._initSegmentRequest = null;
          this._mediaSegmentRequest = null;
          this._segmentFetcher = segmentFetcher;
          this._initSegmentMetadata$ = new ReplaySubject(1);
          this._mediaSegmentsAwaitingInitMetadata = /* @__PURE__ */ new Set();
          if (!hasInitSegment) {
            this._initSegmentMetadata$.next(void 0);
          }
        }
        getRequestedInitSegment() {
          return this._initSegmentRequest === null ? null : this._initSegmentRequest.segment;
        }
        getRequestedMediaSegment() {
          return this._mediaSegmentRequest === null ? null : this._mediaSegmentRequest.segment;
        }
        start() {
          if (this._currentObs$ !== null) {
            return this._currentObs$;
          }
          const obs = defer(() => {
            const mediaQueue$ = this._downloadQueue.asObservable().pipe(filter(({ segmentQueue }) => {
              let nextSegmentToLoadIdx = 0;
              for (; nextSegmentToLoadIdx < segmentQueue.length; nextSegmentToLoadIdx++) {
                const nextSegment = segmentQueue[nextSegmentToLoadIdx].segment;
                if (!this._mediaSegmentsAwaitingInitMetadata.has(nextSegment.id)) {
                  break;
                }
              }
              const currentSegmentRequest = this._mediaSegmentRequest;
              if (nextSegmentToLoadIdx >= segmentQueue.length) {
                return currentSegmentRequest !== null;
              } else if (currentSegmentRequest === null) {
                return true;
              }
              const nextItem = segmentQueue[nextSegmentToLoadIdx];
              if (currentSegmentRequest.segment.id !== nextItem.segment.id) {
                return true;
              }
              if (currentSegmentRequest.priority !== nextItem.priority) {
                this._segmentFetcher.updatePriority(currentSegmentRequest.request$, nextItem.priority);
              }
              return false;
            }), switchMap(({ segmentQueue }) => segmentQueue.length > 0 ? this._requestMediaSegments() : EMPTY));
            const initSegmentPush$ = this._downloadQueue.asObservable().pipe(filter((next) => {
              const initSegmentRequest = this._initSegmentRequest;
              if (next.initSegment !== null && initSegmentRequest !== null) {
                if (next.initSegment.priority !== initSegmentRequest.priority) {
                  this._segmentFetcher.updatePriority(initSegmentRequest.request$, next.initSegment.priority);
                }
                return false;
              } else {
                return next.initSegment === null || initSegmentRequest === null;
              }
            }), switchMap((nextQueue) => {
              if (nextQueue.initSegment === null) {
                return EMPTY;
              }
              return this._requestInitSegment(nextQueue.initSegment);
            }));
            return merge(initSegmentPush$, mediaQueue$);
          }).pipe(share());
          this._currentObs$ = obs;
          return obs;
        }
        _requestMediaSegments() {
          const { segmentQueue } = this._downloadQueue.getValue();
          const currentNeededSegment = segmentQueue[0];
          const recursivelyRequestSegments = (startingSegment) => {
            if (startingSegment === void 0) {
              return of({
                type: "end-of-queue",
                value: null
              });
            }
            const { segment, priority } = startingSegment;
            const context2 = object_assign_default({ segment }, this._content);
            const request$ = this._segmentFetcher.createRequest(context2, priority);
            this._mediaSegmentRequest = { segment, priority, request$ };
            return request$.pipe(mergeMap((evt) => {
              switch (evt.type) {
                case "retry":
                  return of({
                    type: "retry",
                    value: { segment, error: evt.value }
                  });
                case "interrupted":
                  log_default.info("Stream: segment request interrupted temporarly.", segment);
                  return EMPTY;
                case "ended":
                  this._mediaSegmentRequest = null;
                  const lastQueue = this._downloadQueue.getValue().segmentQueue;
                  if (lastQueue.length === 0) {
                    return of({
                      type: "end-of-queue",
                      value: null
                    });
                  } else if (lastQueue[0].segment.id === segment.id) {
                    lastQueue.shift();
                  }
                  return recursivelyRequestSegments(lastQueue[0]);
                case "chunk":
                case "chunk-complete":
                  this._mediaSegmentsAwaitingInitMetadata.add(segment.id);
                  return this._initSegmentMetadata$.pipe(take(1), map((initTimescale) => {
                    if (evt.type === "chunk-complete") {
                      return {
                        type: "end-of-segment",
                        value: { segment }
                      };
                    }
                    const parsed = evt.parse(initTimescale);
                    assert(parsed.segmentType === "media", "Should have loaded a media segment.");
                    return object_assign_default({}, parsed, {
                      type: "parsed-media",
                      segment
                    });
                  }), finalize(() => {
                    this._mediaSegmentsAwaitingInitMetadata.delete(segment.id);
                  }));
                default:
                  assertUnreachable(evt);
              }
            }));
          };
          return defer(() => recursivelyRequestSegments(currentNeededSegment)).pipe(finalize(() => {
            this._mediaSegmentRequest = null;
          }));
        }
        _requestInitSegment(queuedInitSegment) {
          if (queuedInitSegment === null) {
            this._initSegmentRequest = null;
            return EMPTY;
          }
          const { segment, priority } = queuedInitSegment;
          const context2 = object_assign_default({ segment }, this._content);
          const request$ = this._segmentFetcher.createRequest(context2, priority);
          this._initSegmentRequest = { segment, priority, request$ };
          return request$.pipe(mergeMap((evt) => {
            switch (evt.type) {
              case "retry":
                return of({
                  type: "retry",
                  value: { segment, error: evt.value }
                });
              case "interrupted":
                log_default.info("Stream: init segment request interrupted temporarly.", segment);
                return EMPTY;
              case "chunk":
                const parsed = evt.parse(void 0);
                assert(parsed.segmentType === "init", "Should have loaded an init segment.");
                return concat(of(object_assign_default({}, parsed, {
                  type: "parsed-init",
                  segment
                })), defer(() => {
                  if (parsed.segmentType === "init") {
                    this._initSegmentMetadata$.next(parsed.initTimescale);
                  }
                  return EMPTY;
                }));
              case "chunk-complete":
                return of({
                  type: "end-of-segment",
                  value: { segment }
                });
              case "ended":
                return EMPTY;
              default:
                assertUnreachable(evt);
            }
          })).pipe(finalize(() => {
            this._initSegmentRequest = null;
          }));
        }
      };
    }
  });

  // src/core/stream/representation/check_for_discontinuity.ts
  function checkForDiscontinuity(content, checkedRange, nextSegmentStart, hasFinishedLoading, bufferedSegments) {
    const { period, adaptation, representation } = content;
    const nextBufferedInRangeIdx = getIndexOfFirstChunkInRange(bufferedSegments, checkedRange);
    if (nextBufferedInRangeIdx === null) {
      if (nextSegmentStart === null) {
        if (hasFinishedLoading && period.end !== void 0 && checkedRange.end >= period.end) {
          return { start: void 0, end: null };
        }
        const discontinuityEnd = representation.index.checkDiscontinuity(checkedRange.start);
        if (discontinuityEnd !== null) {
          return {
            start: void 0,
            end: discontinuityEnd
          };
        }
      }
      return null;
    }
    const nextBufferedSegment = bufferedSegments[nextBufferedInRangeIdx];
    if (nextBufferedSegment.bufferedStart !== void 0 && nextBufferedSegment.bufferedStart > checkedRange.start && (nextSegmentStart === null || nextBufferedSegment.infos.segment.end <= nextSegmentStart)) {
      log_default.debug("RS: current discontinuity encountered", adaptation.type, nextBufferedSegment.bufferedStart);
      return {
        start: void 0,
        end: nextBufferedSegment.bufferedStart
      };
    }
    const nextHoleIdx = getIndexOfFirstDiscontinuityBetweenChunks(bufferedSegments, checkedRange, nextBufferedInRangeIdx + 1);
    if (nextHoleIdx !== null && (nextSegmentStart === null || bufferedSegments[nextHoleIdx].infos.segment.end <= nextSegmentStart)) {
      const start = bufferedSegments[nextHoleIdx - 1].bufferedEnd;
      const end = bufferedSegments[nextHoleIdx].bufferedStart;
      log_default.debug("RS: future discontinuity encountered", adaptation.type, start, end);
      return { start, end };
    } else if (nextSegmentStart === null) {
      if (hasFinishedLoading && period.end !== void 0) {
        if (checkedRange.end < period.end) {
          return null;
        }
        const lastBufferedInPeriodIdx = getIndexOfLastChunkInPeriod(bufferedSegments, period.end);
        if (lastBufferedInPeriodIdx !== null) {
          const lastSegment = bufferedSegments[lastBufferedInPeriodIdx];
          if (lastSegment.bufferedEnd !== void 0 && lastSegment.bufferedEnd < period.end) {
            log_default.debug("RS: discontinuity encountered at the end of the current period", adaptation.type, lastSegment.bufferedEnd, period.end);
            return {
              start: lastSegment.bufferedEnd,
              end: null
            };
          }
        }
      }
      if (period.end !== void 0 && checkedRange.end >= period.end) {
        return null;
      }
      for (let bufIdx = bufferedSegments.length - 1; bufIdx >= 0; bufIdx--) {
        const bufSeg = bufferedSegments[bufIdx];
        if (bufSeg.bufferedStart === void 0) {
          break;
        }
        if (bufSeg.bufferedStart < checkedRange.end) {
          if (bufSeg.bufferedEnd !== void 0 && bufSeg.bufferedEnd < checkedRange.end) {
            const discontinuityEnd = representation.index.checkDiscontinuity(checkedRange.end);
            if (discontinuityEnd !== null) {
              return {
                start: bufSeg.bufferedEnd,
                end: discontinuityEnd
              };
            }
          }
          return null;
        }
      }
    }
    return null;
  }
  function getIndexOfFirstChunkInRange(bufferedChunks, range) {
    for (let bufIdx = 0; bufIdx < bufferedChunks.length; bufIdx++) {
      const bufSeg = bufferedChunks[bufIdx];
      if (bufSeg.bufferedStart === void 0 || bufSeg.bufferedEnd === void 0 || bufSeg.bufferedStart >= range.end) {
        return null;
      }
      if (bufSeg.bufferedEnd > range.start) {
        return bufIdx;
      }
    }
    return null;
  }
  function getIndexOfFirstDiscontinuityBetweenChunks(bufferedChunks, range, startFromIndex) {
    if (startFromIndex <= 0) {
      log_default.error("RS: Asked to check a discontinuity before the first chunk.");
      return null;
    }
    for (let bufIdx = startFromIndex; bufIdx < bufferedChunks.length; bufIdx++) {
      const currSegment = bufferedChunks[bufIdx];
      const prevSegment = bufferedChunks[bufIdx - 1];
      if (currSegment.bufferedStart === void 0 || prevSegment.bufferedEnd === void 0 || currSegment.bufferedStart >= range.end) {
        return null;
      }
      if (currSegment.bufferedStart - prevSegment.bufferedEnd > 0) {
        return bufIdx;
      }
    }
    return null;
  }
  function getIndexOfLastChunkInPeriod(bufferedChunks, periodEnd) {
    for (let bufIdx = bufferedChunks.length - 1; bufIdx >= 0; bufIdx--) {
      const bufSeg = bufferedChunks[bufIdx];
      if (bufSeg.bufferedStart === void 0) {
        return null;
      }
      if (bufSeg.bufferedStart < periodEnd) {
        return bufIdx;
      }
    }
    return null;
  }
  var init_check_for_discontinuity = __esm({
    "src/core/stream/representation/check_for_discontinuity.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
    }
  });

  // src/core/stream/representation/get_needed_segments.ts
  function getNeededSegments({
    bufferedSegments,
    content,
    currentPlaybackTime,
    fastSwitchThreshold,
    getBufferedHistory,
    neededRange,
    segmentsBeingPushed,
    maxBufferSize
  }) {
    const { representation } = content;
    let availableBufferSize = getAvailableBufferSize(bufferedSegments, segmentsBeingPushed, maxBufferSize);
    const availableSegmentsForRange = representation.index.getSegments(neededRange.start, neededRange.end - neededRange.start);
    const segmentsToKeep = bufferedSegments.filter((bufferedSegment) => !shouldContentBeReplaced(bufferedSegment.infos, content, currentPlaybackTime, fastSwitchThreshold)).filter((currentSeg, i, consideredSegments) => {
      const prevSeg = i === 0 ? null : consideredSegments[i - 1];
      const nextSeg = i >= consideredSegments.length - 1 ? null : consideredSegments[i + 1];
      let lazySegmentHistory = null;
      if (doesStartSeemGarbageCollected(currentSeg, prevSeg, neededRange.start)) {
        lazySegmentHistory = getBufferedHistory(currentSeg.infos);
        if (shouldReloadSegmentGCedAtTheStart(lazySegmentHistory, currentSeg.bufferedStart)) {
          return false;
        }
        log_default.debug("Stream: skipping segment gc-ed at the start", currentSeg);
      }
      if (doesEndSeemGarbageCollected(currentSeg, nextSeg, neededRange.end)) {
        lazySegmentHistory = lazySegmentHistory != null ? lazySegmentHistory : getBufferedHistory(currentSeg.infos);
        if (shouldReloadSegmentGCedAtTheEnd(lazySegmentHistory, currentSeg.bufferedEnd)) {
          return false;
        }
        log_default.debug("Stream: skipping segment gc-ed at the end", currentSeg);
      }
      return true;
    });
    const {
      MINIMUM_SEGMENT_SIZE,
      MIN_BUFFER_AHEAD
    } = config_default.getCurrent();
    let shouldStopLoadingSegments = false;
    const ROUNDING_ERROR = Math.min(1 / 60, MINIMUM_SEGMENT_SIZE);
    let isBufferFull = false;
    const segmentsOnHold = [];
    const segmentsToLoad = availableSegmentsForRange.filter((segment) => {
      const contentObject = object_assign_default({ segment }, content);
      if (segmentsBeingPushed.length > 0) {
        const isAlreadyBeingPushed = segmentsBeingPushed.some((pendingSegment) => areSameContent(contentObject, pendingSegment));
        if (isAlreadyBeingPushed) {
          return false;
        }
      }
      const { duration, time, end } = segment;
      if (segment.isInit) {
        return true;
      }
      if (shouldStopLoadingSegments) {
        segmentsOnHold.push(segment);
        return false;
      }
      if (segment.complete && duration < MINIMUM_SEGMENT_SIZE) {
        return false;
      }
      if (segmentsBeingPushed.length > 0) {
        const waitForPushedSegment = segmentsBeingPushed.some((pendingSegment) => {
          if (pendingSegment.period.id !== content.period.id || pendingSegment.adaptation.id !== content.adaptation.id) {
            return false;
          }
          const { segment: oldSegment } = pendingSegment;
          if (oldSegment.time - ROUNDING_ERROR > time) {
            return false;
          }
          if (oldSegment.end + ROUNDING_ERROR < end) {
            return false;
          }
          return !shouldContentBeReplaced(pendingSegment, contentObject, currentPlaybackTime, fastSwitchThreshold);
        });
        if (waitForPushedSegment) {
          return false;
        }
      }
      for (let i = 0; i < segmentsToKeep.length; i++) {
        const completeSeg = segmentsToKeep[i];
        const areFromSamePeriod = completeSeg.infos.period.id === content.period.id;
        if (areFromSamePeriod) {
          const completeSegInfos = completeSeg.infos.segment;
          if (time - completeSegInfos.time > -ROUNDING_ERROR && completeSegInfos.end - end > -ROUNDING_ERROR) {
            return false;
          }
        }
      }
      const estimatedSegmentSize = duration * content.representation.bitrate / 8e3;
      if (availableBufferSize - estimatedSegmentSize < 0) {
        isBufferFull = true;
        if (time > neededRange.start + MIN_BUFFER_AHEAD) {
          shouldStopLoadingSegments = true;
          segmentsOnHold.push(segment);
          return false;
        }
      }
      for (let i = 0; i < segmentsToKeep.length; i++) {
        const completeSeg = segmentsToKeep[i];
        if (completeSeg.end + ROUNDING_ERROR > time) {
          const shouldLoad = completeSeg.start > time + ROUNDING_ERROR || getLastContiguousSegment(segmentsToKeep, i).end < end - ROUNDING_ERROR;
          if (shouldLoad) {
            availableBufferSize -= estimatedSegmentSize;
          }
          return shouldLoad;
        }
      }
      availableBufferSize -= estimatedSegmentSize;
      return true;
    });
    return { segmentsToLoad, segmentsOnHold, isBufferFull };
  }
  function getAvailableBufferSize(bufferedSegments, segmentsBeingPushed, maxVideoBufferSize) {
    let availableBufferSize = maxVideoBufferSize;
    availableBufferSize -= segmentsBeingPushed.reduce((size, segment) => {
      const { bitrate } = segment.representation;
      const { duration } = segment.segment;
      return size + bitrate / 8e3 * duration;
    }, 0);
    return bufferedSegments.reduce((size, chunk) => {
      if (chunk.chunkSize !== void 0) {
        return size - chunk.chunkSize / 1e3;
      } else {
        return size;
      }
    }, availableBufferSize);
  }
  function getLastContiguousSegment(bufferedSegments, startIndex) {
    let j = startIndex + 1;
    const { MINIMUM_SEGMENT_SIZE } = config_default.getCurrent();
    const ROUNDING_ERROR = Math.min(1 / 60, MINIMUM_SEGMENT_SIZE);
    while (j < bufferedSegments.length - 1 && bufferedSegments[j - 1].end + ROUNDING_ERROR > bufferedSegments[j].start) {
      j++;
    }
    j--;
    return bufferedSegments[j];
  }
  function shouldContentBeReplaced(oldContent, currentContent, currentPlaybackTime, fastSwitchThreshold) {
    const { CONTENT_REPLACEMENT_PADDING } = config_default.getCurrent();
    if (oldContent.period.id !== currentContent.period.id) {
      return false;
    }
    const { segment } = oldContent;
    if (segment.time < currentPlaybackTime + CONTENT_REPLACEMENT_PADDING) {
      return false;
    }
    if (oldContent.adaptation.id !== currentContent.adaptation.id) {
      return true;
    }
    return canFastSwitch(oldContent.representation, currentContent.representation, fastSwitchThreshold);
  }
  function canFastSwitch(oldSegmentRepresentation, newSegmentRepresentation, fastSwitchThreshold) {
    const oldContentBitrate = oldSegmentRepresentation.bitrate;
    const { BITRATE_REBUFFERING_RATIO } = config_default.getCurrent();
    if (fastSwitchThreshold === void 0) {
      const bitrateCeil = oldContentBitrate * BITRATE_REBUFFERING_RATIO;
      return newSegmentRepresentation.bitrate > bitrateCeil;
    }
    return oldContentBitrate < fastSwitchThreshold && newSegmentRepresentation.bitrate > oldContentBitrate;
  }
  function doesStartSeemGarbageCollected(currentSeg, prevSeg, maximumStartTime) {
    const { MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT } = config_default.getCurrent();
    if (currentSeg.bufferedStart === void 0) {
      log_default.warn("Stream: Start of a segment unknown. Assuming it is garbage collected by default.", currentSeg);
      return true;
    }
    if (prevSeg !== null && prevSeg.bufferedEnd !== void 0 && currentSeg.bufferedStart - prevSeg.bufferedEnd < 0.1) {
      return false;
    }
    if (maximumStartTime < currentSeg.bufferedStart && currentSeg.bufferedStart - currentSeg.start > MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT) {
      log_default.info("Stream: The start of the wanted segment has been garbage collected", currentSeg);
      return true;
    }
    return false;
  }
  function doesEndSeemGarbageCollected(currentSeg, nextSeg, minimumEndTime) {
    const { MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT } = config_default.getCurrent();
    if (currentSeg.bufferedEnd === void 0) {
      log_default.warn("Stream: End of a segment unknown. Assuming it is garbage collected by default.", currentSeg);
      return true;
    }
    if (nextSeg !== null && nextSeg.bufferedStart !== void 0 && nextSeg.bufferedStart - currentSeg.bufferedEnd < 0.1) {
      return false;
    }
    if (minimumEndTime > currentSeg.bufferedEnd && currentSeg.end - currentSeg.bufferedEnd > MAX_TIME_MISSING_FROM_COMPLETE_SEGMENT) {
      log_default.info("Stream: The end of the wanted segment has been garbage collected", currentSeg);
      return true;
    }
    return false;
  }
  function shouldReloadSegmentGCedAtTheStart(segmentEntries, currentBufferedStart) {
    if (segmentEntries.length < 2) {
      return true;
    }
    const lastEntry = segmentEntries[segmentEntries.length - 1];
    const lastBufferedStart = lastEntry.bufferedStart;
    if (currentBufferedStart !== void 0 && currentBufferedStart - lastBufferedStart > 0.05) {
      return true;
    }
    const prevEntry = segmentEntries[segmentEntries.length - 2];
    const prevBufferedStart = prevEntry.bufferedStart;
    return Math.abs(prevBufferedStart - lastBufferedStart) > 0.01;
  }
  function shouldReloadSegmentGCedAtTheEnd(segmentEntries, currentBufferedEnd) {
    if (segmentEntries.length < 2) {
      return true;
    }
    const lastEntry = segmentEntries[segmentEntries.length - 1];
    const lastBufferedEnd = lastEntry.bufferedEnd;
    if (currentBufferedEnd !== void 0 && lastBufferedEnd - currentBufferedEnd > 0.05) {
      return true;
    }
    const prevEntry = segmentEntries[segmentEntries.length - 2];
    const prevBufferedEnd = prevEntry.bufferedEnd;
    return Math.abs(prevBufferedEnd - lastBufferedEnd) > 0.01;
  }
  var init_get_needed_segments = __esm({
    "src/core/stream/representation/get_needed_segments.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_log();
      init_manifest2();
      init_object_assign();
    }
  });

  // src/core/stream/representation/get_segment_priority.ts
  function getSegmentPriority(segmentTime, wantedStartTimestamp) {
    const distance = segmentTime - wantedStartTimestamp;
    const { SEGMENT_PRIORITIES_STEPS } = config_default.getCurrent();
    for (let priority = 0; priority < SEGMENT_PRIORITIES_STEPS.length; priority++) {
      if (distance < SEGMENT_PRIORITIES_STEPS[priority]) {
        return priority;
      }
    }
    return SEGMENT_PRIORITIES_STEPS.length;
  }
  var init_get_segment_priority = __esm({
    "src/core/stream/representation/get_segment_priority.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
    }
  });

  // src/core/stream/representation/get_buffer_status.ts
  function getBufferStatus(content, initialWantedTime, playbackObserver, fastSwitchThreshold, bufferGoal, maxBufferSize, segmentBuffer) {
    segmentBuffer.synchronizeInventory();
    const { representation } = content;
    const neededRange = getRangeOfNeededSegments(content, initialWantedTime, bufferGoal);
    const shouldRefreshManifest = representation.index.shouldRefresh(neededRange.start, neededRange.end);
    const segmentsBeingPushed = segmentBuffer.getPendingOperations().filter((operation) => operation.type === 2 /* EndOfSegment */).map((operation) => operation.value);
    const bufferedSegments = getPlayableBufferedSegments({
      start: Math.max(neededRange.start - 0.5, 0),
      end: neededRange.end + 0.5
    }, segmentBuffer.getInventory());
    const currentPlaybackTime = playbackObserver.getCurrentTime();
    const getBufferedHistory = segmentBuffer.getSegmentHistory.bind(segmentBuffer);
    const {
      segmentsToLoad,
      segmentsOnHold,
      isBufferFull
    } = getNeededSegments({
      content,
      bufferedSegments,
      currentPlaybackTime,
      fastSwitchThreshold,
      getBufferedHistory,
      neededRange,
      segmentsBeingPushed,
      maxBufferSize
    });
    const prioritizedNeededSegments = segmentsToLoad.map((segment) => ({
      priority: getSegmentPriority(segment.time, initialWantedTime),
      segment
    }));
    const hasFinishedLoading = neededRange.hasReachedPeriodEnd && prioritizedNeededSegments.length === 0 && segmentsOnHold.length === 0;
    let imminentDiscontinuity;
    if (!representation.index.isInitialized() || !representation.index.areSegmentsChronologicallyGenerated() && !hasFinishedLoading) {
      imminentDiscontinuity = null;
    } else {
      let nextSegmentStart = null;
      if (segmentsBeingPushed.length > 0) {
        nextSegmentStart = Math.min(...segmentsBeingPushed.map((info) => info.segment.time));
      }
      if (segmentsOnHold.length > 0) {
        nextSegmentStart = nextSegmentStart !== null ? Math.min(nextSegmentStart, segmentsOnHold[0].time) : segmentsOnHold[0].time;
      }
      if (prioritizedNeededSegments.length > 0) {
        nextSegmentStart = nextSegmentStart !== null ? Math.min(nextSegmentStart, prioritizedNeededSegments[0].segment.time) : prioritizedNeededSegments[0].segment.time;
      }
      imminentDiscontinuity = checkForDiscontinuity(content, neededRange, nextSegmentStart, hasFinishedLoading, bufferedSegments);
    }
    return {
      imminentDiscontinuity,
      hasFinishedLoading,
      neededSegments: prioritizedNeededSegments,
      isBufferFull,
      shouldRefreshManifest
    };
  }
  function getRangeOfNeededSegments(content, initialWantedTime, bufferGoal) {
    var _a2;
    let wantedStartPosition;
    const { manifest, period, representation } = content;
    const lastIndexPosition = representation.index.getLastPosition();
    const representationIndex = representation.index;
    if (!isNullOrUndefined(lastIndexPosition) && initialWantedTime >= lastIndexPosition && representationIndex.isInitialized() && representationIndex.isFinished() && isPeriodTheCurrentAndLastOne(manifest, period, initialWantedTime)) {
      wantedStartPosition = lastIndexPosition - 1;
    } else {
      wantedStartPosition = initialWantedTime;
    }
    const wantedEndPosition = wantedStartPosition + bufferGoal;
    let hasReachedPeriodEnd;
    if (!representation.index.isInitialized() || !representation.index.isFinished() || period.end === void 0) {
      hasReachedPeriodEnd = false;
    } else if (lastIndexPosition === void 0) {
      hasReachedPeriodEnd = wantedEndPosition >= period.end;
    } else if (lastIndexPosition === null) {
      hasReachedPeriodEnd = true;
    } else {
      hasReachedPeriodEnd = wantedEndPosition >= lastIndexPosition;
    }
    return {
      start: Math.max(wantedStartPosition, period.start),
      end: Math.min(wantedEndPosition, (_a2 = period.end) != null ? _a2 : Infinity),
      hasReachedPeriodEnd
    };
  }
  function isPeriodTheCurrentAndLastOne(manifest, period, time) {
    var _a2;
    return period.containsTime(time) && manifest.isLastPeriodKnown && period.id === ((_a2 = manifest.periods[manifest.periods.length - 1]) == null ? void 0 : _a2.id);
  }
  function getPlayableBufferedSegments(neededRange, segmentInventory) {
    const { MINIMUM_SEGMENT_SIZE } = config_default.getCurrent();
    const segmentRoundingError = Math.max(1 / 60, MINIMUM_SEGMENT_SIZE);
    const minEnd = neededRange.start + segmentRoundingError;
    const maxStart = neededRange.end - segmentRoundingError;
    const overlappingChunks = [];
    for (let i = segmentInventory.length - 1; i >= 0; i--) {
      const eltInventory = segmentInventory[i];
      const { representation } = eltInventory.infos;
      if (!eltInventory.partiallyPushed && representation.decipherable !== false && representation.isSupported) {
        const inventorySegment = eltInventory.infos.segment;
        const eltInventoryStart = inventorySegment.time / inventorySegment.timescale;
        const eltInventoryEnd = !inventorySegment.complete ? eltInventory.end : eltInventoryStart + inventorySegment.duration / inventorySegment.timescale;
        if (eltInventoryEnd > minEnd && eltInventoryStart < maxStart || eltInventory.end > minEnd && eltInventory.start < maxStart) {
          overlappingChunks.unshift(eltInventory);
        }
      }
    }
    return overlappingChunks;
  }
  var init_get_buffer_status = __esm({
    "src/core/stream/representation/get_buffer_status.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_is_null_or_undefined();
      init_check_for_discontinuity();
      init_get_needed_segments();
      init_get_segment_priority();
    }
  });

  // src/core/stream/representation/force_garbage_collection.ts
  function forceGarbageCollection(currentPosition, bufferingQueue) {
    return defer(() => {
      const GC_GAP_CALM = config_default.getCurrent().BUFFER_GC_GAPS.CALM;
      const GC_GAP_BEEFY = config_default.getCurrent().BUFFER_GC_GAPS.BEEFY;
      log_default.warn("Stream: Running garbage collector");
      const buffered = bufferingQueue.getBufferedRanges();
      let cleanedupRanges = selectGCedRanges(currentPosition, buffered, GC_GAP_CALM);
      if (cleanedupRanges.length === 0) {
        cleanedupRanges = selectGCedRanges(currentPosition, buffered, GC_GAP_BEEFY);
      }
      log_default.debug("Stream: GC cleaning", cleanedupRanges);
      return from(cleanedupRanges.map(({ start, end }) => start >= end ? of(null) : bufferingQueue.removeBuffer(start, end))).pipe(concatAll());
    });
  }
  function selectGCedRanges(position, buffered, gcGap) {
    const { innerRange, outerRanges } = getInnerAndOuterTimeRanges(buffered, position);
    const cleanedupRanges = [];
    for (let i = 0; i < outerRanges.length; i++) {
      const outerRange = outerRanges[i];
      if (position - gcGap > outerRange.end) {
        cleanedupRanges.push(outerRange);
      } else if (position + gcGap < outerRange.start) {
        cleanedupRanges.push(outerRange);
      }
    }
    if (innerRange !== null) {
      log_default.debug("Stream: GC removing part of inner range", cleanedupRanges);
      if (position - gcGap > innerRange.start) {
        cleanedupRanges.push({
          start: innerRange.start,
          end: position - gcGap
        });
      }
      if (position + gcGap < innerRange.end) {
        cleanedupRanges.push({
          start: position + gcGap,
          end: innerRange.end
        });
      }
    }
    return cleanedupRanges;
  }
  var init_force_garbage_collection = __esm({
    "src/core/stream/representation/force_garbage_collection.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_config2();
      init_log();
      init_ranges();
    }
  });

  // src/core/stream/representation/append_segment_to_buffer.ts
  function appendSegmentToBuffer(playbackObserver, segmentBuffer, dataInfos) {
    const append$ = segmentBuffer.pushChunk(dataInfos);
    return append$.pipe(catchError((appendError) => {
      if (!(appendError instanceof Error) || appendError.name !== "QuotaExceededError") {
        const reason = appendError instanceof Error ? appendError.toString() : "An unknown error happened when pushing content";
        throw new MediaError("BUFFER_APPEND_ERROR", reason);
      }
      return playbackObserver.observe(true).pipe(take(1), mergeMap((observation) => {
        const currentPos = observation.position + observation.wantedTimeOffset;
        return concat(forceGarbageCollection(currentPos, segmentBuffer).pipe(ignoreElements()), append$).pipe(catchError((forcedGCError) => {
          const reason = forcedGCError instanceof Error ? forcedGCError.toString() : "Could not clean the buffer";
          throw new MediaError("BUFFER_FULL_ERROR", reason);
        }));
      }));
    }));
  }
  var init_append_segment_to_buffer = __esm({
    "src/core/stream/representation/append_segment_to_buffer.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_errors();
      init_force_garbage_collection();
    }
  });

  // src/core/stream/representation/push_init_segment.ts
  function pushInitSegment({
    playbackObserver,
    content,
    segment,
    segmentData,
    segmentBuffer
  }) {
    return defer(() => {
      if (segmentData === null) {
        return EMPTY;
      }
      const codec = content.representation.getMimeTypeString();
      const data = {
        initSegment: segmentData,
        chunk: null,
        timestampOffset: 0,
        appendWindow: [void 0, void 0],
        codec
      };
      return appendSegmentToBuffer(playbackObserver, segmentBuffer, { data, inventoryInfos: null }).pipe(map(() => {
        const buffered = segmentBuffer.getBufferedRanges();
        return events_generators_default2.addedSegment(content, segment, buffered, segmentData);
      }));
    });
  }
  var init_push_init_segment = __esm({
    "src/core/stream/representation/push_init_segment.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_events_generators2();
      init_append_segment_to_buffer();
    }
  });

  // src/core/stream/representation/push_media_segment.ts
  function pushMediaSegment({
    playbackObserver,
    content,
    initSegmentData,
    parsedSegment,
    segment,
    segmentBuffer
  }) {
    return defer(() => {
      var _a2, _b2;
      if (parsedSegment.chunkData === null) {
        return EMPTY;
      }
      const {
        chunkData,
        chunkInfos,
        chunkOffset,
        chunkSize,
        appendWindow
      } = parsedSegment;
      const codec = content.representation.getMimeTypeString();
      const { APPEND_WINDOW_SECURITIES } = config_default.getCurrent();
      const safeAppendWindow = [
        appendWindow[0] !== void 0 ? Math.max(0, appendWindow[0] - APPEND_WINDOW_SECURITIES.START) : void 0,
        appendWindow[1] !== void 0 ? appendWindow[1] + APPEND_WINDOW_SECURITIES.END : void 0
      ];
      const data = {
        initSegment: initSegmentData,
        chunk: chunkData,
        timestampOffset: chunkOffset,
        appendWindow: safeAppendWindow,
        codec
      };
      let estimatedStart = (_a2 = chunkInfos == null ? void 0 : chunkInfos.time) != null ? _a2 : segment.time;
      const estimatedDuration = (_b2 = chunkInfos == null ? void 0 : chunkInfos.duration) != null ? _b2 : segment.duration;
      let estimatedEnd = estimatedStart + estimatedDuration;
      if (safeAppendWindow[0] !== void 0) {
        estimatedStart = Math.max(estimatedStart, safeAppendWindow[0]);
      }
      if (safeAppendWindow[1] !== void 0) {
        estimatedEnd = Math.min(estimatedEnd, safeAppendWindow[1]);
      }
      const inventoryInfos = object_assign_default({
        segment,
        chunkSize,
        start: estimatedStart,
        end: estimatedEnd
      }, content);
      return appendSegmentToBuffer(playbackObserver, segmentBuffer, { data, inventoryInfos }).pipe(map(() => {
        const buffered = segmentBuffer.getBufferedRanges();
        return events_generators_default2.addedSegment(content, segment, buffered, chunkData);
      }));
    });
  }
  var init_push_media_segment = __esm({
    "src/core/stream/representation/push_media_segment.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_config2();
      init_object_assign();
      init_events_generators2();
      init_append_segment_to_buffer();
    }
  });

  // src/core/stream/representation/representation_stream.ts
  function RepresentationStream({
    content,
    options,
    playbackObserver,
    segmentBuffer,
    segmentFetcher,
    terminate$
  }) {
    const {
      period,
      adaptation,
      representation
    } = content;
    const {
      bufferGoal$,
      maxBufferSize$,
      drmSystemId,
      fastSwitchThreshold$
    } = options;
    const bufferType = adaptation.type;
    const initSegmentState = {
      segment: representation.index.getInitSegment(),
      segmentData: null,
      isLoaded: false
    };
    const reCheckNeededSegments$ = new Subject();
    const lastSegmentQueue = createSharedReference({
      initSegment: null,
      segmentQueue: []
    });
    const hasInitSegment = initSegmentState.segment !== null;
    const downloadingQueue = new DownloadingQueue(content, lastSegmentQueue, segmentFetcher, hasInitSegment);
    if (!hasInitSegment) {
      initSegmentState.segmentData = null;
      initSegmentState.isLoaded = true;
    }
    let hasSentEncryptionData = false;
    let encryptionEvent$ = EMPTY;
    if (drmSystemId !== void 0) {
      const encryptionData = representation.getEncryptionData(drmSystemId);
      if (encryptionData.length > 0) {
        encryptionEvent$ = of(...encryptionData.map((d) => events_generators_default2.encryptionDataEncountered(d, content)));
        hasSentEncryptionData = true;
      }
    }
    const queue$ = downloadingQueue.start().pipe(mergeMap(onQueueEvent));
    const status$ = combineLatest([
      playbackObserver.observe(true),
      bufferGoal$,
      maxBufferSize$,
      terminate$.pipe(take(1), startWith(null)),
      reCheckNeededSegments$.pipe(startWith(void 0))
    ]).pipe(withLatestFrom(fastSwitchThreshold$), mergeMap(function([
      [observation, bufferGoal, maxBufferSize, terminate],
      fastSwitchThreshold
    ]) {
      const initialWantedTime = observation.position + observation.wantedTimeOffset;
      const status = getBufferStatus(content, initialWantedTime, playbackObserver, fastSwitchThreshold, bufferGoal, maxBufferSize, segmentBuffer);
      const { neededSegments } = status;
      let neededInitSegment = null;
      if (!representation.index.isInitialized()) {
        if (initSegmentState.segment === null) {
          log_default.warn("Stream: Uninitialized index without an initialization segment");
        } else if (initSegmentState.isLoaded) {
          log_default.warn("Stream: Uninitialized index with an already loaded initialization segment");
        } else {
          const wantedStart = observation.position + observation.wantedTimeOffset;
          neededInitSegment = {
            segment: initSegmentState.segment,
            priority: getSegmentPriority(period.start, wantedStart)
          };
        }
      } else if (neededSegments.length > 0 && !initSegmentState.isLoaded && initSegmentState.segment !== null) {
        const initSegmentPriority = neededSegments[0].priority;
        neededInitSegment = {
          segment: initSegmentState.segment,
          priority: initSegmentPriority
        };
      }
      if (terminate === null) {
        lastSegmentQueue.setValue({
          initSegment: neededInitSegment,
          segmentQueue: neededSegments
        });
      } else if (terminate.urgent) {
        log_default.debug("Stream: Urgent switch, terminate now.", bufferType);
        lastSegmentQueue.setValue({ initSegment: null, segmentQueue: [] });
        lastSegmentQueue.finish();
        return of(events_generators_default2.streamTerminating());
      } else {
        const mostNeededSegment = neededSegments[0];
        const initSegmentRequest = downloadingQueue.getRequestedInitSegment();
        const currentSegmentRequest = downloadingQueue.getRequestedMediaSegment();
        const nextQueue = currentSegmentRequest === null || mostNeededSegment === void 0 || currentSegmentRequest.id !== mostNeededSegment.segment.id ? [] : [mostNeededSegment];
        const nextInit = initSegmentRequest === null ? null : neededInitSegment;
        lastSegmentQueue.setValue({
          initSegment: nextInit,
          segmentQueue: nextQueue
        });
        if (nextQueue.length === 0 && nextInit === null) {
          log_default.debug("Stream: No request left, terminate", bufferType);
          lastSegmentQueue.finish();
          return of(events_generators_default2.streamTerminating());
        }
      }
      const bufferStatusEvt = of({
        type: "stream-status",
        value: {
          period,
          position: observation.position,
          bufferType,
          imminentDiscontinuity: status.imminentDiscontinuity,
          hasFinishedLoading: status.hasFinishedLoading,
          neededSegments: status.neededSegments
        }
      });
      let bufferRemoval = EMPTY;
      const { UPTO_CURRENT_POSITION_CLEANUP } = config_default.getCurrent();
      if (status.isBufferFull) {
        const gcedPosition = Math.max(0, initialWantedTime - UPTO_CURRENT_POSITION_CLEANUP);
        if (gcedPosition > 0) {
          bufferRemoval = segmentBuffer.removeBuffer(0, gcedPosition).pipe(ignoreElements());
        }
      }
      return status.shouldRefreshManifest ? concat(of(events_generators_default2.needsManifestRefresh()), bufferStatusEvt, bufferRemoval) : concat(bufferStatusEvt, bufferRemoval);
    }), takeWhile((e) => e.type !== "stream-terminating", true));
    return merge(status$, queue$, encryptionEvent$).pipe(share());
    function onQueueEvent(evt) {
      switch (evt.type) {
        case "retry":
          return concat(of({ type: "warning", value: evt.value.error }), defer(() => {
            const retriedSegment = evt.value.segment;
            const { index } = representation;
            if (index.isSegmentStillAvailable(retriedSegment) === false) {
              reCheckNeededSegments$.next();
            } else if (index.canBeOutOfSyncError(evt.value.error, retriedSegment)) {
              return of(events_generators_default2.manifestMightBeOufOfSync());
            }
            return EMPTY;
          }));
        case "parsed-init":
        case "parsed-media":
          return onParsedChunk(evt);
        case "end-of-segment": {
          const { segment } = evt.value;
          return segmentBuffer.endOfSegment(object_assign_default({ segment }, content)).pipe(ignoreElements());
        }
        case "end-of-queue":
          reCheckNeededSegments$.next();
          return EMPTY;
        default:
          assertUnreachable(evt);
      }
    }
    function onParsedChunk(evt) {
      if (evt.segmentType === "init") {
        (0, import_next_tick2.default)(() => {
          reCheckNeededSegments$.next();
        });
        initSegmentState.segmentData = evt.initializationData;
        initSegmentState.isLoaded = true;
        const allEncryptionData = representation.getAllEncryptionData();
        const initEncEvt$ = !hasSentEncryptionData && allEncryptionData.length > 0 ? of(...allEncryptionData.map((p) => events_generators_default2.encryptionDataEncountered(p, content))) : EMPTY;
        const pushEvent$ = pushInitSegment({
          playbackObserver,
          content,
          segment: evt.segment,
          segmentData: evt.initializationData,
          segmentBuffer
        });
        return merge(initEncEvt$, pushEvent$);
      } else {
        const {
          inbandEvents,
          needsManifestRefresh,
          protectionDataUpdate
        } = evt;
        const segmentEncryptionEvent$ = protectionDataUpdate && !hasSentEncryptionData ? of(...representation.getAllEncryptionData().map((p) => events_generators_default2.encryptionDataEncountered(p, content))) : EMPTY;
        const manifestRefresh$ = needsManifestRefresh === true ? of(events_generators_default2.needsManifestRefresh()) : EMPTY;
        const inbandEvents$ = inbandEvents !== void 0 && inbandEvents.length > 0 ? of({
          type: "inband-events",
          value: inbandEvents
        }) : EMPTY;
        const initSegmentData = initSegmentState.segmentData;
        const pushMediaSegment$ = pushMediaSegment({
          playbackObserver,
          content,
          initSegmentData,
          parsedSegment: evt,
          segment: evt.segment,
          segmentBuffer
        });
        return concat(segmentEncryptionEvent$, manifestRefresh$, inbandEvents$, pushMediaSegment$);
      }
    }
  }
  var import_next_tick2;
  var init_representation_stream = __esm({
    "src/core/stream/representation/representation_stream.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      import_next_tick2 = __toESM(require_next_tick());
      init_esm5();
      init_config2();
      init_log();
      init_assert_unreachable();
      init_object_assign();
      init_reference();
      init_events_generators2();
      init_downloading_queue();
      init_get_buffer_status();
      init_get_segment_priority();
      init_push_init_segment();
      init_push_media_segment();
    }
  });

  // src/core/stream/representation/index.ts
  var representation_default2;
  var init_representation2 = __esm({
    "src/core/stream/representation/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_representation_stream();
      representation_default2 = RepresentationStream;
    }
  });

  // src/core/stream/adaptation/create_representation_estimator.ts
  function createRepresentationEstimator(content, abrManager, observation$) {
    const { manifest, adaptation } = content;
    const abrFeedbacks$ = new Subject();
    const estimator$ = merge(fromEvent2(manifest, "decipherabilityUpdate"), of(null)).pipe(map(() => {
      const playableRepresentations = adaptation.getPlayableRepresentations();
      if (playableRepresentations.length <= 0) {
        const noRepErr = new MediaError("NO_PLAYABLE_REPRESENTATION", "No Representation in the chosen " + adaptation.type + " Adaptation can be played");
        throw noRepErr;
      }
      return playableRepresentations;
    }), distinctUntilChanged((prevRepr, newRepr) => {
      if (prevRepr.length !== newRepr.length) {
        return false;
      }
      for (let i = 0; i < newRepr.length; i++) {
        if (prevRepr[i].id !== newRepr[i].id) {
          return false;
        }
      }
      return true;
    }), switchMap((playableRepresentations) => abrManager.get$(content, playableRepresentations, observation$, abrFeedbacks$)));
    return { estimator$, abrFeedbacks$ };
  }
  var init_create_representation_estimator = __esm({
    "src/core/stream/adaptation/create_representation_estimator.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_errors();
      init_event_emitter();
    }
  });

  // src/core/stream/adaptation/adaptation_stream.ts
  function AdaptationStream({
    abrManager,
    playbackObserver,
    content,
    options,
    segmentBuffer,
    segmentFetcherCreator,
    wantedBufferAhead,
    maxVideoBufferSize
  }) {
    const directManualBitrateSwitching = options.manualBitrateSwitchingMode === "direct";
    const { manifest, period, adaptation } = content;
    const bufferGoalRatioMap = {};
    const { estimator$, abrFeedbacks$ } = createRepresentationEstimator(content, abrManager, playbackObserver.observe(true));
    const segmentFetcher = segmentFetcherCreator.createSegmentFetcher(adaptation.type, {
      onRequestBegin(value) {
        abrFeedbacks$.next({ type: "requestBegin", value });
      },
      onRequestEnd(value) {
        abrFeedbacks$.next({ type: "requestEnd", value });
      },
      onProgress(value) {
        abrFeedbacks$.next({ type: "progress", value });
      },
      onMetrics(value) {
        abrFeedbacks$.next({ type: "metrics", value });
      }
    });
    const lastEstimate = createSharedReference(null);
    const abrEstimate$ = estimator$.pipe(tap((estimate) => {
      lastEstimate.setValue(estimate);
    }), deferSubscriptions(), share());
    const bitrateEstimate$ = abrEstimate$.pipe(filter(({ bitrate }) => bitrate != null), distinctUntilChanged((old, current) => old.bitrate === current.bitrate), map(({ bitrate }) => {
      log_default.debug(`Stream: new ${adaptation.type} bitrate estimate`, bitrate);
      return events_generators_default2.bitrateEstimationChange(adaptation.type, bitrate);
    }));
    const representationStreams$ = abrEstimate$.pipe(exhaustMap((estimate, i) => {
      return recursivelyCreateRepresentationStreams(estimate, i === 0);
    }));
    return merge(representationStreams$, bitrateEstimate$);
    function recursivelyCreateRepresentationStreams(fromEstimate, isFirstEstimate) {
      const { representation } = fromEstimate;
      if (directManualBitrateSwitching && fromEstimate.manual && !isFirstEstimate) {
        const { DELTA_POSITION_AFTER_RELOAD } = config_default.getCurrent();
        return reloadAfterSwitch(period, adaptation.type, playbackObserver, DELTA_POSITION_AFTER_RELOAD.bitrateSwitch);
      }
      const terminateCurrentStream$ = lastEstimate.asObservable().pipe(filter((newEstimate) => newEstimate === null || newEstimate.representation.id !== representation.id || newEstimate.manual && !fromEstimate.manual), take(1), map((newEstimate) => {
        if (newEstimate === null) {
          log_default.info("Stream: urgent Representation termination", adaptation.type);
          return { urgent: true };
        }
        if (newEstimate.urgent) {
          log_default.info("Stream: urgent Representation switch", adaptation.type);
          return { urgent: true };
        } else {
          log_default.info("Stream: slow Representation switch", adaptation.type);
          return { urgent: false };
        }
      }));
      const fastSwitchThreshold$ = !options.enableFastSwitching ? of(0) : lastEstimate.asObservable().pipe(map((estimate) => estimate === null ? void 0 : estimate.knownStableBitrate), distinctUntilChanged());
      const representationChange$ = of(events_generators_default2.representationChange(adaptation.type, period, representation));
      return concat(representationChange$, createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$)).pipe(tap((evt) => {
        if (evt.type === "representationChange" || evt.type === "added-segment") {
          return abrFeedbacks$.next(evt);
        }
      }), mergeMap((evt) => {
        if (evt.type === "stream-terminating") {
          const estimate = lastEstimate.getValue();
          if (estimate === null) {
            return EMPTY;
          }
          return recursivelyCreateRepresentationStreams(estimate, false);
        }
        return of(evt);
      }));
    }
    function createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$) {
      return defer(() => {
        const oldBufferGoalRatio = bufferGoalRatioMap[representation.id];
        const bufferGoalRatio = oldBufferGoalRatio != null ? oldBufferGoalRatio : 1;
        bufferGoalRatioMap[representation.id] = bufferGoalRatio;
        const bufferGoal$ = wantedBufferAhead.asObservable().pipe(map((wba) => wba * bufferGoalRatio));
        const maxBufferSize$ = adaptation.type === "video" ? maxVideoBufferSize.asObservable() : of(Infinity);
        log_default.info("Stream: changing representation", adaptation.type, representation.id, representation.bitrate);
        return representation_default2({
          playbackObserver,
          content: {
            representation,
            adaptation,
            period,
            manifest
          },
          segmentBuffer,
          segmentFetcher,
          terminate$: terminateCurrentStream$,
          options: {
            bufferGoal$,
            maxBufferSize$,
            drmSystemId: options.drmSystemId,
            fastSwitchThreshold$
          }
        }).pipe(catchError((err) => {
          const formattedError = formatError(err, {
            defaultCode: "NONE",
            defaultReason: "Unknown `RepresentationStream` error"
          });
          if (formattedError.code === "BUFFER_FULL_ERROR") {
            const wba = wantedBufferAhead.getValue();
            const lastBufferGoalRatio = bufferGoalRatio;
            if (lastBufferGoalRatio <= 0.25 || wba * lastBufferGoalRatio <= 2) {
              throw formattedError;
            }
            bufferGoalRatioMap[representation.id] = lastBufferGoalRatio - 0.25;
            return createRepresentationStream(representation, terminateCurrentStream$, fastSwitchThreshold$);
          }
          throw formattedError;
        }));
      });
    }
  }
  var init_adaptation_stream = __esm({
    "src/core/stream/adaptation/adaptation_stream.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_config2();
      init_errors();
      init_log();
      init_defer_subscriptions();
      init_reference();
      init_events_generators2();
      init_reload_after_switch();
      init_representation2();
      init_create_representation_estimator();
    }
  });

  // src/core/stream/adaptation/index.ts
  var adaptation_default;
  var init_adaptation2 = __esm({
    "src/core/stream/adaptation/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_adaptation_stream();
      adaptation_default = AdaptationStream;
    }
  });

  // src/core/stream/period/create_empty_adaptation_stream.ts
  function createEmptyAdaptationStream(playbackObserver, wantedBufferAhead, bufferType, content) {
    const { period } = content;
    let hasFinishedLoading = false;
    const wantedBufferAhead$ = wantedBufferAhead.asObservable();
    const observation$ = playbackObserver.observe(true);
    return combineLatest([
      observation$,
      wantedBufferAhead$
    ]).pipe(mergeMap(([observation, wba]) => {
      const { position } = observation;
      if (period.end !== void 0 && position + wba >= period.end) {
        log_default.debug('Stream: full "empty" AdaptationStream', bufferType);
        hasFinishedLoading = true;
      }
      return of({
        type: "stream-status",
        value: {
          period,
          bufferType,
          position: observation.position,
          imminentDiscontinuity: null,
          hasFinishedLoading,
          neededSegments: [],
          shouldRefreshManifest: false
        }
      });
    }));
  }
  var init_create_empty_adaptation_stream = __esm({
    "src/core/stream/period/create_empty_adaptation_stream.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_log();
    }
  });

  // src/utils/are_codecs_compatible.ts
  function areCodecsCompatible(a, b) {
    const [mimeTypeA, ...propsA] = a.split(";");
    const [mimeTypeB, ...propsB] = b.split(";");
    if (mimeTypeA !== mimeTypeB) {
      return false;
    }
    const codecsA = arrayFind(propsA, (prop) => startsWith(prop, "codecs="));
    const codecsB = arrayFind(propsB, (prop) => startsWith(prop, "codecs="));
    if (codecsA === void 0 || codecsB === void 0) {
      return false;
    }
    const codecA = codecsA.substring(7);
    const codecB = codecsB.substring(7);
    if (codecA.split(".")[0] !== codecB.split(".")[0]) {
      return false;
    }
    return true;
  }
  var are_codecs_compatible_default;
  var init_are_codecs_compatible = __esm({
    "src/utils/are_codecs_compatible.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_array_find();
      init_starts_with();
      are_codecs_compatible_default = areCodecsCompatible;
    }
  });

  // src/core/stream/period/get_adaptation_switch_strategy.ts
  function getAdaptationSwitchStrategy(segmentBuffer, period, adaptation, playbackInfo, options) {
    if (segmentBuffer.codec !== void 0 && options.onCodecSwitch === "reload" && !hasCompatibleCodec(adaptation, segmentBuffer.codec)) {
      return { type: "needs-reload", value: void 0 };
    }
    const buffered = segmentBuffer.getBufferedRanges();
    if (buffered.length === 0) {
      return { type: "continue", value: void 0 };
    }
    const bufferedRanges = convertToRanges(buffered);
    const start = period.start;
    const end = period.end == null ? Infinity : period.end;
    const intersection = keepRangeIntersection(bufferedRanges, [{ start, end }]);
    if (intersection.length === 0) {
      return { type: "continue", value: void 0 };
    }
    segmentBuffer.synchronizeInventory();
    const inventory = segmentBuffer.getInventory();
    if (!inventory.some((buf) => buf.infos.period.id === period.id && buf.infos.adaptation.id !== adaptation.id)) {
      return { type: "continue", value: void 0 };
    }
    const adaptationInBuffer = getBufferedRangesFromAdaptation(inventory, period, adaptation);
    const unwantedRange = excludeFromRanges(intersection, adaptationInBuffer);
    if (unwantedRange.length === 0) {
      return { type: "continue", value: void 0 };
    }
    const { currentTime } = playbackInfo;
    const { audioTrackSwitchingMode } = options;
    const hasReloadSwitchingMode = adaptation.type === "video" || adaptation.type === "audio" && audioTrackSwitchingMode === "reload";
    if (hasReloadSwitchingMode && isTimeInRange({ start, end }, currentTime) && (playbackInfo.readyState > 1 || !adaptation.getPlayableRepresentations().some((rep) => {
      var _a2;
      return are_codecs_compatible_default(rep.getMimeTypeString(), (_a2 = segmentBuffer.codec) != null ? _a2 : "");
    })) && !isTimeInRanges(adaptationInBuffer, currentTime)) {
      return { type: "needs-reload", value: void 0 };
    }
    const shouldFlush = adaptation.type === "audio" && audioTrackSwitchingMode === "direct";
    const rangesToExclude = [];
    const lastSegmentBefore = getLastSegmentBeforePeriod(inventory, period);
    if (lastSegmentBefore !== null && (lastSegmentBefore.bufferedEnd === void 0 || period.start - lastSegmentBefore.bufferedEnd < 1)) {
      rangesToExclude.push({
        start: 0,
        end: period.start + 1
      });
    }
    const bufferType = adaptation.type;
    const { ADAPTATION_SWITCH_BUFFER_PADDINGS } = config_default.getCurrent();
    let paddingBefore = ADAPTATION_SWITCH_BUFFER_PADDINGS[bufferType].before;
    if (paddingBefore == null) {
      paddingBefore = 0;
    }
    let paddingAfter = ADAPTATION_SWITCH_BUFFER_PADDINGS[bufferType].after;
    if (paddingAfter == null) {
      paddingAfter = 0;
    }
    if (!shouldFlush) {
      rangesToExclude.push({
        start: currentTime - paddingBefore,
        end: currentTime + paddingAfter
      });
    }
    if (period.end !== void 0) {
      const firstSegmentAfter = getFirstSegmentAfterPeriod(inventory, period);
      if (firstSegmentAfter !== null && (firstSegmentAfter.bufferedStart === void 0 || firstSegmentAfter.bufferedStart - period.end < 1)) {
        rangesToExclude.push({
          start: period.end - 1,
          end: Number.MAX_VALUE
        });
      }
    }
    const toRemove = excludeFromRanges(unwantedRange, rangesToExclude);
    if (toRemove.length === 0) {
      return { type: "continue", value: void 0 };
    }
    return shouldFlush ? { type: "flush-buffer", value: toRemove } : { type: "clean-buffer", value: toRemove };
  }
  function hasCompatibleCodec(adaptation, segmentBufferCodec) {
    return adaptation.getPlayableRepresentations().some((rep) => are_codecs_compatible_default(rep.getMimeTypeString(), segmentBufferCodec));
  }
  function getBufferedRangesFromAdaptation(inventory, period, adaptation) {
    return inventory.reduce((acc, chunk) => {
      if (chunk.infos.period.id !== period.id || chunk.infos.adaptation.id !== adaptation.id) {
        return acc;
      }
      const { bufferedStart, bufferedEnd } = chunk;
      if (bufferedStart === void 0 || bufferedEnd === void 0) {
        return acc;
      }
      acc.push({ start: bufferedStart, end: bufferedEnd });
      return acc;
    }, []);
  }
  function getLastSegmentBeforePeriod(inventory, period) {
    for (let i = 0; i < inventory.length; i++) {
      if (inventory[i].infos.period.start >= period.start) {
        if (i > 0) {
          return inventory[i - 1];
        }
        return null;
      }
    }
    return inventory.length > 0 ? inventory[inventory.length - 1] : null;
  }
  function getFirstSegmentAfterPeriod(inventory, period) {
    for (let i = 0; i < inventory.length; i++) {
      if (inventory[i].infos.period.start > period.start) {
        return inventory[i];
      }
    }
    return null;
  }
  var init_get_adaptation_switch_strategy = __esm({
    "src/core/stream/period/get_adaptation_switch_strategy.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_are_codecs_compatible();
      init_ranges();
    }
  });

  // src/core/stream/period/period_stream.ts
  function PeriodStream({
    abrManager,
    bufferType,
    content,
    garbageCollectors,
    playbackObserver,
    segmentFetcherCreator,
    segmentBuffersStore,
    options,
    wantedBufferAhead,
    maxVideoBufferSize
  }) {
    const { period } = content;
    const adaptation$ = new ReplaySubject(1);
    return adaptation$.pipe(switchMap((adaptation, switchNb) => {
      const { DELTA_POSITION_AFTER_RELOAD } = config_default.getCurrent();
      const relativePosAfterSwitch = switchNb === 0 ? 0 : bufferType === "audio" ? DELTA_POSITION_AFTER_RELOAD.trackSwitch.audio : bufferType === "video" ? DELTA_POSITION_AFTER_RELOAD.trackSwitch.video : DELTA_POSITION_AFTER_RELOAD.trackSwitch.other;
      if (adaptation === null) {
        log_default.info(`Stream: Set no ${bufferType} Adaptation. P:`, period.start);
        const segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);
        let cleanBuffer$;
        if (segmentBufferStatus.type === "initialized") {
          log_default.info(`Stream: Clearing previous ${bufferType} SegmentBuffer`);
          if (segment_buffers_default.isNative(bufferType)) {
            return reloadAfterSwitch(period, bufferType, playbackObserver, 0);
          }
          if (period.end === void 0) {
            cleanBuffer$ = segmentBufferStatus.value.removeBuffer(period.start, Infinity);
          } else if (period.end <= period.start) {
            cleanBuffer$ = of(null);
          } else {
            cleanBuffer$ = segmentBufferStatus.value.removeBuffer(period.start, period.end);
          }
        } else {
          if (segmentBufferStatus.type === "uninitialized") {
            segmentBuffersStore.disableSegmentBuffer(bufferType);
          }
          cleanBuffer$ = of(null);
        }
        return concat(cleanBuffer$.pipe(map(() => events_generators_default2.adaptationChange(bufferType, null, period))), createEmptyAdaptationStream(playbackObserver, wantedBufferAhead, bufferType, { period }));
      }
      if (segment_buffers_default.isNative(bufferType) && segmentBuffersStore.getStatus(bufferType).type === "disabled") {
        return reloadAfterSwitch(period, bufferType, playbackObserver, relativePosAfterSwitch);
      }
      log_default.info(`Stream: Updating ${bufferType} adaptation`, `A: ${adaptation.id}`, `P: ${period.start}`);
      const newStream$ = defer(() => {
        const readyState = playbackObserver.getReadyState();
        const segmentBuffer = createOrReuseSegmentBuffer(segmentBuffersStore, bufferType, adaptation, options);
        const playbackInfos = {
          currentTime: playbackObserver.getCurrentTime(),
          readyState
        };
        const strategy = getAdaptationSwitchStrategy(segmentBuffer, period, adaptation, playbackInfos, options);
        if (strategy.type === "needs-reload") {
          return reloadAfterSwitch(period, bufferType, playbackObserver, relativePosAfterSwitch);
        }
        const needsBufferFlush$ = strategy.type === "flush-buffer" ? of(events_generators_default2.needsBufferFlush()) : EMPTY;
        const cleanBuffer$ = strategy.type === "clean-buffer" || strategy.type === "flush-buffer" ? concat(...strategy.value.map(({ start, end }) => segmentBuffer.removeBuffer(start, end))).pipe(ignoreElements()) : EMPTY;
        const bufferGarbageCollector$ = garbageCollectors.get(segmentBuffer);
        const adaptationStream$ = createAdaptationStream(adaptation, segmentBuffer);
        return segmentBuffersStore.waitForUsableBuffers().pipe(mergeMap(() => {
          return concat(cleanBuffer$, needsBufferFlush$, merge(adaptationStream$, bufferGarbageCollector$));
        }));
      });
      return concat(of(events_generators_default2.adaptationChange(bufferType, adaptation, period)), newStream$);
    }), startWith(events_generators_default2.periodStreamReady(bufferType, period, adaptation$)));
    function createAdaptationStream(adaptation, segmentBuffer) {
      const { manifest } = content;
      const adaptationPlaybackObserver = createAdaptationStreamPlaybackObserver(playbackObserver, segmentBuffer);
      return adaptation_default({
        abrManager,
        content: { manifest, period, adaptation },
        options,
        playbackObserver: adaptationPlaybackObserver,
        segmentBuffer,
        segmentFetcherCreator,
        wantedBufferAhead,
        maxVideoBufferSize
      }).pipe(catchError((error) => {
        if (!segment_buffers_default.isNative(bufferType)) {
          log_default.error(`Stream: ${bufferType} Stream crashed. Aborting it.`, error);
          segmentBuffersStore.disposeSegmentBuffer(bufferType);
          const formattedError = formatError(error, {
            defaultCode: "NONE",
            defaultReason: "Unknown `AdaptationStream` error"
          });
          return concat(of(events_generators_default2.warning(formattedError)), createEmptyAdaptationStream(playbackObserver, wantedBufferAhead, bufferType, { period }));
        }
        log_default.error(`Stream: ${bufferType} Stream crashed. Stopping playback.`, error);
        throw error;
      }));
    }
  }
  function createOrReuseSegmentBuffer(segmentBuffersStore, bufferType, adaptation, options) {
    const segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);
    if (segmentBufferStatus.type === "initialized") {
      log_default.info("Stream: Reusing a previous SegmentBuffer for the type", bufferType);
      return segmentBufferStatus.value;
    }
    const codec = getFirstDeclaredMimeType(adaptation);
    const sbOptions = bufferType === "text" ? options.textTrackOptions : void 0;
    return segmentBuffersStore.createSegmentBuffer(bufferType, codec, sbOptions);
  }
  function getFirstDeclaredMimeType(adaptation) {
    const representations = adaptation.getPlayableRepresentations();
    if (representations.length === 0) {
      const noRepErr = new MediaError("NO_PLAYABLE_REPRESENTATION", "No Representation in the chosen " + adaptation.type + " Adaptation can be played");
      throw noRepErr;
    }
    return representations[0].getMimeTypeString();
  }
  function createAdaptationStreamPlaybackObserver(initialPlaybackObserver, segmentBuffer) {
    return initialPlaybackObserver.deriveReadOnlyObserver((observation$) => observation$.pipe(map(mapObservation)), mapObservation);
    function mapObservation(baseObservation) {
      const buffered = segmentBuffer.getBufferedRanges();
      return object_assign_default({}, baseObservation, { bufferGap: getLeftSizeOfRange(buffered, baseObservation.position) });
    }
  }
  var init_period_stream = __esm({
    "src/core/stream/period/period_stream.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_config2();
      init_errors();
      init_log();
      init_object_assign();
      init_ranges();
      init_segment_buffers();
      init_adaptation2();
      init_events_generators2();
      init_reload_after_switch();
      init_create_empty_adaptation_stream();
      init_get_adaptation_switch_strategy();
    }
  });

  // src/core/stream/period/index.ts
  var period_default;
  var init_period2 = __esm({
    "src/core/stream/period/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_period_stream();
      period_default = PeriodStream;
    }
  });

  // src/core/stream/orchestrator/active_period_emitter.ts
  function ActivePeriodEmitter(buffers$) {
    const numberOfStreams = buffers$.length;
    return merge(...buffers$).pipe(filter(({ type }) => type === "periodStreamCleared" || type === "adaptationChange" || type === "representationChange"), scan((acc, evt) => {
      switch (evt.type) {
        case "periodStreamCleared":
          {
            const { period, type } = evt.value;
            const currentInfos = acc[period.id];
            if (currentInfos !== void 0 && currentInfos.buffers.has(type)) {
              currentInfos.buffers.delete(type);
              if (currentInfos.buffers.size === 0) {
                delete acc[period.id];
              }
            }
          }
          break;
        case "adaptationChange": {
          if (evt.value.adaptation !== null) {
            return acc;
          }
        }
        case "representationChange":
          {
            const { period, type } = evt.value;
            const currentInfos = acc[period.id];
            if (currentInfos === void 0) {
              const bufferSet = /* @__PURE__ */ new Set();
              bufferSet.add(type);
              acc[period.id] = { period, buffers: bufferSet };
            } else if (!currentInfos.buffers.has(type)) {
              currentInfos.buffers.add(type);
            }
          }
          break;
      }
      return acc;
    }, {}), map((list) => {
      const activePeriodIDs = Object.keys(list);
      const completePeriods = [];
      for (let i = 0; i < activePeriodIDs.length; i++) {
        const periodInfos = list[activePeriodIDs[i]];
        if (periodInfos !== void 0 && periodInfos.buffers.size === numberOfStreams) {
          completePeriods.push(periodInfos.period);
        }
      }
      return completePeriods.reduce((acc, period) => {
        if (acc === null) {
          return period;
        }
        return period.start < acc.start ? period : acc;
      }, null);
    }), distinctUntilChanged((a, b) => {
      return a === null && b === null || a !== null && b !== null && a.id === b.id;
    }));
  }
  var init_active_period_emitter = __esm({
    "src/core/stream/orchestrator/active_period_emitter.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
    }
  });

  // src/core/stream/orchestrator/are_streams_complete.ts
  function areStreamsComplete(...streams) {
    const isCompleteArray = streams.map((stream) => {
      return stream.pipe(filter((evt) => {
        return evt.type === "complete-stream" || evt.type === "stream-status" && !evt.value.hasFinishedLoading;
      }), map((evt) => evt.type === "complete-stream"), startWith(false), distinctUntilChanged());
    });
    return combineLatest(isCompleteArray).pipe(map((areComplete) => areComplete.every((isComplete) => isComplete)), distinctUntilChanged());
  }
  var init_are_streams_complete = __esm({
    "src/core/stream/orchestrator/are_streams_complete.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
    }
  });

  // src/core/stream/orchestrator/get_blacklisted_ranges.ts
  function getBlacklistedRanges(segmentBuffer, contents) {
    if (contents.length === 0) {
      return [];
    }
    segmentBuffer.synchronizeInventory();
    const accumulator = [];
    const inventory = segmentBuffer.getInventory();
    for (let i = 0; i < inventory.length; i++) {
      const chunk = inventory[i];
      const hasContent = contents.some((content) => {
        return chunk.infos.period.id === content.period.id && chunk.infos.adaptation.id === content.adaptation.id && chunk.infos.representation.id === content.representation.id;
      });
      if (hasContent) {
        const { bufferedStart, bufferedEnd } = chunk;
        if (bufferedStart === void 0 || bufferedEnd === void 0) {
          log_default.warn("SO: No buffered start or end found from a segment.");
          const buffered = segmentBuffer.getBufferedRanges();
          const len = buffered.length;
          if (len === 0) {
            return [];
          }
          return [{ start: buffered.start(0), end: buffered.end(len - 1) }];
        }
        const previousLastElement = accumulator[accumulator.length - 1];
        if (previousLastElement !== void 0 && previousLastElement.end === bufferedStart) {
          previousLastElement.end = bufferedEnd;
        } else {
          accumulator.push({ start: bufferedStart, end: bufferedEnd });
        }
      }
    }
    return accumulator;
  }
  var init_get_blacklisted_ranges = __esm({
    "src/core/stream/orchestrator/get_blacklisted_ranges.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
    }
  });

  // src/core/stream/orchestrator/stream_orchestrator.ts
  function StreamOrchestrator(content, playbackObserver, abrManager, segmentBuffersStore, segmentFetcherCreator, options) {
    const { manifest, initialPeriod } = content;
    const {
      maxBufferAhead,
      maxBufferBehind,
      wantedBufferAhead,
      maxVideoBufferSize
    } = options;
    const {
      MAXIMUM_MAX_BUFFER_AHEAD,
      MAXIMUM_MAX_BUFFER_BEHIND
    } = config_default.getCurrent();
    const garbageCollectors = new WeakMapMemory((segmentBuffer) => {
      const { bufferType } = segmentBuffer;
      const defaultMaxBehind = MAXIMUM_MAX_BUFFER_BEHIND[bufferType] != null ? MAXIMUM_MAX_BUFFER_BEHIND[bufferType] : Infinity;
      const defaultMaxAhead = MAXIMUM_MAX_BUFFER_AHEAD[bufferType] != null ? MAXIMUM_MAX_BUFFER_AHEAD[bufferType] : Infinity;
      return BufferGarbageCollector({
        segmentBuffer,
        currentTime$: playbackObserver.observe(true).pipe(map((o) => o.position + o.wantedTimeOffset)),
        maxBufferBehind$: maxBufferBehind.asObservable().pipe(map((val) => Math.min(val, defaultMaxBehind))),
        maxBufferAhead$: maxBufferAhead.asObservable().pipe(map((val) => Math.min(val, defaultMaxAhead)))
      });
    });
    const streamsArray = segmentBuffersStore.getBufferTypes().map((bufferType) => {
      return manageEveryStreams(bufferType, initialPeriod).pipe(deferSubscriptions(), share());
    });
    const activePeriodChanged$ = ActivePeriodEmitter(streamsArray).pipe(filter((period) => period !== null), map((period) => {
      log_default.info("Stream: New active period", period.start);
      return events_generators_default2.activePeriodChanged(period);
    }));
    const isLastPeriodKnown$ = fromEvent2(manifest, "manifestUpdate").pipe(map(() => manifest.isLastPeriodKnown), startWith(manifest.isLastPeriodKnown), distinctUntilChanged());
    const endOfStream$ = combineLatest([
      areStreamsComplete(...streamsArray),
      isLastPeriodKnown$
    ]).pipe(map(([areComplete, isLastPeriodKnown]) => areComplete && isLastPeriodKnown), distinctUntilChanged(), map((emitEndOfStream) => emitEndOfStream ? events_generators_default2.endOfStream() : events_generators_default2.resumeStream()));
    return merge(...streamsArray, activePeriodChanged$, endOfStream$);
    function manageEveryStreams(bufferType, basePeriod) {
      const periodList = new SortedList((a, b) => a.start - b.start);
      const destroyStreams$ = new Subject();
      let enableOutOfBoundsCheck = false;
      function launchConsecutiveStreamsForPeriod(period) {
        return manageConsecutivePeriodStreams(bufferType, period, destroyStreams$).pipe(map((message) => {
          switch (message.type) {
            case "waiting-media-source-reload":
              const firstPeriod = periodList.head();
              if (firstPeriod === void 0 || firstPeriod.id !== message.value.period.id) {
                return events_generators_default2.lockedStream(message.value.bufferType, message.value.period);
              } else {
                const { position, autoPlay: autoPlay2 } = message.value;
                return events_generators_default2.needsMediaSourceReload(position, autoPlay2);
              }
            case "periodStreamReady":
              enableOutOfBoundsCheck = true;
              periodList.add(message.value.period);
              break;
            case "periodStreamCleared":
              periodList.removeElement(message.value.period);
              break;
          }
          return message;
        }), share());
      }
      function isOutOfPeriodList(time) {
        const head = periodList.head();
        const last2 = periodList.last();
        if (head == null || last2 == null) {
          return true;
        }
        return head.start > time || (last2.end == null ? Infinity : last2.end) < time;
      }
      const restartStreamsWhenOutOfBounds$ = playbackObserver.observe(true).pipe(filterMap(({ position, wantedTimeOffset }) => {
        var _a2;
        const time = wantedTimeOffset + position;
        if (!enableOutOfBoundsCheck || !isOutOfPeriodList(time)) {
          return null;
        }
        const nextPeriod = (_a2 = manifest.getPeriodForTime(time)) != null ? _a2 : manifest.getNextPeriod(time);
        if (nextPeriod === void 0) {
          return null;
        }
        log_default.info("SO: Current position out of the bounds of the active periods,re-creating Streams.", bufferType, position + wantedTimeOffset);
        enableOutOfBoundsCheck = false;
        destroyStreams$.next();
        return nextPeriod;
      }, null), mergeMap((newInitialPeriod) => {
        if (newInitialPeriod == null) {
          throw new MediaError("MEDIA_TIME_NOT_FOUND", "The wanted position is not found in the Manifest.");
        }
        return launchConsecutiveStreamsForPeriod(newInitialPeriod);
      }));
      const handleDecipherabilityUpdate$ = fromEvent2(manifest, "decipherabilityUpdate").pipe(mergeMap((updates) => {
        const segmentBufferStatus = segmentBuffersStore.getStatus(bufferType);
        const ofCurrentType = updates.filter((update) => update.adaptation.type === bufferType);
        if (ofCurrentType.length === 0 || segmentBufferStatus.type !== "initialized") {
          return EMPTY;
        }
        const undecipherableUpdates = ofCurrentType.filter((update) => update.representation.decipherable === false);
        const segmentBuffer = segmentBufferStatus.value;
        const rangesToClean = getBlacklistedRanges(segmentBuffer, undecipherableUpdates);
        if (rangesToClean.length === 0) {
          return EMPTY;
        }
        enableOutOfBoundsCheck = false;
        destroyStreams$.next();
        return concat(...rangesToClean.map(({ start, end }) => start >= end ? EMPTY : segmentBuffer.removeBuffer(start, end).pipe(ignoreElements())), playbackObserver.observe(true).pipe(take(1), mergeMap((observation) => {
          return concat(of(events_generators_default2.needsDecipherabilityFlush(observation.position, !observation.isPaused, observation.duration)), defer(() => {
            const lastPosition = observation.position + observation.wantedTimeOffset;
            const newInitialPeriod = manifest.getPeriodForTime(lastPosition);
            if (newInitialPeriod == null) {
              throw new MediaError("MEDIA_TIME_NOT_FOUND", "The wanted position is not found in the Manifest.");
            }
            return launchConsecutiveStreamsForPeriod(newInitialPeriod);
          }));
        })));
      }));
      return merge(restartStreamsWhenOutOfBounds$, handleDecipherabilityUpdate$, launchConsecutiveStreamsForPeriod(basePeriod));
    }
    function manageConsecutivePeriodStreams(bufferType, basePeriod, destroy$) {
      log_default.info("SO: Creating new Stream for", bufferType, basePeriod.start);
      const createNextPeriodStream$ = new Subject();
      const destroyNextStreams$ = new Subject();
      const endOfCurrentStream$ = playbackObserver.observe(true).pipe(filter(({ position, wantedTimeOffset }) => basePeriod.end != null && position + wantedTimeOffset >= basePeriod.end));
      const nextPeriodStream$ = createNextPeriodStream$.pipe(exhaustMap((nextPeriod) => manageConsecutivePeriodStreams(bufferType, nextPeriod, destroyNextStreams$)));
      const destroyAll$ = destroy$.pipe(take(1), tap(() => {
        createNextPeriodStream$.complete();
        destroyNextStreams$.next();
        destroyNextStreams$.complete();
      }), share());
      const killCurrentStream$ = merge(endOfCurrentStream$, destroyAll$);
      const periodStream$ = period_default({
        abrManager,
        bufferType,
        content: { manifest, period: basePeriod },
        garbageCollectors,
        segmentFetcherCreator,
        segmentBuffersStore,
        options,
        playbackObserver,
        wantedBufferAhead,
        maxVideoBufferSize
      }).pipe(mergeMap((evt) => {
        if (evt.type === "stream-status") {
          if (evt.value.hasFinishedLoading) {
            const nextPeriod = manifest.getPeriodAfter(basePeriod);
            if (nextPeriod === null) {
              return concat(of(evt), of(events_generators_default2.streamComplete(bufferType)));
            }
            createNextPeriodStream$.next(nextPeriod);
          } else {
            destroyNextStreams$.next();
          }
        }
        return of(evt);
      }), share());
      const currentStream$ = concat(periodStream$.pipe(takeUntil(killCurrentStream$)), of(events_generators_default2.periodStreamCleared(bufferType, basePeriod)).pipe(tap(() => {
        log_default.info("SO: Destroying Stream for", bufferType, basePeriod.start);
      })));
      return merge(currentStream$, nextPeriodStream$, destroyAll$.pipe(ignoreElements()));
    }
  }
  var init_stream_orchestrator = __esm({
    "src/core/stream/orchestrator/stream_orchestrator.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_config2();
      init_errors();
      init_log();
      init_defer_subscriptions();
      init_event_emitter();
      init_filter_map();
      init_sorted_list();
      init_weak_map_memory();
      init_segment_buffers();
      init_events_generators2();
      init_period2();
      init_active_period_emitter();
      init_are_streams_complete();
      init_get_blacklisted_ranges();
    }
  });

  // src/core/stream/orchestrator/index.ts
  var orchestrator_default;
  var init_orchestrator = __esm({
    "src/core/stream/orchestrator/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_stream_orchestrator();
      orchestrator_default = StreamOrchestrator;
    }
  });

  // src/core/stream/types.ts
  var init_types5 = __esm({
    "src/core/stream/types.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/core/stream/index.ts
  var stream_default;
  var init_stream = __esm({
    "src/core/stream/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_orchestrator();
      init_types5();
      stream_default = orchestrator_default;
    }
  });

  // src/core/init/emit_loaded_event.ts
  function emitLoadedEvent(observation$, mediaElement, segmentBuffersStore, isDirectfile) {
    return observation$.pipe(filterMap((observation) => {
      if (observation.rebuffering !== null || observation.freezing !== null || observation.readyState === 0) {
        return null;
      }
      if (!shouldWaitForDataBeforeLoaded(isDirectfile, mediaElement.hasAttribute("playsinline"))) {
        return mediaElement.duration > 0 ? events_generators_default.loaded(segmentBuffersStore) : null;
      }
      if (observation.readyState >= 3 && observation.currentRange !== null) {
        if (!shouldValidateMetadata() || mediaElement.duration > 0) {
          return events_generators_default.loaded(segmentBuffersStore);
        }
        return null;
      }
      return null;
    }, null), take(1));
  }
  var init_emit_loaded_event = __esm({
    "src/core/init/emit_loaded_event.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_compat();
      init_filter_map();
      init_events_generators();
    }
  });

  // src/core/init/initial_seek_and_play.ts
  function waitUntilPlayable(observation$) {
    return observation$.pipe(filter(({ seeking, rebuffering, readyState }) => !seeking && rebuffering === null && readyState >= 1), take(1), map(() => void 0));
  }
  function autoPlay(mediaElement) {
    return play(mediaElement).pipe(map(() => "autoplay"), catchError((error) => {
      if (error instanceof Error && error.name === "NotAllowedError") {
        log_default.warn("Init: Media element can't play. It may be due to browser auto-play policies.");
        return of("autoplay-blocked");
      } else {
        throw error;
      }
    }));
  }
  function initialSeekAndPlay({
    mediaElement,
    playbackObserver,
    startTime,
    mustAutoPlay
  }) {
    const initialSeekPerformed = createSharedReference(false);
    const initialPlayPerformed = createSharedReference(false);
    const seek$ = whenLoadedMetadata$(mediaElement).pipe(take(1), tap(() => {
      log_default.info("Init: Set initial time", startTime);
      const initialTime = typeof startTime === "function" ? startTime() : startTime;
      playbackObserver.setCurrentTime(initialTime);
      initialSeekPerformed.setValue(true);
      initialSeekPerformed.finish();
    }), shareReplay({ refCount: true }));
    const seekAndPlay$ = seek$.pipe(mergeMap(() => {
      if (!shouldValidateMetadata() || mediaElement.duration > 0) {
        return waitUntilPlayable(playbackObserver.observe(true));
      } else {
        const error = new MediaError("MEDIA_ERR_NOT_LOADED_METADATA", "Cannot load automatically: your browser falsely announced having loaded the content.");
        return waitUntilPlayable(playbackObserver.observe(true)).pipe(startWith(events_generators_default.warning(error)));
      }
    }), mergeMap((evt) => {
      if (evt !== void 0) {
        return of(evt);
      }
      log_default.info("Init: Can begin to play content");
      if (!mustAutoPlay) {
        if (mediaElement.autoplay) {
          log_default.warn("Init: autoplay is enabled on HTML media element. Media will play as soon as possible.");
        }
        initialPlayPerformed.setValue(true);
        initialPlayPerformed.finish();
        return of({ type: "skipped" });
      }
      return autoPlay(mediaElement).pipe(mergeMap((autoplayEvt) => {
        initialPlayPerformed.setValue(true);
        initialPlayPerformed.finish();
        if (autoplayEvt === "autoplay") {
          return of({ type: "autoplay" });
        } else {
          const error = new MediaError("MEDIA_ERR_BLOCKED_AUTOPLAY", "Cannot trigger auto-play automatically: your browser does not allow it.");
          return concat(of(events_generators_default.warning(error)), of({ type: "autoplay-blocked" }));
        }
      }));
    }), shareReplay({ refCount: true }));
    return { seekAndPlay$, initialPlayPerformed, initialSeekPerformed };
  }
  var init_initial_seek_and_play = __esm({
    "src/core/init/initial_seek_and_play.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_compat();
      init_errors();
      init_log();
      init_reference();
      init_events_generators();
    }
  });

  // src/compat/is_seeking_approximate.ts
  var isSeekingApproximate, is_seeking_approximate_default;
  var init_is_seeking_approximate = __esm({
    "src/compat/is_seeking_approximate.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_browser_detection();
      isSeekingApproximate = isTizen;
      is_seeking_approximate_default = isSeekingApproximate;
    }
  });

  // src/core/init/stall_avoider.ts
  function StallAvoider(playbackObserver, manifest, lockedStream$, discontinuityUpdate$) {
    const initialDiscontinuitiesStore = [];
    const discontinuitiesStore$ = discontinuityUpdate$.pipe(withLatestFrom(playbackObserver.observe(true)), scan((discontinuitiesStore, [evt, observation]) => updateDiscontinuitiesStore(discontinuitiesStore, evt, observation), initialDiscontinuitiesStore));
    let lastSeekingPosition = null;
    let ignoredStallTimeStamp = null;
    let prevFreezingState;
    const unlock$ = lockedStream$.pipe(withLatestFrom(playbackObserver.observe(true)), tap(([lockedStreamEvt, observation]) => {
      var _a2;
      if (!observation.rebuffering || observation.paused || lockedStreamEvt.bufferType !== "audio" && lockedStreamEvt.bufferType !== "video") {
        return;
      }
      const currPos = observation.position;
      const rebufferingPos = (_a2 = observation.rebuffering.position) != null ? _a2 : currPos;
      const lockedPeriodStart = lockedStreamEvt.period.start;
      if (currPos < lockedPeriodStart && Math.abs(rebufferingPos - lockedPeriodStart) < 1) {
        log_default.warn("Init: rebuffering because of a future locked stream.\nTrying to unlock by seeking to the next Period");
        playbackObserver.setCurrentTime(lockedPeriodStart + 1e-3);
      }
    }), ignoreElements());
    const stall$ = playbackObserver.observe(true).pipe(withLatestFrom(discontinuitiesStore$), map(([observation, discontinuitiesStore]) => {
      const {
        buffered,
        position,
        readyState,
        rebuffering,
        freezing
      } = observation;
      const {
        BUFFER_DISCONTINUITY_THRESHOLD,
        FORCE_DISCONTINUITY_SEEK_DELAY,
        FREEZING_STALLED_DELAY,
        UNFREEZING_SEEK_DELAY,
        UNFREEZING_DELTA_POSITION
      } = config_default.getCurrent();
      if (freezing !== null) {
        const now = performance.now();
        const referenceTimestamp = prevFreezingState === null ? freezing.timestamp : prevFreezingState.attemptTimestamp;
        if (now - referenceTimestamp > UNFREEZING_SEEK_DELAY) {
          log_default.warn("Init: trying to seek to un-freeze player");
          playbackObserver.setCurrentTime(playbackObserver.getCurrentTime() + UNFREEZING_DELTA_POSITION);
          prevFreezingState = { attemptTimestamp: now };
        }
        if (now - freezing.timestamp > FREEZING_STALLED_DELAY) {
          return {
            type: "stalled",
            value: "freezing"
          };
        }
      } else {
        prevFreezingState = null;
      }
      if (rebuffering === null) {
        if (readyState === 1) {
          let reason;
          if (observation.seeking) {
            reason = observation.internalSeeking ? "internal-seek" : "seeking";
          } else {
            reason = "not-ready";
          }
          return {
            type: "stalled",
            value: reason
          };
        }
        return {
          type: "unstalled",
          value: null
        };
      }
      const stalledReason = rebuffering.reason === "seeking" && observation.internalSeeking ? "internal-seek" : rebuffering.reason;
      if (observation.seeking) {
        lastSeekingPosition = observation.position;
      } else if (lastSeekingPosition !== null) {
        const now = performance.now();
        if (ignoredStallTimeStamp === null) {
          ignoredStallTimeStamp = now;
        }
        if (is_seeking_approximate_default && observation.position < lastSeekingPosition && now - ignoredStallTimeStamp < FORCE_DISCONTINUITY_SEEK_DELAY) {
          return {
            type: "stalled",
            value: stalledReason
          };
        }
        lastSeekingPosition = null;
      }
      ignoredStallTimeStamp = null;
      if (manifest === null) {
        return {
          type: "stalled",
          value: stalledReason
        };
      }
      const { position: stalledPosition } = rebuffering;
      if (stalledPosition !== null) {
        const skippableDiscontinuity = findSeekableDiscontinuity(discontinuitiesStore, manifest, stalledPosition);
        if (skippableDiscontinuity !== null) {
          const realSeekTime = skippableDiscontinuity + 1e-3;
          if (realSeekTime <= playbackObserver.getCurrentTime()) {
            log_default.info("Init: position to seek already reached, no seeking", playbackObserver.getCurrentTime(), realSeekTime);
          } else {
            log_default.warn("SA: skippable discontinuity found in the stream", position, realSeekTime);
            playbackObserver.setCurrentTime(realSeekTime);
            return events_generators_default2.warning(generateDiscontinuityError(stalledPosition, realSeekTime));
          }
        }
      }
      const freezePosition = stalledPosition != null ? stalledPosition : position;
      const nextBufferRangeGap = getNextRangeGap(buffered, freezePosition);
      if (nextBufferRangeGap < BUFFER_DISCONTINUITY_THRESHOLD) {
        const seekTo = freezePosition + nextBufferRangeGap + EPSILON2;
        if (playbackObserver.getCurrentTime() < seekTo) {
          log_default.warn("Init: discontinuity encountered inferior to the threshold", freezePosition, seekTo, BUFFER_DISCONTINUITY_THRESHOLD);
          playbackObserver.setCurrentTime(seekTo);
          return events_generators_default2.warning(generateDiscontinuityError(freezePosition, seekTo));
        }
      }
      for (let i = manifest.periods.length - 2; i >= 0; i--) {
        const period = manifest.periods[i];
        if (period.end !== void 0 && period.end <= freezePosition) {
          if (manifest.periods[i + 1].start > freezePosition && manifest.periods[i + 1].start > playbackObserver.getCurrentTime()) {
            const nextPeriod = manifest.periods[i + 1];
            playbackObserver.setCurrentTime(nextPeriod.start);
            return events_generators_default2.warning(generateDiscontinuityError(freezePosition, nextPeriod.start));
          }
          break;
        }
      }
      return {
        type: "stalled",
        value: stalledReason
      };
    }));
    return merge(unlock$, stall$);
  }
  function findSeekableDiscontinuity(discontinuitiesStore, manifest, stalledPosition) {
    if (discontinuitiesStore.length === 0) {
      return null;
    }
    let maxDiscontinuityEnd = null;
    for (let i = 0; i < discontinuitiesStore.length; i++) {
      const { period } = discontinuitiesStore[i];
      if (period.start > stalledPosition) {
        return maxDiscontinuityEnd;
      }
      let discontinuityEnd;
      if (period.end === void 0 || period.end > stalledPosition) {
        const { discontinuity, position } = discontinuitiesStore[i];
        const { start, end } = discontinuity;
        const discontinuityLowerLimit = start != null ? start : position;
        if (stalledPosition >= discontinuityLowerLimit - EPSILON2) {
          if (end === null) {
            const nextPeriod = manifest.getPeriodAfter(period);
            if (nextPeriod !== null) {
              discontinuityEnd = nextPeriod.start + EPSILON2;
            } else {
              log_default.warn("Init: discontinuity at Period's end but no next Period");
            }
          } else if (stalledPosition < end + EPSILON2) {
            discontinuityEnd = end + EPSILON2;
          }
        }
        if (discontinuityEnd !== void 0) {
          log_default.info("Init: discontinuity found", stalledPosition, discontinuityEnd);
          maxDiscontinuityEnd = maxDiscontinuityEnd !== null && maxDiscontinuityEnd > discontinuityEnd ? maxDiscontinuityEnd : discontinuityEnd;
        }
      }
    }
    return maxDiscontinuityEnd;
  }
  function eventContainsDiscontinuity(evt) {
    return evt.discontinuity !== null;
  }
  function updateDiscontinuitiesStore(discontinuitiesStore, evt, observation) {
    while (discontinuitiesStore.length > 0 && discontinuitiesStore[0].period.end !== void 0 && discontinuitiesStore[0].period.end + 10 < observation.position) {
      discontinuitiesStore.shift();
    }
    const { period, bufferType } = evt;
    if (bufferType !== "audio" && bufferType !== "video") {
      return discontinuitiesStore;
    }
    for (let i = 0; i < discontinuitiesStore.length; i++) {
      if (discontinuitiesStore[i].period.id === period.id) {
        if (discontinuitiesStore[i].bufferType === bufferType) {
          if (!eventContainsDiscontinuity(evt)) {
            discontinuitiesStore.splice(i, 1);
          } else {
            discontinuitiesStore[i] = evt;
          }
          return discontinuitiesStore;
        }
      } else if (discontinuitiesStore[i].period.start > period.start) {
        if (eventContainsDiscontinuity(evt)) {
          discontinuitiesStore.splice(i, 0, evt);
        }
        return discontinuitiesStore;
      }
    }
    if (eventContainsDiscontinuity(evt)) {
      discontinuitiesStore.push(evt);
    }
    return discontinuitiesStore;
  }
  function generateDiscontinuityError(stalledPosition, seekTo) {
    return new MediaError("DISCONTINUITY_ENCOUNTERED", "A discontinuity has been encountered at position " + String(stalledPosition) + ", seeked at position " + String(seekTo));
  }
  var EPSILON2;
  var init_stall_avoider = __esm({
    "src/core/init/stall_avoider.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_is_seeking_approximate();
      init_config2();
      init_errors();
      init_log();
      init_ranges();
      init_events_generators2();
      EPSILON2 = 1 / 60;
    }
  });

  // src/core/init/update_playback_rate.ts
  function updatePlaybackRate(mediaElement, speed, observation$) {
    const forcePause$ = observation$.pipe(map((observation) => observation.rebuffering !== null), startWith(false), distinctUntilChanged());
    return forcePause$.pipe(switchMap((shouldForcePause) => {
      if (shouldForcePause) {
        return defer(() => {
          log_default.info("Init: Pause playback to build buffer");
          mediaElement.playbackRate = 0;
          return of(0);
        });
      }
      return speed.asObservable().pipe(tap((lastSpeed) => {
        log_default.info("Init: Resume playback speed", lastSpeed);
        mediaElement.playbackRate = lastSpeed;
      }));
    }));
  }
  var init_update_playback_rate = __esm({
    "src/core/init/update_playback_rate.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_log();
    }
  });

  // src/core/init/throw_on_media_error.ts
  function throwOnMediaError(mediaElement) {
    return fromEvent(mediaElement, "error").pipe(mergeMap(() => {
      const mediaError = mediaElement.error;
      let errorCode;
      let errorMessage2;
      if (!isNullOrUndefined(mediaError)) {
        errorCode = mediaError.code;
        errorMessage2 = mediaError.message;
      }
      switch (errorCode) {
        case 1:
          errorMessage2 = errorMessage2 != null ? errorMessage2 : "The fetching of the associated resource was aborted by the user's request.";
          throw new MediaError("MEDIA_ERR_ABORTED", errorMessage2);
        case 2:
          errorMessage2 = errorMessage2 != null ? errorMessage2 : "A network error occurred which prevented the media from being successfully fetched";
          throw new MediaError("MEDIA_ERR_NETWORK", errorMessage2);
        case 3:
          errorMessage2 = errorMessage2 != null ? errorMessage2 : "An error occurred while trying to decode the media resource";
          throw new MediaError("MEDIA_ERR_DECODE", errorMessage2);
        case 4:
          errorMessage2 = errorMessage2 != null ? errorMessage2 : "The media resource has been found to be unsuitable.";
          throw new MediaError("MEDIA_ERR_SRC_NOT_SUPPORTED", errorMessage2);
        default:
          errorMessage2 = errorMessage2 != null ? errorMessage2 : "The HTMLMediaElement errored due to an unknown reason.";
          throw new MediaError("MEDIA_ERR_UNKNOWN", errorMessage2);
      }
    }));
  }
  var init_throw_on_media_error = __esm({
    "src/core/init/throw_on_media_error.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_errors();
      init_is_null_or_undefined();
    }
  });

  // src/core/init/types.ts
  var init_types6 = __esm({
    "src/core/init/types.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/core/segment_buffers/implementations/utils/manual_time_ranges.ts
  var ManualTimeRanges;
  var init_manual_time_ranges = __esm({
    "src/core/segment_buffers/implementations/utils/manual_time_ranges.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_assert();
      init_ranges();
      ManualTimeRanges = class {
        constructor() {
          this._ranges = [];
          this.length = 0;
        }
        insert(start, end) {
          if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
            assert(start >= 0, "invalid start time");
            assert(end - start > 0, "invalid end time");
          }
          insertInto(this._ranges, { start, end });
          this.length = this._ranges.length;
        }
        remove(start, end) {
          if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
            assert(start >= 0, "invalid start time");
            assert(end - start > 0, "invalid end time");
          }
          const rangesToIntersect = [];
          if (start > 0) {
            rangesToIntersect.push({ start: 0, end: start });
          }
          if (end < Infinity) {
            rangesToIntersect.push({ start: end, end: Infinity });
          }
          this._ranges = keepRangeIntersection(this._ranges, rangesToIntersect);
          this.length = this._ranges.length;
        }
        start(index) {
          if (index >= this._ranges.length) {
            throw new Error("INDEX_SIZE_ERROR");
          }
          return this._ranges[index].start;
        }
        end(index) {
          if (index >= this._ranges.length) {
            throw new Error("INDEX_SIZE_ERROR");
          }
          return this._ranges[index].end;
        }
      };
    }
  });

  // src/core/segment_buffers/implementations/image/image_segment_buffer.ts
  var ImageSegmentBuffer;
  var init_image_segment_buffer = __esm({
    "src/core/segment_buffers/implementations/image/image_segment_buffer.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_log();
      init_types4();
      init_manual_time_ranges();
      ImageSegmentBuffer = class extends SegmentBuffer {
        constructor() {
          log_default.debug("ISB: Creating ImageSegmentBuffer");
          super();
          this.bufferType = "image";
          this._buffered = new ManualTimeRanges();
        }
        pushChunk(infos) {
          return defer(() => {
            var _a2, _b2;
            log_default.debug("ISB: appending new data.");
            if (infos.data.chunk === null) {
              return of(void 0);
            }
            const {
              appendWindow,
              chunk
            } = infos.data;
            const { start, end, timescale } = chunk;
            const appendWindowStart = (_a2 = appendWindow[0]) != null ? _a2 : 0;
            const appendWindowEnd = (_b2 = appendWindow[1]) != null ? _b2 : Infinity;
            const timescaledStart = start / timescale;
            const timescaledEnd = end / timescale;
            const startTime = Math.max(appendWindowStart, timescaledStart);
            const endTime = Math.min(appendWindowEnd, timescaledEnd);
            this._buffered.insert(startTime, endTime);
            if (infos.inventoryInfos !== null) {
              this._segmentInventory.insertChunk(infos.inventoryInfos);
            }
            return of(void 0);
          });
        }
        removeBuffer(start, end) {
          return defer(() => {
            log_default.info("ISB: ignored image data remove order", start, end);
            return of(void 0);
          });
        }
        endOfSegment(_infos) {
          return defer(() => {
            this._segmentInventory.completeSegment(_infos, this._buffered);
            return of(void 0);
          });
        }
        getBufferedRanges() {
          return this._buffered;
        }
        dispose() {
          log_default.debug("ISB: disposing image SegmentBuffer");
          this._buffered.remove(0, Infinity);
        }
      };
    }
  });

  // src/core/segment_buffers/implementations/image/index.ts
  var image_exports = {};
  __export(image_exports, {
    default: () => image_default
  });
  var image_default;
  var init_image = __esm({
    "src/core/segment_buffers/implementations/image/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_image_segment_buffer();
      image_default = ImageSegmentBuffer;
    }
  });

  // src/parsers/images/bif.ts
  var bif_exports = {};
  __export(bif_exports, {
    default: () => bif_default
  });
  function parseBif(buf) {
    let pos = 0;
    const length = buf.length;
    const fileFormat = utf8ToStr(buf.subarray(pos + 1, pos + 8));
    pos += 8;
    if (buf[0] !== 137 || fileFormat !== "BIF\r\n\n") {
      throw new Error("Invalid BIF file");
    }
    const minorVersion = buf[pos];
    pos += 1;
    const majorVersion = buf[pos];
    pos += 1;
    const patchVersion = buf[pos];
    pos += 1;
    const increVersion = buf[pos];
    pos += 1;
    const version = [minorVersion, majorVersion, patchVersion, increVersion].join(".");
    if (majorVersion > 0) {
      throw new Error(`Unhandled version: ${majorVersion}`);
    }
    const imageCount = le4toi(buf, pos);
    pos += 4;
    const framewiseSeparation = le4toi(buf, pos);
    pos += 4;
    const format = utf8ToStr(buf.subarray(pos, pos + 4));
    pos += 4;
    const width = le2toi(buf, pos);
    pos += 2;
    const height = le2toi(buf, pos);
    pos += 2;
    const aspectRatio = [buf[pos], buf[pos + 1]].join(":");
    pos += 2;
    const isVod = buf[pos] === 1;
    pos = 64;
    const thumbs = [];
    if (imageCount === 0) {
      throw new Error("bif: no images to parse");
    }
    let index = 0;
    let previousImageInfo = null;
    while (pos < length) {
      const currentImageTimestamp = le4toi(buf, pos);
      pos += 4;
      const currentImageOffset = le4toi(buf, pos);
      pos += 4;
      if (previousImageInfo !== null) {
        const ts = previousImageInfo.timestamp * framewiseSeparation;
        const duration = framewiseSeparation;
        const data = buf.slice(previousImageInfo.offset, currentImageOffset);
        thumbs.push({ index, duration, ts, data });
        index++;
      }
      if (currentImageTimestamp === 4294967295) {
        break;
      }
      previousImageInfo = {
        timestamp: currentImageTimestamp,
        offset: currentImageOffset
      };
    }
    return {
      fileFormat: "BIF",
      version,
      imageCount,
      timescale: 1e3,
      format,
      width,
      height,
      aspectRatio,
      isVod,
      thumbs
    };
  }
  var bif_default;
  var init_bif = __esm({
    "src/parsers/images/bif.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_string_parsing();
      bif_default = parseBif;
    }
  });

  // src/utils/resolve_url.ts
  function _normalizeUrl(url) {
    if (!selfDirRe.test(url)) {
      return url;
    }
    const newUrl = [];
    const oldUrl = url.split("/");
    for (let i = 0, l = oldUrl.length; i < l; i++) {
      if (oldUrl[i] === "..") {
        newUrl.pop();
      } else if (oldUrl[i] === ".") {
        continue;
      } else {
        newUrl.push(oldUrl[i]);
      }
    }
    return newUrl.join("/");
  }
  function resolveURL(...args) {
    const len = args.length;
    if (len === 0) {
      return "";
    }
    let base = "";
    for (let i = 0; i < len; i++) {
      let part = args[i];
      if (typeof part !== "string" || part === "") {
        continue;
      }
      if (schemeRe.test(part)) {
        base = part;
      } else {
        if (part[0] === "/") {
          part = part.substring(1);
        }
        if (base[base.length - 1] === "/") {
          base = base.substring(0, base.length - 1);
        }
        base = base + "/" + part;
      }
    }
    return _normalizeUrl(base);
  }
  function normalizeBaseURL(url) {
    const indexOfLastSlash = url.lastIndexOf("/");
    if (indexOfLastSlash < 0) {
      return url;
    }
    if (schemeRe.test(url)) {
      const firstSlashIndex = url.indexOf("/");
      if (firstSlashIndex >= 0 && indexOfLastSlash === firstSlashIndex + 1) {
        return url;
      }
    }
    const indexOfQuestionMark = url.indexOf("?");
    if (indexOfQuestionMark >= 0 && indexOfQuestionMark < indexOfLastSlash) {
      return normalizeBaseURL(url.substring(0, indexOfQuestionMark));
    }
    return url.substring(0, indexOfLastSlash + 1);
  }
  var schemeRe, selfDirRe;
  var init_resolve_url = __esm({
    "src/utils/resolve_url.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      schemeRe = /^(?:[a-z]+:)?\/\//i;
      selfDirRe = /\/\.{1,2}\//;
    }
  });

  // src/parsers/manifest/utils/check_manifest_ids.ts
  function checkManifestIDs(manifest) {
    const periodIDS = [];
    manifest.periods.forEach((period) => {
      const periodID = period.id;
      if (arrayIncludes(periodIDS, periodID)) {
        log_default.warn("Two periods with the same ID found. Updating.");
        const newID = periodID + "-dup";
        period.id = newID;
        checkManifestIDs(manifest);
        periodIDS.push(newID);
      } else {
        periodIDS.push(periodID);
      }
      const { adaptations } = period;
      const adaptationIDs = [];
      Object.keys(adaptations).forEach((type) => {
        const adaptationsForType = adaptations[type];
        if (adaptationsForType === void 0) {
          return;
        }
        adaptationsForType.forEach((adaptation) => {
          const adaptationID = adaptation.id;
          if (arrayIncludes(adaptationIDs, adaptationID)) {
            log_default.warn("Two adaptations with the same ID found. Updating.", adaptationID);
            const newID = adaptationID + "-dup";
            adaptation.id = newID;
            checkManifestIDs(manifest);
            adaptationIDs.push(newID);
          } else {
            adaptationIDs.push(adaptationID);
          }
          const representationIDs = [];
          adaptation.representations.forEach((representation) => {
            const representationID = representation.id;
            if (arrayIncludes(representationIDs, representationID)) {
              log_default.warn("Two representations with the same ID found. Updating.", representationID);
              const newID = `${representationID}-dup`;
              representation.id = newID;
              checkManifestIDs(manifest);
              representationIDs.push(newID);
            } else {
              representationIDs.push(representationID);
            }
          });
        });
      });
    });
  }
  var init_check_manifest_ids = __esm({
    "src/parsers/manifest/utils/check_manifest_ids.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_array_includes();
    }
  });

  // src/parsers/manifest/smooth/get_codecs.ts
  function getAudioCodecs(codecPrivateData, fourCC) {
    let mpProfile;
    if (fourCC === "AACH") {
      mpProfile = 5;
    } else {
      mpProfile = isNonEmptyString(codecPrivateData) ? (parseInt(codecPrivateData.substring(0, 2), 16) & 248) >> 3 : 2;
    }
    if (mpProfile === 0) {
      return "mp4a.40.2";
    }
    return `mp4a.40.${mpProfile}`;
  }
  function getVideoCodecs(codecPrivateData) {
    const arr = /00000001\d7([0-9a-fA-F]{6})/.exec(codecPrivateData);
    if (arr === null || !isNonEmptyString(arr[1])) {
      return "avc1.4D401E";
    }
    return "avc1." + arr[1];
  }
  var init_get_codecs = __esm({
    "src/parsers/manifest/smooth/get_codecs.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
    }
  });

  // src/parsers/manifest/smooth/parse_C_nodes.ts
  function parseCNodes(nodes) {
    return nodes.reduce((timeline, node, i) => {
      const dAttr = node.getAttribute("d");
      const tAttr = node.getAttribute("t");
      const rAttr = node.getAttribute("r");
      const repeatCount = rAttr !== null ? +rAttr - 1 : 0;
      let start = tAttr !== null ? +tAttr : void 0;
      let duration = dAttr !== null ? +dAttr : void 0;
      if (i === 0) {
        start = start === void 0 || isNaN(start) ? 0 : start;
      } else {
        const prev = timeline[i - 1];
        if (start == null || isNaN(start)) {
          if (prev.duration == null || isNaN(prev.duration)) {
            throw new Error("Smooth: Invalid CNodes. Missing timestamp.");
          }
          start = prev.start + prev.duration * (prev.repeatCount + 1);
        }
      }
      if (duration == null || isNaN(duration)) {
        const nextNode = nodes[i + 1];
        if (nextNode !== void 0) {
          const nextTAttr = nextNode.getAttribute("t");
          const nextStart = isNonEmptyString(nextTAttr) ? +nextTAttr : null;
          if (nextStart === null) {
            throw new Error("Can't build index timeline from Smooth Manifest.");
          }
          duration = nextStart - start;
        } else {
          return timeline;
        }
      }
      timeline.push({ duration, start, repeatCount });
      return timeline;
    }, []);
  }
  var init_parse_C_nodes = __esm({
    "src/parsers/manifest/smooth/parse_C_nodes.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
    }
  });

  // src/parsers/manifest/smooth/parse_protection_node.ts
  function createWidevineKeySystem(keyIdBytes) {
    return [{
      systemId: "edef8ba9-79d6-4ace-a3c8-27dcd51d21ed",
      privateData: concat2([8, 1, 18, 16], keyIdBytes)
    }];
  }
  function parseProtectionNode(protectionNode, keySystemCreator = createWidevineKeySystem) {
    if (protectionNode.firstElementChild === null || protectionNode.firstElementChild.nodeName !== "ProtectionHeader") {
      throw new Error("Protection should have ProtectionHeader child");
    }
    const header = protectionNode.firstElementChild;
    const privateData = base64ToBytes(header.textContent === null ? "" : header.textContent);
    const keyIdHex = getPlayReadyKIDFromPrivateData(privateData);
    const keyIdBytes = hexToBytes(keyIdHex);
    const systemIdAttr = header.getAttribute("SystemID");
    const systemId = (systemIdAttr !== null ? systemIdAttr : "").toLowerCase().replace(/\{|\}/g, "");
    return {
      keyId: keyIdBytes,
      keySystems: [{
        systemId,
        privateData
      }].concat(keySystemCreator(keyIdBytes))
    };
  }
  var init_parse_protection_node = __esm({
    "src/parsers/manifest/smooth/parse_protection_node.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_base64();
      init_byte_parsing();
      init_string_parsing();
      init_isobmff();
    }
  });

  // src/parsers/manifest/utils/clear_timeline_from_position.ts
  function clearTimelineFromPosition(timeline, firstAvailablePosition) {
    let nbEltsRemoved = 0;
    while (timeline.length > 0) {
      const firstElt = timeline[0];
      if (firstElt.start >= firstAvailablePosition) {
        return nbEltsRemoved;
      }
      if (firstElt.repeatCount === -1) {
        return nbEltsRemoved;
      } else if (firstElt.repeatCount === 0) {
        timeline.shift();
        nbEltsRemoved += 1;
      } else {
        const nextElt = timeline[1];
        if (nextElt !== void 0 && nextElt.start <= firstAvailablePosition) {
          timeline.shift();
          nbEltsRemoved += 1;
        } else {
          if (firstElt.duration <= 0) {
            return nbEltsRemoved;
          }
          let nextStart = firstElt.start + firstElt.duration;
          let nextRepeat = 1;
          while (nextStart < firstAvailablePosition && nextRepeat <= firstElt.repeatCount) {
            nextStart += firstElt.duration;
            nextRepeat++;
          }
          if (nextRepeat > firstElt.repeatCount) {
            timeline.shift();
            nbEltsRemoved = firstElt.repeatCount + 1;
          } else {
            const newRepeat = firstElt.repeatCount - nextRepeat;
            firstElt.start = nextStart;
            firstElt.repeatCount = newRepeat;
            nbEltsRemoved += nextRepeat;
            return nbEltsRemoved;
          }
        }
      }
    }
    return nbEltsRemoved;
  }
  var init_clear_timeline_from_position = __esm({
    "src/parsers/manifest/utils/clear_timeline_from_position.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/utils/index_helpers.ts
  function calculateRepeat(element, nextElement, maxPosition) {
    const { repeatCount } = element;
    if (repeatCount >= 0) {
      return repeatCount;
    }
    let segmentEnd;
    if (!isNullOrUndefined(nextElement)) {
      segmentEnd = nextElement.start;
    } else if (maxPosition !== void 0) {
      segmentEnd = maxPosition;
    } else {
      segmentEnd = Number.MAX_VALUE;
    }
    return Math.ceil((segmentEnd - element.start) / element.duration) - 1;
  }
  function getIndexSegmentEnd(segment, nextSegment, maxPosition) {
    const { start, duration } = segment;
    if (duration <= 0) {
      return start;
    }
    const repeat = calculateRepeat(segment, nextSegment, maxPosition);
    return start + (repeat + 1) * duration;
  }
  function toIndexTime(time, indexOptions) {
    var _a2;
    return time * indexOptions.timescale + ((_a2 = indexOptions.indexTimeOffset) != null ? _a2 : 0);
  }
  function fromIndexTime(time, indexOptions) {
    var _a2;
    return (time - ((_a2 = indexOptions.indexTimeOffset) != null ? _a2 : 0)) / indexOptions.timescale;
  }
  function getTimescaledRange(start, duration, timescale) {
    return [
      start * timescale,
      (start + duration) * timescale
    ];
  }
  function getIndexOfLastObjectBefore(timeline, timeTScaled) {
    let low = 0;
    let high = timeline.length;
    while (low < high) {
      const mid = low + high >>> 1;
      if (timeline[mid].start <= timeTScaled) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return low - 1;
  }
  function checkDiscontinuity(index, timeSec, maxPosition) {
    const { timeline } = index;
    const scaledTime = toIndexTime(timeSec, index);
    if (scaledTime < 0) {
      return null;
    }
    const segmentIndex = getIndexOfLastObjectBefore(timeline, scaledTime);
    if (segmentIndex < 0 || segmentIndex >= timeline.length - 1) {
      return null;
    }
    const timelineItem = timeline[segmentIndex];
    if (timelineItem.duration <= 0) {
      return null;
    }
    const nextTimelineItem = timeline[segmentIndex + 1];
    if (nextTimelineItem === void 0) {
      return null;
    }
    const nextStart = nextTimelineItem.start;
    const segmentEnd = getIndexSegmentEnd(timelineItem, nextTimelineItem, maxPosition);
    return scaledTime >= segmentEnd && scaledTime < nextStart ? fromIndexTime(nextStart, index) : null;
  }
  var init_index_helpers = __esm({
    "src/parsers/manifest/utils/index_helpers.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_null_or_undefined();
    }
  });

  // src/parsers/manifest/utils/is_segment_still_available.ts
  function isSegmentStillAvailable(segment, timeline, timescale, indexTimeOffset) {
    for (let i = 0; i < timeline.length; i++) {
      const tSegment = timeline[i];
      const tSegmentTime = (tSegment.start - indexTimeOffset) / timescale;
      if (tSegmentTime > segment.time) {
        return false;
      } else if (tSegmentTime === segment.time) {
        if (tSegment.range === void 0) {
          return segment.range === void 0;
        }
        return segment.range != null && tSegment.range[0] === segment.range[0] && tSegment.range[1] === segment.range[1];
      } else {
        if (tSegment.repeatCount >= 0 && tSegment.duration !== void 0) {
          const timeDiff = tSegmentTime - tSegment.start;
          const repeat = timeDiff / tSegment.duration - 1;
          return repeat % 1 === 0 && repeat <= tSegment.repeatCount;
        }
      }
    }
    return false;
  }
  var init_is_segment_still_available = __esm({
    "src/parsers/manifest/utils/is_segment_still_available.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/utils/update_segment_timeline.ts
  function updateSegmentTimeline(oldTimeline, newTimeline) {
    if (oldTimeline.length === 0) {
      oldTimeline.push(...newTimeline);
      return true;
    } else if (newTimeline.length === 0) {
      return false;
    }
    const prevTimelineLength = oldTimeline.length;
    const newIndexStart = newTimeline[0].start;
    const oldLastElt = oldTimeline[prevTimelineLength - 1];
    const oldIndexEnd = getIndexSegmentEnd(oldLastElt, newTimeline[0]);
    if (oldIndexEnd < newIndexStart) {
      throw new MediaError("MANIFEST_UPDATE_ERROR", "Cannot perform partial update: not enough data");
    }
    for (let i = prevTimelineLength - 1; i >= 0; i--) {
      const currStart = oldTimeline[i].start;
      if (currStart === newIndexStart) {
        const nbEltsToRemove = prevTimelineLength - i;
        oldTimeline.splice(i, nbEltsToRemove, ...newTimeline);
        return false;
      } else if (currStart < newIndexStart) {
        const currElt = oldTimeline[i];
        if (currElt.start + currElt.duration > newIndexStart) {
          log_default.warn("RepresentationIndex: Manifest update removed all previous segments");
          oldTimeline.splice(0, prevTimelineLength, ...newTimeline);
          return true;
        } else if (currElt.repeatCount === void 0 || currElt.repeatCount <= 0) {
          if (currElt.repeatCount < 0) {
            currElt.repeatCount = Math.floor((newIndexStart - currElt.start) / currElt.duration) - 1;
          }
          oldTimeline.splice(i + 1, prevTimelineLength - (i + 1), ...newTimeline);
          return false;
        }
        const eltLastTime = currElt.start + currElt.duration * (currElt.repeatCount + 1);
        if (eltLastTime <= newIndexStart) {
          oldTimeline.splice(i + 1, prevTimelineLength - (i + 1), ...newTimeline);
          return false;
        }
        const newCurrRepeat = (newIndexStart - currElt.start) / currElt.duration - 1;
        if (newCurrRepeat % 1 === 0 && currElt.duration === newTimeline[0].duration) {
          const newRepeatCount = newTimeline[0].repeatCount < 0 ? -1 : newTimeline[0].repeatCount + newCurrRepeat + 1;
          oldTimeline.splice(i, prevTimelineLength - i, ...newTimeline);
          oldTimeline[i].start = currElt.start;
          oldTimeline[i].repeatCount = newRepeatCount;
          return false;
        }
        log_default.warn("RepresentationIndex: Manifest update removed previous segments");
        oldTimeline[i].repeatCount = Math.floor(newCurrRepeat);
        oldTimeline.splice(i + 1, prevTimelineLength - (i + 1), ...newTimeline);
        return false;
      }
    }
    const prevLastElt = oldTimeline[oldTimeline.length - 1];
    const newLastElt = newTimeline[newTimeline.length - 1];
    if (prevLastElt.repeatCount !== void 0 && prevLastElt.repeatCount < 0) {
      if (prevLastElt.start > newLastElt.start) {
        log_default.warn("RepresentationIndex: The new index is older than the previous one");
        return false;
      } else {
        log_default.warn('RepresentationIndex: The new index is "bigger" than the previous one');
        oldTimeline.splice(0, prevTimelineLength, ...newTimeline);
        return true;
      }
    }
    const prevLastTime = prevLastElt.start + prevLastElt.duration * (prevLastElt.repeatCount + 1);
    const newLastTime = newLastElt.start + newLastElt.duration * (newLastElt.repeatCount + 1);
    if (prevLastTime >= newLastTime) {
      log_default.warn("RepresentationIndex: The new index is older than the previous one");
      return false;
    }
    log_default.warn('RepresentationIndex: The new index is "bigger" than the previous one');
    oldTimeline.splice(0, prevTimelineLength, ...newTimeline);
    return true;
  }
  var init_update_segment_timeline = __esm({
    "src/parsers/manifest/utils/update_segment_timeline.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_log();
      init_index_helpers();
    }
  });

  // src/parsers/manifest/smooth/utils/add_segment_infos.ts
  function _addSegmentInfos(index, newSegment, currentSegment) {
    const { timeline, timescale } = index;
    const timelineLength = timeline.length;
    const last2 = timeline[timelineLength - 1];
    const scaledNewSegment = newSegment.timescale === timescale ? {
      time: newSegment.time,
      duration: newSegment.duration
    } : {
      time: newSegment.time / newSegment.timescale * timescale,
      duration: newSegment.duration / newSegment.timescale * timescale
    };
    const shouldDeductNextSegment = currentSegment.time === scaledNewSegment.time;
    if (shouldDeductNextSegment) {
      return false;
    } else if (scaledNewSegment.time >= getIndexSegmentEnd(last2, null)) {
      if (last2.duration === scaledNewSegment.duration) {
        last2.repeatCount++;
      } else {
        index.timeline.push({
          duration: scaledNewSegment.duration,
          start: scaledNewSegment.time,
          repeatCount: 0
        });
      }
      return true;
    }
    return false;
  }
  var init_add_segment_infos = __esm({
    "src/parsers/manifest/smooth/utils/add_segment_infos.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_index_helpers();
    }
  });

  // src/parsers/manifest/smooth/utils/tokens.ts
  function replaceRepresentationSmoothTokens(url, bitrate, customAttributes) {
    return url.replace(/\{bitrate\}/g, String(bitrate)).replace(/{CustomAttributes}/g, customAttributes.length > 0 ? customAttributes[0] : "");
  }
  function replaceSegmentSmoothTokens(url, time) {
    return url.replace(/\{start time\}/g, String(time));
  }
  var init_tokens = __esm({
    "src/parsers/manifest/smooth/utils/tokens.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/smooth/representation_index.ts
  function getSegmentNumber(start, up, duration) {
    const diff = up - start;
    return diff > 0 ? Math.floor(diff / duration) : 0;
  }
  function normalizeRange(index, start, duration) {
    const timescale = index.timescale === void 0 || index.timescale === 0 ? 1 : index.timescale;
    return {
      up: start * timescale,
      to: (start + duration) * timescale
    };
  }
  function calculateRepeat2(segment, nextSegment) {
    let repeatCount = segment.repeatCount;
    if (segment.duration != null && repeatCount < 0) {
      const repeatEnd = nextSegment !== void 0 ? nextSegment.start : Infinity;
      repeatCount = Math.ceil((repeatEnd - segment.start) / segment.duration) - 1;
    }
    return repeatCount;
  }
  var SmoothRepresentationIndex;
  var init_representation_index2 = __esm({
    "src/parsers/manifest/smooth/representation_index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_log();
      init_clear_timeline_from_position();
      init_index_helpers();
      init_is_segment_still_available();
      init_update_segment_timeline();
      init_add_segment_infos();
      init_tokens();
      SmoothRepresentationIndex = class {
        constructor(index, options) {
          const {
            aggressiveMode,
            isLive,
            segmentPrivateInfos,
            timeShiftBufferDepth
          } = options;
          const estimatedReceivedTime = options.manifestReceivedTime == null ? performance.now() : options.manifestReceivedTime;
          this._index = index;
          this._indexValidityTime = estimatedReceivedTime;
          this._timeShiftBufferDepth = timeShiftBufferDepth;
          this._initSegmentInfos = {
            bitsPerSample: segmentPrivateInfos.bitsPerSample,
            channels: segmentPrivateInfos.channels,
            codecPrivateData: segmentPrivateInfos.codecPrivateData,
            packetSize: segmentPrivateInfos.packetSize,
            samplingRate: segmentPrivateInfos.samplingRate,
            timescale: index.timescale,
            protection: segmentPrivateInfos.protection
          };
          this._isAggressiveMode = aggressiveMode;
          this._isLive = isLive;
          if (index.timeline.length !== 0) {
            const lastItem = index.timeline[index.timeline.length - 1];
            const scaledEnd = getIndexSegmentEnd(lastItem, null);
            this._initialScaledLastPosition = scaledEnd;
            if (isLive) {
              const scaledReceivedTime = estimatedReceivedTime / 1e3 * index.timescale;
              this._scaledLiveGap = scaledReceivedTime - scaledEnd;
            }
          }
        }
        getInitSegment() {
          return {
            id: "init",
            isInit: true,
            privateInfos: { smoothInitSegment: this._initSegmentInfos },
            mediaURLs: null,
            time: 0,
            end: 0,
            duration: 0,
            timescale: 1,
            complete: true
          };
        }
        getSegments(from2, dur) {
          this._refreshTimeline();
          const { up, to } = normalizeRange(this._index, from2, dur);
          const { timeline, timescale, media } = this._index;
          const isAggressive = this._isAggressiveMode;
          let currentNumber;
          const segments = [];
          const timelineLength = timeline.length;
          const maxPosition = this._scaledLiveGap == null ? void 0 : performance.now() / 1e3 * timescale - this._scaledLiveGap;
          for (let i = 0; i < timelineLength; i++) {
            const segmentRange = timeline[i];
            const { duration, start } = segmentRange;
            const repeat = calculateRepeat2(segmentRange, timeline[i + 1]);
            let segmentNumberInCurrentRange = getSegmentNumber(start, up, duration);
            let segmentTime = start + segmentNumberInCurrentRange * duration;
            const timeToAddToCheckMaxPosition = isAggressive ? 0 : duration;
            while (segmentTime < to && segmentNumberInCurrentRange <= repeat && (maxPosition == null || segmentTime + timeToAddToCheckMaxPosition <= maxPosition)) {
              const time = segmentTime;
              const number = currentNumber != null ? currentNumber + segmentNumberInCurrentRange : void 0;
              const segment = {
                id: String(segmentTime),
                isInit: false,
                time: time / timescale,
                end: (time + duration) / timescale,
                duration: duration / timescale,
                timescale: 1,
                number,
                mediaURLs: [replaceSegmentSmoothTokens(media, time)],
                complete: true,
                privateInfos: { smoothMediaSegment: {
                  time,
                  duration
                } }
              };
              segments.push(segment);
              segmentNumberInCurrentRange++;
              segmentTime = start + segmentNumberInCurrentRange * duration;
            }
            if (segmentTime >= to) {
              return segments;
            }
            if (currentNumber != null) {
              currentNumber += repeat + 1;
            }
          }
          return segments;
        }
        shouldRefresh(up, to) {
          this._refreshTimeline();
          if (!this._isLive) {
            return false;
          }
          const { timeline, timescale } = this._index;
          const lastSegmentInCurrentTimeline = timeline[timeline.length - 1];
          if (lastSegmentInCurrentTimeline === void 0) {
            return false;
          }
          const repeat = lastSegmentInCurrentTimeline.repeatCount;
          const endOfLastSegmentInCurrentTimeline = lastSegmentInCurrentTimeline.start + (repeat + 1) * lastSegmentInCurrentTimeline.duration;
          if (to * timescale < endOfLastSegmentInCurrentTimeline) {
            return false;
          }
          if (up * timescale >= endOfLastSegmentInCurrentTimeline) {
            return true;
          }
          const startOfLastSegmentInCurrentTimeline = lastSegmentInCurrentTimeline.start + repeat * lastSegmentInCurrentTimeline.duration;
          return up * timescale > startOfLastSegmentInCurrentTimeline;
        }
        getFirstPosition() {
          this._refreshTimeline();
          const index = this._index;
          if (index.timeline.length === 0) {
            return null;
          }
          return index.timeline[0].start / index.timescale;
        }
        getLastPosition() {
          this._refreshTimeline();
          const index = this._index;
          if (this._scaledLiveGap == null) {
            const lastTimelineElement = index.timeline[index.timeline.length - 1];
            return getIndexSegmentEnd(lastTimelineElement, null) / index.timescale;
          }
          for (let i = index.timeline.length - 1; i >= 0; i--) {
            const timelineElt = index.timeline[i];
            const timescaledNow = performance.now() / 1e3 * index.timescale;
            const { start, duration, repeatCount } = timelineElt;
            for (let j = repeatCount; j >= 0; j--) {
              const end = start + duration * (j + 1);
              const positionToReach = this._isAggressiveMode ? end - duration : end;
              if (positionToReach <= timescaledNow - this._scaledLiveGap) {
                return end / index.timescale;
              }
            }
          }
          return void 0;
        }
        checkDiscontinuity(timeSec) {
          this._refreshTimeline();
          return checkDiscontinuity(this._index, timeSec, void 0);
        }
        areSegmentsChronologicallyGenerated() {
          return true;
        }
        isSegmentStillAvailable(segment) {
          if (segment.isInit) {
            return true;
          }
          this._refreshTimeline();
          const { timeline, timescale } = this._index;
          return isSegmentStillAvailable(segment, timeline, timescale, 0);
        }
        canBeOutOfSyncError(error) {
          if (!this._isLive) {
            return false;
          }
          return error instanceof NetworkError && (error.isHttpError(404) || error.isHttpError(412));
        }
        _replace(newIndex) {
          const oldTimeline = this._index.timeline;
          const newTimeline = newIndex._index.timeline;
          const oldTimescale = this._index.timescale;
          const newTimescale = newIndex._index.timescale;
          this._index = newIndex._index;
          this._initialScaledLastPosition = newIndex._initialScaledLastPosition;
          this._indexValidityTime = newIndex._indexValidityTime;
          this._scaledLiveGap = newIndex._scaledLiveGap;
          if (oldTimeline.length === 0 || newTimeline.length === 0 || oldTimescale !== newTimescale) {
            return;
          }
          const lastOldTimelineElement = oldTimeline[oldTimeline.length - 1];
          const lastNewTimelineElement = newTimeline[newTimeline.length - 1];
          const newEnd = getIndexSegmentEnd(lastNewTimelineElement, null);
          if (getIndexSegmentEnd(lastOldTimelineElement, null) <= newEnd) {
            return;
          }
          for (let i = 0; i < oldTimeline.length; i++) {
            const oldTimelineRange = oldTimeline[i];
            const oldEnd = getIndexSegmentEnd(oldTimelineRange, null);
            if (oldEnd === newEnd) {
              this._index.timeline = this._index.timeline.concat(oldTimeline.slice(i + 1));
              return;
            }
            if (oldEnd > newEnd) {
              if (oldTimelineRange.duration !== lastNewTimelineElement.duration) {
                return;
              }
              const rangeDuration = newEnd - oldTimelineRange.start;
              if (rangeDuration === 0) {
                log_default.warn("Smooth Parser: a discontinuity detected in the previous manifest has been resolved.");
                this._index.timeline = this._index.timeline.concat(oldTimeline.slice(i));
                return;
              }
              if (rangeDuration < 0 || rangeDuration % oldTimelineRange.duration !== 0) {
                return;
              }
              const repeatWithOld = rangeDuration / oldTimelineRange.duration - 1;
              const relativeRepeat = oldTimelineRange.repeatCount - repeatWithOld;
              if (relativeRepeat < 0) {
                return;
              }
              lastNewTimelineElement.repeatCount += relativeRepeat;
              const supplementarySegments = oldTimeline.slice(i + 1);
              this._index.timeline = this._index.timeline.concat(supplementarySegments);
              return;
            }
          }
        }
        _update(newIndex) {
          updateSegmentTimeline(this._index.timeline, newIndex._index.timeline);
          this._initialScaledLastPosition = newIndex._initialScaledLastPosition;
          this._indexValidityTime = newIndex._indexValidityTime;
          this._scaledLiveGap = newIndex._scaledLiveGap;
        }
        isFinished() {
          return !this._isLive;
        }
        isInitialized() {
          return true;
        }
        addNewSegments(nextSegments, currentSegment) {
          this._refreshTimeline();
          for (let i = 0; i < nextSegments.length; i++) {
            _addSegmentInfos(this._index, nextSegments[i], currentSegment);
          }
        }
        _refreshTimeline() {
          if (this._initialScaledLastPosition == null) {
            return;
          }
          const index = this._index;
          const timeShiftBufferDepth = this._timeShiftBufferDepth;
          const timeSinceLastRealUpdate = (performance.now() - this._indexValidityTime) / 1e3;
          const lastPositionEstimate = timeSinceLastRealUpdate + this._initialScaledLastPosition / index.timescale;
          if (timeShiftBufferDepth != null) {
            const minimumPosition = (lastPositionEstimate - timeShiftBufferDepth) * index.timescale;
            clearTimelineFromPosition(index.timeline, minimumPosition);
          }
        }
      };
    }
  });

  // src/parsers/manifest/smooth/utils/parseBoolean.ts
  function parseBoolean(val) {
    if (typeof val === "boolean") {
      return val;
    } else if (typeof val === "string") {
      return val.toUpperCase() === "TRUE";
    } else {
      return false;
    }
  }
  var init_parseBoolean = __esm({
    "src/parsers/manifest/smooth/utils/parseBoolean.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/smooth/utils/reduceChildren.ts
  function reduceChildren(root, fn, init) {
    let node = root.firstElementChild;
    let accumulator = init;
    while (node !== null) {
      accumulator = fn(accumulator, node.nodeName, node);
      node = node.nextElementSibling;
    }
    return accumulator;
  }
  var init_reduceChildren = __esm({
    "src/parsers/manifest/smooth/utils/reduceChildren.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/smooth/create_parser.ts
  function createSmoothStreamingParser(parserOptions = {}) {
    const referenceDateTime = parserOptions.referenceDateTime === void 0 ? Date.UTC(1970, 0, 1, 0, 0, 0, 0) / 1e3 : parserOptions.referenceDateTime;
    const minRepresentationBitrate = parserOptions.minRepresentationBitrate === void 0 ? 0 : parserOptions.minRepresentationBitrate;
    const { serverSyncInfos } = parserOptions;
    const serverTimeOffset = serverSyncInfos !== void 0 ? serverSyncInfos.serverTimestamp - serverSyncInfos.clientTime : void 0;
    function parseQualityLevel(q, streamType) {
      const customAttributes = reduceChildren(q, (acc, qName, qNode) => {
        if (qName === "CustomAttributes") {
          acc.push(...reduceChildren(qNode, (cAttrs, cName, cNode) => {
            if (cName === "Attribute") {
              const name = cNode.getAttribute("Name");
              const value = cNode.getAttribute("Value");
              if (name !== null && value !== null) {
                cAttrs.push(name + "=" + value);
              }
            }
            return cAttrs;
          }, []));
        }
        return acc;
      }, []);
      function getAttribute(name) {
        const attr = q.getAttribute(name);
        return attr == null ? void 0 : attr;
      }
      switch (streamType) {
        case "audio": {
          const audiotag = getAttribute("AudioTag");
          const bitsPerSample = getAttribute("BitsPerSample");
          const channels = getAttribute("Channels");
          const codecPrivateData = getAttribute("CodecPrivateData");
          const fourCC = getAttribute("FourCC");
          const packetSize = getAttribute("PacketSize");
          const samplingRate = getAttribute("SamplingRate");
          const bitrateAttr = getAttribute("Bitrate");
          const bitrate = bitrateAttr === void 0 ? 0 : isNaN(parseInt(bitrateAttr, 10)) ? 0 : parseInt(bitrateAttr, 10);
          if (fourCC !== void 0 && MIME_TYPES[fourCC] === void 0 || codecPrivateData === void 0) {
            log_default.warn("Smooth parser: Unsupported audio codec. Ignoring quality level.");
            return null;
          }
          const codecs = getAudioCodecs(codecPrivateData, fourCC);
          return {
            audiotag: audiotag !== void 0 ? parseInt(audiotag, 10) : audiotag,
            bitrate,
            bitsPerSample: bitsPerSample !== void 0 ? parseInt(bitsPerSample, 10) : bitsPerSample,
            channels: channels !== void 0 ? parseInt(channels, 10) : channels,
            codecPrivateData,
            codecs,
            customAttributes,
            mimeType: fourCC !== void 0 ? MIME_TYPES[fourCC] : fourCC,
            packetSize: packetSize !== void 0 ? parseInt(packetSize, 10) : packetSize,
            samplingRate: samplingRate !== void 0 ? parseInt(samplingRate, 10) : samplingRate
          };
        }
        case "video": {
          const codecPrivateData = getAttribute("CodecPrivateData");
          const fourCC = getAttribute("FourCC");
          const width = getAttribute("MaxWidth");
          const height = getAttribute("MaxHeight");
          const bitrateAttr = getAttribute("Bitrate");
          const bitrate = bitrateAttr === void 0 ? 0 : isNaN(parseInt(bitrateAttr, 10)) ? 0 : parseInt(bitrateAttr, 10);
          if (fourCC !== void 0 && MIME_TYPES[fourCC] === void 0 || codecPrivateData === void 0) {
            log_default.warn("Smooth parser: Unsupported video codec. Ignoring quality level.");
            return null;
          }
          const codecs = getVideoCodecs(codecPrivateData);
          return {
            bitrate,
            customAttributes,
            mimeType: fourCC !== void 0 ? MIME_TYPES[fourCC] : fourCC,
            codecPrivateData,
            codecs,
            width: width !== void 0 ? parseInt(width, 10) : void 0,
            height: height !== void 0 ? parseInt(height, 10) : void 0
          };
        }
        case "text": {
          const codecPrivateData = getAttribute("CodecPrivateData");
          const fourCC = getAttribute("FourCC");
          const bitrateAttr = getAttribute("Bitrate");
          const bitrate = bitrateAttr === void 0 ? 0 : isNaN(parseInt(bitrateAttr, 10)) ? 0 : parseInt(bitrateAttr, 10);
          return {
            bitrate,
            customAttributes,
            mimeType: fourCC !== void 0 ? MIME_TYPES[fourCC] : fourCC,
            codecPrivateData: takeFirstSet(codecPrivateData, "")
          };
        }
        default:
          log_default.error("Smooth Parser: Unrecognized StreamIndex type: " + streamType);
          return null;
      }
    }
    function parseAdaptation2(args) {
      const {
        root,
        timescale,
        rootURL,
        protections,
        timeShiftBufferDepth,
        manifestReceivedTime,
        isLive
      } = args;
      const timescaleAttr = root.getAttribute("Timescale");
      const _timescale = timescaleAttr === null ? timescale : isNaN(+timescaleAttr) ? timescale : +timescaleAttr;
      const typeAttribute = root.getAttribute("Type");
      if (typeAttribute === null) {
        throw new Error("StreamIndex without type.");
      }
      if (!arrayIncludes(SUPPORTED_ADAPTATIONS_TYPE, typeAttribute)) {
        log_default.warn("Smooth Parser: Unrecognized adaptation type:", typeAttribute);
      }
      const adaptationType = typeAttribute;
      const subType = root.getAttribute("Subtype");
      const language = root.getAttribute("Language");
      const baseURLAttr = root.getAttribute("Url");
      const baseURL = baseURLAttr === null ? "" : baseURLAttr;
      if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
        assert(baseURL !== "");
      }
      const { qualityLevels, cNodes } = reduceChildren(root, (res, _name, node) => {
        switch (_name) {
          case "QualityLevel":
            const qualityLevel = parseQualityLevel(node, adaptationType);
            if (qualityLevel === null) {
              return res;
            }
            if (adaptationType !== "video" || qualityLevel.bitrate > minRepresentationBitrate) {
              res.qualityLevels.push(qualityLevel);
            }
            break;
          case "c":
            res.cNodes.push(node);
            break;
        }
        return res;
      }, { qualityLevels: [], cNodes: [] });
      const index = {
        timeline: parseCNodes(cNodes),
        timescale: _timescale
      };
      assert(qualityLevels.length !== 0, "Adaptation should have at least one playable representation.");
      const adaptationID = adaptationType + (isNonEmptyString(language) ? "_" + language : "");
      const representations = qualityLevels.map((qualityLevel) => {
        const path = resolveURL(rootURL, baseURL);
        const repIndex = {
          timeline: index.timeline,
          timescale: index.timescale,
          media: replaceRepresentationSmoothTokens(path, qualityLevel.bitrate, qualityLevel.customAttributes)
        };
        const mimeType = isNonEmptyString(qualityLevel.mimeType) ? qualityLevel.mimeType : DEFAULT_MIME_TYPES[adaptationType];
        const codecs = qualityLevel.codecs;
        const id = adaptationID + "_" + (adaptationType != null ? adaptationType + "-" : "") + (mimeType != null ? mimeType + "-" : "") + (codecs != null ? codecs + "-" : "") + String(qualityLevel.bitrate);
        const keyIDs = [];
        let firstProtection;
        if (protections.length > 0) {
          firstProtection = protections[0];
          protections.forEach((protection) => {
            const keyId = protection.keyId;
            protection.keySystems.forEach((keySystem) => {
              keyIDs.push({
                keyId,
                systemId: keySystem.systemId
              });
            });
          });
        }
        const segmentPrivateInfos = {
          bitsPerSample: qualityLevel.bitsPerSample,
          channels: qualityLevel.channels,
          codecPrivateData: qualityLevel.codecPrivateData,
          packetSize: qualityLevel.packetSize,
          samplingRate: qualityLevel.samplingRate,
          protection: firstProtection != null ? {
            keyId: firstProtection.keyId
          } : void 0
        };
        const aggressiveMode = parserOptions.aggressiveMode == null ? DEFAULT_AGGRESSIVE_MODE : parserOptions.aggressiveMode;
        const reprIndex = new SmoothRepresentationIndex(repIndex, {
          aggressiveMode,
          isLive,
          manifestReceivedTime,
          segmentPrivateInfos,
          timeShiftBufferDepth
        });
        const representation = object_assign_default({}, qualityLevel, {
          index: reprIndex,
          mimeType,
          codecs,
          id
        });
        if (keyIDs.length > 0 || firstProtection !== void 0) {
          const initDataValues = firstProtection === void 0 ? [] : firstProtection.keySystems.map((keySystemData) => {
            const { systemId, privateData } = keySystemData;
            const cleanedSystemId = systemId.replace(/-/g, "");
            const pssh = createPSSHBox(cleanedSystemId, privateData);
            return { systemId: cleanedSystemId, data: pssh };
          });
          if (initDataValues.length > 0) {
            const initData = [{ type: "cenc", values: initDataValues }];
            representation.contentProtections = { keyIds: keyIDs, initData };
          } else {
            representation.contentProtections = { keyIds: keyIDs, initData: [] };
          }
        }
        return representation;
      });
      if (subType === "ADVT") {
        return null;
      }
      const parsedAdaptation = {
        id: adaptationID,
        type: adaptationType,
        representations,
        language: language == null ? void 0 : language
      };
      if (adaptationType === "text" && subType === "DESC") {
        parsedAdaptation.closedCaption = true;
      }
      return parsedAdaptation;
    }
    function parseFromDocument2(doc, url, manifestReceivedTime) {
      const rootURL = normalizeBaseURL(url == null ? "" : url);
      const root = doc.documentElement;
      if (root == null || root.nodeName !== "SmoothStreamingMedia") {
        throw new Error("document root should be SmoothStreamingMedia");
      }
      const majorVersionAttr = root.getAttribute("MajorVersion");
      const minorVersionAttr = root.getAttribute("MinorVersion");
      if (majorVersionAttr === null || minorVersionAttr === null || !/^[2]-[0-2]$/.test(majorVersionAttr + "-" + minorVersionAttr)) {
        throw new Error("Version should be 2.0, 2.1 or 2.2");
      }
      const timescaleAttr = root.getAttribute("Timescale");
      const timescale = !isNonEmptyString(timescaleAttr) ? 1e7 : isNaN(+timescaleAttr) ? 1e7 : +timescaleAttr;
      const {
        protections,
        adaptationNodes
      } = reduceChildren(root, (res, name, node) => {
        switch (name) {
          case "Protection": {
            res.protections.push(parseProtectionNode(node, parserOptions.keySystems));
            break;
          }
          case "StreamIndex":
            res.adaptationNodes.push(node);
            break;
        }
        return res;
      }, {
        adaptationNodes: [],
        protections: []
      });
      const initialAdaptations = {};
      const isLive = parseBoolean(root.getAttribute("IsLive"));
      let timeShiftBufferDepth;
      if (isLive) {
        const dvrWindowLength = root.getAttribute("DVRWindowLength");
        if (dvrWindowLength != null && !isNaN(+dvrWindowLength) && +dvrWindowLength !== 0) {
          timeShiftBufferDepth = +dvrWindowLength / timescale;
        }
      }
      const adaptations = adaptationNodes.reduce((acc, node) => {
        const adaptation = parseAdaptation2({
          root: node,
          rootURL,
          timescale,
          protections,
          isLive,
          timeShiftBufferDepth,
          manifestReceivedTime
        });
        if (adaptation === null) {
          return acc;
        }
        const type = adaptation.type;
        const adaps = acc[type];
        if (adaps === void 0) {
          acc[type] = [adaptation];
        } else {
          adaps.push(adaptation);
        }
        return acc;
      }, initialAdaptations);
      let suggestedPresentationDelay;
      let availabilityStartTime;
      let minimumTime;
      let timeshiftDepth = null;
      let maximumTimeData;
      const firstVideoAdaptation = adaptations.video !== void 0 ? adaptations.video[0] : void 0;
      const firstAudioAdaptation = adaptations.audio !== void 0 ? adaptations.audio[0] : void 0;
      let safeMinimumTime;
      let safeMaximumTime;
      let unsafeMaximumTime;
      if (firstVideoAdaptation !== void 0 || firstAudioAdaptation !== void 0) {
        const firstTimeReferences = [];
        const lastTimeReferences = [];
        if (firstVideoAdaptation !== void 0) {
          const firstVideoRepresentation = firstVideoAdaptation.representations[0];
          if (firstVideoRepresentation !== void 0) {
            const firstVideoTimeReference = firstVideoRepresentation.index.getFirstPosition();
            const lastVideoTimeReference = firstVideoRepresentation.index.getLastPosition();
            if (firstVideoTimeReference != null) {
              firstTimeReferences.push(firstVideoTimeReference);
            }
            if (lastVideoTimeReference != null) {
              lastTimeReferences.push(lastVideoTimeReference);
            }
          }
        }
        if (firstAudioAdaptation !== void 0) {
          const firstAudioRepresentation = firstAudioAdaptation.representations[0];
          if (firstAudioRepresentation !== void 0) {
            const firstAudioTimeReference = firstAudioRepresentation.index.getFirstPosition();
            const lastAudioTimeReference = firstAudioRepresentation.index.getLastPosition();
            if (firstAudioTimeReference != null) {
              firstTimeReferences.push(firstAudioTimeReference);
            }
            if (lastAudioTimeReference != null) {
              lastTimeReferences.push(lastAudioTimeReference);
            }
          }
        }
        if (firstTimeReferences.length > 0) {
          safeMinimumTime = Math.max(...firstTimeReferences);
        }
        if (lastTimeReferences.length > 0) {
          safeMaximumTime = Math.min(...lastTimeReferences);
          unsafeMaximumTime = Math.max(...lastTimeReferences);
        }
      }
      const manifestDuration = root.getAttribute("Duration");
      const duration = manifestDuration !== null && +manifestDuration !== 0 ? +manifestDuration / timescale : void 0;
      if (isLive) {
        suggestedPresentationDelay = parserOptions.suggestedPresentationDelay;
        availabilityStartTime = referenceDateTime;
        minimumTime = safeMinimumTime != null ? safeMinimumTime : availabilityStartTime;
        let livePosition = unsafeMaximumTime;
        if (livePosition === void 0) {
          livePosition = Date.now() / 1e3 - availabilityStartTime;
        }
        let maximumSafePosition = safeMaximumTime;
        if (maximumSafePosition === void 0) {
          maximumSafePosition = livePosition;
        }
        maximumTimeData = {
          isLinear: true,
          maximumSafePosition,
          livePosition,
          time: performance.now()
        };
        timeshiftDepth = timeShiftBufferDepth != null ? timeShiftBufferDepth : null;
      } else {
        minimumTime = safeMinimumTime != null ? safeMinimumTime : 0;
        const maximumTime = safeMaximumTime !== void 0 ? safeMaximumTime : duration !== void 0 ? minimumTime + duration : Infinity;
        maximumTimeData = {
          isLinear: false,
          maximumSafePosition: maximumTime,
          livePosition: void 0,
          time: performance.now()
        };
      }
      const periodStart = isLive ? 0 : minimumTime;
      const periodEnd = isLive ? void 0 : maximumTimeData.maximumSafePosition;
      const manifest = {
        availabilityStartTime: availabilityStartTime === void 0 ? 0 : availabilityStartTime,
        clockOffset: serverTimeOffset,
        isLive,
        isDynamic: isLive,
        isLastPeriodKnown: true,
        timeBounds: {
          minimumSafePosition: minimumTime,
          timeshiftDepth,
          maximumTimeData
        },
        periods: [{
          adaptations,
          duration: periodEnd !== void 0 ? periodEnd - periodStart : duration,
          end: periodEnd,
          id: "gen-smooth-period-0",
          start: periodStart
        }],
        suggestedPresentationDelay,
        transportType: "smooth",
        uris: url == null ? [] : [url]
      };
      checkManifestIDs(manifest);
      return manifest;
    }
    return parseFromDocument2;
  }
  function createPSSHBox(systemId, privateData) {
    if (systemId.length !== 32) {
      throw new Error("HSS: wrong system id length");
    }
    const version = 0;
    return createBox("pssh", concat2([version, 0, 0, 0], hexToBytes(systemId), itobe4(privateData.length), privateData));
  }
  var DEFAULT_AGGRESSIVE_MODE, DEFAULT_MIME_TYPES, MIME_TYPES, create_parser_default;
  var init_create_parser = __esm({
    "src/parsers/manifest/smooth/create_parser.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_manifest2();
      init_array_includes();
      init_assert();
      init_byte_parsing();
      init_is_non_empty_string();
      init_object_assign();
      init_resolve_url();
      init_string_parsing();
      init_take_first_set();
      init_isobmff();
      init_check_manifest_ids();
      init_get_codecs();
      init_parse_C_nodes();
      init_parse_protection_node();
      init_representation_index2();
      init_parseBoolean();
      init_reduceChildren();
      init_tokens();
      DEFAULT_AGGRESSIVE_MODE = false;
      DEFAULT_MIME_TYPES = {
        audio: "audio/mp4",
        video: "video/mp4",
        text: "application/ttml+xml"
      };
      MIME_TYPES = {
        AACL: "audio/mp4",
        AVC1: "video/mp4",
        H264: "video/mp4",
        TTML: "application/ttml+xml+mp4",
        DFXP: "application/ttml+xml+mp4"
      };
      create_parser_default = createSmoothStreamingParser;
    }
  });

  // src/parsers/manifest/smooth/index.ts
  var smooth_default;
  var init_smooth = __esm({
    "src/parsers/manifest/smooth/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_create_parser();
      init_representation_index2();
      smooth_default = create_parser_default;
    }
  });

  // src/utils/request/fetch.ts
  function fetchRequest(options) {
    let headers;
    if (!isNullOrUndefined(options.headers)) {
      if (isNullOrUndefined(_Headers)) {
        headers = options.headers;
      } else {
        headers = new _Headers();
        const headerNames = Object.keys(options.headers);
        for (let i = 0; i < headerNames.length; i++) {
          const headerName = headerNames[i];
          headers.append(headerName, options.headers[headerName]);
        }
      }
    }
    log_default.debug("Fetch: Called with URL", options.url);
    let cancellation = null;
    let timeouted = false;
    const sendingTime = performance.now();
    const abortController = !isNullOrUndefined(_AbortController) ? new _AbortController() : null;
    function abortFetch() {
      if (isNullOrUndefined(abortController)) {
        log_default.warn("Fetch: AbortController API not available.");
        return;
      }
      abortController.abort();
    }
    const requestTimeout = isNullOrUndefined(options.timeout) ? config_default.getCurrent().DEFAULT_REQUEST_TIMEOUT : options.timeout;
    const timeout2 = window.setTimeout(() => {
      timeouted = true;
      abortFetch();
    }, requestTimeout);
    const deregisterCancelLstnr = options.cancelSignal.register(function abortRequest(err) {
      cancellation = err;
      abortFetch();
    });
    const fetchOpts = { method: "GET" };
    if (headers !== void 0) {
      fetchOpts.headers = headers;
    }
    fetchOpts.signal = !isNullOrUndefined(abortController) ? abortController.signal : null;
    return fetch(options.url, fetchOpts).then((response) => {
      if (!isNullOrUndefined(timeout2)) {
        clearTimeout(timeout2);
      }
      if (response.status >= 300) {
        log_default.warn("Fetch: Request HTTP Error", response);
        throw new RequestError(response.url, response.status, NetworkErrorTypes.ERROR_HTTP_CODE);
      }
      if (isNullOrUndefined(response.body)) {
        throw new RequestError(response.url, response.status, NetworkErrorTypes.PARSE_ERROR);
      }
      const contentLengthHeader = response.headers.get("Content-Length");
      const contentLength = !isNullOrUndefined(contentLengthHeader) && !isNaN(+contentLengthHeader) ? +contentLengthHeader : void 0;
      const reader = response.body.getReader();
      let size = 0;
      return readBufferAndSendEvents();
      async function readBufferAndSendEvents() {
        const data = await reader.read();
        if (!data.done && !isNullOrUndefined(data.value)) {
          size += data.value.byteLength;
          const currentTime = performance.now();
          const dataInfo = {
            url: response.url,
            currentTime,
            duration: currentTime - sendingTime,
            sendingTime,
            chunkSize: data.value.byteLength,
            chunk: data.value.buffer,
            size,
            totalSize: contentLength
          };
          options.onData(dataInfo);
          return readBufferAndSendEvents();
        } else if (data.done) {
          deregisterCancelLstnr();
          const receivedTime = performance.now();
          const requestDuration = receivedTime - sendingTime;
          return {
            requestDuration,
            receivedTime,
            sendingTime,
            size,
            status: response.status,
            url: response.url
          };
        }
        return readBufferAndSendEvents();
      }
    }).catch((err) => {
      if (cancellation !== null) {
        throw cancellation;
      }
      deregisterCancelLstnr();
      if (timeouted) {
        log_default.warn("Fetch: Request timeouted.");
        throw new RequestError(options.url, 0, NetworkErrorTypes.TIMEOUT);
      } else if (err instanceof RequestError) {
        throw err;
      }
      log_default.warn("Fetch: Request Error", err instanceof Error ? err.toString() : "");
      throw new RequestError(options.url, 0, NetworkErrorTypes.ERROR_EVENT);
    });
  }
  function fetchIsSupported() {
    return typeof window.fetch === "function" && !isNullOrUndefined(_AbortController) && !isNullOrUndefined(_Headers);
  }
  var _Headers, _AbortController;
  var init_fetch = __esm({
    "src/utils/request/fetch.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_errors();
      init_log();
      init_is_null_or_undefined();
      _Headers = typeof Headers === "function" ? Headers : null;
      _AbortController = typeof AbortController === "function" ? AbortController : null;
    }
  });

  // src/utils/request/xhr.ts
  function request(options) {
    const { DEFAULT_REQUEST_TIMEOUT } = config_default.getCurrent();
    const requestOptions = {
      url: options.url,
      headers: options.headers,
      responseType: isNullOrUndefined(options.responseType) ? DEFAULT_RESPONSE_TYPE : options.responseType,
      timeout: isNullOrUndefined(options.timeout) ? DEFAULT_REQUEST_TIMEOUT : options.timeout
    };
    return new Promise((resolve, reject) => {
      const { onProgress, cancelSignal } = options;
      const {
        url,
        headers,
        responseType,
        timeout: timeout2
      } = requestOptions;
      const xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      if (timeout2 >= 0) {
        xhr.timeout = timeout2;
      }
      xhr.responseType = responseType;
      if (xhr.responseType === "document") {
        xhr.overrideMimeType("text/xml");
      }
      if (!isNullOrUndefined(headers)) {
        const _headers = headers;
        for (const key in _headers) {
          if (_headers.hasOwnProperty(key)) {
            xhr.setRequestHeader(key, _headers[key]);
          }
        }
      }
      const sendingTime = performance.now();
      let deregisterCancellationListener = null;
      if (cancelSignal !== void 0) {
        deregisterCancellationListener = cancelSignal.register(function abortRequest(err) {
          if (!isNullOrUndefined(xhr) && xhr.readyState !== 4) {
            xhr.abort();
          }
          reject(err);
        });
        if (cancelSignal.isCancelled) {
          return;
        }
      }
      xhr.onerror = function onXHRError() {
        if (deregisterCancellationListener !== null) {
          deregisterCancellationListener();
        }
        reject(new RequestError(url, xhr.status, "ERROR_EVENT", xhr));
      };
      xhr.ontimeout = function onXHRTimeout() {
        if (deregisterCancellationListener !== null) {
          deregisterCancellationListener();
        }
        reject(new RequestError(url, xhr.status, "TIMEOUT", xhr));
      };
      if (onProgress !== void 0) {
        xhr.onprogress = function onXHRProgress(event) {
          const currentTime = performance.now();
          onProgress({
            url,
            duration: currentTime - sendingTime,
            sendingTime,
            currentTime,
            size: event.loaded,
            totalSize: event.total
          });
        };
      }
      xhr.onload = function onXHRLoad(event) {
        if (xhr.readyState === 4) {
          if (deregisterCancellationListener !== null) {
            deregisterCancellationListener();
          }
          if (xhr.status >= 200 && xhr.status < 300) {
            const receivedTime = performance.now();
            const totalSize = xhr.response instanceof ArrayBuffer ? xhr.response.byteLength : event.total;
            const status = xhr.status;
            const loadedResponseType = xhr.responseType;
            const _url = isNonEmptyString(xhr.responseURL) ? xhr.responseURL : url;
            let responseData;
            if (loadedResponseType === "json") {
              responseData = typeof xhr.response === "object" ? xhr.response : toJSONForIE(xhr.responseText);
            } else {
              responseData = xhr.response;
            }
            if (isNullOrUndefined(responseData)) {
              reject(new RequestError(url, xhr.status, "PARSE_ERROR", xhr));
              return;
            }
            resolve({
              status,
              url: _url,
              responseType: loadedResponseType,
              sendingTime,
              receivedTime,
              requestDuration: receivedTime - sendingTime,
              size: totalSize,
              responseData
            });
          } else {
            reject(new RequestError(url, xhr.status, "ERROR_HTTP_CODE", xhr));
          }
        }
      };
      xhr.send();
    });
  }
  function toJSONForIE(data) {
    try {
      return JSON.parse(data);
    } catch (e) {
      return null;
    }
  }
  var DEFAULT_RESPONSE_TYPE;
  var init_xhr = __esm({
    "src/utils/request/xhr.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_errors();
      init_is_non_empty_string();
      init_is_null_or_undefined();
      DEFAULT_RESPONSE_TYPE = "json";
    }
  });

  // src/utils/request/index.ts
  var request_default;
  var init_request = __esm({
    "src/utils/request/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_fetch();
      init_xhr();
      request_default = request;
    }
  });

  // src/transports/utils/find_complete_box.ts
  function findCompleteBox(buf, wantedName) {
    const len = buf.length;
    let i = 0;
    while (i + 8 <= len) {
      let size = be4toi(buf, i);
      if (size === 0) {
        size = len - i;
      } else if (size === 1) {
        if (i + 16 > len) {
          return -1;
        }
        size = be8toi(buf, i + 8);
      }
      if (isNaN(size) || size <= 0) {
        return -1;
      }
      const name = be4toi(buf, i + 4);
      if (name === wantedName) {
        if (i + size <= len) {
          return i;
        }
        return -1;
      }
      i += size;
    }
    return -1;
  }
  var init_find_complete_box = __esm({
    "src/transports/utils/find_complete_box.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
    }
  });

  // src/transports/utils/check_isobmff_integrity.ts
  function checkISOBMFFIntegrity(buffer, isInitSegment) {
    if (isInitSegment) {
      const ftypIndex = findCompleteBox(buffer, 1718909296);
      if (ftypIndex < 0) {
        throw new OtherError("INTEGRITY_ERROR", "Incomplete `ftyp` box");
      }
      const moovIndex = findCompleteBox(buffer, 1836019574);
      if (moovIndex < 0) {
        throw new OtherError("INTEGRITY_ERROR", "Incomplete `moov` box");
      }
    } else {
      const moofIndex = findCompleteBox(buffer, 1836019558);
      if (moofIndex < 0) {
        throw new OtherError("INTEGRITY_ERROR", "Incomplete `moof` box");
      }
      const mdatIndex = findCompleteBox(buffer, 1835295092);
      if (mdatIndex < 0) {
        throw new OtherError("INTEGRITY_ERROR", "Incomplete `mdat` box");
      }
    }
  }
  var init_check_isobmff_integrity = __esm({
    "src/transports/utils/check_isobmff_integrity.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_find_complete_box();
    }
  });

  // src/transports/utils/call_custom_manifest_loader.ts
  function callCustomManifestLoader(customManifestLoader, fallbackManifestLoader) {
    return (url, cancelSignal) => {
      return new Promise((res, rej) => {
        const timeAPIsDelta = Date.now() - performance.now();
        let hasFinished = false;
        const resolve = (_args) => {
          if (hasFinished || cancelSignal.isCancelled) {
            return;
          }
          hasFinished = true;
          cancelSignal.deregister(abortCustomLoader);
          const receivedTime = _args.receivingTime !== void 0 ? _args.receivingTime - timeAPIsDelta : void 0;
          const sendingTime = _args.sendingTime !== void 0 ? _args.sendingTime - timeAPIsDelta : void 0;
          res({
            responseData: _args.data,
            size: _args.size,
            requestDuration: _args.duration,
            url: _args.url,
            receivedTime,
            sendingTime
          });
        };
        const reject = (err) => {
          var _a2, _b2, _c;
          if (hasFinished || cancelSignal.isCancelled) {
            return;
          }
          hasFinished = true;
          cancelSignal.deregister(abortCustomLoader);
          const castedErr = err;
          const message = (_a2 = castedErr == null ? void 0 : castedErr.message) != null ? _a2 : "Unknown error when fetching the Manifest through a custom manifestLoader.";
          const emittedErr = new CustomLoaderError(message, (_b2 = castedErr == null ? void 0 : castedErr.canRetry) != null ? _b2 : false, (_c = castedErr == null ? void 0 : castedErr.isOfflineError) != null ? _c : false, castedErr == null ? void 0 : castedErr.xhr);
          rej(emittedErr);
        };
        const fallback = () => {
          if (hasFinished || cancelSignal.isCancelled) {
            return;
          }
          hasFinished = true;
          cancelSignal.deregister(abortCustomLoader);
          fallbackManifestLoader(url, cancelSignal).then(res, rej);
        };
        const callbacks = { reject, resolve, fallback };
        const abort = customManifestLoader(url, callbacks);
        cancelSignal.register(abortCustomLoader);
        function abortCustomLoader(err) {
          if (hasFinished) {
            return;
          }
          hasFinished = true;
          if (typeof abort === "function") {
            abort();
          }
          rej(err);
        }
      });
    };
  }
  var init_call_custom_manifest_loader = __esm({
    "src/transports/utils/call_custom_manifest_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
    }
  });

  // src/transports/utils/generate_manifest_loader.ts
  function generateRegularManifestLoader(preferredType) {
    return function regularManifestLoader2(url, cancelSignal) {
      if (url === void 0) {
        throw new Error("Cannot perform HTTP(s) request. URL not known");
      }
      switch (preferredType) {
        case "arraybuffer":
          return request_default({ url, responseType: "arraybuffer", cancelSignal });
        case "text":
          return request_default({ url, responseType: "text", cancelSignal });
        case "document":
          return request_default({ url, responseType: "document", cancelSignal });
        default:
          assertUnreachable(preferredType);
      }
    };
  }
  function generateManifestLoader({ customManifestLoader }, preferredType) {
    const regularManifestLoader2 = generateRegularManifestLoader(preferredType);
    if (typeof customManifestLoader !== "function") {
      return regularManifestLoader2;
    }
    return callCustomManifestLoader(customManifestLoader, regularManifestLoader2);
  }
  var init_generate_manifest_loader = __esm({
    "src/transports/utils/generate_manifest_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_assert_unreachable();
      init_request();
      init_call_custom_manifest_loader();
    }
  });

  // src/transports/smooth/isobmff/create_boxes.ts
  function createAVC1Box(width, height, hRes, vRes, encName, colorDepth, avcc) {
    return createBox("avc1", concat2(6, itobe2(1), 16, itobe2(width), itobe2(height), itobe2(hRes), 2, itobe2(vRes), 2 + 4, [0, 1, encName.length], strToUtf8(encName), 31 - encName.length, itobe2(colorDepth), [255, 255], avcc));
  }
  function createENCVBox(width, height, hRes, vRes, encName, colorDepth, avcc, sinf) {
    return createBox("encv", concat2(6, itobe2(1), 16, itobe2(width), itobe2(height), itobe2(hRes), 2, itobe2(vRes), 2 + 4, [0, 1, encName.length], strToUtf8(encName), 31 - encName.length, itobe2(colorDepth), [255, 255], avcc, sinf));
  }
  function createMP4ABox(drefIdx, channelsCount, sampleSize, packetSize, sampleRate, esds) {
    return createBox("mp4a", concat2(6, itobe2(drefIdx), 8, itobe2(channelsCount), itobe2(sampleSize), 2, itobe2(packetSize), itobe2(sampleRate), 2, esds));
  }
  function createENCABox(drefIdx, channelsCount, sampleSize, packetSize, sampleRate, esds, sinf) {
    return createBox("enca", concat2(6, itobe2(drefIdx), 8, itobe2(channelsCount), itobe2(sampleSize), 2, itobe2(packetSize), itobe2(sampleRate), 2, esds, sinf));
  }
  function createDREFBox(url) {
    return createBox("dref", concat2(7, [1], url));
  }
  function createFTYPBox(majorBrand, brands) {
    const content = concat2(...[
      strToUtf8(majorBrand),
      [0, 0, 0, 1]
    ].concat(brands.map(strToUtf8)));
    return createBox("ftyp", content);
  }
  function createSCHMBox(schemeType, schemeVersion) {
    return createBox("schm", concat2(4, strToUtf8(schemeType), itobe4(schemeVersion)));
  }
  function createTfdtBox(decodeTime) {
    return createBox("tfdt", concat2([1, 0, 0, 0], itobe8(decodeTime)));
  }
  function createVMHDBox() {
    const arr = new Uint8Array(12);
    arr[3] = 1;
    return createBox("vmhd", arr);
  }
  function createTREXBox(trackId) {
    return createBox("trex", concat2(4, itobe4(trackId), [0, 0, 0, 1], 12));
  }
  function createFreeBox(length) {
    return createBox("free", new Uint8Array(length - 8));
  }
  function createESDSBox(stream, codecPrivateData) {
    return createBox("esds", concat2(4, [3, 25], itobe2(stream), [0, 4, 17, 64, 21], 11, [5, 2], hexToBytes(codecPrivateData), [6, 1, 2]));
  }
  function createFRMABox(dataFormat) {
    return createBox("frma", strToUtf8(dataFormat));
  }
  function createAVCCBox(sps, pps, nalLen) {
    const nal = nalLen === 2 ? 1 : nalLen === 4 ? 3 : 0;
    const h264Profile = sps[1];
    const h264CompatibleProfile = sps[2];
    const h264Level = sps[3];
    return createBox("avcC", concat2([
      1,
      h264Profile,
      h264CompatibleProfile,
      h264Level,
      63 << 2 | nal,
      224 | 1
    ], itobe2(sps.length), sps, [1], itobe2(pps.length), pps));
  }
  function createHDLRBox(type) {
    let name;
    let handlerName;
    switch (type) {
      case "video":
        name = "vide";
        handlerName = "VideoHandler";
        break;
      case "audio":
        name = "soun";
        handlerName = "SoundHandler";
        break;
      default:
        name = "hint";
        handlerName = "";
        break;
    }
    return createBox("hdlr", concat2(8, strToUtf8(name), 12, strToUtf8(handlerName), 1));
  }
  function createMDHDBox(timescale) {
    return createBox("mdhd", concat2(12, itobe4(timescale), 8));
  }
  function createMVHDBox(timescale, trackId) {
    return createBox("mvhd", concat2(12, itobe4(timescale), 4, [0, 1], 2, [1, 0], 10, [0, 1], 14, [0, 1], 14, [64, 0, 0, 0], 26, itobe2(trackId + 1)));
  }
  function createSAIOBox(mfhd, tfhd, tfdt, trun) {
    return createBox("saio", concat2(4, [0, 0, 0, 1], itobe4(mfhd.length + tfhd.length + tfdt.length + trun.length + 8 + 8 + 8 + 8)));
  }
  function createSAIZBox(sencContent) {
    if (sencContent.length === 0) {
      return createBox("saiz", new Uint8Array(0));
    }
    const flags = be4toi(sencContent, 0);
    const entries = be4toi(sencContent, 4);
    const arr = new Uint8Array(entries + 9);
    arr.set(itobe4(entries), 5);
    let i = 9;
    let j = 8;
    let pairsCnt;
    let pairsLen;
    while (j < sencContent.length) {
      j += 8;
      if ((flags & 2) === 2) {
        pairsLen = 2;
        pairsCnt = be2toi(sencContent, j);
        j += pairsCnt * 6 + 2;
      } else {
        pairsCnt = 0;
        pairsLen = 0;
      }
      arr[i] = pairsCnt * 6 + 8 + pairsLen;
      i++;
    }
    return createBox("saiz", arr);
  }
  function createSMHDBox() {
    return createBox("smhd", new Uint8Array(8));
  }
  function createSTSDBox(reps) {
    const arrBase = [7, [reps.length]];
    return createBox("stsd", concat2(...arrBase.concat(reps)));
  }
  function createTKHDBox(width, height, trackId) {
    return createBox("tkhd", concat2(itobe4(1 + 2 + 4), 8, itobe4(trackId), 20, [1, 0, 0, 0], [0, 1, 0, 0], 12, [0, 1, 0, 0], 12, [64, 0, 0, 0], itobe2(width), 2, itobe2(height), 2));
  }
  function createTENCBox(algId, ivSize, keyId) {
    return createBox("tenc", concat2(6, [algId, ivSize], keyId));
  }
  var init_create_boxes = __esm({
    "src/transports/smooth/isobmff/create_boxes.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_byte_parsing();
      init_string_parsing();
    }
  });

  // src/transports/smooth/isobmff/create_init_segment.ts
  function createMOOVBox(mvhd, mvex, trak) {
    const children = [mvhd, mvex, trak];
    return createBoxWithChildren("moov", children);
  }
  function createInitSegment(timescale, type, stsd, mhd, width, height) {
    const stbl = createBoxWithChildren("stbl", [
      stsd,
      createBox("stts", new Uint8Array(8)),
      createBox("stsc", new Uint8Array(8)),
      createBox("stsz", new Uint8Array(12)),
      createBox("stco", new Uint8Array(8))
    ]);
    const url = createBox("url ", new Uint8Array([0, 0, 0, 1]));
    const dref = createDREFBox(url);
    const dinf = createBoxWithChildren("dinf", [dref]);
    const minf = createBoxWithChildren("minf", [mhd, dinf, stbl]);
    const hdlr = createHDLRBox(type);
    const mdhd = createMDHDBox(timescale);
    const mdia = createBoxWithChildren("mdia", [mdhd, hdlr, minf]);
    const tkhd = createTKHDBox(width, height, 1);
    const trak = createBoxWithChildren("trak", [tkhd, mdia]);
    const trex = createTREXBox(1);
    const mvex = createBoxWithChildren("mvex", [trex]);
    const mvhd = createMVHDBox(timescale, 1);
    const moov = createMOOVBox(mvhd, mvex, trak);
    const ftyp = createFTYPBox("isom", ["isom", "iso2", "iso6", "avc1", "dash"]);
    return concat2(ftyp, moov);
  }
  var init_create_init_segment = __esm({
    "src/transports/smooth/isobmff/create_init_segment.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_byte_parsing();
      init_create_boxes();
    }
  });

  // src/transports/smooth/isobmff/get_aaces_header.ts
  function getAacesHeader(type, frequency, chans) {
    const freq = SAMPLING_FREQUENCIES.indexOf(frequency);
    let val;
    val = (type & 63) << 4;
    val = (val | freq & 31) << 4;
    val = (val | chans & 31) << 3;
    return bytesToHex(itobe2(val));
  }
  var SAMPLING_FREQUENCIES;
  var init_get_aaces_header = __esm({
    "src/transports/smooth/isobmff/get_aaces_header.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_string_parsing();
      SAMPLING_FREQUENCIES = [
        96e3,
        88200,
        64e3,
        48e3,
        44100,
        32e3,
        24e3,
        22050,
        16e3,
        12e3,
        11025,
        8e3,
        7350
      ];
    }
  });

  // src/transports/smooth/isobmff/create_audio_init_segment.ts
  function createAudioInitSegment(timescale, channelsCount, sampleSize, packetSize, sampleRate, codecPrivateData, keyId) {
    const _codecPrivateData = codecPrivateData.length === 0 ? getAacesHeader(2, sampleRate, channelsCount) : codecPrivateData;
    const esds = createESDSBox(1, _codecPrivateData);
    const stsd = (() => {
      if (keyId === void 0) {
        const mp4a = createMP4ABox(1, channelsCount, sampleSize, packetSize, sampleRate, esds);
        return createSTSDBox([mp4a]);
      }
      const tenc = createTENCBox(1, 8, keyId);
      const schi = createBoxWithChildren("schi", [tenc]);
      const schm = createSCHMBox("cenc", 65536);
      const frma = createFRMABox("mp4a");
      const sinf = createBoxWithChildren("sinf", [frma, schm, schi]);
      const enca = createENCABox(1, channelsCount, sampleSize, packetSize, sampleRate, esds, sinf);
      return createSTSDBox([enca]);
    })();
    return createInitSegment(timescale, "audio", stsd, createSMHDBox(), 0, 0);
  }
  var init_create_audio_init_segment = __esm({
    "src/transports/smooth/isobmff/create_audio_init_segment.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_create_boxes();
      init_create_init_segment();
      init_get_aaces_header();
    }
  });

  // src/transports/smooth/isobmff/create_video_init_segment.ts
  function createVideoInitSegment(timescale, width, height, hRes, vRes, nalLength, codecPrivateData, keyId) {
    const [, spsHex, ppsHex] = codecPrivateData.split("00000001");
    if (spsHex === void 0 || ppsHex === void 0) {
      throw new Error("Smooth: unsupported codec private data.");
    }
    const sps = hexToBytes(spsHex);
    const pps = hexToBytes(ppsHex);
    const avcc = createAVCCBox(sps, pps, nalLength);
    let stsd;
    if (keyId === void 0) {
      const avc1 = createAVC1Box(width, height, hRes, vRes, "AVC Coding", 24, avcc);
      stsd = createSTSDBox([avc1]);
    } else {
      const tenc = createTENCBox(1, 8, keyId);
      const schi = createBoxWithChildren("schi", [tenc]);
      const schm = createSCHMBox("cenc", 65536);
      const frma = createFRMABox("avc1");
      const sinf = createBoxWithChildren("sinf", [frma, schm, schi]);
      const encv = createENCVBox(width, height, hRes, vRes, "AVC Coding", 24, avcc, sinf);
      stsd = createSTSDBox([encv]);
    }
    return createInitSegment(timescale, "video", stsd, createVMHDBox(), width, height);
  }
  var init_create_video_init_segment = __esm({
    "src/transports/smooth/isobmff/create_video_init_segment.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_string_parsing();
      init_create_boxes();
      init_create_init_segment();
    }
  });

  // src/transports/smooth/isobmff/parse_tfrf.ts
  function parseTfrf(traf) {
    const tfrf = getUuidContent(traf, 3565190898, 3392751253, 2387879627, 2655430559);
    if (tfrf === void 0) {
      return [];
    }
    const frags = [];
    const version = tfrf[0];
    const fragCount = tfrf[4];
    for (let i = 0; i < fragCount; i++) {
      let duration;
      let time;
      if (version === 1) {
        time = be8toi(tfrf, i * 16 + 5);
        duration = be8toi(tfrf, i * 16 + 5 + 8);
      } else {
        time = be4toi(tfrf, i * 8 + 5);
        duration = be4toi(tfrf, i * 8 + 5 + 4);
      }
      frags.push({
        time,
        duration
      });
    }
    return frags;
  }
  var init_parse_tfrf = __esm({
    "src/transports/smooth/isobmff/parse_tfrf.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_byte_parsing();
    }
  });

  // src/transports/smooth/isobmff/parse_tfxd.ts
  function parseTfxd(traf) {
    const tfxd = getUuidContent(traf, 1830656773, 1121273062, 2162299933, 2952222642);
    if (tfxd === void 0) {
      return void 0;
    }
    return {
      duration: be8toi(tfxd, 12),
      time: be8toi(tfxd, 4)
    };
  }
  var init_parse_tfxd = __esm({
    "src/transports/smooth/isobmff/parse_tfxd.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_byte_parsing();
    }
  });

  // src/transports/smooth/isobmff/create_traf_box.ts
  function createTrafBox(tfhd, tfdt, trun, mfhd, senc) {
    const trafs = [tfhd, tfdt, trun];
    if (senc !== void 0) {
      trafs.push(createBox("senc", senc), createSAIZBox(senc), createSAIOBox(mfhd, tfhd, tfdt, trun));
    }
    return createBoxWithChildren("traf", trafs);
  }
  var init_create_traf_box = __esm({
    "src/transports/smooth/isobmff/create_traf_box.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_create_boxes();
    }
  });

  // src/transports/smooth/isobmff/patch_segment.ts
  function patchSegment(segment, decodeTime) {
    const oldMoofOffsets = getBoxOffsets(segment, 1836019558);
    if (oldMoofOffsets === null) {
      throw new Error("Smooth: Invalid ISOBMFF given");
    }
    const oldMoofContent = segment.subarray(oldMoofOffsets[1], oldMoofOffsets[2]);
    const mfhdBox = getBox(oldMoofContent, 1835427940);
    const trafContent = getBoxContent(oldMoofContent, 1953653094);
    if (trafContent === null || mfhdBox === null) {
      throw new Error("Smooth: Invalid ISOBMFF given");
    }
    const tfhdOffsets = getBoxOffsets(trafContent, 1952868452);
    const oldTrunOffsets = getBoxOffsets(trafContent, 1953658222);
    if (tfhdOffsets === null || oldTrunOffsets === null) {
      throw new Error("Smooth: Invalid ISOBMFF given");
    }
    const tfhdBox = trafContent.subarray(tfhdOffsets[0], tfhdOffsets[2]);
    const oldTrunBox = trafContent.subarray(oldTrunOffsets[0], oldTrunOffsets[2]);
    tfhdBox.set([0, 0, 0, 1], tfhdOffsets[1] - tfhdOffsets[0] + 4);
    const tfdtBox = createTfdtBox(decodeTime);
    const newTrunBox = updateTrunDataOffset(oldTrunBox, oldTrunOffsets[1] - oldTrunOffsets[0]);
    const sencContent = getUuidContent(trafContent, 2721664850, 1520127764, 2722393154, 2086964724);
    const newTrafBox = createTrafBox(tfhdBox, tfdtBox, newTrunBox, mfhdBox, sencContent);
    const newMoof = createBoxWithChildren("moof", [mfhdBox, newTrafBox]);
    const newMoofOffsets = getBoxOffsets(newMoof, 1836019558);
    const newTrafOffsets = getBoxOffsets(newTrafBox, 1953653094);
    const newTrunOffsets = getBoxOffsets(newTrunBox, 1953658222);
    if (newMoofOffsets === null || newTrafOffsets === null || newTrunOffsets === null) {
      throw new Error("Smooth: Invalid moof, trun or traf generation");
    }
    const indexOfTrunDataOffsetInMoof = newMoofOffsets[1] - newMoofOffsets[0] + mfhdBox.length + (newTrafOffsets[1] - newTrafOffsets[0]) + tfhdBox.length + tfdtBox.length + (newTrunOffsets[1] - newTrunOffsets[0]) + 8;
    const oldMoofLength = oldMoofOffsets[2] - oldMoofOffsets[0];
    const newMoofSizeDiff = newMoof.length - oldMoofLength;
    const oldMdatOffset = getBoxOffsets(segment, 1835295092);
    if (oldMdatOffset === null) {
      throw new Error("Smooth: Invalid ISOBMFF given");
    }
    if (canPatchISOBMFFSegment() && (newMoofSizeDiff === 0 || newMoofSizeDiff <= -8)) {
      const mdatContentOffset = oldMdatOffset[1];
      newMoof.set(itobe4(mdatContentOffset), indexOfTrunDataOffsetInMoof);
      segment.set(newMoof, oldMoofOffsets[0]);
      if (newMoofSizeDiff <= -8) {
        segment.set(createFreeBox(-newMoofSizeDiff), newMoof.length);
      }
      return segment;
    } else {
      const mdatContentOffset = oldMdatOffset[1] + newMoofSizeDiff;
      newMoof.set(itobe4(mdatContentOffset), indexOfTrunDataOffsetInMoof);
      const newSegment = new Uint8Array(segment.length + newMoofSizeDiff);
      const beforeMoof = segment.subarray(0, oldMoofOffsets[0]);
      const afterMoof = segment.subarray(oldMoofOffsets[2], segment.length);
      newSegment.set(beforeMoof, 0);
      newSegment.set(newMoof, beforeMoof.length);
      newSegment.set(afterMoof, beforeMoof.length + newMoof.length);
      return newSegment;
    }
  }
  function updateTrunDataOffset(oldTrunBox, initialDataOffset) {
    const trunHasDataOffset = (oldTrunBox[initialDataOffset + 3] & 1) > 0;
    if (trunHasDataOffset) {
      return oldTrunBox;
    }
    const newTrunBox = new Uint8Array(oldTrunBox.length + 4);
    newTrunBox.set(oldTrunBox.subarray(0, initialDataOffset + 8), 0);
    newTrunBox[initialDataOffset + 3] = newTrunBox[initialDataOffset + 3] | 1;
    newTrunBox.set([0, 0, 0, 0], initialDataOffset + 8);
    newTrunBox.set(oldTrunBox.subarray(initialDataOffset + 8, oldTrunBox.length), initialDataOffset + 12);
    return updateBoxLength(newTrunBox);
  }
  var init_patch_segment = __esm({
    "src/transports/smooth/isobmff/patch_segment.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_isobmff();
      init_byte_parsing();
      init_create_boxes();
      init_create_traf_box();
    }
  });

  // src/transports/smooth/isobmff/index.ts
  var init_isobmff2 = __esm({
    "src/transports/smooth/isobmff/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_create_audio_init_segment();
      init_create_video_init_segment();
      init_parse_tfrf();
      init_parse_tfxd();
      init_patch_segment();
    }
  });

  // src/transports/smooth/extract_timings_infos.ts
  function extractTimingsInfos(data, isChunked, initTimescale, segment, isLive) {
    var _a2;
    const nextSegments = [];
    let chunkInfos;
    let tfxdSegment;
    let tfrfSegments;
    if (isLive) {
      const traf = getTRAF(data);
      if (traf !== null) {
        tfrfSegments = parseTfrf(traf);
        tfxdSegment = parseTfxd(traf);
      } else {
        log_default.warn("smooth: could not find traf atom");
      }
    }
    if (tfrfSegments !== void 0) {
      for (let i = 0; i < tfrfSegments.length; i++) {
        nextSegments.push({
          time: tfrfSegments[i].time,
          duration: tfrfSegments[i].duration,
          timescale: initTimescale
        });
      }
    }
    if (tfxdSegment !== void 0) {
      chunkInfos = {
        time: tfxdSegment.time / initTimescale,
        duration: tfxdSegment.duration / initTimescale
      };
      return {
        nextSegments,
        chunkInfos,
        scaledSegmentTime: tfxdSegment.time
      };
    }
    if (isChunked || !segment.complete) {
      return {
        nextSegments,
        chunkInfos: null,
        scaledSegmentTime: void 0
      };
    }
    const segmentDuration = segment.duration * initTimescale;
    const maxDecodeTimeDelta = Math.min(initTimescale * 0.9, segmentDuration / 4);
    const trunDuration = getDurationFromTrun(data);
    const scaledSegmentTime = ((_a2 = segment.privateInfos) == null ? void 0 : _a2.smoothMediaSegment) !== void 0 ? segment.privateInfos.smoothMediaSegment.time : Math.round(segment.time * initTimescale);
    if (trunDuration !== void 0 && Math.abs(trunDuration - segmentDuration) <= maxDecodeTimeDelta) {
      chunkInfos = {
        time: segment.time,
        duration: trunDuration / initTimescale
      };
    } else {
      chunkInfos = {
        time: segment.time,
        duration: segment.duration
      };
    }
    return { nextSegments, chunkInfos, scaledSegmentTime };
  }
  var init_extract_timings_infos = __esm({
    "src/transports/smooth/extract_timings_infos.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_isobmff();
      init_isobmff2();
    }
  });

  // src/transports/utils/byte_range.ts
  function byteRange([start, end]) {
    return end === Infinity ? `bytes=${start}-` : `bytes=${start}-${end}`;
  }
  var init_byte_range = __esm({
    "src/transports/utils/byte_range.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/transports/smooth/utils.ts
  function extractISML(doc) {
    return doc.getElementsByTagName("media")[0].getAttribute("src");
  }
  function extractToken(url) {
    const tokenMatch = TOKEN_REG.exec(url);
    if (tokenMatch !== null) {
      const match = tokenMatch[1];
      if (match !== void 0) {
        return match;
      }
    }
    return "";
  }
  function replaceToken(url, token) {
    if (isNonEmptyString(token)) {
      return url.replace(TOKEN_REG, "?token=" + token);
    } else {
      return url.replace(TOKEN_REG, "");
    }
  }
  function resolveManifest(url) {
    if (ISM_REG.test(url)) {
      warnOnce("Giving a isml URL to loadVideo is deprecated. Please give the Manifest URL directly");
      return url.replace(ISM_REG, "$1/manifest$2");
    }
    return url;
  }
  function isMP4EmbeddedTrack(representation) {
    return typeof representation.mimeType === "string" && representation.mimeType.indexOf("mp4") >= 0;
  }
  var ISM_REG, TOKEN_REG;
  var init_utils3 = __esm({
    "src/transports/smooth/utils.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_warn_once();
      ISM_REG = /(\.isml?)(\?token=\S+)?$/;
      TOKEN_REG = /\?token=(\S+)/;
    }
  });

  // src/transports/smooth/segment_loader.ts
  function regularSegmentLoader(url, content, callbacks, cancelSignal, checkMediaSegmentIntegrity) {
    let headers;
    const range = content.segment.range;
    if (Array.isArray(range)) {
      headers = { Range: byteRange(range) };
    }
    return request_default({
      url,
      responseType: "arraybuffer",
      headers,
      cancelSignal,
      onProgress: callbacks.onProgress
    }).then((data) => {
      const isMP4 = isMP4EmbeddedTrack(content.representation);
      if (!isMP4 || checkMediaSegmentIntegrity !== true) {
        return {
          resultType: "segment-loaded",
          resultData: data
        };
      }
      const dataU8 = new Uint8Array(data.responseData);
      checkISOBMFFIntegrity(dataU8, content.segment.isInit);
      return {
        resultType: "segment-loaded",
        resultData: __spreadProps(__spreadValues({}, data), { responseData: dataU8 })
      };
    });
  }
  var generateSegmentLoader, segment_loader_default;
  var init_segment_loader = __esm({
    "src/transports/smooth/segment_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_assert();
      init_request();
      init_byte_range();
      init_check_isobmff_integrity();
      init_isobmff2();
      init_utils3();
      generateSegmentLoader = ({
        checkMediaSegmentIntegrity,
        customSegmentLoader
      }) => (url, content, cancelSignal, callbacks) => {
        const { segment, manifest, period, adaptation, representation } = content;
        if (segment.isInit) {
          if (segment.privateInfos === void 0 || segment.privateInfos.smoothInitSegment === void 0) {
            throw new Error("Smooth: Invalid segment format");
          }
          const smoothInitPrivateInfos = segment.privateInfos.smoothInitSegment;
          let responseData;
          const {
            codecPrivateData,
            timescale,
            protection = {
              keyId: void 0,
              keySystems: void 0
            }
          } = smoothInitPrivateInfos;
          if (codecPrivateData === void 0) {
            throw new Error("Smooth: no codec private data.");
          }
          switch (adaptation.type) {
            case "video": {
              const { width = 0, height = 0 } = representation;
              responseData = createVideoInitSegment(timescale, width, height, 72, 72, 4, codecPrivateData, protection.keyId);
              break;
            }
            case "audio": {
              const {
                channels = 0,
                bitsPerSample = 0,
                packetSize = 0,
                samplingRate = 0
              } = smoothInitPrivateInfos;
              responseData = createAudioInitSegment(timescale, channels, bitsPerSample, packetSize, samplingRate, codecPrivateData, protection.keyId);
              break;
            }
            default:
              if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
                assert(false, "responseData should have been set");
              }
              responseData = new Uint8Array(0);
          }
          return Promise.resolve({
            resultType: "segment-created",
            resultData: responseData
          });
        } else if (url === null) {
          return Promise.resolve({
            resultType: "segment-created",
            resultData: null
          });
        } else {
          const args = {
            adaptation,
            manifest,
            period,
            representation,
            segment,
            transport: "smooth",
            url
          };
          if (typeof customSegmentLoader !== "function") {
            return regularSegmentLoader(url, content, callbacks, cancelSignal, checkMediaSegmentIntegrity);
          }
          return new Promise((res, rej) => {
            let hasFinished = false;
            const resolve = (_args) => {
              if (hasFinished || cancelSignal.isCancelled) {
                return;
              }
              hasFinished = true;
              cancelSignal.deregister(abortCustomLoader);
              const isMP4 = isMP4EmbeddedTrack(content.representation);
              if (!isMP4 || checkMediaSegmentIntegrity !== true) {
                res({
                  resultType: "segment-loaded",
                  resultData: {
                    responseData: _args.data,
                    size: _args.size,
                    requestDuration: _args.duration
                  }
                });
              }
              const dataU8 = _args.data instanceof Uint8Array ? _args.data : new Uint8Array(_args.data);
              checkISOBMFFIntegrity(dataU8, content.segment.isInit);
              res({
                resultType: "segment-loaded",
                resultData: {
                  responseData: dataU8,
                  size: _args.size,
                  requestDuration: _args.duration
                }
              });
            };
            const reject = (err) => {
              var _a2, _b2, _c;
              if (hasFinished || cancelSignal.isCancelled) {
                return;
              }
              hasFinished = true;
              cancelSignal.deregister(abortCustomLoader);
              const castedErr = err;
              const message = (_a2 = castedErr == null ? void 0 : castedErr.message) != null ? _a2 : "Unknown error when fetching a Smooth segment through a custom segmentLoader.";
              const emittedErr = new CustomLoaderError(message, (_b2 = castedErr == null ? void 0 : castedErr.canRetry) != null ? _b2 : false, (_c = castedErr == null ? void 0 : castedErr.isOfflineError) != null ? _c : false, castedErr == null ? void 0 : castedErr.xhr);
              rej(emittedErr);
            };
            const progress = (_args) => {
              if (hasFinished || cancelSignal.isCancelled) {
                return;
              }
              callbacks.onProgress({
                duration: _args.duration,
                size: _args.size,
                totalSize: _args.totalSize
              });
            };
            const fallback = () => {
              if (hasFinished || cancelSignal.isCancelled) {
                return;
              }
              hasFinished = true;
              cancelSignal.deregister(abortCustomLoader);
              regularSegmentLoader(url, content, callbacks, cancelSignal, checkMediaSegmentIntegrity).then(res, rej);
            };
            const customCallbacks = { reject, resolve, fallback, progress };
            const abort = customSegmentLoader(args, customCallbacks);
            cancelSignal.register(abortCustomLoader);
            function abortCustomLoader(err) {
              if (hasFinished) {
                return;
              }
              hasFinished = true;
              if (!hasFinished && typeof abort === "function") {
                abort();
              }
              rej(err);
            }
          });
        }
      };
      segment_loader_default = generateSegmentLoader;
    }
  });

  // src/transports/smooth/pipelines.ts
  function addNextSegments(adaptation, nextSegments, dlSegment) {
    var _a2;
    log_default.debug("Smooth Parser: update segments information.");
    const representations = adaptation.representations;
    for (let i = 0; i < representations.length; i++) {
      const representation = representations[i];
      if (representation.index instanceof SmoothRepresentationIndex && ((_a2 = dlSegment == null ? void 0 : dlSegment.privateInfos) == null ? void 0 : _a2.smoothMediaSegment) !== void 0) {
        representation.index.addNewSegments(nextSegments, dlSegment.privateInfos.smoothMediaSegment);
      } else {
        log_default.warn("Smooth Parser: should only encounter SmoothRepresentationIndex");
      }
    }
  }
  function pipelines_default(options) {
    const smoothManifestParser = smooth_default(options);
    const segmentLoader2 = segment_loader_default(options);
    const manifestLoaderOptions = { customManifestLoader: options.manifestLoader };
    const manifestLoader = generateManifestLoader(manifestLoaderOptions, "text");
    const manifestPipeline = {
      resolveManifestUrl(url, cancelSignal) {
        if (url === void 0) {
          return Promise.resolve(void 0);
        }
        let resolving;
        if (WSX_REG.test(url)) {
          warnOnce("Giving WSX URL to loadVideo is deprecated. You should only give Manifest URLs.");
          resolving = request_default({
            url: replaceToken(url, ""),
            responseType: "document",
            cancelSignal
          }).then((value) => {
            const extractedURL = extractISML(value.responseData);
            if (extractedURL === null || extractedURL.length === 0) {
              throw new Error("Invalid ISML");
            }
            return extractedURL;
          });
        } else {
          resolving = Promise.resolve(url);
        }
        const token = extractToken(url);
        return resolving.then((_url) => replaceToken(resolveManifest(_url), token));
      },
      loadManifest: manifestLoader,
      parseManifest(manifestData, parserOptions) {
        var _a2;
        const url = (_a2 = manifestData.url) != null ? _a2 : parserOptions.originalUrl;
        const { receivedTime: manifestReceivedTime, responseData } = manifestData;
        const documentData = typeof responseData === "string" ? new DOMParser().parseFromString(responseData, "text/xml") : responseData;
        const parserResult = smoothManifestParser(documentData, url, manifestReceivedTime);
        const manifest = new manifest_default(parserResult, {
          representationFilter: options.representationFilter,
          supplementaryImageTracks: options.supplementaryImageTracks,
          supplementaryTextTracks: options.supplementaryTextTracks
        });
        return { manifest, url };
      }
    };
    const audioVideoPipeline = {
      loadSegment(url, content, cancelSignal, callbacks) {
        return segmentLoader2(url, content, cancelSignal, callbacks);
      },
      parseSegment(loadedSegment, content, initTimescale) {
        var _a2, _b2;
        const { segment, adaptation, manifest } = content;
        const { data, isChunked } = loadedSegment;
        if (data === null) {
          if (segment.isInit) {
            return {
              segmentType: "init",
              initializationData: null,
              initializationDataSize: 0,
              protectionDataUpdate: false,
              initTimescale: void 0
            };
          }
          return {
            segmentType: "media",
            chunkData: null,
            chunkInfos: null,
            chunkOffset: 0,
            chunkSize: 0,
            protectionDataUpdate: false,
            appendWindow: [void 0, void 0]
          };
        }
        const responseBuffer = data instanceof Uint8Array ? data : new Uint8Array(data);
        if (segment.isInit) {
          const timescale = (_b2 = (_a2 = segment.privateInfos) == null ? void 0 : _a2.smoothInitSegment) == null ? void 0 : _b2.timescale;
          return {
            segmentType: "init",
            initializationData: data,
            initializationDataSize: data.byteLength,
            initTimescale: timescale,
            protectionDataUpdate: false
          };
        }
        const timingInfos = initTimescale !== void 0 ? extractTimingsInfos(responseBuffer, isChunked, initTimescale, segment, manifest.isLive) : null;
        if (timingInfos === null || timingInfos.chunkInfos === null || timingInfos.scaledSegmentTime === void 0) {
          throw new Error("Smooth Segment without time information");
        }
        const { nextSegments, chunkInfos, scaledSegmentTime } = timingInfos;
        const chunkData = patchSegment(responseBuffer, scaledSegmentTime);
        if (nextSegments.length > 0) {
          addNextSegments(adaptation, nextSegments, segment);
        }
        return {
          segmentType: "media",
          chunkData,
          chunkInfos,
          chunkOffset: 0,
          chunkSize: chunkData.length,
          protectionDataUpdate: false,
          appendWindow: [void 0, void 0]
        };
      }
    };
    const textTrackPipeline = {
      loadSegment(url, content, cancelSignal, callbacks) {
        const { segment, representation } = content;
        if (segment.isInit || url === null) {
          return Promise.resolve({
            resultType: "segment-created",
            resultData: null
          });
        }
        const isMP4 = isMP4EmbeddedTrack(representation);
        if (!isMP4) {
          return request_default({
            url,
            responseType: "text",
            cancelSignal,
            onProgress: callbacks.onProgress
          }).then((data) => ({
            resultType: "segment-loaded",
            resultData: data
          }));
        } else {
          return request_default({
            url,
            responseType: "arraybuffer",
            cancelSignal,
            onProgress: callbacks.onProgress
          }).then((data) => {
            if (options.checkMediaSegmentIntegrity !== true) {
              return {
                resultType: "segment-loaded",
                resultData: data
              };
            }
            const dataU8 = new Uint8Array(data.responseData);
            checkISOBMFFIntegrity(dataU8, content.segment.isInit);
            return {
              resultType: "segment-loaded",
              resultData: __spreadProps(__spreadValues({}, data), { responseData: dataU8 })
            };
          });
        }
      },
      parseSegment(loadedSegment, content, initTimescale) {
        var _a2;
        const { manifest, adaptation, representation, segment } = content;
        const { language } = adaptation;
        const isMP4 = isMP4EmbeddedTrack(representation);
        const { mimeType = "", codec = "" } = representation;
        const { data, isChunked } = loadedSegment;
        let chunkSize;
        if (segment.isInit) {
          return {
            segmentType: "init",
            initializationData: null,
            initializationDataSize: 0,
            protectionDataUpdate: false,
            initTimescale: void 0
          };
        }
        if (data === null) {
          return {
            segmentType: "media",
            chunkData: null,
            chunkInfos: null,
            chunkOffset: 0,
            chunkSize: 0,
            protectionDataUpdate: false,
            appendWindow: [void 0, void 0]
          };
        }
        let nextSegments;
        let chunkInfos = null;
        let segmentStart;
        let segmentEnd;
        let _sdData;
        let _sdType;
        if (isMP4) {
          let chunkBytes;
          if (typeof data === "string") {
            chunkBytes = strToUtf8(data);
          } else {
            chunkBytes = data instanceof Uint8Array ? data : new Uint8Array(data);
          }
          chunkSize = chunkBytes.length;
          const timingInfos = initTimescale !== void 0 ? extractTimingsInfos(chunkBytes, isChunked, initTimescale, segment, manifest.isLive) : null;
          nextSegments = timingInfos == null ? void 0 : timingInfos.nextSegments;
          chunkInfos = (_a2 = timingInfos == null ? void 0 : timingInfos.chunkInfos) != null ? _a2 : null;
          if (chunkInfos === null) {
            if (isChunked) {
              log_default.warn("Smooth: Unavailable time data for current text track.");
            } else {
              segmentStart = segment.time;
              segmentEnd = segment.end;
            }
          } else {
            segmentStart = chunkInfos.time;
            segmentEnd = chunkInfos.duration !== void 0 ? chunkInfos.time + chunkInfos.duration : segment.end;
          }
          const lcCodec = codec.toLowerCase();
          if (mimeType === "application/ttml+xml+mp4" || lcCodec === "stpp" || lcCodec === "stpp.ttml.im1t") {
            _sdType = "ttml";
          } else if (lcCodec === "wvtt") {
            _sdType = "vtt";
          } else {
            throw new Error(`could not find a text-track parser for the type ${mimeType}`);
          }
          const mdat = getMDAT(chunkBytes);
          _sdData = mdat === null ? "" : utf8ToStr(mdat);
        } else {
          segmentStart = segment.time;
          segmentEnd = segment.end;
          let chunkString;
          if (typeof data !== "string") {
            const bytesData = data instanceof Uint8Array ? data : new Uint8Array(data);
            chunkSize = bytesData.length;
            chunkString = utf8ToStr(bytesData);
          } else {
            chunkString = data;
          }
          switch (mimeType) {
            case "application/x-sami":
            case "application/smil":
              _sdType = "sami";
              break;
            case "application/ttml+xml":
              _sdType = "ttml";
              break;
            case "text/vtt":
              _sdType = "vtt";
              break;
          }
          if (_sdType === void 0) {
            const lcCodec = codec.toLowerCase();
            if (lcCodec === "srt") {
              _sdType = "srt";
            } else {
              throw new Error(`could not find a text-track parser for the type ${mimeType}`);
            }
          }
          _sdData = chunkString;
        }
        if (chunkInfos !== null && Array.isArray(nextSegments) && nextSegments.length > 0) {
          addNextSegments(adaptation, nextSegments, segment);
        }
        const chunkOffset = segmentStart != null ? segmentStart : 0;
        return {
          segmentType: "media",
          chunkData: {
            type: _sdType,
            data: _sdData,
            start: segmentStart,
            end: segmentEnd,
            language
          },
          chunkSize,
          chunkInfos,
          chunkOffset,
          protectionDataUpdate: false,
          appendWindow: [void 0, void 0]
        };
      }
    };
    const imageTrackPipeline = {
      async loadSegment(url, content, cancelSignal, callbacks) {
        if (content.segment.isInit || url === null) {
          return {
            resultType: "segment-created",
            resultData: null
          };
        }
        const data = await request_default({
          url,
          responseType: "arraybuffer",
          onProgress: callbacks.onProgress,
          cancelSignal
        });
        return {
          resultType: "segment-loaded",
          resultData: data
        };
      },
      parseSegment(loadedSegment, content, _initTimescale) {
        const { data, isChunked } = loadedSegment;
        if (content.segment.isInit) {
          return {
            segmentType: "init",
            initializationData: null,
            initializationDataSize: 0,
            protectionDataUpdate: false,
            initTimescale: void 0
          };
        }
        if (isChunked) {
          throw new Error("Image data should not be downloaded in chunks");
        }
        if (data === null || features_default.imageParser === null) {
          return {
            segmentType: "media",
            chunkData: null,
            chunkInfos: null,
            chunkOffset: 0,
            chunkSize: 0,
            protectionDataUpdate: false,
            appendWindow: [void 0, void 0]
          };
        }
        const bifObject = features_default.imageParser(new Uint8Array(data));
        const thumbsData = bifObject.thumbs;
        return {
          segmentType: "media",
          chunkData: {
            data: thumbsData,
            start: 0,
            end: Number.MAX_VALUE,
            timescale: 1,
            type: "bif"
          },
          chunkInfos: {
            time: 0,
            duration: Number.MAX_VALUE
          },
          chunkSize: void 0,
          chunkOffset: 0,
          protectionDataUpdate: false,
          appendWindow: [void 0, void 0]
        };
      }
    };
    return {
      manifest: manifestPipeline,
      audio: audioVideoPipeline,
      video: audioVideoPipeline,
      text: textTrackPipeline,
      image: imageTrackPipeline
    };
  }
  var WSX_REG;
  var init_pipelines = __esm({
    "src/transports/smooth/pipelines.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_features();
      init_log();
      init_manifest2();
      init_isobmff();
      init_smooth();
      init_request();
      init_string_parsing();
      init_warn_once();
      init_check_isobmff_integrity();
      init_generate_manifest_loader();
      init_extract_timings_infos();
      init_isobmff2();
      init_segment_loader();
      init_utils3();
      WSX_REG = /\.wsx?(\?token=\S+)?/;
    }
  });

  // src/transports/smooth/index.ts
  var smooth_exports = {};
  __export(smooth_exports, {
    default: () => smooth_default2
  });
  var smooth_default2;
  var init_smooth2 = __esm({
    "src/transports/smooth/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_pipelines();
      smooth_default2 = pipelines_default;
    }
  });

  // src/transports/dash/image_pipelines.ts
  async function imageLoader(url, content, cancelSignal, callbacks) {
    const { segment } = content;
    if (segment.isInit || url === null) {
      return {
        resultType: "segment-created",
        resultData: null
      };
    }
    const data = await request_default({
      url,
      responseType: "arraybuffer",
      onProgress: callbacks.onProgress,
      cancelSignal
    });
    return {
      resultType: "segment-loaded",
      resultData: data
    };
  }
  function imageParser(loadedSegment, content) {
    const { segment, period } = content;
    const { data, isChunked } = loadedSegment;
    if (content.segment.isInit) {
      return {
        segmentType: "init",
        initializationData: null,
        initializationDataSize: 0,
        protectionDataUpdate: false,
        initTimescale: void 0
      };
    }
    if (isChunked) {
      throw new Error("Image data should not be downloaded in chunks");
    }
    const chunkOffset = takeFirstSet(segment.timestampOffset, 0);
    if (data === null || features_default.imageParser === null) {
      return {
        segmentType: "media",
        chunkData: null,
        chunkSize: 0,
        chunkInfos: {
          duration: segment.duration,
          time: segment.time
        },
        chunkOffset,
        protectionDataUpdate: false,
        appendWindow: [period.start, period.end]
      };
    }
    const bifObject = features_default.imageParser(new Uint8Array(data));
    const thumbsData = bifObject.thumbs;
    return {
      segmentType: "media",
      chunkData: {
        data: thumbsData,
        start: 0,
        end: Number.MAX_VALUE,
        timescale: 1,
        type: "bif"
      },
      chunkSize: void 0,
      chunkInfos: {
        time: 0,
        duration: Number.MAX_VALUE
      },
      chunkOffset,
      protectionDataUpdate: false,
      appendWindow: [period.start, period.end]
    };
  }
  var init_image_pipelines = __esm({
    "src/transports/dash/image_pipelines.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_features();
      init_request();
      init_take_first_set();
    }
  });

  // src/transports/dash/manifest_parser.ts
  function generateManifestParser(options) {
    const {
      aggressiveMode,
      referenceDateTime
    } = options;
    const serverTimeOffset = options.serverSyncInfos !== void 0 ? options.serverSyncInfos.serverTimestamp - options.serverSyncInfos.clientTime : void 0;
    return function manifestParser(manifestData, parserOptions, onWarnings, cancelSignal, scheduleRequest) {
      var _a2;
      const { responseData } = manifestData;
      const argClockOffset = parserOptions.externalClockOffset;
      const url = (_a2 = manifestData.url) != null ? _a2 : parserOptions.originalUrl;
      const optAggressiveMode = aggressiveMode === true;
      const externalClockOffset = serverTimeOffset != null ? serverTimeOffset : argClockOffset;
      const unsafelyBaseOnPreviousManifest = parserOptions.unsafeMode ? parserOptions.previousManifest : null;
      const dashParserOpts = {
        aggressiveMode: optAggressiveMode,
        unsafelyBaseOnPreviousManifest,
        url,
        referenceDateTime,
        externalClockOffset
      };
      const parsers = features_default.dashParsers;
      if (parsers.wasm === null || parsers.wasm.status === "uninitialized" || parsers.wasm.status === "failure") {
        log_default.debug("DASH: WASM MPD Parser not initialized. Running JS one.");
        return runDefaultJsParser();
      } else {
        const manifestAB = getManifestAsArrayBuffer(responseData);
        if (!doesXmlSeemsUtf8Encoded(manifestAB)) {
          log_default.info("DASH: MPD doesn't seem to be UTF-8-encoded. Running JS parser instead of the WASM one.");
          return runDefaultJsParser();
        }
        if (parsers.wasm.status === "initialized") {
          log_default.debug("DASH: Running WASM MPD Parser.");
          const parsed = parsers.wasm.runWasmParser(manifestAB, dashParserOpts);
          return processMpdParserResponse(parsed);
        } else {
          log_default.debug("DASH: Awaiting WASM initialization before parsing the MPD.");
          const initProm = parsers.wasm.waitForInitialization().catch(() => {
          });
          return initProm.then(() => {
            if (parsers.wasm === null || parsers.wasm.status !== "initialized") {
              log_default.warn("DASH: WASM MPD parser initialization failed. Running JS parser instead");
              return runDefaultJsParser();
            }
            log_default.debug("DASH: Running WASM MPD Parser.");
            const parsed = parsers.wasm.runWasmParser(manifestAB, dashParserOpts);
            return processMpdParserResponse(parsed);
          });
        }
      }
      function runDefaultJsParser() {
        if (parsers.js === null) {
          throw new Error("No MPD parser is imported");
        }
        const manifestDoc = getManifestAsDocument(responseData);
        const parsedManifest = parsers.js(manifestDoc, dashParserOpts);
        return processMpdParserResponse(parsedManifest);
      }
      function processMpdParserResponse(parserResponse) {
        if (parserResponse.type === "done") {
          if (parserResponse.value.warnings.length > 0) {
            onWarnings(parserResponse.value.warnings);
          }
          if (cancelSignal.isCancelled) {
            return Promise.reject(cancelSignal.cancellationError);
          }
          const manifest = new manifest_default(parserResponse.value.parsed, options);
          return { manifest, url };
        }
        const { value } = parserResponse;
        const externalResources = value.urls.map((resourceUrl) => {
          return scheduleRequest(() => {
            return value.format === "string" ? request_default({
              url: resourceUrl,
              responseType: "text",
              cancelSignal
            }) : request_default({
              url: resourceUrl,
              responseType: "arraybuffer",
              cancelSignal
            });
          }).then((res) => {
            if (value.format === "string") {
              if (typeof res.responseData !== "string") {
                throw new Error("External DASH resources should have been a string");
              }
              return object_assign_default(res, {
                responseData: {
                  success: true,
                  data: res.responseData
                }
              });
            } else {
              if (!(res.responseData instanceof ArrayBuffer)) {
                throw new Error("External DASH resources should have been ArrayBuffers");
              }
              return object_assign_default(res, {
                responseData: {
                  success: true,
                  data: res.responseData
                }
              });
            }
          }, (err) => {
            const error = formatError(err, {
              defaultCode: "PIPELINE_PARSE_ERROR",
              defaultReason: "An unknown error occured when parsing ressources."
            });
            return object_assign_default({}, {
              size: void 0,
              requestDuration: void 0,
              responseData: {
                success: false,
                error
              }
            });
          });
        });
        return Promise.all(externalResources).then((loadedResources) => {
          if (value.format === "string") {
            assertLoadedResourcesFormatString(loadedResources);
            return processMpdParserResponse(value.continue(loadedResources));
          } else {
            assertLoadedResourcesFormatArrayBuffer(loadedResources);
            return processMpdParserResponse(value.continue(loadedResources));
          }
        });
      }
    };
  }
  function assertLoadedResourcesFormatString(loadedResources) {
    if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.PRODUCTION) {
      return;
    }
    loadedResources.forEach((loadedResource) => {
      const { responseData } = loadedResource;
      if (responseData.success && typeof responseData.data === "string") {
        return;
      } else if (!responseData.success) {
        return;
      }
      throw new Error("Invalid data given to the LoadedRessource");
    });
  }
  function assertLoadedResourcesFormatArrayBuffer(loadedResources) {
    if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.PRODUCTION) {
      return;
    }
    loadedResources.forEach((loadedResource) => {
      const { responseData } = loadedResource;
      if (responseData.success && responseData.data instanceof ArrayBuffer) {
        return;
      } else if (!responseData.success) {
        return;
      }
      throw new Error("Invalid data given to the LoadedRessource");
    });
  }
  function getManifestAsDocument(manifestSrc) {
    if (manifestSrc instanceof ArrayBuffer) {
      return new DOMParser().parseFromString(utf8ToStr(new Uint8Array(manifestSrc)), "text/xml");
    } else if (typeof manifestSrc === "string") {
      return new DOMParser().parseFromString(manifestSrc, "text/xml");
    } else if (manifestSrc instanceof Document) {
      return manifestSrc;
    } else {
      throw new Error("DASH Manifest Parser: Unrecognized Manifest format");
    }
  }
  function getManifestAsArrayBuffer(manifestSrc) {
    if (manifestSrc instanceof ArrayBuffer) {
      return manifestSrc;
    } else if (typeof manifestSrc === "string") {
      return strToUtf8(manifestSrc).buffer;
    } else if (manifestSrc instanceof Document) {
      return strToUtf8(manifestSrc.documentElement.innerHTML).buffer;
    } else {
      throw new Error("DASH Manifest Parser: Unrecognized Manifest format");
    }
  }
  function doesXmlSeemsUtf8Encoded(xmlData) {
    const dv = new DataView(xmlData);
    if (dv.getUint16(0) === 61371 && dv.getUint8(2) === 191) {
      return true;
    } else if (dv.getUint16(0) === 65279 || dv.getUint16(0) === 65534) {
      return false;
    }
    return true;
  }
  var init_manifest_parser = __esm({
    "src/transports/dash/manifest_parser.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_features();
      init_log();
      init_manifest2();
      init_object_assign();
      init_request();
      init_string_parsing();
    }
  });

  // src/transports/utils/infer_segment_container.ts
  function inferSegmentContainer(adaptationType, representation) {
    if (adaptationType === "audio" || adaptationType === "video") {
      if (representation.mimeType === "video/mp4" || representation.mimeType === "audio/mp4") {
        return "mp4";
      }
      if (representation.mimeType === "video/webm" || representation.mimeType === "audio/webm") {
        return "webm";
      }
      return void 0;
    } else if (adaptationType === "text") {
      return representation.mimeType === "application/mp4" ? "mp4" : void 0;
    }
    return void 0;
  }
  var init_infer_segment_container = __esm({
    "src/transports/utils/infer_segment_container.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/transports/dash/add_segment_integrity_checks_to_loader.ts
  function addSegmentIntegrityChecks(segmentLoader2) {
    return (url, content, initialCancelSignal, callbacks) => {
      return new Promise((resolve, reject) => {
        const requestCanceller = new TaskCanceller({ cancelOn: initialCancelSignal });
        const stopRejectingOnCancel = requestCanceller.signal.register(reject);
        segmentLoader2(url, content, requestCanceller.signal, __spreadProps(__spreadValues({}, callbacks), {
          onNewChunk(data) {
            try {
              trowOnIntegrityError(data);
              callbacks.onNewChunk(data);
            } catch (err) {
              stopRejectingOnCancel();
              requestCanceller.cancel();
              reject(err);
            }
          }
        })).then((info) => {
          if (requestCanceller.isUsed) {
            return;
          }
          stopRejectingOnCancel();
          if (info.resultType === "segment-loaded") {
            try {
              trowOnIntegrityError(info.resultData.responseData);
            } catch (err) {
              reject(err);
              return;
            }
          }
          resolve(info);
        }, (error) => {
          stopRejectingOnCancel();
          reject(error);
        });
      });
      function trowOnIntegrityError(data) {
        if (!(data instanceof ArrayBuffer) && !(data instanceof Uint8Array) || inferSegmentContainer(content.adaptation.type, content.representation) !== "mp4") {
          return;
        }
        checkISOBMFFIntegrity(new Uint8Array(data), content.segment.isInit);
      }
    };
  }
  var init_add_segment_integrity_checks_to_loader = __esm({
    "src/transports/dash/add_segment_integrity_checks_to_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_task_canceller();
      init_check_isobmff_integrity();
      init_infer_segment_container();
    }
  });

  // src/transports/dash/init_segment_loader.ts
  function initSegmentLoader(url, segment, cancelSignal, callbacks) {
    if (segment.range === void 0) {
      return request_default({
        url,
        responseType: "arraybuffer",
        cancelSignal,
        onProgress: callbacks.onProgress
      }).then((data) => ({
        resultType: "segment-loaded",
        resultData: data
      }));
    }
    if (segment.indexRange === void 0) {
      return request_default({
        url,
        headers: { Range: byteRange(segment.range) },
        responseType: "arraybuffer",
        cancelSignal,
        onProgress: callbacks.onProgress
      }).then((data) => ({
        resultType: "segment-loaded",
        resultData: data
      }));
    }
    if (segment.range[1] + 1 === segment.indexRange[0]) {
      return request_default({
        url,
        headers: { Range: byteRange([
          segment.range[0],
          segment.indexRange[1]
        ]) },
        responseType: "arraybuffer",
        cancelSignal,
        onProgress: callbacks.onProgress
      }).then((data) => ({
        resultType: "segment-loaded",
        resultData: data
      }));
    }
    const rangeRequest$ = request_default({
      url,
      headers: { Range: byteRange(segment.range) },
      responseType: "arraybuffer",
      cancelSignal,
      onProgress: callbacks.onProgress
    });
    const indexRequest$ = request_default({
      url,
      headers: { Range: byteRange(segment.indexRange) },
      responseType: "arraybuffer",
      cancelSignal,
      onProgress: callbacks.onProgress
    });
    return Promise.all([rangeRequest$, indexRequest$]).then(([initData, indexData]) => {
      const data = concat2(new Uint8Array(initData.responseData), new Uint8Array(indexData.responseData));
      const sendingTime = Math.min(initData.sendingTime, indexData.sendingTime);
      const receivedTime = Math.max(initData.receivedTime, indexData.receivedTime);
      return {
        resultType: "segment-loaded",
        resultData: {
          url,
          responseData: data,
          size: initData.size + indexData.size,
          requestDuration: receivedTime - sendingTime,
          sendingTime,
          receivedTime
        }
      };
    });
  }
  var init_init_segment_loader = __esm({
    "src/transports/dash/init_segment_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_request();
      init_byte_range();
    }
  });

  // src/transports/dash/extract_complete_chunks.ts
  function extractCompleteChunks(buffer) {
    let _position = 0;
    const chunks = [];
    while (_position < buffer.length) {
      const currentBuffer = buffer.subarray(_position, Infinity);
      const moofIndex = findCompleteBox(currentBuffer, 1836019558);
      if (moofIndex < 0) {
        return [chunks, currentBuffer];
      }
      const moofLen = be4toi(buffer, moofIndex + _position);
      const moofEnd = _position + moofIndex + moofLen;
      if (moofEnd > buffer.length) {
        return [chunks, currentBuffer];
      }
      const mdatIndex = findCompleteBox(currentBuffer, 1835295092);
      if (mdatIndex < 0) {
        return [chunks, currentBuffer];
      }
      const mdatLen = be4toi(buffer, mdatIndex + _position);
      const mdatEnd = _position + mdatIndex + mdatLen;
      if (mdatEnd > buffer.length) {
        return [chunks, currentBuffer];
      }
      const maxEnd = Math.max(moofEnd, mdatEnd);
      const chunk = buffer.subarray(_position, maxEnd);
      chunks.push(chunk);
      _position = maxEnd;
    }
    return [chunks, null];
  }
  var init_extract_complete_chunks = __esm({
    "src/transports/dash/extract_complete_chunks.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_find_complete_box();
    }
  });

  // src/transports/dash/low_latency_segment_loader.ts
  function lowLatencySegmentLoader(url, content, callbacks, cancelSignal) {
    const { segment } = content;
    const headers = segment.range !== void 0 ? { Range: byteRange(segment.range) } : void 0;
    let partialChunk = null;
    function onData(info) {
      const chunk = new Uint8Array(info.chunk);
      const concatenated = partialChunk !== null ? concat2(partialChunk, chunk) : chunk;
      const res = extractCompleteChunks(concatenated);
      const completeChunks = res[0];
      partialChunk = res[1];
      for (let i = 0; i < completeChunks.length; i++) {
        callbacks.onNewChunk(completeChunks[i]);
        if (cancelSignal.isCancelled) {
          return;
        }
      }
      callbacks.onProgress({
        duration: info.duration,
        size: info.size,
        totalSize: info.totalSize
      });
      if (cancelSignal.isCancelled) {
        return;
      }
    }
    return fetchRequest({
      url,
      headers,
      onData,
      cancelSignal
    }).then((res) => ({
      resultType: "chunk-complete",
      resultData: res
    }));
  }
  var init_low_latency_segment_loader = __esm({
    "src/transports/dash/low_latency_segment_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_byte_parsing();
      init_fetch();
      init_byte_range();
      init_extract_complete_chunks();
    }
  });

  // src/transports/dash/segment_loader.ts
  function regularSegmentLoader2(url, content, lowLatencyMode, callbacks, cancelSignal) {
    if (content.segment.isInit) {
      return initSegmentLoader(url, content.segment, cancelSignal, callbacks);
    }
    const containerType = inferSegmentContainer(content.adaptation.type, content.representation);
    if (lowLatencyMode && (containerType === "mp4" || containerType === void 0)) {
      if (fetchIsSupported()) {
        return lowLatencySegmentLoader(url, content, callbacks, cancelSignal);
      } else {
        warnOnce("DASH: Your browser does not have the fetch API. You will have a higher chance of rebuffering when playing close to the live edge");
      }
    }
    const { segment } = content;
    return request_default({
      url,
      responseType: "arraybuffer",
      headers: segment.range !== void 0 ? { Range: byteRange(segment.range) } : void 0,
      cancelSignal,
      onProgress: callbacks.onProgress
    }).then((data) => ({
      resultType: "segment-loaded",
      resultData: data
    }));
  }
  function generateSegmentLoader2({
    lowLatencyMode,
    segmentLoader: customSegmentLoader,
    checkMediaSegmentIntegrity
  }) {
    return checkMediaSegmentIntegrity !== true ? segmentLoader2 : addSegmentIntegrityChecks(segmentLoader2);
    function segmentLoader2(url, content, cancelSignal, callbacks) {
      if (url == null) {
        return Promise.resolve({
          resultType: "segment-created",
          resultData: null
        });
      }
      if (lowLatencyMode || customSegmentLoader === void 0) {
        return regularSegmentLoader2(url, content, lowLatencyMode, callbacks, cancelSignal);
      }
      const args = {
        adaptation: content.adaptation,
        manifest: content.manifest,
        period: content.period,
        representation: content.representation,
        segment: content.segment,
        transport: "dash",
        url
      };
      return new Promise((res, rej) => {
        let hasFinished = false;
        const resolve = (_args) => {
          if (hasFinished || cancelSignal.isCancelled) {
            return;
          }
          hasFinished = true;
          cancelSignal.deregister(abortCustomLoader);
          res({
            resultType: "segment-loaded",
            resultData: {
              responseData: _args.data,
              size: _args.size,
              requestDuration: _args.duration
            }
          });
        };
        const reject = (err) => {
          var _a2, _b2, _c;
          if (hasFinished || cancelSignal.isCancelled) {
            return;
          }
          hasFinished = true;
          cancelSignal.deregister(abortCustomLoader);
          const castedErr = err;
          const message = (_a2 = castedErr == null ? void 0 : castedErr.message) != null ? _a2 : "Unknown error when fetching a DASH segment through a custom segmentLoader.";
          const emittedErr = new CustomLoaderError(message, (_b2 = castedErr == null ? void 0 : castedErr.canRetry) != null ? _b2 : false, (_c = castedErr == null ? void 0 : castedErr.isOfflineError) != null ? _c : false, castedErr == null ? void 0 : castedErr.xhr);
          rej(emittedErr);
        };
        const progress = (_args) => {
          if (hasFinished || cancelSignal.isCancelled) {
            return;
          }
          callbacks.onProgress({
            duration: _args.duration,
            size: _args.size,
            totalSize: _args.totalSize
          });
        };
        const fallback = () => {
          if (hasFinished || cancelSignal.isCancelled) {
            return;
          }
          hasFinished = true;
          cancelSignal.deregister(abortCustomLoader);
          regularSegmentLoader2(url, content, lowLatencyMode, callbacks, cancelSignal).then(res, rej);
        };
        const customCallbacks = { reject, resolve, progress, fallback };
        const abort = customSegmentLoader(args, customCallbacks);
        cancelSignal.register(abortCustomLoader);
        function abortCustomLoader(err) {
          if (hasFinished) {
            return;
          }
          hasFinished = true;
          if (typeof abort === "function") {
            abort();
          }
          rej(err);
        }
      });
    }
  }
  var init_segment_loader2 = __esm({
    "src/transports/dash/segment_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_request();
      init_warn_once();
      init_byte_range();
      init_infer_segment_container();
      init_add_segment_integrity_checks_to_loader();
      init_init_segment_loader();
      init_low_latency_segment_loader();
    }
  });

  // src/parsers/containers/matroska/utils.ts
  function findNextElement(elementID, parents, buffer, [initialOffset, maxOffset]) {
    let currentOffset = initialOffset;
    while (currentOffset < maxOffset) {
      const parsedID = getEBMLID(buffer, currentOffset);
      if (parsedID == null) {
        return null;
      }
      const { value: ebmlTagID, length: ebmlTagLength } = parsedID;
      const sizeOffset = currentOffset + ebmlTagLength;
      const parsedValue = getEBMLValue(buffer, sizeOffset);
      if (parsedValue == null) {
        return null;
      }
      const { length: valueLengthLength, value: valueLength } = parsedValue;
      const valueOffset = sizeOffset + valueLengthLength;
      const valueEndOffset = valueOffset + valueLength;
      if (ebmlTagID === elementID) {
        return [valueOffset, valueEndOffset];
      } else if (parents.length > 0) {
        for (let i = 0; i < parents.length; i++) {
          if (ebmlTagID === parents[i]) {
            const newParents = parents.slice(i + 1, parents.length);
            return findNextElement(elementID, newParents, buffer, [valueOffset, valueEndOffset]);
          }
        }
      }
      currentOffset = valueEndOffset;
    }
    return null;
  }
  function getTimeCodeScale(buffer, initialOffset) {
    const timeCodeScaleOffsets = findNextElement(TIMECODESCALE_ID, [SEGMENT_ID, INFO_ID], buffer, [initialOffset, buffer.length]);
    if (timeCodeScaleOffsets == null) {
      return null;
    }
    const length = timeCodeScaleOffsets[1] - timeCodeScaleOffsets[0];
    return 1e9 / bytesToNumber(buffer, timeCodeScaleOffsets[0], length);
  }
  function getDuration(buffer, initialOffset) {
    const timeCodeScaleOffsets = findNextElement(DURATION_ID, [SEGMENT_ID, INFO_ID], buffer, [initialOffset, buffer.length]);
    if (timeCodeScaleOffsets == null) {
      return null;
    }
    const length = timeCodeScaleOffsets[1] - timeCodeScaleOffsets[0];
    if (length === 4) {
      return get_IEEE754_32Bits(buffer, timeCodeScaleOffsets[0]);
    } else if (length === 8) {
      return get_IEEE754_64Bits(buffer, timeCodeScaleOffsets[0]);
    }
    return null;
  }
  function getSegmentsFromCues(buffer, initialOffset) {
    const segmentRange = findNextElement(SEGMENT_ID, [], buffer, [initialOffset, buffer.length]);
    if (segmentRange == null) {
      return null;
    }
    const [segmentRangeStart, segmentRangeEnd] = segmentRange;
    const timescale = getTimeCodeScale(buffer, segmentRangeStart);
    if (timescale == null) {
      return null;
    }
    const duration = getDuration(buffer, segmentRangeStart);
    if (duration == null) {
      return null;
    }
    const cuesRange = findNextElement(CUES_ID, [], buffer, [segmentRangeStart, segmentRangeEnd]);
    if (cuesRange == null) {
      return null;
    }
    const rawInfos = [];
    let currentOffset = cuesRange[0];
    while (currentOffset < cuesRange[1]) {
      const cuePointRange = findNextElement(CUE_POINT_ID, [], buffer, [currentOffset, cuesRange[1]]);
      if (cuePointRange == null) {
        break;
      }
      const cueTimeRange = findNextElement(CUE_TIME_ID, [], buffer, [cuePointRange[0], cuePointRange[1]]);
      if (cueTimeRange == null) {
        return null;
      }
      const time = bytesToNumber(buffer, cueTimeRange[0], cueTimeRange[1] - cueTimeRange[0]);
      const cueOffsetRange = findNextElement(CUE_CLUSTER_POSITIONS_ID, [CUE_TRACK_POSITIONS_ID], buffer, [cuePointRange[0], cuePointRange[1]]);
      if (cueOffsetRange == null) {
        return null;
      }
      const rangeStart = bytesToNumber(buffer, cueOffsetRange[0], cueOffsetRange[1] - cueOffsetRange[0]) + segmentRangeStart;
      rawInfos.push({ time, rangeStart });
      currentOffset = cuePointRange[1];
    }
    const segments = [];
    for (let i = 0; i < rawInfos.length; i++) {
      const currentSegment = rawInfos[i];
      if (i === rawInfos.length - 1) {
        segments.push({
          time: currentSegment.time,
          timescale,
          duration: i === 0 ? duration : duration - currentSegment.time,
          range: [currentSegment.rangeStart, Infinity]
        });
      } else {
        segments.push({
          time: currentSegment.time,
          timescale,
          duration: rawInfos[i + 1].time - currentSegment.time,
          range: [currentSegment.rangeStart, rawInfos[i + 1].rangeStart - 1]
        });
      }
    }
    return segments;
  }
  function getLength(buffer, offset) {
    for (let length = 1; length <= 8; length++) {
      if (buffer[offset] >= Math.pow(2, 8 - length)) {
        return length;
      }
    }
    return void 0;
  }
  function getEBMLID(buffer, offset) {
    const length = getLength(buffer, offset);
    if (length == null) {
      log_default.warn("webm: unrepresentable length");
      return null;
    }
    if (offset + length > buffer.length) {
      log_default.warn("webm: impossible length");
      return null;
    }
    let value = 0;
    for (let i = 0; i < length; i++) {
      value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
    }
    return { length, value };
  }
  function getEBMLValue(buffer, offset) {
    const length = getLength(buffer, offset);
    if (length == null) {
      log_default.warn("webm: unrepresentable length");
      return null;
    }
    if (offset + length > buffer.length) {
      log_default.warn("webm: impossible length");
      return null;
    }
    let value = (buffer[offset] & (1 << 8 - length) - 1) * Math.pow(2, (length - 1) * 8);
    for (let i = 1; i < length; i++) {
      value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
    }
    return { length, value };
  }
  function get_IEEE754_32Bits(buffer, offset) {
    return new DataView(buffer.buffer).getFloat32(offset);
  }
  function get_IEEE754_64Bits(buffer, offset) {
    return new DataView(buffer.buffer).getFloat64(offset);
  }
  function bytesToNumber(buffer, offset, length) {
    let value = 0;
    for (let i = 0; i < length; i++) {
      value = buffer[offset + i] * Math.pow(2, (length - i - 1) * 8) + value;
    }
    return value;
  }
  var SEGMENT_ID, INFO_ID, TIMECODESCALE_ID, DURATION_ID, CUES_ID, CUE_POINT_ID, CUE_TIME_ID, CUE_TRACK_POSITIONS_ID, CUE_CLUSTER_POSITIONS_ID;
  var init_utils4 = __esm({
    "src/parsers/containers/matroska/utils.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      SEGMENT_ID = 408125543;
      INFO_ID = 357149030;
      TIMECODESCALE_ID = 2807729;
      DURATION_ID = 17545;
      CUES_ID = 475249515;
      CUE_POINT_ID = 187;
      CUE_TIME_ID = 179;
      CUE_TRACK_POSITIONS_ID = 183;
      CUE_CLUSTER_POSITIONS_ID = 241;
    }
  });

  // src/parsers/containers/matroska/index.ts
  var init_matroska = __esm({
    "src/parsers/containers/matroska/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_utils4();
    }
  });

  // src/parsers/manifest/dash/common/indexes/get_init_segment.ts
  function getInitSegment(index, isEMSGWhitelisted) {
    var _a2;
    const { initialization } = index;
    let privateInfos;
    if (isEMSGWhitelisted !== void 0) {
      privateInfos = { isEMSGWhitelisted };
    }
    return {
      id: "init",
      isInit: true,
      time: 0,
      end: 0,
      duration: 0,
      timescale: 1,
      range: initialization != null ? initialization.range : void 0,
      indexRange: index.indexRange,
      mediaURLs: (_a2 = initialization == null ? void 0 : initialization.mediaURLs) != null ? _a2 : null,
      complete: true,
      privateInfos,
      timestampOffset: -(index.indexTimeOffset / index.timescale)
    };
  }
  var init_get_init_segment = __esm({
    "src/parsers/manifest/dash/common/indexes/get_init_segment.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/dash/common/indexes/tokens.ts
  function padLeftWithZeros(n, l) {
    const nToString = n.toString();
    if (nToString.length >= l) {
      return nToString;
    }
    const arr = new Array(l + 1).join("0") + nToString;
    return arr.slice(-l);
  }
  function processFormatedToken(replacer) {
    return (_match, _format, widthStr) => {
      const width = isNonEmptyString(widthStr) ? parseInt(widthStr, 10) : 1;
      return padLeftWithZeros(String(replacer), width);
    };
  }
  function createIndexURLs(baseURLs, media, id, bitrate) {
    if (baseURLs.length === 0) {
      return media !== void 0 ? [replaceRepresentationDASHTokens(media, id, bitrate)] : null;
    }
    return baseURLs.map((baseURL) => {
      return replaceRepresentationDASHTokens(resolveURL(baseURL, media), id, bitrate);
    });
  }
  function replaceRepresentationDASHTokens(path, id, bitrate) {
    if (path.indexOf("$") === -1) {
      return path;
    } else {
      return path.replace(/\$\$/g, "$").replace(/\$RepresentationID\$/g, String(id)).replace(/\$Bandwidth(\%0(\d+)d)?\$/g, processFormatedToken(bitrate === void 0 ? 0 : bitrate));
    }
  }
  function createDashUrlDetokenizer(time, nb) {
    return function replaceTokensInUrl(url) {
      if (url.indexOf("$") === -1) {
        return url;
      } else {
        return url.replace(/\$\$/g, "$").replace(/\$Number(\%0(\d+)d)?\$/g, (_x, _y, widthStr) => {
          if (nb === void 0) {
            throw new Error("Segment number not defined in a $Number$ scheme");
          }
          return processFormatedToken(nb)(_x, _y, widthStr);
        }).replace(/\$Time(\%0(\d+)d)?\$/g, (_x, _y, widthStr) => {
          if (time === void 0) {
            throw new Error("Segment time not defined in a $Time$ scheme");
          }
          return processFormatedToken(time)(_x, _y, widthStr);
        });
      }
    };
  }
  var init_tokens2 = __esm({
    "src/parsers/manifest/dash/common/indexes/tokens.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_resolve_url();
    }
  });

  // src/parsers/manifest/dash/common/indexes/get_segments_from_timeline.ts
  function getWantedRepeatIndex(segmentStartTime, segmentDuration, wantedTime) {
    const diff = wantedTime - segmentStartTime;
    return diff > 0 ? Math.floor(diff / segmentDuration) : 0;
  }
  function getSegmentsFromTimeline(index, from2, durationWanted, isEMSGWhitelisted, maximumTime) {
    const scaledUp = toIndexTime(from2, index);
    const scaledTo = toIndexTime(from2 + durationWanted, index);
    const { timeline, timescale, mediaURLs, startNumber } = index;
    let currentNumber = startNumber != null ? startNumber : 1;
    const segments = [];
    const timelineLength = timeline.length;
    let maxEncounteredDuration = timeline.length > 0 && timeline[0].duration != null ? timeline[0].duration : 0;
    for (let i = 0; i < timelineLength; i++) {
      const timelineItem = timeline[i];
      const { duration, start, range } = timelineItem;
      maxEncounteredDuration = Math.max(maxEncounteredDuration, duration);
      const repeat = calculateRepeat(timelineItem, timeline[i + 1], maximumTime);
      const complete = index.availabilityTimeComplete !== false || i !== timelineLength - 1 && repeat !== 0;
      let segmentNumberInCurrentRange = getWantedRepeatIndex(start, duration, scaledUp);
      let segmentTime = start + segmentNumberInCurrentRange * duration;
      while (segmentTime < scaledTo && segmentNumberInCurrentRange <= repeat) {
        const segmentNumber = currentNumber + segmentNumberInCurrentRange;
        const detokenizedURLs = mediaURLs === null ? null : mediaURLs.map(createDashUrlDetokenizer(segmentTime, segmentNumber));
        const time = segmentTime - index.indexTimeOffset;
        const segment = {
          id: String(segmentTime),
          time: time / timescale,
          end: (time + duration) / timescale,
          duration: duration / timescale,
          isInit: false,
          range,
          timescale: 1,
          mediaURLs: detokenizedURLs,
          number: segmentNumber,
          timestampOffset: -(index.indexTimeOffset / timescale),
          complete,
          privateInfos: { isEMSGWhitelisted }
        };
        segments.push(segment);
        segmentNumberInCurrentRange++;
        segmentTime = start + segmentNumberInCurrentRange * duration;
      }
      if (segmentTime >= scaledTo) {
        return segments;
      }
      currentNumber += repeat + 1;
    }
    return segments;
  }
  var init_get_segments_from_timeline = __esm({
    "src/parsers/manifest/dash/common/indexes/get_segments_from_timeline.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_index_helpers();
      init_tokens2();
    }
  });

  // src/parsers/manifest/dash/common/indexes/base.ts
  function _addSegmentInfos2(index, segmentInfos) {
    if (segmentInfos.timescale !== index.timescale) {
      const { timescale } = index;
      index.timeline.push({
        start: segmentInfos.time / segmentInfos.timescale * timescale,
        duration: segmentInfos.duration / segmentInfos.timescale * timescale,
        repeatCount: segmentInfos.count === void 0 ? 0 : segmentInfos.count,
        range: segmentInfos.range
      });
    } else {
      index.timeline.push({
        start: segmentInfos.time,
        duration: segmentInfos.duration,
        repeatCount: segmentInfos.count === void 0 ? 0 : segmentInfos.count,
        range: segmentInfos.range
      });
    }
    return true;
  }
  var BaseRepresentationIndex;
  var init_base = __esm({
    "src/parsers/manifest/dash/common/indexes/base.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_index_helpers();
      init_get_init_segment();
      init_get_segments_from_timeline();
      init_tokens2();
      BaseRepresentationIndex = class {
        constructor(index, context2) {
          var _a2, _b2;
          const {
            periodStart,
            periodEnd,
            representationBaseURLs,
            representationId,
            representationBitrate,
            isEMSGWhitelisted
          } = context2;
          const timescale = (_a2 = index.timescale) != null ? _a2 : 1;
          const presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset : 0;
          const indexTimeOffset = presentationTimeOffset - periodStart * timescale;
          const urlSources = representationBaseURLs.map((b) => b.url);
          const mediaURLs = createIndexURLs(urlSources, index.initialization !== void 0 ? index.initialization.media : void 0, representationId, representationBitrate);
          const range = index.initialization !== void 0 ? index.initialization.range : index.indexRange !== void 0 ? [0, index.indexRange[0] - 1] : void 0;
          this._index = {
            indexRange: index.indexRange,
            indexTimeOffset,
            initialization: { mediaURLs, range },
            mediaURLs: createIndexURLs(urlSources, index.media, representationId, representationBitrate),
            startNumber: index.startNumber,
            timeline: (_b2 = index.timeline) != null ? _b2 : [],
            timescale
          };
          this._scaledPeriodEnd = periodEnd == null ? void 0 : toIndexTime(periodEnd, this._index);
          this._isInitialized = this._index.timeline.length > 0;
          this._isEMSGWhitelisted = isEMSGWhitelisted;
        }
        getInitSegment() {
          return getInitSegment(this._index, this._isEMSGWhitelisted);
        }
        getSegments(from2, dur) {
          return getSegmentsFromTimeline(this._index, from2, dur, this._isEMSGWhitelisted, this._scaledPeriodEnd);
        }
        shouldRefresh() {
          return false;
        }
        getFirstPosition() {
          const index = this._index;
          if (index.timeline.length === 0) {
            return null;
          }
          return fromIndexTime(index.timeline[0].start, index);
        }
        getLastPosition() {
          var _a2;
          const { timeline } = this._index;
          if (timeline.length === 0) {
            return null;
          }
          const lastTimelineElement = timeline[timeline.length - 1];
          const lastTime = Math.min(getIndexSegmentEnd(lastTimelineElement, null, this._scaledPeriodEnd), (_a2 = this._scaledPeriodEnd) != null ? _a2 : Infinity);
          return fromIndexTime(lastTime, this._index);
        }
        isSegmentStillAvailable() {
          return true;
        }
        checkDiscontinuity() {
          return null;
        }
        areSegmentsChronologicallyGenerated() {
          return true;
        }
        initializeIndex(indexSegments) {
          for (let i = 0; i < indexSegments.length; i++) {
            _addSegmentInfos2(this._index, indexSegments[i]);
          }
          this._isInitialized = true;
        }
        canBeOutOfSyncError() {
          return false;
        }
        isFinished() {
          return true;
        }
        isInitialized() {
          return this._isInitialized;
        }
        _replace(newIndex) {
          this._index = newIndex._index;
          this._isInitialized = newIndex._isInitialized;
          this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
          this._isEMSGWhitelisted = newIndex._isEMSGWhitelisted;
        }
        _update() {
          log_default.error("Base RepresentationIndex: Cannot update a SegmentList");
        }
      };
    }
  });

  // src/parsers/manifest/dash/common/indexes/list.ts
  var ListRepresentationIndex;
  var init_list = __esm({
    "src/parsers/manifest/dash/common/indexes/list.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_index_helpers();
      init_get_init_segment();
      init_tokens2();
      ListRepresentationIndex = class {
        constructor(index, context2) {
          var _a2;
          if (index.duration === void 0) {
            throw new Error("Invalid SegmentList: no duration");
          }
          const {
            periodStart,
            periodEnd,
            representationBaseURLs,
            representationId,
            representationBitrate,
            isEMSGWhitelisted
          } = context2;
          this._isEMSGWhitelisted = isEMSGWhitelisted;
          this._periodStart = periodStart;
          this._periodEnd = periodEnd;
          const presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset : 0;
          const timescale = (_a2 = index.timescale) != null ? _a2 : 1;
          const indexTimeOffset = presentationTimeOffset - periodStart * timescale;
          const urlSources = representationBaseURLs.map((b) => b.url);
          const list = index.list.map((lItem) => ({
            mediaURLs: createIndexURLs(urlSources, lItem.media, representationId, representationBitrate),
            mediaRange: lItem.mediaRange
          }));
          this._index = {
            list,
            timescale,
            duration: index.duration,
            indexTimeOffset,
            indexRange: index.indexRange,
            initialization: index.initialization == null ? void 0 : {
              mediaURLs: createIndexURLs(urlSources, index.initialization.media, representationId, representationBitrate),
              range: index.initialization.range
            }
          };
        }
        getInitSegment() {
          const initSegment = getInitSegment(this._index);
          if (initSegment.privateInfos === void 0) {
            initSegment.privateInfos = {};
          }
          initSegment.privateInfos.isEMSGWhitelisted = this._isEMSGWhitelisted;
          return initSegment;
        }
        getSegments(fromTime, dur) {
          const index = this._index;
          const { duration, list, timescale } = index;
          const durationInSeconds = duration / timescale;
          const fromTimeInPeriod = fromTime - this._periodStart;
          const [up, to] = getTimescaledRange(fromTimeInPeriod, dur, timescale);
          const length = Math.min(list.length - 1, Math.floor(to / duration));
          const segments = [];
          let i = Math.floor(up / duration);
          while (i <= length) {
            const range = list[i].mediaRange;
            const mediaURLs = list[i].mediaURLs;
            const time = i * durationInSeconds + this._periodStart;
            const segment = {
              id: String(i),
              time,
              isInit: false,
              range,
              duration: durationInSeconds,
              timescale: 1,
              end: time + durationInSeconds,
              mediaURLs,
              timestampOffset: -(index.indexTimeOffset / timescale),
              complete: true,
              privateInfos: { isEMSGWhitelisted: this._isEMSGWhitelisted }
            };
            segments.push(segment);
            i++;
          }
          return segments;
        }
        shouldRefresh(_fromTime, _toTime) {
          return false;
        }
        getFirstPosition() {
          return this._periodStart;
        }
        getLastPosition() {
          var _a2;
          const index = this._index;
          const { duration, list } = index;
          return Math.min(list.length * duration / index.timescale + this._periodStart, (_a2 = this._periodEnd) != null ? _a2 : Infinity);
        }
        isSegmentStillAvailable() {
          return true;
        }
        checkDiscontinuity() {
          return null;
        }
        areSegmentsChronologicallyGenerated() {
          return true;
        }
        canBeOutOfSyncError() {
          return false;
        }
        isFinished() {
          return true;
        }
        isInitialized() {
          return true;
        }
        _replace(newIndex) {
          this._index = newIndex._index;
        }
        _update() {
          log_default.error("List RepresentationIndex: Cannot update a SegmentList");
        }
      };
    }
  });

  // src/parsers/manifest/dash/common/indexes/is_period_fulfilled.ts
  function isPeriodFulfilled(timescale, lastSegmentEnd, periodEnd) {
    const scaledRoundingError = config_default.getCurrent().DEFAULT_MAXIMUM_TIME_ROUNDING_ERROR * timescale;
    return lastSegmentEnd + scaledRoundingError >= periodEnd;
  }
  var init_is_period_fulfilled = __esm({
    "src/parsers/manifest/dash/common/indexes/is_period_fulfilled.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
    }
  });

  // src/parsers/manifest/dash/common/indexes/template.ts
  var TemplateRepresentationIndex;
  var init_template = __esm({
    "src/parsers/manifest/dash/common/indexes/template.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_get_init_segment();
      init_is_period_fulfilled();
      init_tokens2();
      TemplateRepresentationIndex = class {
        constructor(index, context2) {
          var _a2;
          const {
            aggressiveMode,
            availabilityTimeOffset,
            manifestBoundsCalculator,
            isDynamic,
            periodEnd,
            periodStart,
            representationBaseURLs,
            representationId,
            representationBitrate,
            isEMSGWhitelisted
          } = context2;
          const timescale = (_a2 = index.timescale) != null ? _a2 : 1;
          const minBaseUrlAto = representationBaseURLs.length === 0 ? 0 : representationBaseURLs.reduce((acc, rbu) => {
            return Math.min(acc, rbu.availabilityTimeOffset);
          }, Infinity);
          this._availabilityTimeOffset = availabilityTimeOffset + minBaseUrlAto;
          this._manifestBoundsCalculator = manifestBoundsCalculator;
          this._aggressiveMode = aggressiveMode;
          const presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset : 0;
          const scaledStart = periodStart * timescale;
          const indexTimeOffset = presentationTimeOffset - scaledStart;
          if (index.duration === void 0) {
            throw new Error("Invalid SegmentTemplate: no duration");
          }
          const urlSources = representationBaseURLs.map((b) => b.url);
          this._index = {
            duration: index.duration,
            timescale,
            indexRange: index.indexRange,
            indexTimeOffset,
            initialization: index.initialization == null ? void 0 : {
              mediaURLs: createIndexURLs(urlSources, index.initialization.media, representationId, representationBitrate),
              range: index.initialization.range
            },
            mediaURLs: createIndexURLs(urlSources, index.media, representationId, representationBitrate),
            presentationTimeOffset,
            startNumber: index.startNumber
          };
          this._isDynamic = isDynamic;
          this._periodStart = periodStart;
          this._scaledPeriodEnd = periodEnd === void 0 ? void 0 : (periodEnd - periodStart) * timescale;
          this._isEMSGWhitelisted = isEMSGWhitelisted;
        }
        getInitSegment() {
          return getInitSegment(this._index, this._isEMSGWhitelisted);
        }
        getSegments(fromTime, dur) {
          const index = this._index;
          const {
            duration,
            startNumber,
            timescale,
            mediaURLs
          } = index;
          const scaledStart = this._periodStart * timescale;
          const scaledEnd = this._scaledPeriodEnd;
          const upFromPeriodStart = fromTime * timescale - scaledStart;
          const toFromPeriodStart = (fromTime + dur) * timescale - scaledStart;
          const firstSegmentStart = this._getFirstSegmentStart();
          const lastSegmentStart = this._getLastSegmentStart();
          if (firstSegmentStart == null || lastSegmentStart == null) {
            return [];
          }
          const startPosition = Math.max(firstSegmentStart, upFromPeriodStart);
          const lastWantedStartPosition = Math.min(lastSegmentStart, toFromPeriodStart);
          if (lastWantedStartPosition + duration <= startPosition) {
            return [];
          }
          const segments = [];
          const numberOffset = startNumber != null ? startNumber : 1;
          let numberIndexedToZero = Math.floor(startPosition / duration);
          for (let timeFromPeriodStart = numberIndexedToZero * duration; timeFromPeriodStart <= lastWantedStartPosition; timeFromPeriodStart += duration) {
            const realNumber = numberIndexedToZero + numberOffset;
            const realDuration = scaledEnd != null && timeFromPeriodStart + duration > scaledEnd ? scaledEnd - timeFromPeriodStart : duration;
            const realTime = timeFromPeriodStart + scaledStart;
            const manifestTime = timeFromPeriodStart + this._index.presentationTimeOffset;
            const detokenizedURLs = mediaURLs === null ? null : mediaURLs.map(createDashUrlDetokenizer(manifestTime, realNumber));
            const args = {
              id: String(realNumber),
              number: realNumber,
              time: realTime / timescale,
              end: (realTime + realDuration) / timescale,
              duration: realDuration / timescale,
              timescale: 1,
              isInit: false,
              scaledDuration: realDuration / timescale,
              mediaURLs: detokenizedURLs,
              timestampOffset: -(index.indexTimeOffset / timescale),
              complete: true,
              privateInfos: {
                isEMSGWhitelisted: this._isEMSGWhitelisted
              }
            };
            segments.push(args);
            numberIndexedToZero++;
          }
          return segments;
        }
        getFirstPosition() {
          const firstSegmentStart = this._getFirstSegmentStart();
          if (firstSegmentStart == null) {
            return firstSegmentStart;
          }
          return firstSegmentStart / this._index.timescale + this._periodStart;
        }
        getLastPosition() {
          var _a2;
          const lastSegmentStart = this._getLastSegmentStart();
          if (lastSegmentStart == null) {
            return lastSegmentStart;
          }
          const lastSegmentEnd = Math.min(lastSegmentStart + this._index.duration, (_a2 = this._scaledPeriodEnd) != null ? _a2 : Infinity);
          return lastSegmentEnd / this._index.timescale + this._periodStart;
        }
        shouldRefresh() {
          return false;
        }
        checkDiscontinuity() {
          return null;
        }
        areSegmentsChronologicallyGenerated() {
          return true;
        }
        isSegmentStillAvailable(segment) {
          if (segment.isInit) {
            return true;
          }
          const segmentsForTime = this.getSegments(segment.time, 0.1);
          if (segmentsForTime.length === 0) {
            return false;
          }
          return segmentsForTime[0].time === segment.time && segmentsForTime[0].end === segment.end && segmentsForTime[0].number === segment.number;
        }
        canBeOutOfSyncError() {
          return false;
        }
        isFinished() {
          if (!this._isDynamic) {
            return true;
          }
          if (this._scaledPeriodEnd === void 0) {
            return false;
          }
          const { timescale } = this._index;
          const lastSegmentStart = this._getLastSegmentStart();
          if (lastSegmentStart == null) {
            return false;
          }
          const lastSegmentEnd = lastSegmentStart + this._index.duration;
          return isPeriodFulfilled(timescale, lastSegmentEnd, this._scaledPeriodEnd);
        }
        isInitialized() {
          return true;
        }
        _replace(newIndex) {
          this._index = newIndex._index;
          this._aggressiveMode = newIndex._aggressiveMode;
          this._isDynamic = newIndex._isDynamic;
          this._periodStart = newIndex._periodStart;
          this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
          this._manifestBoundsCalculator = newIndex._manifestBoundsCalculator;
        }
        _update(newIndex) {
          this._replace(newIndex);
        }
        _getFirstSegmentStart() {
          if (!this._isDynamic) {
            return 0;
          }
          if (this._scaledPeriodEnd === 0 || this._scaledPeriodEnd === void 0) {
            const maximumBound = this._manifestBoundsCalculator.estimateMaximumBound();
            if (maximumBound !== void 0 && maximumBound < this._periodStart) {
              return null;
            }
          }
          const { duration, timescale } = this._index;
          const firstPosition = this._manifestBoundsCalculator.estimateMinimumBound();
          if (firstPosition === void 0) {
            return void 0;
          }
          const segmentTime = firstPosition > this._periodStart ? (firstPosition - this._periodStart) * timescale : 0;
          const numberIndexedToZero = Math.floor(segmentTime / duration);
          return numberIndexedToZero * duration;
        }
        _getLastSegmentStart() {
          var _a2;
          const { duration, timescale } = this._index;
          if (this._isDynamic) {
            const lastPos = this._manifestBoundsCalculator.estimateMaximumBound();
            if (lastPos === void 0) {
              return void 0;
            }
            const agressiveModeOffset = this._aggressiveMode ? duration / timescale : 0;
            if (this._scaledPeriodEnd != null && this._scaledPeriodEnd < (lastPos + agressiveModeOffset - this._periodStart) * this._index.timescale) {
              if (this._scaledPeriodEnd < duration) {
                return null;
              }
              return (Math.floor(this._scaledPeriodEnd / duration) - 1) * duration;
            }
            const scaledLastPosition = (lastPos - this._periodStart) * timescale;
            if (scaledLastPosition < 0) {
              return null;
            }
            const availabilityTimeOffset = ((this._availabilityTimeOffset !== void 0 ? this._availabilityTimeOffset : 0) + agressiveModeOffset) * timescale;
            const numberOfSegmentsAvailable = Math.floor((scaledLastPosition + availabilityTimeOffset) / duration);
            return numberOfSegmentsAvailable <= 0 ? null : (numberOfSegmentsAvailable - 1) * duration;
          } else {
            const maximumTime = (_a2 = this._scaledPeriodEnd) != null ? _a2 : 0;
            const numberIndexedToZero = Math.ceil(maximumTime / duration) - 1;
            const regularLastSegmentStart = numberIndexedToZero * duration;
            const minimumDuration = config_default.getCurrent().MINIMUM_SEGMENT_SIZE * timescale;
            if (maximumTime - regularLastSegmentStart > minimumDuration || numberIndexedToZero === 0) {
              return regularLastSegmentStart;
            }
            return (numberIndexedToZero - 1) * duration;
          }
        }
      };
    }
  });

  // src/parsers/manifest/dash/common/indexes/timeline/convert_element_to_index_segment.ts
  function convertElementsToIndexSegment(item, previousItem, nextItem, timelineStart) {
    let start = item.start;
    let duration = item.duration;
    const repeatCount = item.repeatCount;
    if (start === void 0) {
      if (previousItem === null) {
        start = timelineStart;
      } else if (!isNullOrUndefined(previousItem.duration)) {
        start = previousItem.start + previousItem.duration * (previousItem.repeatCount + 1);
      }
    }
    if ((duration === void 0 || isNaN(duration)) && nextItem !== null && nextItem.start !== void 0 && !isNaN(nextItem.start) && start !== void 0 && !isNaN(start)) {
      duration = nextItem.start - start;
    }
    if (start !== void 0 && !isNaN(start) && (duration !== void 0 && !isNaN(duration)) && (repeatCount === void 0 || !isNaN(repeatCount))) {
      return {
        start,
        duration,
        repeatCount: repeatCount === void 0 ? 0 : repeatCount
      };
    }
    log_default.warn('DASH: A "S" Element could not have been parsed.');
    return null;
  }
  var init_convert_element_to_index_segment = __esm({
    "src/parsers/manifest/dash/common/indexes/timeline/convert_element_to_index_segment.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_is_null_or_undefined();
    }
  });

  // src/parsers/manifest/dash/common/indexes/timeline/parse_s_element.ts
  function parseSElement(root) {
    const parsedS = {};
    for (let j = 0; j < root.attributes.length; j++) {
      const attribute = root.attributes[j];
      switch (attribute.name) {
        case "t":
          const start = parseInt(attribute.value, 10);
          if (isNaN(start)) {
            log_default.warn(`DASH: invalid t ("${attribute.value}")`);
          } else {
            parsedS.start = start;
          }
          break;
        case "d":
          const duration = parseInt(attribute.value, 10);
          if (isNaN(duration)) {
            log_default.warn(`DASH: invalid d ("${attribute.value}")`);
          } else {
            parsedS.duration = duration;
          }
          break;
        case "r":
          const repeatCount = parseInt(attribute.value, 10);
          if (isNaN(repeatCount)) {
            log_default.warn(`DASH: invalid r ("${attribute.value}")`);
          } else {
            parsedS.repeatCount = repeatCount;
          }
          break;
      }
    }
    return parsedS;
  }
  var init_parse_s_element = __esm({
    "src/parsers/manifest/dash/common/indexes/timeline/parse_s_element.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
    }
  });

  // src/parsers/manifest/dash/common/indexes/timeline/construct_timeline_from_elements.ts
  function constructTimelineFromElements(elements, scaledPeriodStart) {
    const initialTimeline = [];
    for (let i = 0; i < elements.length; i++) {
      initialTimeline.push(parseSElement(elements[i]));
    }
    const timeline = [];
    for (let i = 0; i < initialTimeline.length; i++) {
      const item = initialTimeline[i];
      const previousItem = timeline[timeline.length - 1] === void 0 ? null : timeline[timeline.length - 1];
      const nextItem = initialTimeline[i + 1] === void 0 ? null : initialTimeline[i + 1];
      const timelineElement = convertElementsToIndexSegment(item, previousItem, nextItem, scaledPeriodStart);
      if (timelineElement !== null) {
        timeline.push(timelineElement);
      }
    }
    return timeline;
  }
  var init_construct_timeline_from_elements = __esm({
    "src/parsers/manifest/dash/common/indexes/timeline/construct_timeline_from_elements.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_convert_element_to_index_segment();
      init_parse_s_element();
    }
  });

  // src/parsers/manifest/dash/common/indexes/timeline/find_first_common_start_time.ts
  function findFirstCommonStartTime(prevTimeline, newElements) {
    if (prevTimeline.length === 0 || newElements.length === 0) {
      return null;
    }
    const prevInitialStart = prevTimeline[0].start;
    const newFirstTAttr = newElements[0].getAttribute("t");
    const newInitialStart = newFirstTAttr === null ? null : parseInt(newFirstTAttr, 10);
    if (newInitialStart === null || Number.isNaN(newInitialStart)) {
      return null;
    }
    if (prevInitialStart === newInitialStart) {
      return {
        prevSegmentsIdx: 0,
        newElementsIdx: 0,
        repeatNumberInPrevSegments: 0,
        repeatNumberInNewElements: 0
      };
    } else if (prevInitialStart < newInitialStart) {
      let prevElt = prevTimeline[0];
      let prevElementIndex = 0;
      while (true) {
        if (prevElt.repeatCount > 0) {
          const diff = newInitialStart - prevElt.start;
          if (diff % prevElt.duration === 0 && diff / prevElt.duration <= prevElt.repeatCount) {
            const repeatNumberInPrevSegments = diff / prevElt.duration;
            return {
              repeatNumberInPrevSegments,
              prevSegmentsIdx: prevElementIndex,
              newElementsIdx: 0,
              repeatNumberInNewElements: 0
            };
          }
        }
        prevElementIndex++;
        if (prevElementIndex >= prevTimeline.length) {
          return null;
        }
        prevElt = prevTimeline[prevElementIndex];
        if (prevElt.start === newInitialStart) {
          return {
            prevSegmentsIdx: prevElementIndex,
            newElementsIdx: 0,
            repeatNumberInPrevSegments: 0,
            repeatNumberInNewElements: 0
          };
        } else if (prevElt.start > newInitialStart) {
          return null;
        }
      }
    } else {
      let newElementsIdx = 0;
      let newElt = newElements[0];
      let currentTimeOffset = newInitialStart;
      while (true) {
        const dAttr = newElt.getAttribute("d");
        const duration = dAttr === null ? null : parseInt(dAttr, 10);
        if (duration === null || Number.isNaN(duration)) {
          return null;
        }
        const rAttr = newElt.getAttribute("r");
        const repeatCount = rAttr === null ? null : parseInt(rAttr, 10);
        if (repeatCount !== null) {
          if (Number.isNaN(repeatCount) || repeatCount < 0) {
            return null;
          }
          if (repeatCount > 0) {
            const diff = prevInitialStart - currentTimeOffset;
            if (diff % duration === 0 && diff / duration <= repeatCount) {
              const repeatNumberInNewElements = diff / duration;
              return {
                repeatNumberInPrevSegments: 0,
                repeatNumberInNewElements,
                prevSegmentsIdx: 0,
                newElementsIdx
              };
            }
          }
          currentTimeOffset += duration * (repeatCount + 1);
        } else {
          currentTimeOffset += duration;
        }
        newElementsIdx++;
        if (newElementsIdx >= newElements.length) {
          return null;
        }
        newElt = newElements[newElementsIdx];
        const tAttr = newElt.getAttribute("t");
        const time = tAttr === null ? null : parseInt(tAttr, 10);
        if (time !== null) {
          if (Number.isNaN(time)) {
            return null;
          }
          currentTimeOffset = time;
        }
        if (currentTimeOffset === prevInitialStart) {
          return {
            newElementsIdx,
            prevSegmentsIdx: 0,
            repeatNumberInPrevSegments: 0,
            repeatNumberInNewElements: 0
          };
        } else if (currentTimeOffset > newInitialStart) {
          return null;
        }
      }
    }
  }
  var init_find_first_common_start_time = __esm({
    "src/parsers/manifest/dash/common/indexes/timeline/find_first_common_start_time.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/dash/common/indexes/timeline/construct_timeline_from_previous_timeline.ts
  function constructTimelineFromPreviousTimeline(newElements, prevTimeline, scaledPeriodStart) {
    var _a2;
    const commonStartInfo = findFirstCommonStartTime(prevTimeline, newElements);
    if (commonStartInfo === null) {
      log_default.warn('DASH: Cannot perform "based" update. Common segment not found.');
      return constructTimelineFromElements(newElements, scaledPeriodStart);
    }
    const {
      prevSegmentsIdx,
      newElementsIdx,
      repeatNumberInPrevSegments,
      repeatNumberInNewElements
    } = commonStartInfo;
    const numberCommonEltGuess = prevTimeline.length - prevSegmentsIdx;
    const lastCommonEltNewEltsIdx = numberCommonEltGuess + newElementsIdx - 1;
    if (lastCommonEltNewEltsIdx >= newElements.length) {
      log_default.info('DASH: Cannot perform "based" update. New timeline too short');
      return constructTimelineFromElements(newElements, scaledPeriodStart);
    }
    const newTimeline = prevTimeline.slice(prevSegmentsIdx);
    if (repeatNumberInPrevSegments > 0) {
      const commonEltInOldTimeline = newTimeline[0];
      commonEltInOldTimeline.start += commonEltInOldTimeline.duration * repeatNumberInPrevSegments;
      newTimeline[0].repeatCount -= repeatNumberInPrevSegments;
    }
    if (repeatNumberInNewElements > 0 && newElementsIdx !== 0) {
      log_default.info('DASH: Cannot perform "based" update. The new timeline has a different form.');
      return constructTimelineFromElements(newElements, scaledPeriodStart);
    }
    const prevLastElement = newTimeline[newTimeline.length - 1];
    const newCommonElt = parseSElement(newElements[lastCommonEltNewEltsIdx]);
    const newRepeatCountOffseted = ((_a2 = newCommonElt.repeatCount) != null ? _a2 : 0) - repeatNumberInNewElements;
    if (newCommonElt.duration !== prevLastElement.duration || prevLastElement.repeatCount > newRepeatCountOffseted) {
      log_default.info('DASH: Cannot perform "based" update. The new timeline has a different form at the beginning.');
      return constructTimelineFromElements(newElements, scaledPeriodStart);
    }
    if (newCommonElt.repeatCount !== void 0 && newCommonElt.repeatCount > prevLastElement.repeatCount) {
      prevLastElement.repeatCount = newCommonElt.repeatCount;
    }
    const newEltsToPush = [];
    const items = [];
    for (let i = lastCommonEltNewEltsIdx + 1; i < newElements.length; i++) {
      items.push(parseSElement(newElements[i]));
    }
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      const previousItem = newEltsToPush[newEltsToPush.length - 1] === void 0 ? prevLastElement : newEltsToPush[newEltsToPush.length - 1];
      const nextItem = items[i + 1] === void 0 ? null : items[i + 1];
      const timelineElement = convertElementsToIndexSegment(item, previousItem, nextItem, scaledPeriodStart);
      if (timelineElement !== null) {
        newEltsToPush.push(timelineElement);
      }
    }
    return newTimeline.concat(newEltsToPush);
  }
  var init_construct_timeline_from_previous_timeline = __esm({
    "src/parsers/manifest/dash/common/indexes/timeline/construct_timeline_from_previous_timeline.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_construct_timeline_from_elements();
      init_convert_element_to_index_segment();
      init_find_first_common_start_time();
      init_parse_s_element();
    }
  });

  // src/parsers/manifest/dash/common/indexes/timeline/timeline_representation_index.ts
  var TimelineRepresentationIndex;
  var init_timeline_representation_index = __esm({
    "src/parsers/manifest/dash/common/indexes/timeline/timeline_representation_index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_errors();
      init_log();
      init_clear_timeline_from_position();
      init_index_helpers();
      init_is_segment_still_available();
      init_update_segment_timeline();
      init_get_init_segment();
      init_get_segments_from_timeline();
      init_is_period_fulfilled();
      init_tokens2();
      init_construct_timeline_from_elements();
      init_construct_timeline_from_previous_timeline();
      TimelineRepresentationIndex = class {
        constructor(index, context2) {
          var _a2, _b2, _c;
          if (!TimelineRepresentationIndex.isTimelineIndexArgument(index)) {
            throw new Error("The given index is not compatible with a TimelineRepresentationIndex.");
          }
          const {
            availabilityTimeComplete,
            manifestBoundsCalculator,
            isDynamic,
            isLastPeriod,
            representationBaseURLs,
            representationId,
            representationBitrate,
            periodStart,
            periodEnd,
            isEMSGWhitelisted
          } = context2;
          const timescale = (_a2 = index.timescale) != null ? _a2 : 1;
          const presentationTimeOffset = index.presentationTimeOffset != null ? index.presentationTimeOffset : 0;
          const scaledStart = periodStart * timescale;
          const indexTimeOffset = presentationTimeOffset - scaledStart;
          this._manifestBoundsCalculator = manifestBoundsCalculator;
          this._isEMSGWhitelisted = isEMSGWhitelisted;
          this._isLastPeriod = isLastPeriod;
          this._lastUpdate = context2.receivedTime == null ? performance.now() : context2.receivedTime;
          this._unsafelyBaseOnPreviousIndex = null;
          if (context2.unsafelyBaseOnPreviousRepresentation !== null && context2.unsafelyBaseOnPreviousRepresentation.index instanceof TimelineRepresentationIndex) {
            context2.unsafelyBaseOnPreviousRepresentation.index._unsafelyBaseOnPreviousIndex = null;
            this._unsafelyBaseOnPreviousIndex = context2.unsafelyBaseOnPreviousRepresentation.index;
          }
          this._isDynamic = isDynamic;
          this._parseTimeline = (_b2 = index.timelineParser) != null ? _b2 : null;
          const urlSources = representationBaseURLs.map((b) => b.url);
          this._index = {
            availabilityTimeComplete,
            indexRange: index.indexRange,
            indexTimeOffset,
            initialization: index.initialization == null ? void 0 : {
              mediaURLs: createIndexURLs(urlSources, index.initialization.media, representationId, representationBitrate),
              range: index.initialization.range
            },
            mediaURLs: createIndexURLs(urlSources, index.media, representationId, representationBitrate),
            startNumber: index.startNumber,
            timeline: (_c = index.timeline) != null ? _c : null,
            timescale
          };
          this._periodStart = periodStart;
          this._scaledPeriodStart = toIndexTime(periodStart, this._index);
          this._scaledPeriodEnd = periodEnd === void 0 ? void 0 : toIndexTime(periodEnd, this._index);
        }
        getInitSegment() {
          return getInitSegment(this._index, this._isEMSGWhitelisted);
        }
        getSegments(from2, duration) {
          this._refreshTimeline();
          if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
          }
          const {
            mediaURLs,
            startNumber,
            timeline,
            timescale,
            indexTimeOffset
          } = this._index;
          return getSegmentsFromTimeline({
            mediaURLs,
            startNumber,
            timeline,
            timescale,
            indexTimeOffset
          }, from2, duration, this._isEMSGWhitelisted, this._scaledPeriodEnd);
        }
        shouldRefresh() {
          return false;
        }
        getFirstPosition() {
          this._refreshTimeline();
          if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
          }
          const timeline = this._index.timeline;
          return timeline.length === 0 ? null : fromIndexTime(timeline[0].start, this._index);
        }
        getLastPosition() {
          this._refreshTimeline();
          if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
          }
          const lastTime = TimelineRepresentationIndex.getIndexEnd(this._index.timeline, this._scaledPeriodEnd);
          return lastTime === null ? null : fromIndexTime(lastTime, this._index);
        }
        isSegmentStillAvailable(segment) {
          if (segment.isInit) {
            return true;
          }
          this._refreshTimeline();
          if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
          }
          const { timeline, timescale, indexTimeOffset } = this._index;
          return isSegmentStillAvailable(segment, timeline, timescale, indexTimeOffset);
        }
        checkDiscontinuity(time) {
          this._refreshTimeline();
          let timeline = this._index.timeline;
          if (timeline === null) {
            timeline = this._getTimeline();
            this._index.timeline = timeline;
          }
          return checkDiscontinuity({
            timeline,
            timescale: this._index.timescale,
            indexTimeOffset: this._index.indexTimeOffset
          }, time, this._scaledPeriodEnd);
        }
        canBeOutOfSyncError(error) {
          if (!this._isDynamic) {
            return false;
          }
          return error instanceof NetworkError && error.isHttpError(404);
        }
        areSegmentsChronologicallyGenerated() {
          return true;
        }
        _replace(newIndex) {
          this._parseTimeline = newIndex._parseTimeline;
          this._index = newIndex._index;
          this._isDynamic = newIndex._isDynamic;
          this._scaledPeriodStart = newIndex._scaledPeriodStart;
          this._periodStart = newIndex._periodStart;
          this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
          this._lastUpdate = newIndex._lastUpdate;
          this._manifestBoundsCalculator = newIndex._manifestBoundsCalculator;
          this._isLastPeriod = newIndex._isLastPeriod;
        }
        _update(newIndex) {
          if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
          }
          if (newIndex._index.timeline === null) {
            newIndex._index.timeline = newIndex._getTimeline();
          }
          const hasReplaced = updateSegmentTimeline(this._index.timeline, newIndex._index.timeline);
          if (hasReplaced) {
            this._index.startNumber = newIndex._index.startNumber;
          }
          this._isDynamic = newIndex._isDynamic;
          this._scaledPeriodStart = newIndex._scaledPeriodStart;
          this._periodStart = newIndex._periodStart;
          this._scaledPeriodEnd = newIndex._scaledPeriodEnd;
          this._lastUpdate = newIndex._lastUpdate;
          this._isLastPeriod = newIndex._isLastPeriod;
        }
        isFinished() {
          if (!this._isDynamic || !this._isLastPeriod) {
            return true;
          }
          if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
          }
          const { timeline } = this._index;
          if (this._scaledPeriodEnd === void 0 || timeline.length === 0) {
            return false;
          }
          const lastTimelineElement = timeline[timeline.length - 1];
          const lastTime = getIndexSegmentEnd(lastTimelineElement, null, this._scaledPeriodEnd);
          return isPeriodFulfilled(this._index.timescale, lastTime, this._scaledPeriodEnd);
        }
        isInitialized() {
          return true;
        }
        static isTimelineIndexArgument(index) {
          return typeof index.timelineParser === "function" || Array.isArray(index.timeline);
        }
        _refreshTimeline() {
          if (this._index.timeline === null) {
            this._index.timeline = this._getTimeline();
          }
          if (!this._isDynamic) {
            return;
          }
          const firstPosition = this._manifestBoundsCalculator.estimateMinimumBound();
          if (firstPosition == null) {
            return;
          }
          const scaledFirstPosition = toIndexTime(firstPosition, this._index);
          const nbEltsRemoved = clearTimelineFromPosition(this._index.timeline, scaledFirstPosition);
          if (this._index.startNumber !== void 0) {
            this._index.startNumber += nbEltsRemoved;
          }
        }
        static getIndexEnd(timeline, scaledPeriodEnd) {
          if (timeline.length <= 0) {
            return null;
          }
          return Math.min(getIndexSegmentEnd(timeline[timeline.length - 1], null, scaledPeriodEnd), scaledPeriodEnd != null ? scaledPeriodEnd : Infinity);
        }
        _getTimeline() {
          if (this._parseTimeline === null) {
            if (this._index.timeline !== null) {
              return this._index.timeline;
            }
            log_default.error("DASH: Timeline already lazily parsed.");
            return [];
          }
          const newElements = this._parseTimeline();
          this._parseTimeline = null;
          const actualPeriodStart = this._periodStart * this._index.timescale;
          const { MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY } = config_default.getCurrent();
          if (this._unsafelyBaseOnPreviousIndex === null || newElements.length < MIN_DASH_S_ELEMENTS_TO_PARSE_UNSAFELY) {
            return constructTimelineFromElements(newElements, actualPeriodStart);
          }
          let prevTimeline;
          if (this._unsafelyBaseOnPreviousIndex._index.timeline === null) {
            prevTimeline = this._unsafelyBaseOnPreviousIndex._getTimeline();
            this._unsafelyBaseOnPreviousIndex._index.timeline = prevTimeline;
          } else {
            prevTimeline = this._unsafelyBaseOnPreviousIndex._index.timeline;
          }
          this._unsafelyBaseOnPreviousIndex = null;
          return constructTimelineFromPreviousTimeline(newElements, prevTimeline, actualPeriodStart);
        }
      };
    }
  });

  // src/parsers/manifest/dash/common/indexes/timeline/index.ts
  var timeline_default;
  var init_timeline = __esm({
    "src/parsers/manifest/dash/common/indexes/timeline/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_timeline_representation_index();
      timeline_default = TimelineRepresentationIndex;
    }
  });

  // src/parsers/manifest/dash/common/indexes/index.ts
  var init_indexes = __esm({
    "src/parsers/manifest/dash/common/indexes/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_base();
      init_list();
      init_template();
      init_timeline();
    }
  });

  // src/parsers/manifest/dash/common/get_clock_offset.ts
  function getClockOffset(serverClock) {
    const httpOffset = Date.parse(serverClock) - performance.now();
    if (isNaN(httpOffset)) {
      log_default.warn("DASH Parser: Invalid clock received: ", serverClock);
      return void 0;
    }
    return httpOffset;
  }
  var init_get_clock_offset = __esm({
    "src/parsers/manifest/dash/common/get_clock_offset.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
    }
  });

  // src/parsers/manifest/dash/common/get_http_utc-timing_url.ts
  function getHTTPUTCTimingURL(mpdIR) {
    const UTCTimingHTTP = mpdIR.children.utcTimings.filter((utcTiming) => (utcTiming.schemeIdUri === "urn:mpeg:dash:utc:http-iso:2014" || utcTiming.schemeIdUri === "urn:mpeg:dash:utc:http-xsdate:2014") && utcTiming.value !== void 0);
    return UTCTimingHTTP.length > 0 ? UTCTimingHTTP[0].value : void 0;
  }
  var init_get_http_utc_timing_url = __esm({
    "src/parsers/manifest/dash/common/get_http_utc-timing_url.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/utils/get_last_time_from_adaptation.ts
  function getLastPositionFromAdaptation2(adaptation) {
    const { representations } = adaptation;
    let min = null;
    for (let i = 0; i < representations.length; i++) {
      const lastPosition = representations[i].index.getLastPosition();
      if (lastPosition === void 0) {
        return void 0;
      }
      if (lastPosition !== null) {
        min = min == null ? lastPosition : Math.min(min, lastPosition);
      }
    }
    if (min === null) {
      return null;
    }
    return min;
  }
  var init_get_last_time_from_adaptation = __esm({
    "src/parsers/manifest/utils/get_last_time_from_adaptation.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/utils/get_maximum_positions.ts
  function getMaximumPosition(periods) {
    for (let i = periods.length - 1; i >= 0; i--) {
      const periodAdaptations = periods[i].adaptations;
      const firstAudioAdaptationFromPeriod = periodAdaptations.audio === void 0 ? void 0 : periodAdaptations.audio[0];
      const firstVideoAdaptationFromPeriod = periodAdaptations.video === void 0 ? void 0 : periodAdaptations.video[0];
      if (firstAudioAdaptationFromPeriod !== void 0 || firstVideoAdaptationFromPeriod !== void 0) {
        let maximumAudioPosition = null;
        let maximumVideoPosition = null;
        if (firstAudioAdaptationFromPeriod !== void 0) {
          const lastPosition = getLastPositionFromAdaptation2(firstAudioAdaptationFromPeriod);
          if (lastPosition === void 0) {
            return { safe: void 0, unsafe: void 0 };
          }
          maximumAudioPosition = lastPosition;
        }
        if (firstVideoAdaptationFromPeriod !== void 0) {
          const lastPosition = getLastPositionFromAdaptation2(firstVideoAdaptationFromPeriod);
          if (lastPosition === void 0) {
            return { safe: void 0, unsafe: void 0 };
          }
          maximumVideoPosition = lastPosition;
        }
        if (firstAudioAdaptationFromPeriod !== void 0 && maximumAudioPosition === null || firstVideoAdaptationFromPeriod !== void 0 && maximumVideoPosition === null) {
          log_default.info("Parser utils: found Period with no segment. ", "Going to previous one to calculate last position");
          return { safe: void 0, unsafe: void 0 };
        }
        if (maximumVideoPosition !== null) {
          if (maximumAudioPosition !== null) {
            return {
              safe: Math.min(maximumAudioPosition, maximumVideoPosition),
              unsafe: Math.max(maximumAudioPosition, maximumVideoPosition)
            };
          }
          return {
            safe: maximumVideoPosition,
            unsafe: maximumVideoPosition
          };
        }
        if (maximumAudioPosition !== null) {
          return {
            safe: maximumAudioPosition,
            unsafe: maximumAudioPosition
          };
        }
      }
    }
    return { safe: void 0, unsafe: void 0 };
  }
  var init_get_maximum_positions = __esm({
    "src/parsers/manifest/utils/get_maximum_positions.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_get_last_time_from_adaptation();
    }
  });

  // src/parsers/manifest/utils/get_first_time_from_adaptation.ts
  function getFirstPositionFromAdaptation(adaptation) {
    const { representations } = adaptation;
    let max = null;
    for (let i = 0; i < representations.length; i++) {
      const firstPosition = representations[i].index.getFirstPosition();
      if (firstPosition === void 0) {
        return void 0;
      }
      if (firstPosition !== null) {
        max = max == null ? firstPosition : Math.max(max, firstPosition);
      }
    }
    if (max === null) {
      return null;
    }
    return max;
  }
  var init_get_first_time_from_adaptation = __esm({
    "src/parsers/manifest/utils/get_first_time_from_adaptation.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/utils/get_minimum_position.ts
  function getMinimumPosition(periods) {
    for (let i = 0; i <= periods.length - 1; i++) {
      const periodAdaptations = periods[i].adaptations;
      const firstAudioAdaptationFromPeriod = periodAdaptations.audio === void 0 ? void 0 : periodAdaptations.audio[0];
      const firstVideoAdaptationFromPeriod = periodAdaptations.video === void 0 ? void 0 : periodAdaptations.video[0];
      if (firstAudioAdaptationFromPeriod !== void 0 || firstVideoAdaptationFromPeriod !== void 0) {
        let minimumAudioPosition = null;
        let minimumVideoPosition = null;
        if (firstAudioAdaptationFromPeriod !== void 0) {
          const firstPosition = getFirstPositionFromAdaptation(firstAudioAdaptationFromPeriod);
          if (firstPosition === void 0) {
            return void 0;
          }
          minimumAudioPosition = firstPosition;
        }
        if (firstVideoAdaptationFromPeriod !== void 0) {
          const firstPosition = getFirstPositionFromAdaptation(firstVideoAdaptationFromPeriod);
          if (firstPosition === void 0) {
            return void 0;
          }
          minimumVideoPosition = firstPosition;
        }
        if (firstAudioAdaptationFromPeriod !== void 0 && minimumAudioPosition === null || firstVideoAdaptationFromPeriod !== void 0 && minimumVideoPosition === null) {
          log_default.info("Parser utils: found Period with no segment. ", "Going to next one to calculate first position");
          return void 0;
        }
        if (minimumVideoPosition !== null) {
          if (minimumAudioPosition !== null) {
            return Math.max(minimumAudioPosition, minimumVideoPosition);
          }
          return minimumVideoPosition;
        }
        if (minimumAudioPosition !== null) {
          return minimumAudioPosition;
        }
      }
    }
  }
  var init_get_minimum_position = __esm({
    "src/parsers/manifest/utils/get_minimum_position.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_get_first_time_from_adaptation();
    }
  });

  // src/parsers/manifest/dash/common/get_minimum_and_maximum_positions.ts
  function getMinimumAndMaximumPositions(periods) {
    if (periods.length === 0) {
      throw new Error("DASH Parser: no period available for a dynamic content");
    }
    const minimumSafePosition = getMinimumPosition(periods);
    const maxPositions = getMaximumPosition(periods);
    return {
      minimumSafePosition,
      maximumSafePosition: maxPositions.safe,
      maximumUnsafePosition: maxPositions.unsafe
    };
  }
  var init_get_minimum_and_maximum_positions = __esm({
    "src/parsers/manifest/dash/common/get_minimum_and_maximum_positions.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_get_maximum_positions();
      init_get_minimum_position();
    }
  });

  // src/parsers/manifest/dash/common/parse_availability_start_time.ts
  function parseAvailabilityStartTime(rootAttributes, referenceDateTime) {
    if (rootAttributes.type !== "dynamic") {
      return 0;
    }
    if (rootAttributes.availabilityStartTime == null) {
      return referenceDateTime == null ? 0 : referenceDateTime;
    }
    return rootAttributes.availabilityStartTime;
  }
  var init_parse_availability_start_time = __esm({
    "src/parsers/manifest/dash/common/parse_availability_start_time.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/dash/common/flatten_overlapping_periods.ts
  function flattenOverlappingPeriods(parsedPeriods) {
    if (parsedPeriods.length === 0) {
      return [];
    }
    const flattenedPeriods = [parsedPeriods[0]];
    for (let i = 1; i < parsedPeriods.length; i++) {
      const parsedPeriod = parsedPeriods[i];
      let lastFlattenedPeriod = flattenedPeriods[flattenedPeriods.length - 1];
      while (lastFlattenedPeriod.duration === void 0 || lastFlattenedPeriod.start + lastFlattenedPeriod.duration > parsedPeriod.start) {
        log_default.warn("DASH: Updating overlapping Periods.", lastFlattenedPeriod == null ? void 0 : lastFlattenedPeriod.start, parsedPeriod.start);
        lastFlattenedPeriod.duration = parsedPeriod.start - lastFlattenedPeriod.start;
        lastFlattenedPeriod.end = parsedPeriod.start;
        if (lastFlattenedPeriod.duration > 0) {
          break;
        } else {
          flattenedPeriods.pop();
          lastFlattenedPeriod = flattenedPeriods[flattenedPeriods.length - 1];
        }
      }
      flattenedPeriods.push(parsedPeriod);
    }
    return flattenedPeriods;
  }
  var init_flatten_overlapping_periods = __esm({
    "src/parsers/manifest/dash/common/flatten_overlapping_periods.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
    }
  });

  // src/parsers/manifest/dash/common/get_periods_time_infos.ts
  function getPeriodsTimeInformation(periodsIR, manifestInfos) {
    const periodsTimeInformation = [];
    periodsIR.forEach((currentPeriod, i) => {
      let periodStart;
      if (currentPeriod.attributes.start != null) {
        periodStart = currentPeriod.attributes.start;
      } else {
        if (i === 0) {
          periodStart = !manifestInfos.isDynamic || manifestInfos.availabilityStartTime == null ? 0 : manifestInfos.availabilityStartTime;
        } else {
          const prevPeriodInfos = periodsTimeInformation[periodsTimeInformation.length - 1];
          if (prevPeriodInfos != null && prevPeriodInfos.periodEnd != null) {
            periodStart = prevPeriodInfos.periodEnd;
          } else {
            throw new Error("Missing start time when parsing periods.");
          }
        }
      }
      let periodDuration;
      const nextPeriod = periodsIR[i + 1];
      if (currentPeriod.attributes.duration != null) {
        periodDuration = currentPeriod.attributes.duration;
      } else if (i === periodsIR.length - 1) {
        periodDuration = manifestInfos.duration;
      } else if (nextPeriod.attributes.start != null) {
        periodDuration = nextPeriod.attributes.start - periodStart;
      }
      const periodEnd = periodDuration != null ? periodStart + periodDuration : void 0;
      periodsTimeInformation.push({
        periodStart,
        periodDuration,
        periodEnd
      });
    });
    return periodsTimeInformation;
  }
  var init_get_periods_time_infos = __esm({
    "src/parsers/manifest/dash/common/get_periods_time_infos.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/dash/common/manifest_bounds_calculator.ts
  var ManifestBoundsCalculator;
  var init_manifest_bounds_calculator = __esm({
    "src/parsers/manifest/dash/common/manifest_bounds_calculator.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      ManifestBoundsCalculator = class {
        constructor(args) {
          this._isDynamic = args.isDynamic;
          this._timeShiftBufferDepth = !args.isDynamic || args.timeShiftBufferDepth === void 0 ? null : args.timeShiftBufferDepth;
        }
        setLastPosition(lastPosition, positionTime) {
          this._lastPosition = lastPosition;
          this._positionTime = positionTime;
        }
        lastPositionIsKnown() {
          if (this._isDynamic) {
            return this._positionTime != null && this._lastPosition != null;
          }
          return this._lastPosition != null;
        }
        estimateMinimumBound() {
          if (!this._isDynamic || this._timeShiftBufferDepth === null) {
            return 0;
          }
          const maximumBound = this.estimateMaximumBound();
          if (maximumBound === void 0) {
            return void 0;
          }
          const minimumBound = maximumBound - this._timeShiftBufferDepth;
          return minimumBound;
        }
        estimateMaximumBound() {
          if (this._isDynamic && this._positionTime != null && this._lastPosition != null) {
            return Math.max(this._lastPosition - this._positionTime + performance.now() / 1e3, 0);
          }
          return this._lastPosition;
        }
      };
    }
  });

  // src/parsers/manifest/dash/common/attach_trickmode_track.ts
  function attachTrickModeTrack(adaptations, trickModeTracks) {
    for (const track of trickModeTracks) {
      const { adaptation, trickModeAttachedAdaptationIds } = track;
      for (const trickModeAttachedAdaptationId of trickModeAttachedAdaptationIds) {
        for (const adaptationType of SUPPORTED_ADAPTATIONS_TYPE) {
          const adaptationsByType = adaptations[adaptationType];
          if (adaptationsByType !== void 0) {
            for (const adaptationByType of adaptationsByType) {
              if (adaptationByType.id === trickModeAttachedAdaptationId) {
                if (adaptationByType.trickModeTracks === void 0) {
                  adaptationByType.trickModeTracks = [];
                }
                adaptationByType.trickModeTracks.push(adaptation);
              }
            }
          }
        }
      }
    }
  }
  var attach_trickmode_track_default;
  var init_attach_trickmode_track = __esm({
    "src/parsers/manifest/dash/common/attach_trickmode_track.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_manifest2();
      attach_trickmode_track_default = attachTrickModeTrack;
    }
  });

  // src/parsers/manifest/dash/common/infer_adaptation_type.ts
  function inferAdaptationType(representations, adaptationMimeType, adaptationCodecs, adaptationRoles) {
    function fromMimeType(mimeType, roles) {
      const topLevel = mimeType.split("/")[0];
      if (arrayIncludes(SUPPORTED_ADAPTATIONS_TYPE, topLevel)) {
        return topLevel;
      }
      if (mimeType === "application/bif") {
        return "image";
      }
      if (mimeType === "application/ttml+xml") {
        return "text";
      }
      if (mimeType === "application/mp4") {
        if (roles != null) {
          if (arrayFind(roles, (role) => role.schemeIdUri === "urn:mpeg:dash:role:2011" && arrayIncludes(SUPPORTED_TEXT_TYPES, role.value)) != null) {
            return "text";
          }
        }
        return void 0;
      }
    }
    function fromCodecs(codecs) {
      switch (codecs.substring(0, 3)) {
        case "avc":
        case "hev":
        case "hvc":
        case "vp8":
        case "vp9":
        case "av1":
          return "video";
        case "vtt":
          return "text";
        case "bif":
          return "image";
      }
      switch (codecs.substring(0, 4)) {
        case "mp4a":
          return "audio";
        case "wvtt":
        case "stpp":
          return "text";
      }
    }
    if (adaptationMimeType !== null) {
      const typeFromMimeType = fromMimeType(adaptationMimeType, adaptationRoles);
      if (typeFromMimeType !== void 0) {
        return typeFromMimeType;
      }
    }
    if (adaptationCodecs !== null) {
      const typeFromCodecs = fromCodecs(adaptationCodecs);
      if (typeFromCodecs !== void 0) {
        return typeFromCodecs;
      }
    }
    for (let i = 0; i < representations.length; i++) {
      const representation = representations[i];
      const { mimeType, codecs } = representation.attributes;
      if (mimeType !== void 0) {
        const typeFromMimeType = fromMimeType(mimeType, adaptationRoles);
        if (typeFromMimeType !== void 0) {
          return typeFromMimeType;
        }
      }
      if (codecs !== void 0) {
        const typeFromCodecs = fromCodecs(codecs);
        if (typeFromCodecs !== void 0) {
          return typeFromCodecs;
        }
      }
    }
    return void 0;
  }
  var SUPPORTED_TEXT_TYPES;
  var init_infer_adaptation_type = __esm({
    "src/parsers/manifest/dash/common/infer_adaptation_type.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_manifest2();
      init_array_find();
      init_array_includes();
      SUPPORTED_TEXT_TYPES = ["subtitle", "caption"];
    }
  });

  // src/parsers/manifest/dash/common/get_hdr_information.ts
  function getWEBMHDRInformation(codecString) {
    const [cccc, _PP, _LL, DD, _CC, cp, tc, mc] = codecString.split(".");
    if (cccc !== "vp08" && cccc !== "vp09" && cccc !== "vp10") {
      return void 0;
    }
    let colorDepth;
    let eotf;
    let colorSpace;
    if (DD !== void 0 && DD === "10" || DD === "12") {
      colorDepth = parseInt(DD, 10);
    }
    if (tc !== void 0) {
      if (tc === "16") {
        eotf = "pq";
      } else if (tc === "18") {
        eotf = "hlg";
      }
    }
    if (cp !== void 0 && mc !== void 0 && cp === "09" && mc === "09") {
      colorSpace = "rec2020";
    }
    if (colorDepth === void 0 || eotf === void 0) {
      return void 0;
    }
    return { colorDepth, eotf, colorSpace };
  }
  var init_get_hdr_information = __esm({
    "src/parsers/manifest/dash/common/get_hdr_information.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/dash/common/resolve_base_urls.ts
  function resolveBaseURLs(currentBaseURLs, newBaseUrlsIR) {
    if (newBaseUrlsIR.length === 0) {
      return currentBaseURLs;
    }
    const newBaseUrls = newBaseUrlsIR.map((ir) => {
      var _a2, _b2;
      return {
        url: ir.value,
        availabilityTimeOffset: (_a2 = ir.attributes.availabilityTimeOffset) != null ? _a2 : 0,
        availabilityTimeComplete: (_b2 = ir.attributes.availabilityTimeComplete) != null ? _b2 : true
      };
    });
    if (currentBaseURLs.length === 0) {
      return newBaseUrls;
    }
    const result = [];
    for (let i = 0; i < currentBaseURLs.length; i++) {
      const curBaseUrl = currentBaseURLs[i];
      for (let j = 0; j < newBaseUrls.length; j++) {
        const newBaseUrl = newBaseUrls[j];
        const newUrl = resolveURL(curBaseUrl.url, newBaseUrl.url);
        const newAvailabilityTimeOffset = curBaseUrl.availabilityTimeOffset + newBaseUrl.availabilityTimeOffset;
        result.push({
          url: newUrl,
          availabilityTimeOffset: newAvailabilityTimeOffset,
          availabilityTimeComplete: newBaseUrl.availabilityTimeComplete
        });
      }
    }
    return result;
  }
  var init_resolve_base_urls = __esm({
    "src/parsers/manifest/dash/common/resolve_base_urls.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_resolve_url();
    }
  });

  // src/parsers/manifest/dash/common/parse_representation_index.ts
  function parseRepresentationIndex(representation, context2) {
    var _a2, _b2;
    const representationBaseURLs = resolveBaseURLs(context2.baseURLs, representation.children.baseURLs);
    const {
      aggressiveMode,
      availabilityTimeOffset,
      manifestBoundsCalculator,
      isDynamic,
      end: periodEnd,
      start: periodStart,
      receivedTime,
      timeShiftBufferDepth,
      unsafelyBaseOnPreviousRepresentation,
      inbandEventStreams,
      isLastPeriod
    } = context2;
    const isEMSGWhitelisted = (inbandEvent) => {
      if (inbandEventStreams === void 0) {
        return false;
      }
      return inbandEventStreams.some(({ schemeIdUri }) => schemeIdUri === inbandEvent.schemeIdUri);
    };
    const reprIndexCtxt = {
      aggressiveMode,
      availabilityTimeComplete: true,
      availabilityTimeOffset,
      unsafelyBaseOnPreviousRepresentation,
      isEMSGWhitelisted,
      isLastPeriod,
      manifestBoundsCalculator,
      isDynamic,
      periodEnd,
      periodStart,
      receivedTime,
      representationBaseURLs,
      representationBitrate: representation.attributes.bitrate,
      representationId: representation.attributes.id,
      timeShiftBufferDepth
    };
    let representationIndex;
    if (representation.children.segmentBase !== void 0) {
      const { segmentBase } = representation.children;
      representationIndex = new BaseRepresentationIndex(segmentBase, reprIndexCtxt);
    } else if (representation.children.segmentList !== void 0) {
      const { segmentList } = representation.children;
      representationIndex = new ListRepresentationIndex(segmentList, reprIndexCtxt);
    } else if (representation.children.segmentTemplate !== void 0 || context2.parentSegmentTemplates.length > 0) {
      const segmentTemplates = context2.parentSegmentTemplates.slice();
      const childSegmentTemplate = representation.children.segmentTemplate;
      if (childSegmentTemplate !== void 0) {
        segmentTemplates.push(childSegmentTemplate);
      }
      const segmentTemplate = object_assign_default({}, ...segmentTemplates);
      reprIndexCtxt.availabilityTimeComplete = (_a2 = segmentTemplate.availabilityTimeComplete) != null ? _a2 : context2.availabilityTimeComplete;
      reprIndexCtxt.availabilityTimeOffset = ((_b2 = segmentTemplate.availabilityTimeOffset) != null ? _b2 : 0) + context2.availabilityTimeOffset;
      representationIndex = timeline_default.isTimelineIndexArgument(segmentTemplate) ? new timeline_default(segmentTemplate, reprIndexCtxt) : new TemplateRepresentationIndex(segmentTemplate, reprIndexCtxt);
    } else {
      const adaptationChildren = context2.adaptation.children;
      if (adaptationChildren.segmentBase !== void 0) {
        const { segmentBase } = adaptationChildren;
        representationIndex = new BaseRepresentationIndex(segmentBase, reprIndexCtxt);
      } else if (adaptationChildren.segmentList !== void 0) {
        const { segmentList } = adaptationChildren;
        representationIndex = new ListRepresentationIndex(segmentList, reprIndexCtxt);
      } else {
        representationIndex = new TemplateRepresentationIndex({
          duration: Number.MAX_VALUE,
          timescale: 1,
          startNumber: 0,
          media: ""
        }, reprIndexCtxt);
      }
    }
    return representationIndex;
  }
  var init_parse_representation_index = __esm({
    "src/parsers/manifest/dash/common/parse_representation_index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_object_assign();
      init_indexes();
      init_resolve_base_urls();
    }
  });

  // src/parsers/manifest/dash/common/parse_representations.ts
  function combineInbandEventStreams(representation, adaptation) {
    const newSchemeId = [];
    if (representation.children.inbandEventStreams !== void 0) {
      newSchemeId.push(...representation.children.inbandEventStreams);
    }
    if (adaptation.children.inbandEventStreams !== void 0) {
      newSchemeId.push(...adaptation.children.inbandEventStreams);
    }
    if (newSchemeId.length === 0) {
      return void 0;
    }
    return newSchemeId;
  }
  function getHDRInformation({
    adaptationProfiles,
    manifestProfiles,
    codecs
  }) {
    const profiles = (adaptationProfiles != null ? adaptationProfiles : "") + (manifestProfiles != null ? manifestProfiles : "");
    if (codecs === void 0) {
      return void 0;
    }
    if (profiles.indexOf("http://dashif.org/guidelines/dash-if-uhd#hevc-hdr-pq10") !== -1) {
      if (codecs === "hvc1.2.4.L153.B0" || codecs === "hev1.2.4.L153.B0") {
        return {
          colorDepth: 10,
          eotf: "pq",
          colorSpace: "rec2020"
        };
      }
    }
    if (/^vp(08|09|10)/.exec(codecs)) {
      return getWEBMHDRInformation(codecs);
    }
  }
  function parseRepresentations(representationsIR, adaptation, context2) {
    var _a2, _b2, _c, _d;
    const parsedRepresentations = [];
    for (const representation of representationsIR) {
      let representationID = representation.attributes.id != null ? representation.attributes.id : String(representation.attributes.bitrate) + (representation.attributes.height != null ? `-${representation.attributes.height}` : "") + (representation.attributes.width != null ? `-${representation.attributes.width}` : "") + (representation.attributes.mimeType != null ? `-${representation.attributes.mimeType}` : "") + (representation.attributes.codecs != null ? `-${representation.attributes.codecs}` : "");
      while (parsedRepresentations.some((r) => r.id === representationID)) {
        representationID += "-dup";
      }
      const unsafelyBaseOnPreviousRepresentation = (_b2 = (_a2 = context2.unsafelyBaseOnPreviousAdaptation) == null ? void 0 : _a2.getRepresentation(representationID)) != null ? _b2 : null;
      const inbandEventStreams = combineInbandEventStreams(representation, adaptation);
      const availabilityTimeComplete = (_c = representation.attributes.availabilityTimeComplete) != null ? _c : context2.availabilityTimeComplete;
      const availabilityTimeOffset = ((_d = representation.attributes.availabilityTimeOffset) != null ? _d : 0) + context2.availabilityTimeOffset;
      const reprIndexCtxt = object_assign_default({}, context2, {
        availabilityTimeOffset,
        availabilityTimeComplete,
        unsafelyBaseOnPreviousRepresentation,
        adaptation,
        inbandEventStreams
      });
      const representationIndex = parseRepresentationIndex(representation, reprIndexCtxt);
      let representationBitrate;
      if (representation.attributes.bitrate == null) {
        log_default.warn("DASH: No usable bitrate found in the Representation.");
        representationBitrate = 0;
      } else {
        representationBitrate = representation.attributes.bitrate;
      }
      const parsedRepresentation = {
        bitrate: representationBitrate,
        index: representationIndex,
        id: representationID
      };
      let codecs;
      if (representation.attributes.codecs != null) {
        codecs = representation.attributes.codecs;
      } else if (adaptation.attributes.codecs != null) {
        codecs = adaptation.attributes.codecs;
      }
      if (codecs != null) {
        codecs = codecs === "mp4a.40.02" ? "mp4a.40.2" : codecs;
        parsedRepresentation.codecs = codecs;
      }
      if (representation.attributes.frameRate != null) {
        parsedRepresentation.frameRate = representation.attributes.frameRate;
      } else if (adaptation.attributes.frameRate != null) {
        parsedRepresentation.frameRate = adaptation.attributes.frameRate;
      }
      if (representation.attributes.height != null) {
        parsedRepresentation.height = representation.attributes.height;
      } else if (adaptation.attributes.height != null) {
        parsedRepresentation.height = adaptation.attributes.height;
      }
      if (representation.attributes.mimeType != null) {
        parsedRepresentation.mimeType = representation.attributes.mimeType;
      } else if (adaptation.attributes.mimeType != null) {
        parsedRepresentation.mimeType = adaptation.attributes.mimeType;
      }
      if (representation.attributes.width != null) {
        parsedRepresentation.width = representation.attributes.width;
      } else if (adaptation.attributes.width != null) {
        parsedRepresentation.width = adaptation.attributes.width;
      }
      const contentProtectionsIr = adaptation.children.contentProtections !== void 0 ? adaptation.children.contentProtections : [];
      if (representation.children.contentProtections !== void 0) {
        contentProtectionsIr.push(...representation.children.contentProtections);
      }
      if (contentProtectionsIr.length > 0) {
        const contentProtections = contentProtectionsIr.reduce((acc, cp) => {
          let systemId;
          if (cp.attributes.schemeIdUri !== void 0 && cp.attributes.schemeIdUri.substring(0, 9) === "urn:uuid:") {
            systemId = cp.attributes.schemeIdUri.substring(9).replace(/-/g, "").toLowerCase();
          }
          if (cp.attributes.keyId !== void 0 && cp.attributes.keyId.length > 0) {
            const kidObj = { keyId: cp.attributes.keyId, systemId };
            if (acc.keyIds === void 0) {
              acc.keyIds = [kidObj];
            } else {
              acc.keyIds.push(kidObj);
            }
          }
          if (systemId !== void 0) {
            const { cencPssh } = cp.children;
            const values = [];
            for (const data of cencPssh) {
              values.push({ systemId, data });
            }
            if (values.length > 0) {
              const cencInitData = arrayFind(acc.initData, (i) => i.type === "cenc");
              if (cencInitData === void 0) {
                acc.initData.push({ type: "cenc", values });
              } else {
                cencInitData.values.push(...values);
              }
            }
          }
          return acc;
        }, { keyIds: void 0, initData: [] });
        if (Object.keys(contentProtections.initData).length > 0 || contentProtections.keyIds !== void 0 && contentProtections.keyIds.length > 0) {
          parsedRepresentation.contentProtections = contentProtections;
        }
      }
      parsedRepresentation.hdrInfo = getHDRInformation({
        adaptationProfiles: adaptation.attributes.profiles,
        manifestProfiles: context2.manifestProfiles,
        codecs
      });
      parsedRepresentations.push(parsedRepresentation);
    }
    return parsedRepresentations;
  }
  var init_parse_representations = __esm({
    "src/parsers/manifest/dash/common/parse_representations.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_array_find();
      init_object_assign();
      init_get_hdr_information();
      init_parse_representation_index();
    }
  });

  // src/parsers/manifest/dash/common/parse_adaptation_sets.ts
  function isVisuallyImpaired(accessibility) {
    if (accessibility === void 0) {
      return false;
    }
    const isVisuallyImpairedAudioDvbDash = accessibility.schemeIdUri === "urn:tva:metadata:cs:AudioPurposeCS:2007" && accessibility.value === "1";
    const isVisuallyImpairedDashIf = accessibility.schemeIdUri === "urn:mpeg:dash:role:2011" && accessibility.value === "description";
    return isVisuallyImpairedAudioDvbDash || isVisuallyImpairedDashIf;
  }
  function isHardOfHearing(accessibility) {
    if (accessibility === void 0) {
      return false;
    }
    return accessibility.schemeIdUri === "urn:tva:metadata:cs:AudioPurposeCS:2007" && accessibility.value === "2";
  }
  function hasSignLanguageInterpretation(accessibility) {
    if (accessibility === void 0) {
      return false;
    }
    return accessibility.schemeIdUri === "urn:mpeg:dash:role:2011" && accessibility.value === "sign";
  }
  function getAdaptationID(adaptation, infos) {
    if (isNonEmptyString(adaptation.attributes.id)) {
      return adaptation.attributes.id;
    }
    const {
      isClosedCaption,
      isAudioDescription,
      isSignInterpreted,
      isTrickModeTrack,
      type
    } = infos;
    let idString = type;
    if (isNonEmptyString(adaptation.attributes.language)) {
      idString += `-${adaptation.attributes.language}`;
    }
    if (isClosedCaption === true) {
      idString += "-cc";
    }
    if (isAudioDescription === true) {
      idString += "-ad";
    }
    if (isSignInterpreted === true) {
      idString += "-si";
    }
    if (isTrickModeTrack) {
      idString += "-trickMode";
    }
    if (isNonEmptyString(adaptation.attributes.contentType)) {
      idString += `-${adaptation.attributes.contentType}`;
    }
    if (isNonEmptyString(adaptation.attributes.codecs)) {
      idString += `-${adaptation.attributes.codecs}`;
    }
    if (isNonEmptyString(adaptation.attributes.mimeType)) {
      idString += `-${adaptation.attributes.mimeType}`;
    }
    if (isNonEmptyString(adaptation.attributes.frameRate)) {
      idString += `-${adaptation.attributes.frameRate}`;
    }
    return idString;
  }
  function getAdaptationSetSwitchingIDs(adaptation) {
    if (adaptation.children.supplementalProperties != null) {
      const { supplementalProperties } = adaptation.children;
      for (const supplementalProperty of supplementalProperties) {
        if (supplementalProperty.schemeIdUri === "urn:mpeg:dash:adaptation-set-switching:2016" && supplementalProperty.value != null) {
          return supplementalProperty.value.split(",").map((id) => id.trim()).filter((id) => id);
        }
      }
    }
    return [];
  }
  function parseAdaptationSets(adaptationsIR, context2) {
    var _a2, _b2, _c, _d, _e, _f, _g, _h;
    const parsedAdaptations = {
      video: [],
      audio: [],
      text: [],
      image: []
    };
    const trickModeAdaptations = [];
    const adaptationSwitchingInfos = {};
    const parsedAdaptationsIDs = [];
    let lastMainVideoAdapIdx = -1;
    for (let adaptationIdx = 0; adaptationIdx < adaptationsIR.length; adaptationIdx++) {
      const adaptation = adaptationsIR[adaptationIdx];
      const adaptationChildren = adaptation.children;
      const {
        essentialProperties,
        roles
      } = adaptationChildren;
      const isMainAdaptation = Array.isArray(roles) && roles.some((role) => role.value === "main") && roles.some((role) => role.schemeIdUri === "urn:mpeg:dash:role:2011");
      const representationsIR = adaptation.children.representations;
      const availabilityTimeComplete = (_a2 = adaptation.attributes.availabilityTimeComplete) != null ? _a2 : context2.availabilityTimeComplete;
      const availabilityTimeOffset = ((_b2 = adaptation.attributes.availabilityTimeOffset) != null ? _b2 : 0) + context2.availabilityTimeOffset;
      const adaptationMimeType = adaptation.attributes.mimeType;
      const adaptationCodecs = adaptation.attributes.codecs;
      const type = inferAdaptationType(representationsIR, isNonEmptyString(adaptationMimeType) ? adaptationMimeType : null, isNonEmptyString(adaptationCodecs) ? adaptationCodecs : null, adaptationChildren.roles != null ? adaptationChildren.roles : null);
      if (type === void 0) {
        continue;
      }
      const priority = (_c = adaptation.attributes.selectionPriority) != null ? _c : 1;
      const originalID = adaptation.attributes.id;
      let newID;
      const adaptationSetSwitchingIDs = getAdaptationSetSwitchingIDs(adaptation);
      const parentSegmentTemplates = [];
      if (context2.segmentTemplate !== void 0) {
        parentSegmentTemplates.push(context2.segmentTemplate);
      }
      if (adaptation.children.segmentTemplate !== void 0) {
        parentSegmentTemplates.push(adaptation.children.segmentTemplate);
      }
      const reprCtxt = {
        aggressiveMode: context2.aggressiveMode,
        availabilityTimeComplete,
        availabilityTimeOffset,
        baseURLs: resolveBaseURLs(context2.baseURLs, adaptationChildren.baseURLs),
        manifestBoundsCalculator: context2.manifestBoundsCalculator,
        end: context2.end,
        isDynamic: context2.isDynamic,
        isLastPeriod: context2.isLastPeriod,
        manifestProfiles: context2.manifestProfiles,
        parentSegmentTemplates,
        receivedTime: context2.receivedTime,
        start: context2.start,
        timeShiftBufferDepth: context2.timeShiftBufferDepth,
        unsafelyBaseOnPreviousAdaptation: null
      };
      const trickModeProperty = Array.isArray(essentialProperties) ? arrayFind(essentialProperties, (scheme) => {
        return scheme.schemeIdUri === "http://dashif.org/guidelines/trickmode";
      }) : void 0;
      const trickModeAttachedAdaptationIds = (_d = trickModeProperty == null ? void 0 : trickModeProperty.value) == null ? void 0 : _d.split(" ");
      const isTrickModeTrack = trickModeAttachedAdaptationIds !== void 0;
      if (type === "video" && isMainAdaptation && lastMainVideoAdapIdx >= 0 && parsedAdaptations.video.length > lastMainVideoAdapIdx && !isTrickModeTrack) {
        const videoMainAdaptation = parsedAdaptations.video[lastMainVideoAdapIdx][0];
        reprCtxt.unsafelyBaseOnPreviousAdaptation = (_f = (_e = context2.unsafelyBaseOnPreviousPeriod) == null ? void 0 : _e.getAdaptation(videoMainAdaptation.id)) != null ? _f : null;
        const representations = parseRepresentations(representationsIR, adaptation, reprCtxt);
        videoMainAdaptation.representations.push(...representations);
        newID = videoMainAdaptation.id;
      } else {
        const { accessibilities } = adaptationChildren;
        let isDub;
        if (roles !== void 0 && roles.some((role) => role.value === "dub")) {
          isDub = true;
        }
        let isClosedCaption;
        if (type !== "text") {
          isClosedCaption = false;
        } else if (accessibilities !== void 0) {
          isClosedCaption = accessibilities.some(isHardOfHearing);
        }
        let isAudioDescription;
        if (type !== "audio") {
          isAudioDescription = false;
        } else if (accessibilities !== void 0) {
          isAudioDescription = accessibilities.some(isVisuallyImpaired);
        }
        let isSignInterpreted;
        if (type !== "video") {
          isSignInterpreted = false;
        } else if (accessibilities !== void 0) {
          isSignInterpreted = accessibilities.some(hasSignLanguageInterpretation);
        }
        let adaptationID = getAdaptationID(adaptation, {
          isAudioDescription,
          isClosedCaption,
          isSignInterpreted,
          isTrickModeTrack,
          type
        });
        while (arrayIncludes(parsedAdaptationsIDs, adaptationID)) {
          adaptationID += "-dup";
        }
        newID = adaptationID;
        parsedAdaptationsIDs.push(adaptationID);
        reprCtxt.unsafelyBaseOnPreviousAdaptation = (_h = (_g = context2.unsafelyBaseOnPreviousPeriod) == null ? void 0 : _g.getAdaptation(adaptationID)) != null ? _h : null;
        const representations = parseRepresentations(representationsIR, adaptation, reprCtxt);
        const parsedAdaptationSet = {
          id: adaptationID,
          representations,
          type,
          isTrickModeTrack
        };
        if (adaptation.attributes.language != null) {
          parsedAdaptationSet.language = adaptation.attributes.language;
        }
        if (isClosedCaption != null) {
          parsedAdaptationSet.closedCaption = isClosedCaption;
        }
        if (isAudioDescription != null) {
          parsedAdaptationSet.audioDescription = isAudioDescription;
        }
        if (isDub === true) {
          parsedAdaptationSet.isDub = true;
        }
        if (isSignInterpreted === true) {
          parsedAdaptationSet.isSignInterpreted = true;
        }
        if (trickModeAttachedAdaptationIds !== void 0) {
          trickModeAdaptations.push({
            adaptation: parsedAdaptationSet,
            trickModeAttachedAdaptationIds
          });
        } else {
          let mergedIntoIdx = -1;
          for (const id of adaptationSetSwitchingIDs) {
            const switchingInfos = adaptationSwitchingInfos[id];
            if (switchingInfos !== void 0 && switchingInfos.newID !== newID && arrayIncludes(switchingInfos.adaptationSetSwitchingIDs, originalID)) {
              mergedIntoIdx = arrayFindIndex(parsedAdaptations[type], (a) => a[0].id === id);
              const mergedInto = parsedAdaptations[type][mergedIntoIdx];
              if (mergedInto !== void 0 && mergedInto[0].audioDescription === parsedAdaptationSet.audioDescription && mergedInto[0].closedCaption === parsedAdaptationSet.closedCaption && mergedInto[0].language === parsedAdaptationSet.language) {
                log_default.info('DASH Parser: merging "switchable" AdaptationSets', originalID, id);
                mergedInto[0].representations.push(...parsedAdaptationSet.representations);
                if (type === "video" && isMainAdaptation && !mergedInto[1].isMainAdaptation) {
                  lastMainVideoAdapIdx = Math.max(lastMainVideoAdapIdx, mergedIntoIdx);
                }
                mergedInto[1] = {
                  priority: Math.max(priority, mergedInto[1].priority),
                  isMainAdaptation: isMainAdaptation || mergedInto[1].isMainAdaptation,
                  indexInMpd: Math.min(adaptationIdx, mergedInto[1].indexInMpd)
                };
              }
            }
          }
          if (mergedIntoIdx < 0) {
            parsedAdaptations[type].push([
              parsedAdaptationSet,
              {
                priority,
                isMainAdaptation,
                indexInMpd: adaptationIdx
              }
            ]);
            if (type === "video" && isMainAdaptation) {
              lastMainVideoAdapIdx = parsedAdaptations.video.length - 1;
            }
          }
        }
      }
      if (originalID != null && adaptationSwitchingInfos[originalID] == null) {
        adaptationSwitchingInfos[originalID] = {
          newID,
          adaptationSetSwitchingIDs
        };
      }
    }
    const adaptationsPerType = SUPPORTED_ADAPTATIONS_TYPE.reduce((acc, adaptationType) => {
      const adaptationsParsedForType = parsedAdaptations[adaptationType];
      if (adaptationsParsedForType.length > 0) {
        adaptationsParsedForType.sort(compareAdaptations);
        acc[adaptationType] = adaptationsParsedForType.map(([parsedAdaptation]) => parsedAdaptation);
      }
      return acc;
    }, {});
    parsedAdaptations.video.sort(compareAdaptations);
    attach_trickmode_track_default(adaptationsPerType, trickModeAdaptations);
    return adaptationsPerType;
  }
  function compareAdaptations(a, b) {
    const priorityDiff = b[1].priority - a[1].priority;
    if (priorityDiff !== 0) {
      return priorityDiff;
    }
    if (a[1].isMainAdaptation !== b[1].isMainAdaptation) {
      return a[1].isMainAdaptation ? -1 : 1;
    }
    return a[1].indexInMpd - b[1].indexInMpd;
  }
  var init_parse_adaptation_sets = __esm({
    "src/parsers/manifest/dash/common/parse_adaptation_sets.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_manifest2();
      init_array_find();
      init_array_find_index();
      init_array_includes();
      init_is_non_empty_string();
      init_attach_trickmode_track();
      init_infer_adaptation_type();
      init_parse_representations();
      init_resolve_base_urls();
    }
  });

  // src/parsers/manifest/dash/common/parse_periods.ts
  function parsePeriods(periodsIR, context2) {
    var _a2, _b2, _c, _d, _e, _f;
    const parsedPeriods = [];
    const periodsTimeInformation = getPeriodsTimeInformation(periodsIR, context2);
    if (periodsTimeInformation.length !== periodsIR.length) {
      throw new Error("MPD parsing error: the time information are incoherent.");
    }
    const {
      isDynamic,
      timeShiftBufferDepth
    } = context2;
    const manifestBoundsCalculator = new ManifestBoundsCalculator({
      isDynamic,
      timeShiftBufferDepth
    });
    if (!isDynamic && context2.duration != null) {
      manifestBoundsCalculator.setLastPosition(context2.duration);
    }
    for (let i = periodsIR.length - 1; i >= 0; i--) {
      const isLastPeriod = i === periodsIR.length - 1;
      const periodIR = periodsIR[i];
      const xlinkInfos = context2.xlinkInfos.get(periodIR);
      const periodBaseURLs = resolveBaseURLs(context2.baseURLs, periodIR.children.baseURLs);
      const {
        periodStart,
        periodDuration,
        periodEnd
      } = periodsTimeInformation[i];
      let periodID;
      if (periodIR.attributes.id == null) {
        log_default.warn("DASH: No usable id found in the Period. Generating one.");
        periodID = "gen-dash-period-" + generatePeriodID();
      } else {
        periodID = periodIR.attributes.id;
      }
      while (parsedPeriods.some((p) => p.id === periodID)) {
        periodID += "-dup";
      }
      const receivedTime = xlinkInfos !== void 0 ? xlinkInfos.receivedTime : context2.receivedTime;
      const unsafelyBaseOnPreviousPeriod = (_b2 = (_a2 = context2.unsafelyBaseOnPreviousManifest) == null ? void 0 : _a2.getPeriod(periodID)) != null ? _b2 : null;
      const availabilityTimeComplete = (_c = periodIR.attributes.availabilityTimeComplete) != null ? _c : true;
      const availabilityTimeOffset = (_d = periodIR.attributes.availabilityTimeOffset) != null ? _d : 0;
      const { aggressiveMode, manifestProfiles } = context2;
      const { segmentTemplate } = periodIR.children;
      const adapCtxt = {
        aggressiveMode,
        availabilityTimeComplete,
        availabilityTimeOffset,
        baseURLs: periodBaseURLs,
        manifestBoundsCalculator,
        end: periodEnd,
        isDynamic,
        isLastPeriod,
        manifestProfiles,
        receivedTime,
        segmentTemplate,
        start: periodStart,
        timeShiftBufferDepth,
        unsafelyBaseOnPreviousPeriod
      };
      const adaptations = parseAdaptationSets(periodIR.children.adaptations, adapCtxt);
      const namespaces = ((_e = context2.xmlNamespaces) != null ? _e : []).concat((_f = periodIR.attributes.namespaces) != null ? _f : []);
      const streamEvents = generateStreamEvents(periodIR.children.eventStreams, periodStart, namespaces);
      const parsedPeriod = {
        id: periodID,
        start: periodStart,
        end: periodEnd,
        duration: periodDuration,
        adaptations,
        streamEvents
      };
      parsedPeriods.unshift(parsedPeriod);
      if (!manifestBoundsCalculator.lastPositionIsKnown()) {
        const lastPosition = getMaximumLastPosition(adaptations);
        if (!isDynamic) {
          if (typeof lastPosition === "number") {
            manifestBoundsCalculator.setLastPosition(lastPosition);
          }
        } else {
          if (typeof lastPosition === "number") {
            const positionTime = performance.now() / 1e3;
            manifestBoundsCalculator.setLastPosition(lastPosition, positionTime);
          } else {
            const guessedLastPositionFromClock = guessLastPositionFromClock(context2, periodStart);
            if (guessedLastPositionFromClock !== void 0) {
              const [guessedLastPosition, guessedPositionTime] = guessedLastPositionFromClock;
              manifestBoundsCalculator.setLastPosition(guessedLastPosition, guessedPositionTime);
            }
          }
        }
      }
    }
    if (context2.isDynamic && !manifestBoundsCalculator.lastPositionIsKnown()) {
      const guessedLastPositionFromClock = guessLastPositionFromClock(context2, 0);
      if (guessedLastPositionFromClock !== void 0) {
        const [lastPosition, positionTime] = guessedLastPositionFromClock;
        manifestBoundsCalculator.setLastPosition(lastPosition, positionTime);
      }
    }
    return flattenOverlappingPeriods(parsedPeriods);
  }
  function guessLastPositionFromClock(context2, minimumTime) {
    if (context2.clockOffset != null) {
      const lastPosition = context2.clockOffset / 1e3 - context2.availabilityStartTime;
      const positionTime = performance.now() / 1e3;
      const timeInSec = positionTime + lastPosition;
      if (timeInSec >= minimumTime) {
        return [timeInSec, positionTime];
      }
    } else {
      const now = Date.now() / 1e3;
      if (now >= minimumTime) {
        log_default.warn("DASH Parser: no clock synchronization mechanism found. Using the system clock instead.");
        const lastPosition = now - context2.availabilityStartTime;
        const positionTime = performance.now() / 1e3;
        return [lastPosition, positionTime];
      }
    }
    return void 0;
  }
  function getMaximumLastPosition(adaptationsPerType) {
    let maxEncounteredPosition = null;
    let allIndexAreEmpty = true;
    const adaptationsVal = object_values_default(adaptationsPerType).filter((ada) => ada != null);
    const allAdaptations = flatMap(adaptationsVal, (adaptationsForType) => adaptationsForType);
    for (const adaptation of allAdaptations) {
      const representations = adaptation.representations;
      for (const representation of representations) {
        const position = representation.index.getLastPosition();
        if (position !== null) {
          allIndexAreEmpty = false;
          if (typeof position === "number") {
            maxEncounteredPosition = maxEncounteredPosition == null ? position : Math.max(maxEncounteredPosition, position);
          }
        }
      }
    }
    if (maxEncounteredPosition != null) {
      return maxEncounteredPosition;
    } else if (allIndexAreEmpty) {
      return null;
    }
    return void 0;
  }
  function generateStreamEvents(baseIr, periodStart, xmlNamespaces) {
    var _a2, _b2;
    const res = [];
    for (const eventStreamIr of baseIr) {
      const {
        schemeIdUri = "",
        timescale = 1
      } = eventStreamIr.attributes;
      const allNamespaces = xmlNamespaces.concat((_a2 = eventStreamIr.attributes.namespaces) != null ? _a2 : []);
      for (const eventIr of eventStreamIr.children.events) {
        if (eventIr.eventStreamData !== void 0) {
          const start = ((_b2 = eventIr.presentationTime) != null ? _b2 : 0) / timescale + periodStart;
          const end = eventIr.duration === void 0 ? void 0 : start + eventIr.duration / timescale;
          let element;
          if (eventIr.eventStreamData instanceof Element) {
            element = eventIr.eventStreamData;
          } else {
            let parentNode = allNamespaces.reduce((acc, ns) => {
              return acc + "xmlns:" + ns.key + '="' + ns.value + '" ';
            }, "<toremove ");
            parentNode += ">";
            const elementToString = utf8ToStr(new Uint8Array(eventIr.eventStreamData));
            element = new DOMParser().parseFromString(parentNode + elementToString + "</toremove>", "application/xml").documentElement.childNodes[0];
          }
          res.push({
            start,
            end,
            id: eventIr.id,
            data: {
              type: "dash-event-stream",
              value: {
                schemeIdUri,
                timescale,
                element
              }
            }
          });
        }
      }
    }
    return res;
  }
  var generatePeriodID;
  var init_parse_periods = __esm({
    "src/parsers/manifest/dash/common/parse_periods.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_flat_map();
      init_id_generator();
      init_object_values();
      init_string_parsing();
      init_flatten_overlapping_periods();
      init_get_periods_time_infos();
      init_manifest_bounds_calculator();
      init_parse_adaptation_sets();
      init_resolve_base_urls();
      generatePeriodID = idGenerator();
    }
  });

  // src/parsers/manifest/dash/common/parse_mpd.ts
  function parseMpdIr(mpdIR, args, warnings, hasLoadedClock, xlinkInfos = /* @__PURE__ */ new WeakMap()) {
    const {
      children: rootChildren,
      attributes: rootAttributes
    } = mpdIR;
    if (args.externalClockOffset == null) {
      const isDynamic = rootAttributes.type === "dynamic";
      const directTiming = arrayFind(rootChildren.utcTimings, (utcTiming) => {
        return utcTiming.schemeIdUri === "urn:mpeg:dash:utc:direct:2014" && utcTiming.value != null;
      });
      const clockOffsetFromDirectUTCTiming = directTiming != null && directTiming.value != null ? getClockOffset(directTiming.value) : void 0;
      const clockOffset = clockOffsetFromDirectUTCTiming != null && !isNaN(clockOffsetFromDirectUTCTiming) ? clockOffsetFromDirectUTCTiming : void 0;
      if (clockOffset != null && hasLoadedClock !== true) {
        args.externalClockOffset = clockOffset;
      } else if (isDynamic && hasLoadedClock !== true) {
        const UTCTimingHTTPURL = getHTTPUTCTimingURL(mpdIR);
        if (UTCTimingHTTPURL != null && UTCTimingHTTPURL.length > 0) {
          return {
            type: "needs-clock",
            value: {
              url: UTCTimingHTTPURL,
              continue: function continueParsingMPD(responseDataClock) {
                if (!responseDataClock.success) {
                  warnings.push(responseDataClock.error);
                  log_default.warn("DASH Parser: Error on fetching the clock ressource", responseDataClock.error);
                  return parseMpdIr(mpdIR, args, warnings, true);
                }
                args.externalClockOffset = getClockOffset(responseDataClock.data);
                return parseMpdIr(mpdIR, args, warnings, true);
              }
            }
          };
        }
      }
    }
    const xlinksToLoad = [];
    for (let i = 0; i < rootChildren.periods.length; i++) {
      const { xlinkHref, xlinkActuate } = rootChildren.periods[i].attributes;
      if (xlinkHref != null && xlinkActuate === "onLoad") {
        xlinksToLoad.push({ index: i, ressource: xlinkHref });
      }
    }
    if (xlinksToLoad.length === 0) {
      return parseCompleteIntermediateRepresentation(mpdIR, args, warnings, xlinkInfos);
    }
    return {
      type: "needs-xlinks",
      value: {
        xlinksUrls: xlinksToLoad.map(({ ressource }) => ressource),
        continue: function continueParsingMPD(loadedRessources) {
          if (loadedRessources.length !== xlinksToLoad.length) {
            throw new Error("DASH parser: wrong number of loaded ressources.");
          }
          for (let i = loadedRessources.length - 1; i >= 0; i--) {
            const index = xlinksToLoad[i].index;
            const {
              parsed: periodsIR,
              warnings: parsingWarnings,
              receivedTime,
              sendingTime,
              url
            } = loadedRessources[i];
            if (parsingWarnings.length > 0) {
              warnings.push(...parsingWarnings);
            }
            for (const periodIR of periodsIR) {
              xlinkInfos.set(periodIR, { receivedTime, sendingTime, url });
            }
            rootChildren.periods.splice(index, 1, ...periodsIR);
          }
          return parseMpdIr(mpdIR, args, warnings, hasLoadedClock, xlinkInfos);
        }
      }
    };
  }
  function parseCompleteIntermediateRepresentation(mpdIR, args, warnings, xlinkInfos) {
    var _a2, _b2, _c;
    const {
      children: rootChildren,
      attributes: rootAttributes
    } = mpdIR;
    const isDynamic = rootAttributes.type === "dynamic";
    const initialBaseUrl = args.url !== void 0 ? [{
      url: normalizeBaseURL(args.url),
      availabilityTimeOffset: 0,
      availabilityTimeComplete: true
    }] : [];
    const mpdBaseUrls = resolveBaseURLs(initialBaseUrl, rootChildren.baseURLs);
    const availabilityStartTime = parseAvailabilityStartTime(rootAttributes, args.referenceDateTime);
    const timeShiftBufferDepth = rootAttributes.timeShiftBufferDepth;
    const {
      externalClockOffset: clockOffset,
      unsafelyBaseOnPreviousManifest
    } = args;
    const manifestInfos = {
      aggressiveMode: args.aggressiveMode,
      availabilityStartTime,
      baseURLs: mpdBaseUrls,
      clockOffset,
      duration: rootAttributes.duration,
      isDynamic,
      manifestProfiles: mpdIR.attributes.profiles,
      receivedTime: args.manifestReceivedTime,
      timeShiftBufferDepth,
      unsafelyBaseOnPreviousManifest,
      xlinkInfos,
      xmlNamespaces: mpdIR.attributes.namespaces
    };
    const parsedPeriods = parsePeriods(rootChildren.periods, manifestInfos);
    const mediaPresentationDuration = rootAttributes.duration;
    let lifetime;
    let minimumTime;
    let timeshiftDepth = null;
    let maximumTimeData;
    if (rootAttributes.minimumUpdatePeriod !== void 0 && rootAttributes.minimumUpdatePeriod >= 0) {
      lifetime = rootAttributes.minimumUpdatePeriod === 0 ? config_default.getCurrent().DASH_FALLBACK_LIFETIME_WHEN_MINIMUM_UPDATE_PERIOD_EQUAL_0 : rootAttributes.minimumUpdatePeriod;
    }
    const {
      minimumSafePosition,
      maximumSafePosition,
      maximumUnsafePosition
    } = getMinimumAndMaximumPositions(parsedPeriods);
    const now = performance.now();
    if (!isDynamic) {
      minimumTime = minimumSafePosition !== void 0 ? minimumSafePosition : ((_a2 = parsedPeriods[0]) == null ? void 0 : _a2.start) !== void 0 ? parsedPeriods[0].start : 0;
      let finalMaximumSafePosition = mediaPresentationDuration != null ? mediaPresentationDuration : Infinity;
      if (parsedPeriods[parsedPeriods.length - 1] !== void 0) {
        const lastPeriod = parsedPeriods[parsedPeriods.length - 1];
        const lastPeriodEnd = (_b2 = lastPeriod.end) != null ? _b2 : lastPeriod.duration !== void 0 ? lastPeriod.start + lastPeriod.duration : void 0;
        if (lastPeriodEnd !== void 0 && lastPeriodEnd < finalMaximumSafePosition) {
          finalMaximumSafePosition = lastPeriodEnd;
        }
      }
      if (maximumSafePosition !== void 0 && maximumSafePosition < finalMaximumSafePosition) {
        finalMaximumSafePosition = maximumSafePosition;
      }
      maximumTimeData = {
        isLinear: false,
        maximumSafePosition: finalMaximumSafePosition,
        livePosition: void 0,
        time: now
      };
    } else {
      minimumTime = minimumSafePosition;
      timeshiftDepth = timeShiftBufferDepth != null ? timeShiftBufferDepth : null;
      let finalMaximumSafePosition;
      let livePosition;
      if (maximumUnsafePosition !== void 0) {
        livePosition = maximumUnsafePosition;
      }
      if (maximumSafePosition !== void 0) {
        finalMaximumSafePosition = maximumSafePosition;
      } else {
        const ast = availabilityStartTime != null ? availabilityStartTime : 0;
        const { externalClockOffset } = args;
        if (externalClockOffset === void 0) {
          log_default.warn("DASH Parser: use system clock to define maximum position");
          finalMaximumSafePosition = Date.now() / 1e3 - ast;
        } else {
          const serverTime = performance.now() + externalClockOffset;
          finalMaximumSafePosition = serverTime / 1e3 - ast;
        }
      }
      if (livePosition === void 0) {
        livePosition = finalMaximumSafePosition;
      }
      maximumTimeData = {
        isLinear: true,
        maximumSafePosition: finalMaximumSafePosition,
        livePosition,
        time: now
      };
      if (timeshiftDepth !== null && minimumTime !== void 0 && finalMaximumSafePosition - minimumTime > timeshiftDepth) {
        timeshiftDepth = finalMaximumSafePosition - minimumTime;
      }
    }
    const isLastPeriodKnown = !isDynamic || mpdIR.attributes.minimumUpdatePeriod === void 0 && (((_c = parsedPeriods[parsedPeriods.length - 1]) == null ? void 0 : _c.end) !== void 0 || mpdIR.attributes.duration !== void 0);
    const parsedMPD = {
      availabilityStartTime,
      clockOffset: args.externalClockOffset,
      isDynamic,
      isLive: isDynamic,
      isLastPeriodKnown,
      periods: parsedPeriods,
      publishTime: rootAttributes.publishTime,
      suggestedPresentationDelay: rootAttributes.suggestedPresentationDelay,
      transportType: "dash",
      timeBounds: {
        minimumSafePosition: minimumTime,
        timeshiftDepth,
        maximumTimeData
      },
      lifetime,
      uris: args.url == null ? rootChildren.locations : [args.url, ...rootChildren.locations]
    };
    return { type: "done", value: { parsed: parsedMPD, warnings } };
  }
  var init_parse_mpd = __esm({
    "src/parsers/manifest/dash/common/parse_mpd.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_config2();
      init_log();
      init_array_find();
      init_resolve_url();
      init_get_clock_offset();
      init_get_http_utc_timing_url();
      init_get_minimum_and_maximum_positions();
      init_parse_availability_start_time();
      init_parse_periods();
      init_resolve_base_urls();
    }
  });

  // src/parsers/manifest/dash/common/index.ts
  var common_default;
  var init_common = __esm({
    "src/parsers/manifest/dash/common/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_indexes();
      init_parse_mpd();
      common_default = parseMpdIr;
    }
  });

  // src/parsers/manifest/dash/index.ts
  var init_dash = __esm({
    "src/parsers/manifest/dash/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_common();
    }
  });

  // src/transports/utils/get_isobmff_timing_infos.ts
  function getISOBMFFTimingInfos(buffer, isChunked, segment, initTimescale) {
    const baseDecodeTime = getTrackFragmentDecodeTime(buffer);
    if (baseDecodeTime === void 0 || initTimescale === void 0) {
      return null;
    }
    const startTime = segment.timestampOffset !== void 0 ? baseDecodeTime + segment.timestampOffset * initTimescale : baseDecodeTime;
    const trunDuration = getDurationFromTrun(buffer);
    if (isChunked || !segment.complete) {
      if (trunDuration === void 0) {
        log_default.warn("DASH: Chunked segments should indicate a duration through their trun boxes");
      }
      return {
        time: startTime / initTimescale,
        duration: trunDuration !== void 0 ? trunDuration / initTimescale : void 0
      };
    }
    let duration;
    const segmentDuration = segment.duration * initTimescale;
    const maxDecodeTimeDelta = Math.min(initTimescale * 0.9, segmentDuration / 4);
    if (trunDuration !== void 0 && Math.abs(trunDuration - segmentDuration) <= maxDecodeTimeDelta) {
      duration = trunDuration;
    }
    return {
      time: startTime / initTimescale,
      duration: duration !== void 0 ? duration / initTimescale : duration
    };
  }
  var init_get_isobmff_timing_infos = __esm({
    "src/transports/utils/get_isobmff_timing_infos.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_isobmff();
    }
  });

  // src/transports/dash/get_events_out_of_emsgs.ts
  function manifestNeedsToBeRefreshed(emsgs, manifestPublishTime) {
    if (emsgs.length <= 0) {
      return false;
    }
    const len = emsgs.length;
    for (let i = 0; i < len; i++) {
      const manifestRefreshEventFromEMSGs = emsgs[i];
      const currentManifestPublishTime = manifestPublishTime;
      const { messageData } = manifestRefreshEventFromEMSGs;
      const strPublishTime = utf8ToStr(messageData);
      const eventManifestPublishTime = Date.parse(strPublishTime);
      if (currentManifestPublishTime === void 0 || eventManifestPublishTime === void 0 || isNaN(eventManifestPublishTime) || eventManifestPublishTime >= currentManifestPublishTime) {
        return true;
      }
    }
    return false;
  }
  function getEventsOutOfEMSGs(parsedEMSGs, manifestPublishTime) {
    if (parsedEMSGs.length === 0) {
      return void 0;
    }
    const {
      manifestRefreshEventsFromEMSGs,
      EMSGs
    } = parsedEMSGs.reduce((acc, val) => {
      if (val.schemeIdUri === "urn:mpeg:dash:event:2012" && val.value === "1") {
        if (acc.manifestRefreshEventsFromEMSGs === void 0) {
          acc.manifestRefreshEventsFromEMSGs = [];
        }
        acc.manifestRefreshEventsFromEMSGs.push(val);
      } else {
        if (acc.EMSGs === void 0) {
          acc.EMSGs = [];
        }
        acc.EMSGs.push(val);
      }
      return acc;
    }, {
      manifestRefreshEventsFromEMSGs: void 0,
      EMSGs: void 0
    });
    const inbandEvents = EMSGs == null ? void 0 : EMSGs.map((evt) => ({
      type: "emsg",
      value: evt
    }));
    const needsManifestRefresh = manifestPublishTime === void 0 || manifestRefreshEventsFromEMSGs === void 0 ? false : manifestNeedsToBeRefreshed(manifestRefreshEventsFromEMSGs, manifestPublishTime);
    return { inbandEvents, needsManifestRefresh };
  }
  var init_get_events_out_of_emsgs = __esm({
    "src/transports/dash/get_events_out_of_emsgs.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_string_parsing();
    }
  });

  // src/transports/dash/segment_parser.ts
  function generateAudioVideoSegmentParser({ __priv_patchLastSegmentInSidx }) {
    return function audioVideoSegmentParser(loadedSegment, content, initTimescale) {
      var _a2;
      const { period, adaptation, representation, segment, manifest } = content;
      const { data, isChunked } = loadedSegment;
      const appendWindow = [period.start, period.end];
      if (data === null) {
        if (segment.isInit) {
          return {
            segmentType: "init",
            initializationData: null,
            initializationDataSize: 0,
            protectionDataUpdate: false,
            initTimescale: void 0
          };
        }
        return {
          segmentType: "media",
          chunkData: null,
          chunkSize: 0,
          chunkInfos: null,
          chunkOffset: 0,
          protectionDataUpdate: false,
          appendWindow
        };
      }
      const chunkData = data instanceof Uint8Array ? data : new Uint8Array(data);
      const containerType = inferSegmentContainer(adaptation.type, representation);
      const seemsToBeMP4 = containerType === "mp4" || containerType === void 0;
      let protectionDataUpdate = false;
      if (seemsToBeMP4) {
        const psshInfo = takePSSHOut(chunkData);
        if (psshInfo.length > 0) {
          protectionDataUpdate = representation._addProtectionData("cenc", psshInfo);
        }
      }
      if (!segment.isInit) {
        const chunkInfos = seemsToBeMP4 ? getISOBMFFTimingInfos(chunkData, isChunked, segment, initTimescale) : null;
        const chunkOffset = (_a2 = segment.timestampOffset) != null ? _a2 : 0;
        if (seemsToBeMP4) {
          const parsedEMSGs = parseEmsgBoxes(chunkData);
          if (parsedEMSGs !== void 0) {
            const whitelistedEMSGs = parsedEMSGs.filter((evt) => {
              if (segment.privateInfos === void 0 || segment.privateInfos.isEMSGWhitelisted === void 0) {
                return false;
              }
              return segment.privateInfos.isEMSGWhitelisted(evt);
            });
            const events = getEventsOutOfEMSGs(whitelistedEMSGs, manifest.publishTime);
            if (events !== void 0) {
              const { needsManifestRefresh, inbandEvents } = events;
              return {
                segmentType: "media",
                chunkData,
                chunkSize: chunkData.length,
                chunkInfos,
                chunkOffset,
                appendWindow,
                inbandEvents,
                protectionDataUpdate,
                needsManifestRefresh
              };
            }
          }
        }
        return {
          segmentType: "media",
          chunkData,
          chunkSize: chunkData.length,
          chunkInfos,
          chunkOffset,
          protectionDataUpdate,
          appendWindow
        };
      }
      const { indexRange } = segment;
      let nextSegments = null;
      if (containerType === "webm") {
        nextSegments = getSegmentsFromCues(chunkData, 0);
      } else if (seemsToBeMP4) {
        nextSegments = getSegmentsFromSidx(chunkData, Array.isArray(indexRange) ? indexRange[0] : 0);
        if (__priv_patchLastSegmentInSidx === true && nextSegments !== null && nextSegments.length > 0) {
          const lastSegment = nextSegments[nextSegments.length - 1];
          if (Array.isArray(lastSegment.range)) {
            lastSegment.range[1] = Infinity;
          }
        }
      }
      if (representation.index instanceof BaseRepresentationIndex && nextSegments !== null && nextSegments.length > 0) {
        representation.index.initializeIndex(nextSegments);
      }
      const timescale = seemsToBeMP4 ? getMDHDTimescale(chunkData) : containerType === "webm" ? getTimeCodeScale(chunkData, 0) : void 0;
      const parsedTimescale = isNullOrUndefined(timescale) ? void 0 : timescale;
      return {
        segmentType: "init",
        initializationData: chunkData,
        initializationDataSize: chunkData.length,
        protectionDataUpdate,
        initTimescale: parsedTimescale
      };
    };
  }
  var init_segment_parser = __esm({
    "src/transports/dash/segment_parser.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_utils();
      init_matroska();
      init_dash();
      init_is_null_or_undefined();
      init_get_isobmff_timing_infos();
      init_infer_segment_container();
      init_get_events_out_of_emsgs();
    }
  });

  // src/transports/dash/text_loader.ts
  function generateTextTrackLoader({
    lowLatencyMode,
    checkMediaSegmentIntegrity
  }) {
    return checkMediaSegmentIntegrity !== true ? textTrackLoader : addSegmentIntegrityChecks(textTrackLoader);
    function textTrackLoader(url, content, cancelSignal, callbacks) {
      const { adaptation, representation, segment } = content;
      const { range } = segment;
      if (url === null) {
        return Promise.resolve({
          resultType: "segment-created",
          resultData: null
        });
      }
      if (segment.isInit) {
        return initSegmentLoader(url, segment, cancelSignal, callbacks);
      }
      const containerType = inferSegmentContainer(adaptation.type, representation);
      const seemsToBeMP4 = containerType === "mp4" || containerType === void 0;
      if (lowLatencyMode && seemsToBeMP4) {
        if (fetchIsSupported()) {
          return lowLatencySegmentLoader(url, content, callbacks, cancelSignal);
        } else {
          warnOnce("DASH: Your browser does not have the fetch API. You will have a higher chance of rebuffering when playing close to the live edge");
        }
      }
      if (seemsToBeMP4) {
        return request_default({
          url,
          responseType: "arraybuffer",
          headers: Array.isArray(range) ? { Range: byteRange(range) } : null,
          onProgress: callbacks.onProgress,
          cancelSignal
        }).then((data) => ({
          resultType: "segment-loaded",
          resultData: data
        }));
      }
      return request_default({
        url,
        responseType: "text",
        headers: Array.isArray(range) ? { Range: byteRange(range) } : null,
        onProgress: callbacks.onProgress,
        cancelSignal
      }).then((data) => ({
        resultType: "segment-loaded",
        resultData: data
      }));
    }
  }
  var init_text_loader = __esm({
    "src/transports/dash/text_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_request();
      init_warn_once();
      init_byte_range();
      init_infer_segment_container();
      init_add_segment_integrity_checks_to_loader();
      init_init_segment_loader();
      init_low_latency_segment_loader();
    }
  });

  // src/transports/utils/parse_text_track.ts
  function extractTextTrackFromISOBMFF(chunkBytes) {
    const mdat = getMDAT(chunkBytes);
    return mdat === null ? "" : utf8ToStr(mdat);
  }
  function getISOBMFFTextTrackFormat(representation) {
    const codec = representation.codec;
    if (codec === void 0) {
      throw new Error("Cannot parse subtitles: unknown format");
    }
    switch (codec.toLowerCase()) {
      case "stpp":
      case "stpp.ttml.im1t":
        return "ttml";
      case "wvtt":
        return "vtt";
    }
    throw new Error(`The codec used for the subtitles "${codec}" is not managed yet.`);
  }
  function getPlainTextTrackFormat(representation) {
    const { mimeType = "" } = representation;
    switch (representation.mimeType) {
      case "application/ttml+xml":
        return "ttml";
      case "application/x-sami":
      case "application/smil":
        return "sami";
      case "text/vtt":
        return "vtt";
    }
    const { codec = "" } = representation;
    const codeLC = codec.toLowerCase();
    if (codeLC === "srt") {
      return "srt";
    }
    throw new Error(`could not find a text-track parser for the type ${mimeType}`);
  }
  function getISOBMFFEmbeddedTextTrackData({
    segment,
    adaptation,
    representation
  }, chunkBytes, chunkInfos, isChunked) {
    if (segment.isInit) {
      return null;
    }
    let startTime;
    let endTime;
    if (chunkInfos === null) {
      if (!isChunked) {
        log_default.warn("Transport: Unavailable time data for current text track.");
      } else {
        startTime = segment.time;
        endTime = segment.end;
      }
    } else {
      startTime = chunkInfos.time;
      if (chunkInfos.duration !== void 0) {
        endTime = startTime + chunkInfos.duration;
      } else if (!isChunked && segment.complete) {
        endTime = startTime + segment.duration;
      }
    }
    const type = getISOBMFFTextTrackFormat(representation);
    const textData = extractTextTrackFromISOBMFF(chunkBytes);
    return {
      data: textData,
      type,
      language: adaptation.language,
      start: startTime,
      end: endTime
    };
  }
  function getPlainTextTrackData({
    segment,
    adaptation,
    representation
  }, textTrackData, isChunked) {
    if (segment.isInit) {
      return null;
    }
    let start;
    let end;
    if (isChunked) {
      log_default.warn("Transport: Unavailable time data for current text track.");
    } else {
      start = segment.time;
      if (segment.complete) {
        end = segment.time + segment.duration;
      }
    }
    const type = getPlainTextTrackFormat(representation);
    return {
      data: textTrackData,
      type,
      language: adaptation.language,
      start,
      end
    };
  }
  var init_parse_text_track = __esm({
    "src/transports/utils/parse_text_track.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_isobmff();
      init_string_parsing();
    }
  });

  // src/transports/dash/text_parser.ts
  function parseISOBMFFEmbeddedTextTrack(data, isChunked, content, initTimescale, __priv_patchLastSegmentInSidx) {
    const { period, representation, segment } = content;
    const { isInit, indexRange } = segment;
    const chunkBytes = typeof data === "string" ? strToUtf8(data) : data instanceof Uint8Array ? data : new Uint8Array(data);
    if (isInit) {
      const sidxSegments = getSegmentsFromSidx(chunkBytes, Array.isArray(indexRange) ? indexRange[0] : 0);
      if (__priv_patchLastSegmentInSidx === true && sidxSegments !== null && sidxSegments.length > 0) {
        const lastSegment = sidxSegments[sidxSegments.length - 1];
        if (Array.isArray(lastSegment.range)) {
          lastSegment.range[1] = Infinity;
        }
      }
      const mdhdTimescale = getMDHDTimescale(chunkBytes);
      if (representation.index instanceof BaseRepresentationIndex && sidxSegments !== null && sidxSegments.length > 0) {
        representation.index.initializeIndex(sidxSegments);
      }
      return {
        segmentType: "init",
        initializationData: null,
        initializationDataSize: 0,
        protectionDataUpdate: false,
        initTimescale: mdhdTimescale
      };
    }
    const chunkInfos = getISOBMFFTimingInfos(chunkBytes, isChunked, segment, initTimescale);
    const chunkData = getISOBMFFEmbeddedTextTrackData(content, chunkBytes, chunkInfos, isChunked);
    const chunkOffset = takeFirstSet(segment.timestampOffset, 0);
    return {
      segmentType: "media",
      chunkData,
      chunkSize: chunkBytes.length,
      chunkInfos,
      chunkOffset,
      protectionDataUpdate: false,
      appendWindow: [period.start, period.end]
    };
  }
  function parsePlainTextTrack(data, isChunked, content) {
    const { period, segment } = content;
    const { timestampOffset = 0 } = segment;
    if (segment.isInit) {
      return {
        segmentType: "init",
        initializationData: null,
        initializationDataSize: 0,
        protectionDataUpdate: false,
        initTimescale: void 0
      };
    }
    let textTrackData;
    let chunkSize;
    if (typeof data !== "string") {
      const bytesData = data instanceof Uint8Array ? data : new Uint8Array(data);
      textTrackData = utf8ToStr(bytesData);
      chunkSize = bytesData.length;
    } else {
      textTrackData = data;
    }
    const chunkData = getPlainTextTrackData(content, textTrackData, isChunked);
    return {
      segmentType: "media",
      chunkData,
      chunkSize,
      chunkInfos: null,
      chunkOffset: timestampOffset,
      protectionDataUpdate: false,
      appendWindow: [period.start, period.end]
    };
  }
  function generateTextTrackParser({ __priv_patchLastSegmentInSidx }) {
    return function textTrackParser2(loadedSegment, content, initTimescale) {
      var _a2;
      const { period, adaptation, representation, segment } = content;
      const { data, isChunked } = loadedSegment;
      if (data === null) {
        return segment.isInit ? {
          segmentType: "init",
          initializationData: null,
          initializationDataSize: 0,
          protectionDataUpdate: false,
          initTimescale: void 0
        } : {
          segmentType: "media",
          chunkData: null,
          chunkSize: 0,
          chunkInfos: null,
          chunkOffset: (_a2 = segment.timestampOffset) != null ? _a2 : 0,
          protectionDataUpdate: false,
          appendWindow: [period.start, period.end]
        };
      }
      const containerType = inferSegmentContainer(adaptation.type, representation);
      if (containerType === "webm") {
        throw new Error("Text tracks with a WEBM container are not yet handled.");
      } else if (containerType === "mp4") {
        return parseISOBMFFEmbeddedTextTrack(data, isChunked, content, initTimescale, __priv_patchLastSegmentInSidx);
      } else {
        return parsePlainTextTrack(data, isChunked, content);
      }
    };
  }
  var init_text_parser = __esm({
    "src/transports/dash/text_parser.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_dash();
      init_string_parsing();
      init_take_first_set();
      init_get_isobmff_timing_infos();
      init_infer_segment_container();
      init_parse_text_track();
    }
  });

  // src/transports/dash/pipelines.ts
  function pipelines_default2(options) {
    const manifestLoader = generateManifestLoader({ customManifestLoader: options.manifestLoader }, mightUseDashWasmFeature() ? "text" : "arraybuffer");
    const manifestParser = generateManifestParser(options);
    const segmentLoader2 = generateSegmentLoader2(options);
    const audioVideoSegmentParser = generateAudioVideoSegmentParser(options);
    const textTrackLoader = generateTextTrackLoader(options);
    const textTrackParser2 = generateTextTrackParser(options);
    return {
      manifest: {
        loadManifest: manifestLoader,
        parseManifest: manifestParser
      },
      audio: {
        loadSegment: segmentLoader2,
        parseSegment: audioVideoSegmentParser
      },
      video: {
        loadSegment: segmentLoader2,
        parseSegment: audioVideoSegmentParser
      },
      text: {
        loadSegment: textTrackLoader,
        parseSegment: textTrackParser2
      },
      image: {
        loadSegment: imageLoader,
        parseSegment: imageParser
      }
    };
  }
  function mightUseDashWasmFeature() {
    return features_default.dashParsers.wasm !== null && (features_default.dashParsers.wasm.status === "initialized" || features_default.dashParsers.wasm.status === "initializing");
  }
  var init_pipelines2 = __esm({
    "src/transports/dash/pipelines.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_features();
      init_generate_manifest_loader();
      init_image_pipelines();
      init_manifest_parser();
      init_segment_loader2();
      init_segment_parser();
      init_text_loader();
      init_text_parser();
    }
  });

  // src/transports/dash/index.ts
  var dash_exports = {};
  __export(dash_exports, {
    default: () => dash_default
  });
  var dash_default;
  var init_dash2 = __esm({
    "src/transports/dash/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_pipelines2();
      dash_default = pipelines_default2;
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/utils.ts
  function parseBoolean2(val, displayName) {
    if (val === "true") {
      return [true, null];
    }
    if (val === "false") {
      return [false, null];
    }
    const error = new MPDError(`\`${displayName}\` property is not a boolean value but "${val}"`);
    return [false, error];
  }
  function parseMPDInteger(val, displayName) {
    const toInt = parseInt(val, 10);
    if (isNaN(toInt)) {
      const error = new MPDError(`\`${displayName}\` property is not an integer value but "${val}"`);
      return [null, error];
    }
    return [toInt, null];
  }
  function parseMPDFloat(val, displayName) {
    if (val === "INF") {
      return [Infinity, null];
    }
    const toInt = parseFloat(val);
    if (isNaN(toInt)) {
      const error = new MPDError(`\`${displayName}\` property is not an integer value but "${val}"`);
      return [null, error];
    }
    return [toInt, null];
  }
  function parseIntOrBoolean(val, displayName) {
    if (val === "true") {
      return [true, null];
    }
    if (val === "false") {
      return [false, null];
    }
    const toInt = parseInt(val, 10);
    if (isNaN(toInt)) {
      const error = new MPDError(`\`${displayName}\` property is not a boolean nor an integer but "${val}"`);
      return [null, error];
    }
    return [toInt, null];
  }
  function parseDateTime(val, displayName) {
    const parsed = Date.parse(val);
    if (isNaN(parsed)) {
      const error = new MPDError(`\`${displayName}\` is in an invalid date format: "${val}"`);
      return [null, error];
    }
    return [new Date(Date.parse(val)).getTime() / 1e3, null];
  }
  function parseDuration(val, displayName) {
    if (!isNonEmptyString(val)) {
      const error = new MPDError(`\`${displayName}\` property is empty`);
      return [0, error];
    }
    const match = iso8601Duration.exec(val);
    if (match === null) {
      const error = new MPDError(`\`${displayName}\` property has an unrecognized format "${val}"`);
      return [null, error];
    }
    const duration = parseFloat(isNonEmptyString(match[2]) ? match[2] : "0") * 365 * 24 * 60 * 60 + parseFloat(isNonEmptyString(match[4]) ? match[4] : "0") * 30 * 24 * 60 * 60 + parseFloat(isNonEmptyString(match[6]) ? match[6] : "0") * 24 * 60 * 60 + parseFloat(isNonEmptyString(match[8]) ? match[8] : "0") * 60 * 60 + parseFloat(isNonEmptyString(match[10]) ? match[10] : "0") * 60 + parseFloat(isNonEmptyString(match[12]) ? match[12] : "0");
    return [duration, null];
  }
  function parseByteRange(val, displayName) {
    const match = rangeRe.exec(val);
    if (match === null) {
      const error = new MPDError(`\`${displayName}\` property has an unrecognized format "${val}"`);
      return [null, error];
    } else {
      return [[+match[1], +match[2]], null];
    }
  }
  function parseBase64(val, displayName) {
    try {
      return [base64ToBytes(val), null];
    } catch (_) {
      const error = new MPDError(`\`${displayName}\` is not a valid base64 string: "${val}"`);
      return [null, error];
    }
  }
  function parseScheme(root) {
    let schemeIdUri;
    let value;
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.name) {
        case "schemeIdUri":
          schemeIdUri = attribute.value;
          break;
        case "value":
          value = attribute.value;
          break;
      }
    }
    return {
      schemeIdUri,
      value
    };
  }
  function ValueParser(dest, warnings) {
    return function(val, { asKey, parser, dashName }) {
      const [parsingResult, parsingError] = parser(val, dashName);
      if (parsingError !== null) {
        log_default.warn(parsingError.message);
        warnings.push(parsingError);
      }
      if (parsingResult !== null) {
        dest[asKey] = parsingResult;
      }
    };
  }
  var iso8601Duration, rangeRe, MPDError;
  var init_utils5 = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/utils.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_base64();
      init_is_non_empty_string();
      iso8601Duration = /^P(([\d.]*)Y)?(([\d.]*)M)?(([\d.]*)D)?T?(([\d.]*)H)?(([\d.]*)M)?(([\d.]*)S)?/;
      rangeRe = /([0-9]+)-([0-9]+)/;
      MPDError = class extends Error {
        constructor(message) {
          super();
          Object.setPrototypeOf(this, MPDError.prototype);
          this.name = "MPDError";
          this.message = message;
        }
      };
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/BaseURL.ts
  function parseBaseURL(root) {
    const attributes = {};
    const value = root.textContent;
    const warnings = [];
    const parseValue = ValueParser(attributes, warnings);
    if (value === null || value.length === 0) {
      return [void 0, warnings];
    }
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.name) {
        case "availabilityTimeOffset":
          parseValue(attribute.value, {
            asKey: "availabilityTimeOffset",
            parser: parseMPDFloat,
            dashName: "availabilityTimeOffset"
          });
          break;
        case "availabilityTimeComplete":
          parseValue(attribute.value, {
            asKey: "availabilityTimeComplete",
            parser: parseBoolean2,
            dashName: "availabilityTimeComplete"
          });
          break;
      }
    }
    return [
      { value, attributes },
      warnings
    ];
  }
  var init_BaseURL = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/BaseURL.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/ContentComponent.ts
  function parseContentComponent(root) {
    const ret = {};
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.name) {
        case "id":
          ret.id = attribute.value;
          break;
        case "lang":
          ret.language = attribute.value;
          break;
        case "contentType":
          ret.contentType = attribute.value;
          break;
        case "par":
          ret.par = attribute.value;
          break;
      }
    }
    return ret;
  }
  var init_ContentComponent = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/ContentComponent.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/ContentProtection.ts
  function parseContentProtectionChildren(contentProtectionChildren) {
    const warnings = [];
    const cencPssh = [];
    for (let i = 0; i < contentProtectionChildren.length; i++) {
      if (contentProtectionChildren[i].nodeType === Node.ELEMENT_NODE) {
        const currentElement = contentProtectionChildren[i];
        if (currentElement.nodeName === "cenc:pssh") {
          const content = currentElement.textContent;
          if (content !== null && content.length > 0) {
            const [
              toUint8Array2,
              error
            ] = parseBase64(content, "cenc:pssh");
            if (error !== null) {
              log_default.warn(error.message);
              warnings.push(error);
            }
            if (toUint8Array2 !== null) {
              cencPssh.push(toUint8Array2);
            }
          }
        }
      }
    }
    return [{ cencPssh }, warnings];
  }
  function parseContentProtectionAttributes(root) {
    const ret = {};
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.name) {
        case "schemeIdUri":
          ret.schemeIdUri = attribute.value;
          break;
        case "value":
          ret.value = attribute.value;
          break;
        case "cenc:default_KID":
          ret.keyId = hexToBytes(attribute.value.replace(/-/g, ""));
      }
    }
    return ret;
  }
  function parseContentProtection(contentProtectionElement) {
    const [children, childrenWarnings] = parseContentProtectionChildren(contentProtectionElement.childNodes);
    const attributes = parseContentProtectionAttributes(contentProtectionElement);
    return [{ children, attributes }, childrenWarnings];
  }
  var init_ContentProtection = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/ContentProtection.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_string_parsing();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/Initialization.ts
  function parseInitialization(root) {
    const parsedInitialization = {};
    const warnings = [];
    const parseValue = ValueParser(parsedInitialization, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.name) {
        case "range":
          parseValue(attribute.value, {
            asKey: "range",
            parser: parseByteRange,
            dashName: "range"
          });
          break;
        case "sourceURL":
          parsedInitialization.media = attribute.value;
          break;
      }
    }
    return [parsedInitialization, warnings];
  }
  var init_Initialization = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/Initialization.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/SegmentBase.ts
  function parseSegmentBase(root) {
    const attributes = {};
    let warnings = [];
    const parseValue = ValueParser(attributes, warnings);
    const segmentBaseChildren = root.childNodes;
    for (let i = 0; i < segmentBaseChildren.length; i++) {
      if (segmentBaseChildren[i].nodeType === Node.ELEMENT_NODE) {
        const currentNode = segmentBaseChildren[i];
        if (currentNode.nodeName === "Initialization") {
          const [initialization, initializationWarnings] = parseInitialization(currentNode);
          attributes.initialization = initialization;
          warnings = warnings.concat(initializationWarnings);
        }
      }
    }
    for (let i = 0; i < root.attributes.length; i++) {
      const attr = root.attributes[i];
      switch (attr.name) {
        case "timescale":
          parseValue(attr.value, {
            asKey: "timescale",
            parser: parseMPDInteger,
            dashName: "timescale"
          });
          break;
        case "presentationTimeOffset":
          parseValue(attr.value, {
            asKey: "presentationTimeOffset",
            parser: parseMPDFloat,
            dashName: "presentationTimeOffset"
          });
          break;
        case "indexRange":
          parseValue(attr.value, {
            asKey: "indexRange",
            parser: parseByteRange,
            dashName: "indexRange"
          });
          break;
        case "indexRangeExact":
          parseValue(attr.value, {
            asKey: "indexRangeExact",
            parser: parseBoolean2,
            dashName: "indexRangeExact"
          });
          break;
        case "availabilityTimeOffset":
          parseValue(attr.value, {
            asKey: "availabilityTimeOffset",
            parser: parseMPDFloat,
            dashName: "availabilityTimeOffset"
          });
          break;
        case "availabilityTimeComplete":
          parseValue(attr.value, {
            asKey: "availabilityTimeComplete",
            parser: parseBoolean2,
            dashName: "availabilityTimeComplete"
          });
          break;
        case "duration":
          parseValue(attr.value, {
            asKey: "duration",
            parser: parseMPDInteger,
            dashName: "duration"
          });
          break;
        case "startNumber":
          parseValue(attr.value, {
            asKey: "startNumber",
            parser: parseMPDInteger,
            dashName: "startNumber"
          });
          break;
      }
    }
    return [attributes, warnings];
  }
  var init_SegmentBase = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/SegmentBase.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_Initialization();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/SegmentURL.ts
  function parseSegmentURL(root) {
    const parsedSegmentURL = {};
    const warnings = [];
    const parseValue = ValueParser(parsedSegmentURL, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.name) {
        case "media":
          parsedSegmentURL.media = attribute.value;
          break;
        case "indexRange":
          parseValue(attribute.value, {
            asKey: "indexRange",
            parser: parseByteRange,
            dashName: "indexRange"
          });
          break;
        case "index":
          parsedSegmentURL.index = attribute.value;
          break;
        case "mediaRange":
          parseValue(attribute.value, {
            asKey: "mediaRange",
            parser: parseByteRange,
            dashName: "mediaRange"
          });
          break;
      }
    }
    return [parsedSegmentURL, warnings];
  }
  var init_SegmentURL = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/SegmentURL.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/SegmentList.ts
  function parseSegmentList(root) {
    const [base, baseWarnings] = parseSegmentBase(root);
    let warnings = baseWarnings;
    const list = [];
    const segmentListChildren = root.childNodes;
    for (let i = 0; i < segmentListChildren.length; i++) {
      if (segmentListChildren[i].nodeType === Node.ELEMENT_NODE) {
        const currentNode = segmentListChildren[i];
        if (currentNode.nodeName === "SegmentURL") {
          const [segmentURL, segmentURLWarnings] = parseSegmentURL(currentNode);
          list.push(segmentURL);
          warnings = warnings.concat(segmentURLWarnings);
        }
      }
    }
    const ret = object_assign_default(base, { list });
    return [ret, warnings];
  }
  var init_SegmentList = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/SegmentList.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_object_assign();
      init_SegmentBase();
      init_SegmentURL();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/SegmentTimeline.ts
  function createSegmentTimelineParser(root) {
    let result = null;
    return function() {
      if (result === null) {
        const elements = root.getElementsByTagName("S");
        result = elements;
        return elements;
      }
      return result;
    };
  }
  var init_SegmentTimeline = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/SegmentTimeline.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/SegmentTemplate.ts
  function parseSegmentTemplate(root) {
    const [base, segmentBaseWarnings] = parseSegmentBase(root);
    const warnings = segmentBaseWarnings;
    let timelineParser;
    for (let i = 0; i < root.childNodes.length; i++) {
      if (root.childNodes[i].nodeType === Node.ELEMENT_NODE) {
        const currentNode = root.childNodes[i];
        if (currentNode.nodeName === "SegmentTimeline") {
          timelineParser = createSegmentTimelineParser(currentNode);
        }
      }
    }
    const ret = object_assign_default({}, base, { duration: base.duration, timelineParser });
    const parseValue = ValueParser(ret, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.nodeName) {
        case "initialization":
          if (ret.initialization == null) {
            ret.initialization = { media: attribute.value };
          }
          break;
        case "index":
          ret.index = attribute.value;
          break;
        case "availabilityTimeOffset":
          parseValue(attribute.value, {
            asKey: "availabilityTimeOffset",
            parser: parseMPDFloat,
            dashName: "availabilityTimeOffset"
          });
          break;
        case "availabilityTimeComplete":
          parseValue(attribute.value, {
            asKey: "availabilityTimeComplete",
            parser: parseBoolean2,
            dashName: "availabilityTimeComplete"
          });
          break;
        case "media":
          ret.media = attribute.value;
          break;
        case "bitstreamSwitching":
          parseValue(attribute.value, {
            asKey: "bitstreamSwitching",
            parser: parseBoolean2,
            dashName: "bitstreamSwitching"
          });
          break;
      }
    }
    return [ret, warnings];
  }
  var init_SegmentTemplate = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/SegmentTemplate.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_object_assign();
      init_SegmentBase();
      init_SegmentTimeline();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/Representation.ts
  function parseRepresentationChildren(representationChildren) {
    const children = {
      baseURLs: []
    };
    const contentProtections = [];
    let warnings = [];
    for (let i = 0; i < representationChildren.length; i++) {
      if (representationChildren[i].nodeType === Node.ELEMENT_NODE) {
        const currentElement = representationChildren[i];
        switch (currentElement.nodeName) {
          case "BaseURL":
            const [baseURLObj, baseURLWarnings] = parseBaseURL(currentElement);
            if (baseURLObj !== void 0) {
              children.baseURLs.push(baseURLObj);
            }
            warnings = warnings.concat(baseURLWarnings);
            break;
          case "InbandEventStream":
            if (children.inbandEventStreams === void 0) {
              children.inbandEventStreams = [];
            }
            children.inbandEventStreams.push(parseScheme(currentElement));
            break;
          case "SegmentBase":
            const [segmentBase, segmentBaseWarnings] = parseSegmentBase(currentElement);
            children.segmentBase = segmentBase;
            if (segmentBaseWarnings.length > 0) {
              warnings = warnings.concat(segmentBaseWarnings);
            }
            break;
          case "SegmentList":
            const [segmentList, segmentListWarnings] = parseSegmentList(currentElement);
            warnings = warnings.concat(segmentListWarnings);
            children.segmentList = segmentList;
            break;
          case "SegmentTemplate":
            const [
              segmentTemplate,
              segmentTemplateWarnings
            ] = parseSegmentTemplate(currentElement);
            warnings = warnings.concat(segmentTemplateWarnings);
            children.segmentTemplate = segmentTemplate;
            break;
          case "ContentProtection":
            const [
              contentProtection,
              contentProtectionWarnings
            ] = parseContentProtection(currentElement);
            if (contentProtectionWarnings.length > 0) {
              warnings = warnings.concat(contentProtectionWarnings);
            }
            if (contentProtection !== void 0) {
              contentProtections.push(contentProtection);
            }
            break;
        }
      }
    }
    if (contentProtections.length > 0) {
      children.contentProtections = contentProtections;
    }
    return [children, warnings];
  }
  function parseRepresentationAttributes(representationElement) {
    const attributes = {};
    const warnings = [];
    const parseValue = ValueParser(attributes, warnings);
    for (let i = 0; i < representationElement.attributes.length; i++) {
      const attr = representationElement.attributes[i];
      switch (attr.name) {
        case "audioSamplingRate":
          attributes.audioSamplingRate = attr.value;
          break;
        case "bandwidth":
          parseValue(attr.value, {
            asKey: "bitrate",
            parser: parseMPDInteger,
            dashName: "bandwidth"
          });
          break;
        case "codecs":
          attributes.codecs = attr.value;
          break;
        case "codingDependency":
          parseValue(attr.value, {
            asKey: "codingDependency",
            parser: parseBoolean2,
            dashName: "codingDependency"
          });
          break;
        case "frameRate":
          attributes.frameRate = attr.value;
          break;
        case "height":
          parseValue(attr.value, {
            asKey: "height",
            parser: parseMPDInteger,
            dashName: "height"
          });
          break;
        case "id":
          attributes.id = attr.value;
          break;
        case "maxPlayoutRate":
          parseValue(attr.value, {
            asKey: "maxPlayoutRate",
            parser: parseMPDFloat,
            dashName: "maxPlayoutRate"
          });
          break;
        case "maximumSAPPeriod":
          parseValue(attr.value, {
            asKey: "maximumSAPPeriod",
            parser: parseMPDFloat,
            dashName: "maximumSAPPeriod"
          });
          break;
        case "mimeType":
          attributes.mimeType = attr.value;
          break;
        case "profiles":
          attributes.profiles = attr.value;
          break;
        case "qualityRanking":
          parseValue(attr.value, {
            asKey: "qualityRanking",
            parser: parseMPDInteger,
            dashName: "qualityRanking"
          });
          break;
        case "segmentProfiles":
          attributes.segmentProfiles = attr.value;
          break;
        case "width":
          parseValue(attr.value, {
            asKey: "width",
            parser: parseMPDInteger,
            dashName: "width"
          });
          break;
        case "availabilityTimeOffset":
          parseValue(attr.value, {
            asKey: "availabilityTimeOffset",
            parser: parseMPDFloat,
            dashName: "availabilityTimeOffset"
          });
          break;
        case "availabilityTimeComplete":
          parseValue(attr.value, {
            asKey: "availabilityTimeComplete",
            parser: parseBoolean2,
            dashName: "availabilityTimeComplete"
          });
          break;
      }
    }
    if (attributes.bitrate === void 0) {
      warnings.push(new MPDError("No bitrate found on a Representation"));
    }
    return [attributes, warnings];
  }
  function createRepresentationIntermediateRepresentation(representationElement) {
    const [children, childrenWarnings] = parseRepresentationChildren(representationElement.childNodes);
    const [attributes, attrsWarnings] = parseRepresentationAttributes(representationElement);
    const warnings = childrenWarnings.concat(attrsWarnings);
    return [{ children, attributes }, warnings];
  }
  var init_Representation = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/Representation.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_BaseURL();
      init_ContentProtection();
      init_SegmentBase();
      init_SegmentList();
      init_SegmentTemplate();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/AdaptationSet.ts
  function parseAdaptationSetChildren(adaptationSetChildren) {
    const children = {
      baseURLs: [],
      representations: []
    };
    const contentProtections = [];
    let warnings = [];
    for (let i = 0; i < adaptationSetChildren.length; i++) {
      if (adaptationSetChildren[i].nodeType === Node.ELEMENT_NODE) {
        const currentElement = adaptationSetChildren[i];
        switch (currentElement.nodeName) {
          case "Accessibility":
            if (children.accessibilities === void 0) {
              children.accessibilities = [parseScheme(currentElement)];
            } else {
              children.accessibilities.push(parseScheme(currentElement));
            }
            break;
          case "BaseURL":
            const [baseURLObj, baseURLWarnings] = parseBaseURL(currentElement);
            if (baseURLObj !== void 0) {
              children.baseURLs.push(baseURLObj);
            }
            if (baseURLWarnings.length > 0) {
              warnings = warnings.concat(baseURLWarnings);
            }
            break;
          case "ContentComponent":
            children.contentComponent = parseContentComponent(currentElement);
            break;
          case "EssentialProperty":
            if (children.essentialProperties == null) {
              children.essentialProperties = [parseScheme(currentElement)];
            } else {
              children.essentialProperties.push(parseScheme(currentElement));
            }
            break;
          case "InbandEventStream":
            if (children.inbandEventStreams === void 0) {
              children.inbandEventStreams = [];
            }
            children.inbandEventStreams.push(parseScheme(currentElement));
            break;
          case "Representation":
            const [representation, representationWarnings] = createRepresentationIntermediateRepresentation(currentElement);
            children.representations.push(representation);
            if (representationWarnings.length > 0) {
              warnings = warnings.concat(representationWarnings);
            }
            break;
          case "Role":
            if (children.roles == null) {
              children.roles = [parseScheme(currentElement)];
            } else {
              children.roles.push(parseScheme(currentElement));
            }
            break;
          case "SupplementalProperty":
            if (children.supplementalProperties == null) {
              children.supplementalProperties = [parseScheme(currentElement)];
            } else {
              children.supplementalProperties.push(parseScheme(currentElement));
            }
            break;
          case "SegmentBase":
            const [segmentBase, segmentBaseWarnings] = parseSegmentBase(currentElement);
            children.segmentBase = segmentBase;
            if (segmentBaseWarnings.length > 0) {
              warnings = warnings.concat(segmentBaseWarnings);
            }
            break;
          case "SegmentList":
            const [segmentList, segmentListWarnings] = parseSegmentList(currentElement);
            children.segmentList = segmentList;
            if (segmentListWarnings.length > 0) {
              warnings = warnings.concat(segmentListWarnings);
            }
            break;
          case "SegmentTemplate":
            const [segmentTemplate, segmentTemplateWarnings] = parseSegmentTemplate(currentElement);
            children.segmentTemplate = segmentTemplate;
            if (segmentTemplateWarnings.length > 0) {
              warnings = warnings.concat(segmentTemplateWarnings);
            }
            break;
          case "ContentProtection":
            const [
              contentProtection,
              contentProtectionWarnings
            ] = parseContentProtection(currentElement);
            if (contentProtectionWarnings.length > 0) {
              warnings = warnings.concat(contentProtectionWarnings);
            }
            if (contentProtection !== void 0) {
              contentProtections.push(contentProtection);
            }
            break;
        }
      }
    }
    if (contentProtections.length > 0) {
      children.contentProtections = contentProtections;
    }
    return [children, warnings];
  }
  function parseAdaptationSetAttributes(root) {
    const parsedAdaptation = {};
    const warnings = [];
    const parseValue = ValueParser(parsedAdaptation, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.name) {
        case "id":
          parsedAdaptation.id = attribute.value;
          break;
        case "group":
          parseValue(attribute.value, {
            asKey: "group",
            parser: parseMPDInteger,
            dashName: "group"
          });
          break;
        case "lang":
          parsedAdaptation.language = attribute.value;
          break;
        case "contentType":
          parsedAdaptation.contentType = attribute.value;
          break;
        case "par":
          parsedAdaptation.par = attribute.value;
          break;
        case "minBandwidth":
          parseValue(attribute.value, {
            asKey: "minBitrate",
            parser: parseMPDInteger,
            dashName: "minBandwidth"
          });
          break;
        case "maxBandwidth":
          parseValue(attribute.value, {
            asKey: "maxBitrate",
            parser: parseMPDInteger,
            dashName: "maxBandwidth"
          });
          break;
        case "minWidth":
          parseValue(attribute.value, {
            asKey: "minWidth",
            parser: parseMPDInteger,
            dashName: "minWidth"
          });
          break;
        case "maxWidth":
          parseValue(attribute.value, {
            asKey: "maxWidth",
            parser: parseMPDInteger,
            dashName: "maxWidth"
          });
          break;
        case "minHeight":
          parseValue(attribute.value, {
            asKey: "minHeight",
            parser: parseMPDInteger,
            dashName: "minHeight"
          });
          break;
        case "maxHeight":
          parseValue(attribute.value, {
            asKey: "maxHeight",
            parser: parseMPDInteger,
            dashName: "maxHeight"
          });
          break;
        case "minFrameRate":
          {
            parsedAdaptation.minFrameRate = attribute.value;
          }
          break;
        case "maxFrameRate":
          parsedAdaptation.maxFrameRate = attribute.value;
          break;
        case "selectionPriority":
          parseValue(attribute.value, {
            asKey: "selectionPriority",
            parser: parseMPDInteger,
            dashName: "selectionPriority"
          });
          break;
        case "segmentAlignment":
          parseValue(attribute.value, {
            asKey: "segmentAlignment",
            parser: parseIntOrBoolean,
            dashName: "segmentAlignment"
          });
          break;
        case "subsegmentAlignment":
          parseValue(attribute.value, {
            asKey: "subsegmentAlignment",
            parser: parseIntOrBoolean,
            dashName: "subsegmentAlignment"
          });
          break;
        case "bitstreamSwitching":
          parseValue(attribute.value, {
            asKey: "bitstreamSwitching",
            parser: parseBoolean2,
            dashName: "bitstreamSwitching"
          });
          break;
        case "audioSamplingRate":
          parsedAdaptation.audioSamplingRate = attribute.value;
          break;
        case "codecs":
          parsedAdaptation.codecs = attribute.value;
          break;
        case "codingDependency":
          parseValue(attribute.value, {
            asKey: "codingDependency",
            parser: parseBoolean2,
            dashName: "codingDependency"
          });
          break;
        case "frameRate":
          parsedAdaptation.frameRate = attribute.value;
          break;
        case "height":
          parseValue(attribute.value, {
            asKey: "height",
            parser: parseMPDInteger,
            dashName: "height"
          });
          break;
        case "maxPlayoutRate":
          parseValue(attribute.value, {
            asKey: "maxPlayoutRate",
            parser: parseMPDFloat,
            dashName: "maxPlayoutRate"
          });
          break;
        case "maximumSAPPeriod":
          parseValue(attribute.value, {
            asKey: "maximumSAPPeriod",
            parser: parseMPDFloat,
            dashName: "maximumSAPPeriod"
          });
          break;
        case "mimeType":
          parsedAdaptation.mimeType = attribute.value;
          break;
        case "profiles":
          parsedAdaptation.profiles = attribute.value;
          break;
        case "segmentProfiles":
          parsedAdaptation.segmentProfiles = attribute.value;
          break;
        case "width":
          parseValue(attribute.value, {
            asKey: "width",
            parser: parseMPDInteger,
            dashName: "width"
          });
          break;
        case "availabilityTimeOffset":
          parseValue(attribute.value, {
            asKey: "availabilityTimeOffset",
            parser: parseMPDFloat,
            dashName: "availabilityTimeOffset"
          });
          break;
        case "availabilityTimeComplete":
          parseValue(attribute.value, {
            asKey: "availabilityTimeComplete",
            parser: parseBoolean2,
            dashName: "availabilityTimeComplete"
          });
          break;
      }
    }
    return [parsedAdaptation, warnings];
  }
  function createAdaptationSetIntermediateRepresentation(adaptationSetElement) {
    const childNodes = adaptationSetElement.childNodes;
    const [children, childrenWarnings] = parseAdaptationSetChildren(childNodes);
    const [attributes, attrsWarnings] = parseAdaptationSetAttributes(adaptationSetElement);
    const warnings = childrenWarnings.concat(attrsWarnings);
    return [{ children, attributes }, warnings];
  }
  var init_AdaptationSet = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/AdaptationSet.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_BaseURL();
      init_ContentComponent();
      init_ContentProtection();
      init_Representation();
      init_SegmentBase();
      init_SegmentList();
      init_SegmentTemplate();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/EventStream.ts
  function parseEventStream(element) {
    const eventStreamIR = {
      children: { events: [] },
      attributes: {}
    };
    let warnings = [];
    const parseValue = ValueParser(eventStreamIR.attributes, warnings);
    for (let i = 0; i < element.attributes.length; i++) {
      const attr = element.attributes[i];
      switch (attr.name) {
        case "schemeIdUri":
          eventStreamIR.attributes.schemeIdUri = attr.value;
          break;
        case "timescale":
          parseValue(attr.value, {
            asKey: "timescale",
            parser: parseMPDInteger,
            dashName: "timescale"
          });
          break;
        case "value":
          eventStreamIR.attributes.value = attr.value;
          break;
      }
    }
    for (let i = 0; i < element.childNodes.length; i++) {
      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {
        const currentElement = element.childNodes[i];
        switch (currentElement.nodeName) {
          case "Event":
            const [event, eventWarnings] = parseEvent(currentElement);
            eventStreamIR.children.events.push(event);
            if (eventWarnings.length > 0) {
              warnings = warnings.concat(eventWarnings);
            }
            break;
        }
      }
    }
    return [eventStreamIR, warnings];
  }
  function parseEvent(element) {
    const eventIR = {
      eventStreamData: element
    };
    const warnings = [];
    const parseValue = ValueParser(eventIR, warnings);
    for (let i = 0; i < element.attributes.length; i++) {
      const attr = element.attributes[i];
      switch (attr.name) {
        case "presentationTime":
          parseValue(attr.value, {
            asKey: "presentationTime",
            parser: parseMPDInteger,
            dashName: "presentationTime"
          });
          break;
        case "duration":
          parseValue(attr.value, {
            asKey: "duration",
            parser: parseMPDInteger,
            dashName: "duration"
          });
          break;
        case "id":
          eventIR.id = attr.value;
          break;
      }
    }
    return [eventIR, warnings];
  }
  var init_EventStream = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/EventStream.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/Period.ts
  function parsePeriodChildren(periodChildren) {
    const baseURLs = [];
    const adaptations = [];
    let segmentTemplate;
    let warnings = [];
    const eventStreams = [];
    for (let i = 0; i < periodChildren.length; i++) {
      if (periodChildren[i].nodeType === Node.ELEMENT_NODE) {
        const currentElement = periodChildren[i];
        switch (currentElement.nodeName) {
          case "BaseURL":
            const [baseURLObj, baseURLWarnings] = parseBaseURL(currentElement);
            if (baseURLObj !== void 0) {
              baseURLs.push(baseURLObj);
            }
            warnings = warnings.concat(baseURLWarnings);
            break;
          case "AdaptationSet":
            const [adaptation, adaptationWarnings] = createAdaptationSetIntermediateRepresentation(currentElement);
            adaptations.push(adaptation);
            warnings = warnings.concat(adaptationWarnings);
            break;
          case "EventStream":
            const [eventStream, eventStreamWarnings] = parseEventStream(currentElement);
            eventStreams.push(eventStream);
            warnings = warnings.concat(eventStreamWarnings);
            break;
          case "SegmentTemplate":
            const [parsedSegmentTemplate, segmentTemplateWarnings] = parseSegmentTemplate(currentElement);
            segmentTemplate = parsedSegmentTemplate;
            if (segmentTemplateWarnings.length > 0) {
              warnings = warnings.concat(segmentTemplateWarnings);
            }
            break;
        }
      }
    }
    return [{ baseURLs, adaptations, eventStreams, segmentTemplate }, warnings];
  }
  function parsePeriodAttributes(periodElement) {
    const res = {};
    const warnings = [];
    const parseValue = ValueParser(res, warnings);
    for (let i = 0; i < periodElement.attributes.length; i++) {
      const attr = periodElement.attributes[i];
      switch (attr.name) {
        case "id":
          res.id = attr.value;
          break;
        case "start":
          parseValue(attr.value, {
            asKey: "start",
            parser: parseDuration,
            dashName: "start"
          });
          break;
        case "duration":
          parseValue(attr.value, {
            asKey: "duration",
            parser: parseDuration,
            dashName: "duration"
          });
          break;
        case "bitstreamSwitching":
          parseValue(attr.value, {
            asKey: "bitstreamSwitching",
            parser: parseBoolean2,
            dashName: "bitstreamSwitching"
          });
          break;
        case "xlink:href":
          res.xlinkHref = attr.value;
          break;
        case "xlink:actuate":
          res.xlinkActuate = attr.value;
          break;
      }
    }
    return [res, warnings];
  }
  function createPeriodIntermediateRepresentation(periodElement) {
    const [children, childrenWarnings] = parsePeriodChildren(periodElement.childNodes);
    const [attributes, attrsWarnings] = parsePeriodAttributes(periodElement);
    const warnings = childrenWarnings.concat(attrsWarnings);
    return [{ children, attributes }, warnings];
  }
  var init_Period = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/Period.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_AdaptationSet();
      init_BaseURL();
      init_EventStream();
      init_SegmentTemplate();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/node_parsers/MPD.ts
  function parseMPDChildren(mpdChildren) {
    const baseURLs = [];
    const locations = [];
    const periods = [];
    const utcTimings = [];
    let warnings = [];
    for (let i = 0; i < mpdChildren.length; i++) {
      if (mpdChildren[i].nodeType === Node.ELEMENT_NODE) {
        const currentNode = mpdChildren[i];
        switch (currentNode.nodeName) {
          case "BaseURL":
            const [
              baseURLObj,
              baseURLWarnings
            ] = parseBaseURL(currentNode);
            if (baseURLObj !== void 0) {
              baseURLs.push(baseURLObj);
            }
            warnings = warnings.concat(baseURLWarnings);
            break;
          case "Location":
            locations.push(currentNode.textContent === null ? "" : currentNode.textContent);
            break;
          case "Period":
            const [period, periodWarnings] = createPeriodIntermediateRepresentation(currentNode);
            periods.push(period);
            warnings = warnings.concat(periodWarnings);
            break;
          case "UTCTiming":
            const utcTiming = parseScheme(currentNode);
            utcTimings.push(utcTiming);
            break;
        }
      }
    }
    return [
      { baseURLs, locations, periods, utcTimings },
      warnings
    ];
  }
  function parseMPDAttributes(root) {
    const res = {};
    const warnings = [];
    const parseValue = ValueParser(res, warnings);
    for (let i = 0; i < root.attributes.length; i++) {
      const attribute = root.attributes[i];
      switch (attribute.name) {
        case "id":
          res.id = attribute.value;
          break;
        case "profiles":
          res.profiles = attribute.value;
          break;
        case "type":
          res.type = attribute.value;
          break;
        case "availabilityStartTime":
          parseValue(attribute.value, {
            asKey: "availabilityStartTime",
            parser: parseDateTime,
            dashName: "availabilityStartTime"
          });
          break;
        case "availabilityEndTime":
          parseValue(attribute.value, {
            asKey: "availabilityEndTime",
            parser: parseDateTime,
            dashName: "availabilityEndTime"
          });
          break;
        case "publishTime":
          parseValue(attribute.value, {
            asKey: "publishTime",
            parser: parseDateTime,
            dashName: "publishTime"
          });
          break;
        case "mediaPresentationDuration":
          parseValue(attribute.value, {
            asKey: "duration",
            parser: parseDuration,
            dashName: "mediaPresentationDuration"
          });
          break;
        case "minimumUpdatePeriod":
          parseValue(attribute.value, {
            asKey: "minimumUpdatePeriod",
            parser: parseDuration,
            dashName: "minimumUpdatePeriod"
          });
          break;
        case "minBufferTime":
          parseValue(attribute.value, {
            asKey: "minBufferTime",
            parser: parseDuration,
            dashName: "minBufferTime"
          });
          break;
        case "timeShiftBufferDepth":
          parseValue(attribute.value, {
            asKey: "timeShiftBufferDepth",
            parser: parseDuration,
            dashName: "timeShiftBufferDepth"
          });
          break;
        case "suggestedPresentationDelay":
          parseValue(attribute.value, {
            asKey: "suggestedPresentationDelay",
            parser: parseDuration,
            dashName: "suggestedPresentationDelay"
          });
          break;
        case "maxSegmentDuration":
          parseValue(attribute.value, {
            asKey: "maxSegmentDuration",
            parser: parseDuration,
            dashName: "maxSegmentDuration"
          });
          break;
        case "maxSubsegmentDuration":
          parseValue(attribute.value, {
            asKey: "maxSubsegmentDuration",
            parser: parseDuration,
            dashName: "maxSubsegmentDuration"
          });
          break;
      }
    }
    return [res, warnings];
  }
  function createMPDIntermediateRepresentation(root) {
    const [children, childrenWarnings] = parseMPDChildren(root.childNodes);
    const [attributes, attrsWarnings] = parseMPDAttributes(root);
    const warnings = childrenWarnings.concat(attrsWarnings);
    return [{ children, attributes }, warnings];
  }
  var init_MPD = __esm({
    "src/parsers/manifest/dash/js-parser/node_parsers/MPD.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_BaseURL();
      init_Period();
      init_utils5();
    }
  });

  // src/parsers/manifest/dash/js-parser/parse_from_document.ts
  function parseFromDocument(document2, args) {
    const root = document2.documentElement;
    if (isNullOrUndefined(root) || root.nodeName !== "MPD") {
      throw new Error("DASH Parser: document root should be MPD");
    }
    const [
      mpdIR,
      warnings
    ] = createMPDIntermediateRepresentation(root);
    const ret = common_default(mpdIR, args, warnings);
    return processReturn(ret);
    function processReturn(initialRes) {
      if (initialRes.type === "done") {
        return initialRes;
      } else if (initialRes.type === "needs-clock") {
        return {
          type: "needs-resources",
          value: {
            urls: [initialRes.value.url],
            format: "string",
            continue(loadedClock) {
              if (loadedClock.length !== 1) {
                throw new Error("DASH parser: wrong number of loaded ressources.");
              }
              const newRet = initialRes.value.continue(loadedClock[0].responseData);
              return processReturn(newRet);
            }
          }
        };
      } else if (initialRes.type === "needs-xlinks") {
        return {
          type: "needs-resources",
          value: {
            urls: initialRes.value.xlinksUrls,
            format: "string",
            continue(loadedXlinks) {
              const resourceInfos = [];
              for (let i = 0; i < loadedXlinks.length; i++) {
                const {
                  responseData: xlinkResp,
                  receivedTime,
                  sendingTime,
                  url
                } = loadedXlinks[i];
                if (!xlinkResp.success) {
                  throw xlinkResp.error;
                }
                const wrappedData = "<root>" + xlinkResp.data + "</root>";
                const dataAsXML = new DOMParser().parseFromString(wrappedData, "text/xml");
                if (dataAsXML == null || dataAsXML.children.length === 0) {
                  throw new Error("DASH parser: Invalid external ressources");
                }
                const periods = dataAsXML.children[0].children;
                const periodsIR = [];
                const periodsIRWarnings = [];
                for (let j = 0; j < periods.length; j++) {
                  if (periods[j].nodeType === Node.ELEMENT_NODE) {
                    const [periodIR, periodWarnings] = createPeriodIntermediateRepresentation(periods[j]);
                    periodsIRWarnings.push(...periodWarnings);
                    periodsIR.push(periodIR);
                  }
                }
                resourceInfos.push({
                  url,
                  receivedTime,
                  sendingTime,
                  parsed: periodsIR,
                  warnings: periodsIRWarnings
                });
              }
              const newRet = initialRes.value.continue(resourceInfos);
              return processReturn(newRet);
            }
          }
        };
      } else {
        assertUnreachable(initialRes);
      }
    }
  }
  var init_parse_from_document = __esm({
    "src/parsers/manifest/dash/js-parser/parse_from_document.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_assert_unreachable();
      init_is_null_or_undefined();
      init_common();
      init_MPD();
      init_Period();
    }
  });

  // src/parsers/manifest/dash/js-parser/index.ts
  var js_parser_exports = {};
  __export(js_parser_exports, {
    default: () => js_parser_default
  });
  var js_parser_default;
  var init_js_parser = __esm({
    "src/parsers/manifest/dash/js-parser/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_from_document();
      js_parser_default = parseFromDocument;
    }
  });

  // src/parsers/manifest/local/representation_index.ts
  var LocalRepresentationIndex;
  var init_representation_index3 = __esm({
    "src/parsers/manifest/local/representation_index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      LocalRepresentationIndex = class {
        constructor(index, representationId, isFinished) {
          this._index = index;
          this._representationId = representationId;
          this._isFinished = isFinished;
        }
        getInitSegment() {
          return {
            id: `${this._representationId}_init`,
            isInit: true,
            time: 0,
            end: 0,
            duration: 0,
            timescale: 1,
            mediaURLs: null,
            complete: true,
            privateInfos: {
              localManifestInitSegment: { load: this._index.loadInitSegment }
            }
          };
        }
        getSegments(up, duration) {
          const startTime = up;
          const endTime = up + duration;
          const wantedSegments = [];
          for (let i = 0; i < this._index.segments.length; i++) {
            const segment = this._index.segments[i];
            const segmentStart = segment.time;
            if (endTime <= segmentStart) {
              break;
            }
            const segmentEnd = segment.time + segment.duration;
            if (segmentEnd > startTime) {
              wantedSegments.push(segment);
            }
          }
          return wantedSegments.map((wantedSegment) => {
            return {
              id: `${this._representationId}_${wantedSegment.time}`,
              isInit: false,
              time: wantedSegment.time,
              end: wantedSegment.time + wantedSegment.duration,
              duration: wantedSegment.duration,
              timescale: 1,
              timestampOffset: wantedSegment.timestampOffset,
              mediaURLs: null,
              complete: true,
              privateInfos: {
                localManifestSegment: {
                  load: this._index.loadSegment,
                  segment: wantedSegment
                }
              }
            };
          });
        }
        getFirstPosition() {
          if (this._index.segments.length === 0) {
            return void 0;
          }
          const firstSegment = this._index.segments[0];
          return firstSegment.time;
        }
        getLastPosition() {
          if (this._index.segments.length === 0) {
            return void 0;
          }
          const lastSegment = this._index.segments[this._index.segments.length - 1];
          return lastSegment.time;
        }
        shouldRefresh() {
          return false;
        }
        isSegmentStillAvailable() {
          return true;
        }
        isFinished() {
          return this._isFinished;
        }
        canBeOutOfSyncError() {
          return false;
        }
        checkDiscontinuity() {
          return null;
        }
        areSegmentsChronologicallyGenerated() {
          return false;
        }
        isInitialized() {
          return true;
        }
        _replace(newIndex) {
          this._isFinished = newIndex._isFinished;
          this._index.segments = newIndex._index.segments;
          this._index.loadSegment = newIndex._index.loadSegment;
          this._index.loadInitSegment = newIndex._index.loadInitSegment;
        }
        _update(newIndex) {
          this._isFinished = newIndex._isFinished;
          const newSegments = newIndex._index.segments;
          if (newSegments.length <= 0) {
            return;
          }
          const insertNewIndexAtPosition = (pos) => {
            this._index.segments.splice(pos, oldIndexLength - pos, ...newSegments);
            this._index.loadSegment = newIndex._index.loadSegment;
            this._index.loadInitSegment = newIndex._index.loadInitSegment;
          };
          const oldIndexLength = this._index.segments.length;
          const newIndexStart = newSegments[0].time;
          for (let i = oldIndexLength - 1; i >= 0; i--) {
            const currSegment = this._index.segments[i];
            if (currSegment.time === newIndexStart) {
              return insertNewIndexAtPosition(i);
            } else if (currSegment.time < newIndexStart) {
              if (currSegment.time + currSegment.duration > newIndexStart) {
                log_default.warn("Local RepresentationIndex: Manifest update removed previous segments");
                return insertNewIndexAtPosition(i);
              }
              return insertNewIndexAtPosition(i + 1);
            }
          }
          const oldIndexEnd = this._index.segments[oldIndexLength - 1].time + this._index.segments[oldIndexLength - 1].duration;
          const newIndexEnd = newSegments[newSegments.length - 1].time + newSegments[newSegments.length - 1].duration;
          if (oldIndexEnd >= newIndexEnd) {
            return;
          }
          return this._replace(newIndex);
        }
      };
    }
  });

  // src/parsers/manifest/local/parse_local_manifest.ts
  function parseLocalManifest(localManifest) {
    if (localManifest.type !== "local") {
      throw new Error("Invalid local manifest given. It misses the `type` property.");
    }
    if (localManifest.version !== "0.2") {
      throw new Error(`The current Local Manifest version (${localManifest.version}) is not compatible with the current version of the RxPlayer`);
    }
    const periodIdGenerator = idGenerator();
    const {
      minimumPosition,
      maximumPosition,
      isFinished
    } = localManifest;
    const parsedPeriods = localManifest.periods.map((period) => parsePeriod(period, {
      periodIdGenerator,
      isFinished
    }));
    return {
      availabilityStartTime: 0,
      expired: localManifest.expired,
      transportType: "local",
      isDynamic: !isFinished,
      isLastPeriodKnown: isFinished,
      isLive: false,
      uris: [],
      timeBounds: {
        minimumSafePosition: minimumPosition != null ? minimumPosition : 0,
        timeshiftDepth: null,
        maximumTimeData: {
          isLinear: false,
          maximumSafePosition: maximumPosition,
          livePosition: void 0,
          time: performance.now()
        }
      },
      periods: parsedPeriods
    };
  }
  function parsePeriod(period, ctxt) {
    const { isFinished } = ctxt;
    const adaptationIdGenerator = idGenerator();
    return {
      id: "period-" + ctxt.periodIdGenerator(),
      start: period.start,
      end: period.end,
      duration: period.end - period.start,
      adaptations: period.adaptations.reduce((acc, ada) => {
        const type = ada.type;
        let adaps = acc[type];
        if (adaps === void 0) {
          adaps = [];
          acc[type] = adaps;
        }
        adaps.push(parseAdaptation(ada, {
          adaptationIdGenerator,
          isFinished
        }));
        return acc;
      }, {})
    };
  }
  function parseAdaptation(adaptation, ctxt) {
    const { isFinished } = ctxt;
    const representationIdGenerator = idGenerator();
    return {
      id: "adaptation-" + ctxt.adaptationIdGenerator(),
      type: adaptation.type,
      audioDescription: adaptation.audioDescription,
      closedCaption: adaptation.closedCaption,
      language: adaptation.language,
      representations: adaptation.representations.map((representation) => parseRepresentation(representation, {
        representationIdGenerator,
        isFinished
      }))
    };
  }
  function parseRepresentation(representation, ctxt) {
    const { isFinished } = ctxt;
    const id = "representation-" + ctxt.representationIdGenerator();
    const contentProtections = representation.contentProtections === void 0 ? void 0 : formatContentProtections(representation.contentProtections);
    return {
      id,
      bitrate: representation.bitrate,
      height: representation.height,
      width: representation.width,
      codecs: representation.codecs,
      mimeType: representation.mimeType,
      index: new LocalRepresentationIndex(representation.index, id, isFinished),
      contentProtections
    };
  }
  function formatContentProtections(localContentProtections) {
    const keyIds = localContentProtections.keyIds;
    const initData = Object.keys(localContentProtections.initData).map((currType) => {
      var _a2;
      const localInitData = (_a2 = localContentProtections.initData[currType]) != null ? _a2 : [];
      return {
        type: currType,
        values: localInitData
      };
    });
    return { keyIds, initData };
  }
  var init_parse_local_manifest = __esm({
    "src/parsers/manifest/local/parse_local_manifest.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_id_generator();
      init_representation_index3();
    }
  });

  // src/parsers/manifest/local/index.ts
  var local_default;
  var init_local = __esm({
    "src/parsers/manifest/local/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_local_manifest();
      local_default = parseLocalManifest;
    }
  });

  // src/transports/local/segment_loader.ts
  function loadInitSegment(customSegmentLoader, cancelSignal) {
    return new Promise((res, rej) => {
      let hasFinished = false;
      const resolve = (_args) => {
        if (hasFinished || cancelSignal.isCancelled) {
          return;
        }
        hasFinished = true;
        cancelSignal.deregister(abortLoader);
        res({
          resultType: "segment-loaded",
          resultData: {
            responseData: _args.data,
            size: _args.size,
            requestDuration: _args.duration
          }
        });
      };
      const reject = (err) => {
        if (hasFinished || cancelSignal.isCancelled) {
          return;
        }
        hasFinished = true;
        cancelSignal.deregister(abortLoader);
        rej(err);
      };
      const abort = customSegmentLoader({ resolve, reject });
      cancelSignal.register(abortLoader);
      function abortLoader(err) {
        if (hasFinished) {
          return;
        }
        hasFinished = true;
        if (typeof abort === "function") {
          abort();
        }
        rej(err);
      }
    });
  }
  function loadSegment(segment, customSegmentLoader, cancelSignal) {
    return new Promise((res, rej) => {
      let hasFinished = false;
      const resolve = (_args) => {
        if (hasFinished || cancelSignal.isCancelled) {
          return;
        }
        hasFinished = true;
        cancelSignal.deregister(abortLoader);
        res({
          resultType: "segment-loaded",
          resultData: {
            responseData: _args.data,
            size: _args.size,
            requestDuration: _args.duration
          }
        });
      };
      const reject = (err) => {
        var _a2, _b2, _c;
        if (hasFinished || cancelSignal.isCancelled) {
          return;
        }
        hasFinished = true;
        cancelSignal.deregister(abortLoader);
        const castedErr = err;
        const message = (_a2 = castedErr == null ? void 0 : castedErr.message) != null ? _a2 : "Unknown error when fetching a local segment through a custom segmentLoader.";
        const emittedErr = new CustomLoaderError(message, (_b2 = castedErr == null ? void 0 : castedErr.canRetry) != null ? _b2 : false, (_c = castedErr == null ? void 0 : castedErr.isOfflineError) != null ? _c : false, castedErr == null ? void 0 : castedErr.xhr);
        rej(emittedErr);
      };
      const abort = customSegmentLoader(segment, { resolve, reject });
      cancelSignal.register(abortLoader);
      function abortLoader(err) {
        if (hasFinished) {
          return;
        }
        hasFinished = true;
        if (typeof abort === "function") {
          abort();
        }
        rej(err);
      }
    });
  }
  function segmentLoader(_url, content, cancelSignal, _callbacks) {
    const { segment } = content;
    const privateInfos = segment.privateInfos;
    if (segment.isInit) {
      if (privateInfos === void 0 || isNullOrUndefined(privateInfos.localManifestInitSegment)) {
        throw new Error("Segment is not a local Manifest segment");
      }
      return loadInitSegment(privateInfos.localManifestInitSegment.load, cancelSignal);
    }
    if (privateInfos === void 0 || isNullOrUndefined(privateInfos.localManifestSegment)) {
      throw new Error("Segment is not an local Manifest segment");
    }
    return loadSegment(privateInfos.localManifestSegment.segment, privateInfos.localManifestSegment.load, cancelSignal);
  }
  var init_segment_loader3 = __esm({
    "src/transports/local/segment_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_errors();
      init_is_null_or_undefined();
    }
  });

  // src/transports/local/segment_parser.ts
  function segmentParser(loadedSegment, content, initTimescale) {
    const { period, adaptation, representation, segment } = content;
    const { data } = loadedSegment;
    const appendWindow = [period.start, period.end];
    if (data === null) {
      if (segment.isInit) {
        return {
          segmentType: "init",
          initializationData: null,
          initializationDataSize: 0,
          protectionDataUpdate: false,
          initTimescale: void 0
        };
      }
      return {
        segmentType: "media",
        chunkData: null,
        chunkSize: 0,
        chunkInfos: null,
        chunkOffset: 0,
        protectionDataUpdate: false,
        appendWindow
      };
    }
    const chunkData = new Uint8Array(data);
    const containerType = inferSegmentContainer(adaptation.type, representation);
    const seemsToBeMP4 = containerType === "mp4" || containerType === void 0;
    let protectionDataUpdate = false;
    if (seemsToBeMP4) {
      const psshInfo = takePSSHOut(chunkData);
      if (psshInfo.length > 0) {
        protectionDataUpdate = representation._addProtectionData("cenc", psshInfo);
      }
    }
    if (segment.isInit) {
      const timescale = containerType === "webm" ? getTimeCodeScale(chunkData, 0) : getMDHDTimescale(chunkData);
      return {
        segmentType: "init",
        initializationData: chunkData,
        initializationDataSize: 0,
        initTimescale: timescale != null ? timescale : void 0,
        protectionDataUpdate
      };
    }
    const chunkInfos = seemsToBeMP4 ? getISOBMFFTimingInfos(chunkData, false, segment, initTimescale) : null;
    const chunkOffset = takeFirstSet(segment.timestampOffset, 0);
    return {
      segmentType: "media",
      chunkData,
      chunkSize: chunkData.length,
      chunkInfos,
      chunkOffset,
      protectionDataUpdate: false,
      appendWindow
    };
  }
  var init_segment_parser2 = __esm({
    "src/transports/local/segment_parser.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_matroska();
      init_take_first_set();
      init_get_isobmff_timing_infos();
      init_infer_segment_container();
    }
  });

  // src/transports/local/text_parser.ts
  function parseISOBMFFEmbeddedTextTrack2(data, isChunked, content, initTimescale) {
    const { period, segment } = content;
    const chunkBytes = typeof data === "string" ? strToUtf8(data) : data instanceof Uint8Array ? data : new Uint8Array(data);
    if (segment.isInit) {
      const mdhdTimescale = getMDHDTimescale(chunkBytes);
      return {
        segmentType: "init",
        initializationData: null,
        initializationDataSize: 0,
        initTimescale: mdhdTimescale,
        protectionDataUpdate: false
      };
    }
    const chunkInfos = getISOBMFFTimingInfos(chunkBytes, isChunked, segment, initTimescale);
    const chunkData = getISOBMFFEmbeddedTextTrackData(content, chunkBytes, chunkInfos, isChunked);
    const chunkOffset = takeFirstSet(segment.timestampOffset, 0);
    return {
      segmentType: "media",
      chunkData,
      chunkSize: chunkBytes.length,
      chunkInfos,
      chunkOffset,
      protectionDataUpdate: false,
      appendWindow: [period.start, period.end]
    };
  }
  function parsePlainTextTrack2(data, isChunked, content) {
    const { period, segment } = content;
    if (segment.isInit) {
      return {
        segmentType: "init",
        initializationData: null,
        initializationDataSize: 0,
        initTimescale: void 0,
        protectionDataUpdate: false
      };
    }
    let textTrackData;
    let chunkSize;
    if (typeof data !== "string") {
      const bytesData = data instanceof Uint8Array ? data : new Uint8Array(data);
      textTrackData = utf8ToStr(bytesData);
      chunkSize = bytesData.length;
    } else {
      textTrackData = data;
    }
    const chunkData = getPlainTextTrackData(content, textTrackData, isChunked);
    const chunkOffset = takeFirstSet(segment.timestampOffset, 0);
    return {
      segmentType: "media",
      chunkData,
      chunkSize,
      chunkInfos: null,
      chunkOffset,
      protectionDataUpdate: false,
      appendWindow: [period.start, period.end]
    };
  }
  function textTrackParser(loadedSegment, content, initTimescale) {
    var _a2;
    const { period, adaptation, representation, segment } = content;
    const { data, isChunked } = loadedSegment;
    if (data === null) {
      if (segment.isInit) {
        return {
          segmentType: "init",
          initializationData: null,
          initializationDataSize: 0,
          protectionDataUpdate: false,
          initTimescale: void 0
        };
      }
      const chunkOffset = (_a2 = segment.timestampOffset) != null ? _a2 : 0;
      return {
        segmentType: "media",
        chunkData: null,
        chunkSize: 0,
        chunkInfos: null,
        chunkOffset,
        protectionDataUpdate: false,
        appendWindow: [period.start, period.end]
      };
    }
    const containerType = inferSegmentContainer(adaptation.type, representation);
    if (containerType === "webm") {
      throw new Error("Text tracks with a WEBM container are not yet handled.");
    } else if (containerType === "mp4") {
      return parseISOBMFFEmbeddedTextTrack2(data, isChunked, content, initTimescale);
    } else {
      return parsePlainTextTrack2(data, isChunked, content);
    }
  }
  var init_text_parser2 = __esm({
    "src/transports/local/text_parser.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_isobmff();
      init_string_parsing();
      init_take_first_set();
      init_get_isobmff_timing_infos();
      init_infer_segment_container();
      init_parse_text_track();
    }
  });

  // src/transports/local/pipelines.ts
  function getLocalManifestPipelines(options) {
    const customManifestLoader = options.manifestLoader;
    const manifestPipeline = {
      loadManifest(url, cancelSignal) {
        if (isNullOrUndefined(customManifestLoader)) {
          throw new Error("A local Manifest is not loadable through regular HTTP(S)  calls. You have to set a `manifestLoader` when calling `loadVideo`");
        }
        return callCustomManifestLoader(customManifestLoader, () => {
          throw new Error("Cannot fallback from the `manifestLoader` of a `local` transport");
        })(url, cancelSignal);
      },
      parseManifest(manifestData) {
        const loadedManifest = manifestData.responseData;
        if (typeof manifestData !== "object") {
          throw new Error("Wrong format for the manifest data");
        }
        const parsed = local_default(loadedManifest);
        const manifest = new manifest_default(parsed, options);
        return { manifest, url: void 0 };
      }
    };
    const segmentPipeline = {
      loadSegment: segmentLoader,
      parseSegment: segmentParser
    };
    const textTrackPipeline = {
      loadSegment: segmentLoader,
      parseSegment: textTrackParser
    };
    const imageTrackPipeline = {
      loadSegment: () => {
        throw new Error("Images track not supported in local transport.");
      },
      parseSegment: () => {
        throw new Error("Images track not supported in local transport.");
      }
    };
    return {
      manifest: manifestPipeline,
      audio: segmentPipeline,
      video: segmentPipeline,
      text: textTrackPipeline,
      image: imageTrackPipeline
    };
  }
  var init_pipelines3 = __esm({
    "src/transports/local/pipelines.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_manifest2();
      init_local();
      init_is_null_or_undefined();
      init_call_custom_manifest_loader();
      init_segment_loader3();
      init_segment_parser2();
      init_text_parser2();
    }
  });

  // src/transports/local/index.ts
  var local_exports = {};
  __export(local_exports, {
    default: () => local_default2
  });
  var local_default2;
  var init_local2 = __esm({
    "src/transports/local/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_pipelines3();
      local_default2 = getLocalManifestPipelines;
    }
  });

  // src/parsers/manifest/metaplaylist/representation_index.ts
  var MetaRepresentationIndex;
  var init_representation_index4 = __esm({
    "src/parsers/manifest/metaplaylist/representation_index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_object_assign();
      MetaRepresentationIndex = class {
        constructor(wrappedIndex, contentBounds, transport, baseContentInfos) {
          this._wrappedIndex = wrappedIndex;
          this._timeOffset = contentBounds[0];
          this._contentEnd = contentBounds[1];
          this._transport = transport;
          this._baseContentInfos = baseContentInfos;
        }
        getInitSegment() {
          const segment = this._wrappedIndex.getInitSegment();
          if (segment === null) {
            return null;
          }
          return this._cloneWithPrivateInfos(segment);
        }
        getSegments(up, duration) {
          return this._wrappedIndex.getSegments(up - this._timeOffset, duration).map((segment) => {
            const clonedSegment = this._cloneWithPrivateInfos(segment);
            clonedSegment.time += this._timeOffset;
            clonedSegment.end += this._timeOffset;
            return clonedSegment;
          });
        }
        shouldRefresh() {
          return false;
        }
        getFirstPosition() {
          const wrappedFirstPosition = this._wrappedIndex.getFirstPosition();
          return wrappedFirstPosition != null ? wrappedFirstPosition + this._timeOffset : void 0;
        }
        getLastPosition() {
          const wrappedLastPosition = this._wrappedIndex.getLastPosition();
          return wrappedLastPosition != null ? wrappedLastPosition + this._timeOffset : void 0;
        }
        isSegmentStillAvailable(segment) {
          var _a2;
          if (((_a2 = segment.privateInfos) == null ? void 0 : _a2.metaplaylistInfos) === void 0) {
            return false;
          }
          const { originalSegment } = segment.privateInfos.metaplaylistInfos;
          return this._wrappedIndex.isSegmentStillAvailable(originalSegment);
        }
        canBeOutOfSyncError(error, segment) {
          var _a2;
          if (((_a2 = segment.privateInfos) == null ? void 0 : _a2.metaplaylistInfos) === void 0) {
            return false;
          }
          const { originalSegment } = segment.privateInfos.metaplaylistInfos;
          return this._wrappedIndex.canBeOutOfSyncError(error, originalSegment);
        }
        checkDiscontinuity(time) {
          return this._wrappedIndex.checkDiscontinuity(time - this._timeOffset);
        }
        areSegmentsChronologicallyGenerated() {
          return this._wrappedIndex.areSegmentsChronologicallyGenerated();
        }
        isFinished() {
          return this._wrappedIndex.isFinished();
        }
        isInitialized() {
          return this._wrappedIndex.isInitialized();
        }
        _replace(newIndex) {
          if (!(newIndex instanceof MetaRepresentationIndex)) {
            throw new Error("A MetaPlaylist can only be replaced with another MetaPlaylist");
          }
          this._wrappedIndex._replace(newIndex._wrappedIndex);
        }
        _update(newIndex) {
          if (!(newIndex instanceof MetaRepresentationIndex)) {
            throw new Error("A MetaPlaylist can only be updated with another MetaPlaylist");
          }
          this._wrappedIndex._update(newIndex._wrappedIndex);
        }
        _cloneWithPrivateInfos(segment) {
          const clonedSegment = object_assign_default({}, segment);
          if (clonedSegment.privateInfos === void 0) {
            clonedSegment.privateInfos = {};
          }
          clonedSegment.privateInfos.metaplaylistInfos = {
            transportType: this._transport,
            baseContent: this._baseContentInfos,
            contentStart: this._timeOffset,
            contentEnd: this._contentEnd,
            originalSegment: segment
          };
          return clonedSegment;
        }
      };
    }
  });

  // src/parsers/manifest/metaplaylist/metaplaylist_parser.ts
  function parseMetaPlaylist(data, parserOptions) {
    let parsedData;
    if (typeof data === "object" && data != null) {
      parsedData = data;
    } else if (typeof data === "string") {
      try {
        parsedData = JSON.parse(data);
      } catch (error) {
        throw new Error("MPL Parser: Bad MetaPlaylist file. Expected JSON.");
      }
    } else {
      throw new Error("MPL Parser: Parser input must be either a string or the MetaPlaylist data directly.");
    }
    const { contents, version, type } = parsedData;
    if (type !== "MPL") {
      throw new Error("MPL Parser: Bad MetaPlaylist. The `type` property is not set to `MPL`");
    }
    if (version !== "0.1") {
      throw new Error("MPL Parser: Bad MetaPlaylist version");
    }
    if (contents == null || contents.length === 0) {
      throw new Error("MPL Parser: No content found.");
    }
    const ressources = [];
    for (let i = 0; i < contents.length; i++) {
      const content = contents[i];
      if (content.url == null || content.startTime == null || content.endTime == null || content.transport == null) {
        throw new Error("MPL Parser: Malformed content.");
      }
      ressources.push({ url: content.url, transportType: content.transport });
    }
    const metaPlaylist = parsedData;
    return {
      type: "needs-manifest-loader",
      value: {
        ressources,
        continue: function parseWholeMPL(loadedRessources) {
          const parsedManifest = createManifest(metaPlaylist, loadedRessources, parserOptions);
          return { type: "done", value: parsedManifest };
        }
      }
    };
  }
  function createManifest(mplData, manifests, parserOptions) {
    const { url, serverSyncInfos } = parserOptions;
    const clockOffset = serverSyncInfos !== void 0 ? serverSyncInfos.serverTimestamp - serverSyncInfos.clientTime : void 0;
    const generateAdaptationID = idGenerator();
    const generateRepresentationID = idGenerator();
    const { contents } = mplData;
    const minimumTime = contents.length > 0 ? contents[0].startTime : 0;
    const maximumTime = contents.length > 0 ? contents[contents.length - 1].endTime : 0;
    const isDynamic = mplData.dynamic === true;
    let firstStart = null;
    let lastEnd = null;
    const periods = [];
    for (let iMan = 0; iMan < contents.length; iMan++) {
      const content = contents[iMan];
      firstStart = firstStart !== null ? Math.min(firstStart, content.startTime) : content.startTime;
      lastEnd = lastEnd !== null ? Math.max(lastEnd, content.endTime) : content.endTime;
      const currentManifest = manifests[iMan];
      if (currentManifest.periods.length <= 0) {
        continue;
      }
      const contentOffset = content.startTime - currentManifest.periods[0].start;
      const contentEnd = content.endTime;
      const manifestPeriods = [];
      for (let iPer = 0; iPer < currentManifest.periods.length; iPer++) {
        const currentPeriod = currentManifest.periods[iPer];
        const adaptations = SUPPORTED_ADAPTATIONS_TYPE.reduce((acc, type) => {
          const currentAdaptations = currentPeriod.adaptations[type];
          if (currentAdaptations == null) {
            return acc;
          }
          const adaptationsForCurrentType = [];
          for (let iAda = 0; iAda < currentAdaptations.length; iAda++) {
            const currentAdaptation = currentAdaptations[iAda];
            const representations = [];
            for (let iRep = 0; iRep < currentAdaptation.representations.length; iRep++) {
              const currentRepresentation = currentAdaptation.representations[iRep];
              const contentInfos = {
                manifest: currentManifest,
                period: currentPeriod,
                adaptation: currentAdaptation,
                representation: currentRepresentation
              };
              const newIndex = new MetaRepresentationIndex(currentRepresentation.index, [contentOffset, contentEnd], content.transport, contentInfos);
              representations.push({
                bitrate: currentRepresentation.bitrate,
                index: newIndex,
                id: currentRepresentation.id,
                height: currentRepresentation.height,
                width: currentRepresentation.width,
                mimeType: currentRepresentation.mimeType,
                frameRate: currentRepresentation.frameRate,
                codecs: currentRepresentation.codec,
                contentProtections: currentRepresentation.contentProtections
              });
            }
            adaptationsForCurrentType.push({
              id: currentAdaptation.id,
              representations,
              type: currentAdaptation.type,
              audioDescription: currentAdaptation.isAudioDescription,
              closedCaption: currentAdaptation.isClosedCaption,
              isDub: currentAdaptation.isDub,
              language: currentAdaptation.language,
              isSignInterpreted: currentAdaptation.isSignInterpreted
            });
            acc[type] = adaptationsForCurrentType;
          }
          return acc;
        }, {});
        const textTracks = content.textTracks === void 0 ? [] : content.textTracks;
        const newTextAdaptations = textTracks.map((track) => {
          const adaptationID = "gen-text-ada-" + generateAdaptationID();
          const representationID = "gen-text-rep-" + generateRepresentationID();
          return {
            id: adaptationID,
            type: "text",
            language: track.language,
            closedCaption: track.closedCaption,
            manuallyAdded: true,
            representations: [
              {
                bitrate: 0,
                id: representationID,
                mimeType: track.mimeType,
                codecs: track.codecs,
                index: new StaticRepresentationIndex({ media: track.url })
              }
            ]
          };
        }, []);
        if (newTextAdaptations.length > 0) {
          if (adaptations.text == null) {
            adaptations.text = newTextAdaptations;
          } else {
            adaptations.text.push(...newTextAdaptations);
          }
        }
        const newPeriod = {
          id: formatId(currentManifest.id) + "_" + formatId(currentPeriod.id),
          adaptations,
          duration: currentPeriod.duration,
          start: contentOffset + currentPeriod.start
        };
        manifestPeriods.push(newPeriod);
      }
      for (let i = manifestPeriods.length - 1; i >= 0; i--) {
        const period = manifestPeriods[i];
        if (period.start >= content.endTime) {
          manifestPeriods.splice(i, 1);
        } else if (period.duration != null) {
          if (period.start + period.duration > content.endTime) {
            period.duration = content.endTime - period.start;
          }
        } else if (i === manifestPeriods.length - 1) {
          period.duration = content.endTime - period.start;
        }
      }
      periods.push(...manifestPeriods);
    }
    const time = performance.now();
    const isLastPeriodKnown = !isDynamic || mplData.pollInterval === void 0 && (manifests.length <= 0 || manifests[manifests.length - 1].isLastPeriodKnown);
    const manifest = {
      availabilityStartTime: 0,
      clockOffset,
      suggestedPresentationDelay: 10,
      periods,
      transportType: "metaplaylist",
      isLive: isDynamic,
      isDynamic,
      isLastPeriodKnown,
      uris: url == null ? [] : [url],
      timeBounds: {
        minimumSafePosition: minimumTime,
        timeshiftDepth: null,
        maximumTimeData: {
          isLinear: false,
          maximumSafePosition: maximumTime,
          livePosition: void 0,
          time
        }
      },
      lifetime: mplData.pollInterval
    };
    return manifest;
  }
  function formatId(str) {
    return str.replace(/_/g, "_");
  }
  var init_metaplaylist_parser = __esm({
    "src/parsers/manifest/metaplaylist/metaplaylist_parser.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_manifest2();
      init_id_generator();
      init_representation_index4();
    }
  });

  // src/parsers/manifest/metaplaylist/index.ts
  var metaplaylist_default;
  var init_metaplaylist = __esm({
    "src/parsers/manifest/metaplaylist/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_metaplaylist_parser();
      metaplaylist_default = parseMetaPlaylist;
    }
  });

  // src/transports/metaplaylist/manifest_loader.ts
  function regularManifestLoader(url, cancelSignal) {
    if (url === void 0) {
      throw new Error("Cannot perform HTTP(s) request. URL not known");
    }
    return request_default({ url, responseType: "text", cancelSignal });
  }
  function generateManifestLoader2({ customManifestLoader }) {
    return typeof customManifestLoader !== "function" ? regularManifestLoader : callCustomManifestLoader(customManifestLoader, regularManifestLoader);
  }
  var init_manifest_loader = __esm({
    "src/transports/metaplaylist/manifest_loader.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_request();
      init_call_custom_manifest_loader();
    }
  });

  // src/transports/metaplaylist/pipelines.ts
  function getOriginalContent(segment) {
    var _a2;
    if (((_a2 = segment.privateInfos) == null ? void 0 : _a2.metaplaylistInfos) === void 0) {
      throw new Error("MetaPlaylist: missing private infos");
    }
    const {
      manifest,
      period,
      adaptation,
      representation
    } = segment.privateInfos.metaplaylistInfos.baseContent;
    const { originalSegment } = segment.privateInfos.metaplaylistInfos;
    return {
      manifest,
      period,
      adaptation,
      representation,
      segment: originalSegment
    };
  }
  function getTransportPipelines(transports, transportName, options) {
    const initialTransport = transports[transportName];
    if (initialTransport !== void 0) {
      return initialTransport;
    }
    const feature = features_default.transports[transportName];
    if (feature === void 0) {
      throw new Error(`MetaPlaylist: Unknown transport ${transportName}.`);
    }
    const transport = feature(options);
    transports[transportName] = transport;
    return transport;
  }
  function getMetaPlaylistPrivateInfos(segment) {
    const { privateInfos } = segment;
    if ((privateInfos == null ? void 0 : privateInfos.metaplaylistInfos) === void 0) {
      throw new Error("MetaPlaylist: Undefined transport for content for metaplaylist.");
    }
    return privateInfos.metaplaylistInfos;
  }
  function pipelines_default3(options) {
    const transports = {};
    const manifestLoader = generateManifestLoader2({
      customManifestLoader: options.manifestLoader
    });
    const otherTransportOptions = object_assign_default({}, options, {
      manifestLoader: void 0,
      supplementaryTextTracks: [],
      supplementaryImageTracks: []
    });
    const manifestPipeline = {
      loadManifest: manifestLoader,
      parseManifest(manifestData, parserOptions, onWarnings, cancelSignal, scheduleRequest) {
        var _a2;
        const url = (_a2 = manifestData.url) != null ? _a2 : parserOptions.originalUrl;
        const { responseData } = manifestData;
        const mplParserOptions = {
          url,
          serverSyncInfos: options.serverSyncInfos
        };
        const parsed = metaplaylist_default(responseData, mplParserOptions);
        return handleParsedResult(parsed);
        function handleParsedResult(parsedResult) {
          if (parsedResult.type === "done") {
            const manifest = new manifest_default(parsedResult.value, options);
            return Promise.resolve({ manifest });
          }
          const parsedValue = parsedResult.value;
          const loaderProms = parsedValue.ressources.map((resource) => {
            const transport = getTransportPipelines(transports, resource.transportType, otherTransportOptions);
            return scheduleRequest(loadSubManifest).then((data) => transport.manifest.parseManifest(data, __spreadProps(__spreadValues({}, parserOptions), {
              originalUrl: resource.url
            }), onWarnings, cancelSignal, scheduleRequest));
            function loadSubManifest() {
              return transport.manifest.loadManifest(resource.url, cancelSignal);
            }
          });
          return Promise.all(loaderProms).then((parsedReqs) => {
            const loadedRessources = parsedReqs.map((e) => e.manifest);
            return handleParsedResult(parsedResult.value.continue(loadedRessources));
          });
        }
      }
    };
    function getTransportPipelinesFromSegment(segment) {
      const { transportType } = getMetaPlaylistPrivateInfos(segment);
      return getTransportPipelines(transports, transportType, otherTransportOptions);
    }
    function offsetTimeInfos(contentOffset, contentEnd, segmentResponse) {
      const offsetedSegmentOffset = segmentResponse.chunkOffset + contentOffset;
      if (isNullOrUndefined(segmentResponse.chunkData)) {
        return {
          chunkInfos: segmentResponse.chunkInfos,
          chunkOffset: offsetedSegmentOffset,
          appendWindow: [void 0, void 0]
        };
      }
      const { chunkInfos, appendWindow } = segmentResponse;
      const offsetedChunkInfos = chunkInfos === null ? null : object_assign_default({}, chunkInfos);
      if (offsetedChunkInfos !== null) {
        offsetedChunkInfos.time += contentOffset;
      }
      const offsetedWindowStart = appendWindow[0] !== void 0 ? Math.max(appendWindow[0] + contentOffset, contentOffset) : contentOffset;
      let offsetedWindowEnd;
      if (appendWindow[1] !== void 0) {
        offsetedWindowEnd = contentEnd !== void 0 ? Math.min(appendWindow[1] + contentOffset, contentEnd) : appendWindow[1] + contentOffset;
      } else if (contentEnd !== void 0) {
        offsetedWindowEnd = contentEnd;
      }
      return {
        chunkInfos: offsetedChunkInfos,
        chunkOffset: offsetedSegmentOffset,
        appendWindow: [offsetedWindowStart, offsetedWindowEnd]
      };
    }
    const audioPipeline = {
      loadSegment(url, content, cancelToken, callbacks) {
        const { segment } = content;
        const { audio } = getTransportPipelinesFromSegment(segment);
        const ogContent = getOriginalContent(segment);
        return audio.loadSegment(url, ogContent, cancelToken, callbacks);
      },
      parseSegment(loadedSegment, content, initTimescale) {
        const { segment } = content;
        const { contentStart, contentEnd } = getMetaPlaylistPrivateInfos(segment);
        const { audio } = getTransportPipelinesFromSegment(segment);
        const ogContent = getOriginalContent(segment);
        const parsed = audio.parseSegment(loadedSegment, ogContent, initTimescale);
        if (parsed.segmentType === "init") {
          return parsed;
        }
        const timeInfos = offsetTimeInfos(contentStart, contentEnd, parsed);
        return object_assign_default({}, parsed, timeInfos);
      }
    };
    const videoPipeline = {
      loadSegment(url, content, cancelToken, callbacks) {
        const { segment } = content;
        const { video } = getTransportPipelinesFromSegment(segment);
        const ogContent = getOriginalContent(segment);
        return video.loadSegment(url, ogContent, cancelToken, callbacks);
      },
      parseSegment(loadedSegment, content, initTimescale) {
        const { segment } = content;
        const { contentStart, contentEnd } = getMetaPlaylistPrivateInfos(segment);
        const { video } = getTransportPipelinesFromSegment(segment);
        const ogContent = getOriginalContent(segment);
        const parsed = video.parseSegment(loadedSegment, ogContent, initTimescale);
        if (parsed.segmentType === "init") {
          return parsed;
        }
        const timeInfos = offsetTimeInfos(contentStart, contentEnd, parsed);
        return object_assign_default({}, parsed, timeInfos);
      }
    };
    const textTrackPipeline = {
      loadSegment(url, content, cancelToken, callbacks) {
        const { segment } = content;
        const { text } = getTransportPipelinesFromSegment(segment);
        const ogContent = getOriginalContent(segment);
        return text.loadSegment(url, ogContent, cancelToken, callbacks);
      },
      parseSegment(loadedSegment, content, initTimescale) {
        const { segment } = content;
        const { contentStart, contentEnd } = getMetaPlaylistPrivateInfos(segment);
        const { text } = getTransportPipelinesFromSegment(segment);
        const ogContent = getOriginalContent(segment);
        const parsed = text.parseSegment(loadedSegment, ogContent, initTimescale);
        if (parsed.segmentType === "init") {
          return parsed;
        }
        const timeInfos = offsetTimeInfos(contentStart, contentEnd, parsed);
        return object_assign_default({}, parsed, timeInfos);
      }
    };
    const imageTrackPipeline = {
      loadSegment(url, content, cancelToken, callbacks) {
        const { segment } = content;
        const { image } = getTransportPipelinesFromSegment(segment);
        const ogContent = getOriginalContent(segment);
        return image.loadSegment(url, ogContent, cancelToken, callbacks);
      },
      parseSegment(loadedSegment, content, initTimescale) {
        const { segment } = content;
        const { contentStart, contentEnd } = getMetaPlaylistPrivateInfos(segment);
        const { image } = getTransportPipelinesFromSegment(segment);
        const ogContent = getOriginalContent(segment);
        const parsed = image.parseSegment(loadedSegment, ogContent, initTimescale);
        if (parsed.segmentType === "init") {
          return parsed;
        }
        const timeInfos = offsetTimeInfos(contentStart, contentEnd, parsed);
        return object_assign_default({}, parsed, timeInfos);
      }
    };
    return {
      manifest: manifestPipeline,
      audio: audioPipeline,
      video: videoPipeline,
      text: textTrackPipeline,
      image: imageTrackPipeline
    };
  }
  var init_pipelines4 = __esm({
    "src/transports/metaplaylist/pipelines.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_features();
      init_manifest2();
      init_metaplaylist();
      init_is_null_or_undefined();
      init_object_assign();
      init_manifest_loader();
    }
  });

  // src/transports/metaplaylist/index.ts
  var metaplaylist_exports = {};
  __export(metaplaylist_exports, {
    default: () => metaplaylist_default2
  });
  var metaplaylist_default2;
  var init_metaplaylist2 = __esm({
    "src/transports/metaplaylist/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_pipelines4();
      metaplaylist_default2 = pipelines_default3;
    }
  });

  // src/compat/remove_cue.ts
  function isActiveCue(track, cue) {
    const { activeCues } = track;
    if (activeCues === null) {
      return false;
    }
    for (let i = 0; i < activeCues.length; i++) {
      if (activeCues[i] === cue) {
        return true;
      }
    }
    return false;
  }
  function removeCue(track, cue) {
    if (isFirefox && isActiveCue(track, cue)) {
      const trackMode = track.mode;
      track.mode = "hidden";
      try {
        track.removeCue(cue);
      } catch (err) {
        log_default.warn("Compat: Could not remove cue from text track.");
      }
      track.mode = trackMode;
      return;
    }
    try {
      track.removeCue(cue);
    } catch (err) {
      log_default.warn("Compat: Could not remove cue from text track.");
    }
  }
  var init_remove_cue = __esm({
    "src/compat/remove_cue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_browser_detection();
    }
  });

  // src/core/segment_buffers/implementations/text/native/parsers.ts
  function parseTextTrackToCues(type, data, timestampOffset, language) {
    log_default.debug("NTSB: Finding parser for native text tracks:", type);
    const parser = features_default.nativeTextTracksParsers[type];
    if (typeof parser !== "function") {
      throw new Error("no parser found for the given text track");
    }
    log_default.debug("NTSB: Parser found, parsing...");
    const parsed = parser(data, timestampOffset, language);
    log_default.debug("NTSB: Parsed successfully!", parsed);
    return parsed;
  }
  var init_parsers = __esm({
    "src/core/segment_buffers/implementations/text/native/parsers.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_features();
      init_log();
    }
  });

  // src/core/segment_buffers/implementations/text/native/native_text_segment_buffer.ts
  function assertChunkIsTextTrackSegmentData(chunk) {
    if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.PRODUCTION) {
      return;
    }
    if (typeof chunk !== "object" || chunk === null || typeof chunk.data !== "string" || typeof chunk.type !== "string" || chunk.language !== void 0 && typeof chunk.language !== "string" || chunk.start !== void 0 && typeof chunk.start !== "number" || chunk.end !== void 0 && typeof chunk.end !== "number") {
      throw new Error("Invalid format given to a NativeTextSegmentBuffer");
    }
  }
  var NativeTextSegmentBuffer;
  var init_native_text_segment_buffer = __esm({
    "src/core/segment_buffers/implementations/text/native/native_text_segment_buffer.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_compat();
      init_remove_cue();
      init_log();
      init_types4();
      init_manual_time_ranges();
      init_parsers();
      NativeTextSegmentBuffer = class extends SegmentBuffer {
        constructor(videoElement, hideNativeSubtitle) {
          log_default.debug("NTSB: Creating NativeTextSegmentBuffer");
          super();
          const {
            track,
            trackElement
          } = addTextTrack(videoElement, hideNativeSubtitle);
          this.bufferType = "text";
          this._buffered = new ManualTimeRanges();
          this._videoElement = videoElement;
          this._track = track;
          this._trackElement = trackElement;
        }
        pushChunk(infos) {
          return defer(() => {
            var _a2, _b2;
            log_default.debug("NTSB: Appending new native text tracks");
            if (infos.data.chunk === null) {
              return of(void 0);
            }
            const {
              timestampOffset,
              appendWindow,
              chunk
            } = infos.data;
            assertChunkIsTextTrackSegmentData(chunk);
            const {
              start: startTime,
              end: endTime,
              data: dataString,
              type,
              language
            } = chunk;
            const appendWindowStart = (_a2 = appendWindow[0]) != null ? _a2 : 0;
            const appendWindowEnd = (_b2 = appendWindow[1]) != null ? _b2 : Infinity;
            const cues = parseTextTrackToCues(type, dataString, timestampOffset, language);
            if (appendWindowStart !== 0 && appendWindowEnd !== Infinity) {
              let i = 0;
              while (i < cues.length && cues[i].endTime <= appendWindowStart) {
                i++;
              }
              cues.splice(0, i);
              i = 0;
              while (i < cues.length && cues[i].startTime < appendWindowStart) {
                cues[i].startTime = appendWindowStart;
                i++;
              }
              i = cues.length - 1;
              while (i >= 0 && cues[i].startTime >= appendWindowEnd) {
                i--;
              }
              cues.splice(i, cues.length);
              i = cues.length - 1;
              while (i >= 0 && cues[i].endTime > appendWindowEnd) {
                cues[i].endTime = appendWindowEnd;
                i--;
              }
            }
            let start;
            if (startTime !== void 0) {
              start = Math.max(appendWindowStart, startTime);
            } else {
              if (cues.length <= 0) {
                log_default.warn("NTSB: Current text tracks have no cues nor start time. Aborting");
                return of(void 0);
              }
              log_default.warn("NTSB: No start time given. Guessing from cues.");
              start = cues[0].startTime;
            }
            let end;
            if (endTime !== void 0) {
              end = Math.min(appendWindowEnd, endTime);
            } else {
              if (cues.length <= 0) {
                log_default.warn("NTSB: Current text tracks have no cues nor end time. Aborting");
                return of(void 0);
              }
              log_default.warn("NTSB: No end time given. Guessing from cues.");
              end = cues[cues.length - 1].endTime;
            }
            if (end <= start) {
              log_default.warn("NTSB: Invalid text track appended: ", "the start time is inferior or equal to the end time.");
              return of(void 0);
            }
            if (cues.length > 0) {
              const firstCue = cues[0];
              const currentCues = this._track.cues;
              if (currentCues !== null && currentCues.length > 0) {
                if (firstCue.startTime < currentCues[currentCues.length - 1].startTime) {
                  this._removeData(firstCue.startTime, Infinity);
                }
              }
              for (let i = 0; i < cues.length; i++) {
                this._track.addCue(cues[i]);
              }
            }
            this._buffered.insert(start, end);
            if (infos.inventoryInfos !== null) {
              this._segmentInventory.insertChunk(infos.inventoryInfos);
            }
            return of(void 0);
          });
        }
        removeBuffer(start, end) {
          return defer(() => {
            this._removeData(start, end);
            return of(void 0);
          });
        }
        endOfSegment(_infos) {
          return defer(() => {
            this._segmentInventory.completeSegment(_infos, this._buffered);
            return of(void 0);
          });
        }
        getBufferedRanges() {
          return this._buffered;
        }
        dispose() {
          log_default.debug("NTSB: Aborting NativeTextSegmentBuffer");
          this._removeData(0, Infinity);
          const {
            _trackElement,
            _videoElement
          } = this;
          if (_trackElement !== void 0 && _videoElement.hasChildNodes()) {
            try {
              _videoElement.removeChild(_trackElement);
            } catch (e) {
              log_default.warn("NTSB: Can't remove track element from the video");
            }
          }
          this._track.mode = "disabled";
          if (this._trackElement !== void 0) {
            this._trackElement.innerHTML = "";
          }
        }
        _removeData(start, end) {
          log_default.debug("NTSB: Removing native text track data", start, end);
          const track = this._track;
          const cues = track.cues;
          if (cues !== null) {
            for (let i = cues.length - 1; i >= 0; i--) {
              const cue = cues[i];
              const { startTime, endTime } = cue;
              if (startTime >= start && startTime <= end && endTime <= end) {
                removeCue(track, cue);
              }
            }
          }
          this._buffered.remove(start, end);
        }
      };
      if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
        let _checkType = function(input) {
          function checkEqual(_arg) {
          }
          checkEqual(input);
        };
      }
    }
  });

  // src/core/segment_buffers/implementations/text/native/index.ts
  var native_exports = {};
  __export(native_exports, {
    default: () => native_default
  });
  var native_default;
  var init_native = __esm({
    "src/core/segment_buffers/implementations/text/native/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_native_text_segment_buffer();
      native_default = NativeTextSegmentBuffer;
    }
  });

  // src/parsers/texttracks/webvtt/utils.ts
  function getFirstLineAfterHeader(linified) {
    let i = 0;
    while (i < linified.length) {
      if (linified[i] === "") {
        return i + 1;
      }
      i++;
    }
    return i;
  }
  function isStartOfStyleBlock(lines, index) {
    return typeof lines[index] === "string" && /^STYLE( .*)?$/g.test(lines[index]) && (lines[index + 1] === void 0 || lines[index + 1].indexOf("-->") < 0);
  }
  function isStartOfNoteBlock(lines, index) {
    return typeof lines[index] === "string" && /^NOTE( .*)?$/g.test(lines[index]) && (lines[index + 1] === void 0 || lines[index + 1].indexOf("-->") < 0);
  }
  function isStartOfRegionBlock(lines, index) {
    return typeof lines[index] === "string" && /^REGION( .*)?$/g.test(lines[index]) && (lines[index + 1] === void 0 || lines[index + 1].indexOf("-->") < 0);
  }
  function isStartOfCueBlock(lines, index) {
    const firstLine = lines[index];
    if (firstLine === void 0 || firstLine === "" || isStartOfStyleBlock(lines, index) || isStartOfRegionBlock(lines, index) || isStartOfNoteBlock(lines, index)) {
      return false;
    }
    if (firstLine.indexOf("-->") >= 0) {
      return true;
    }
    const secondLine = lines[index + 1];
    return secondLine !== void 0 && secondLine.indexOf("-->") >= 0;
  }
  function findEndOfCueBlock(linified, startOfCueBlock) {
    let firstEmptyLineIndex = startOfCueBlock + 1;
    while (isNonEmptyString(linified[firstEmptyLineIndex])) {
      firstEmptyLineIndex++;
    }
    return firstEmptyLineIndex;
  }
  var init_utils6 = __esm({
    "src/parsers/texttracks/webvtt/utils.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
    }
  });

  // src/parsers/texttracks/webvtt/get_cue_blocks.ts
  function getCueBlocks(linified, headerOffset) {
    const cueBlocks = [];
    for (let i = headerOffset; i < linified.length; i++) {
      if (isStartOfCueBlock(linified, i)) {
        const endOfCue = findEndOfCueBlock(linified, i);
        cueBlocks.push(linified.slice(i, endOfCue));
        i = endOfCue;
      } else if (isNonEmptyString(linified[i])) {
        while (isNonEmptyString(linified[i])) {
          i++;
        }
      }
    }
    return cueBlocks;
  }
  var init_get_cue_blocks = __esm({
    "src/parsers/texttracks/webvtt/get_cue_blocks.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_utils6();
    }
  });

  // src/parsers/texttracks/webvtt/parse_timestamp.ts
  function parseTimestamp(timestampString) {
    const splittedTS = timestampString.split(":").reverse();
    if (isNonEmptyString(splittedTS[2]) || isNonEmptyString(splittedTS[1])) {
      const hours = isNonEmptyString(splittedTS[2]) ? parseInt(splittedTS[2], 10) : 0;
      const minutes = parseInt(splittedTS[1], 10);
      const seconds = parseFloat(splittedTS[0].replace(",", "."));
      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {
        return void 0;
      }
      return hours * 60 * 60 + minutes * 60 + seconds;
    }
  }
  var init_parse_timestamp = __esm({
    "src/parsers/texttracks/webvtt/parse_timestamp.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
    }
  });

  // src/parsers/texttracks/webvtt/parse_cue_block.ts
  function parseSettings(settingsString) {
    const splittedSettings = settingsString.split(/ |\t/);
    return splittedSettings.reduce((acc, setting) => {
      const splittedSetting = setting.split(":");
      if (splittedSetting.length === 2) {
        acc[splittedSetting[0]] = splittedSetting[1];
      }
      return acc;
    }, {});
  }
  function parseTimeAndSettings(timeString) {
    const lineRegex = /^([\d:.]+)[ |\t]+-->[ |\t]+([\d:.]+)[ |\t]*(.*)$/;
    const matches = lineRegex.exec(timeString);
    if (matches === null) {
      return null;
    }
    const start = parseTimestamp(matches[1]);
    const end = parseTimestamp(matches[2]);
    if (start == null || end == null) {
      return null;
    }
    const settings = parseSettings(matches[3]);
    return {
      start,
      end,
      settings
    };
  }
  function parseCueBlock(cueLines, timeOffset) {
    const timingRegexp = /-->/;
    let timeString;
    let payload;
    let header;
    if (!timingRegexp.test(cueLines[0])) {
      if (!timingRegexp.test(cueLines[1])) {
        return null;
      }
      header = cueLines[0];
      timeString = cueLines[1];
      payload = cueLines.slice(2, cueLines.length);
    } else {
      timeString = cueLines[0];
      payload = cueLines.slice(1, cueLines.length);
    }
    const timeAndSettings = parseTimeAndSettings(timeString);
    if (timeAndSettings === null) {
      return null;
    }
    const { start, end, settings } = timeAndSettings;
    return {
      start: start + timeOffset,
      end: end + timeOffset,
      settings,
      payload,
      header
    };
  }
  var init_parse_cue_block = __esm({
    "src/parsers/texttracks/webvtt/parse_cue_block.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_timestamp();
    }
  });

  // src/parsers/texttracks/webvtt/native/set_settings_on_cue.ts
  function setSettingsOnCue(settings, cue) {
    if (isNonEmptyString(settings.vertical) && (settings.vertical === "rl" || settings.vertical === "lr")) {
      cue.vertical = settings.vertical;
    }
    if (isNonEmptyString(settings.line)) {
      const percentagePosition = /^(\d+(\.\d+)?)%(,([a-z]+))?/;
      const percentageMatches = percentagePosition.exec(settings.line);
      if (Array.isArray(percentageMatches)) {
        cue.line = Number(percentageMatches[1]);
        cue.snapToLines = false;
        if (arrayIncludes(["start", "center", "end"], percentageMatches[4])) {
          cue.lineAlign = percentageMatches[4];
        }
      } else {
        const linePosition = /^(-?\d+)(,([a-z]+))?/;
        const lineMatches = linePosition.exec(settings.line);
        if (Array.isArray(lineMatches)) {
          cue.line = Number(lineMatches[1]);
          cue.snapToLines = true;
          if (arrayIncludes(["start", "center", "end"], lineMatches[3])) {
            cue.lineAlign = lineMatches[3];
          }
        }
      }
    }
    if (isNonEmptyString(settings.position)) {
      const positionRegex = /^([\d\.]+)%(?:,(line-left|line-right|center))?$/;
      const positionArr = positionRegex.exec(settings.position);
      if (Array.isArray(positionArr) && positionArr.length >= 2) {
        const position = parseInt(positionArr[1], 10);
        if (!isNaN(position)) {
          cue.position = position;
          if (positionArr[2] !== void 0) {
            cue.positionAlign = positionArr[2];
          }
        }
      }
    }
    if (isNonEmptyString(settings.size)) {
      cue.size = settings.size;
    }
    if (typeof settings.align === "string" && arrayIncludes(["start", "center", "end", "left"], settings.align)) {
      cue.align = settings.align;
    }
  }
  var init_set_settings_on_cue = __esm({
    "src/parsers/texttracks/webvtt/native/set_settings_on_cue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_array_includes();
      init_is_non_empty_string();
    }
  });

  // src/parsers/texttracks/webvtt/native/to_native_cue.ts
  function toNativeCue(cueObj) {
    const { start, end, payload } = cueObj;
    const text = payload.join("\n");
    return makeCue(start, end, text);
  }
  var init_to_native_cue = __esm({
    "src/parsers/texttracks/webvtt/native/to_native_cue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
    }
  });

  // src/parsers/texttracks/webvtt/native/parse_vtt_to_cues.ts
  function parseVTTStringToVTTCues(vttStr, timeOffset) {
    const lines = vttStr.split(/\r\n|\n|\r/);
    if (!/^WEBVTT($| |\t)/.test(lines[0])) {
      throw new Error("Can't parse WebVTT: Invalid file.");
    }
    const firstLineAfterHeader = getFirstLineAfterHeader(lines);
    const cueBlocks = getCueBlocks(lines, firstLineAfterHeader);
    const cues = [];
    for (let i = 0; i < cueBlocks.length; i++) {
      const cueObject = parseCueBlock(cueBlocks[i], timeOffset);
      if (cueObject != null) {
        const nativeCue = toNativeCue(cueObject);
        if (nativeCue != null) {
          if (isVTTCue(nativeCue)) {
            setSettingsOnCue(cueObject.settings, nativeCue);
          }
          cues.push(nativeCue);
        }
      }
    }
    return cues;
  }
  var init_parse_vtt_to_cues = __esm({
    "src/parsers/texttracks/webvtt/native/parse_vtt_to_cues.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_get_cue_blocks();
      init_parse_cue_block();
      init_utils6();
      init_set_settings_on_cue();
      init_to_native_cue();
    }
  });

  // src/parsers/texttracks/webvtt/native/index.ts
  var native_exports2 = {};
  __export(native_exports2, {
    default: () => native_default2
  });
  var native_default2;
  var init_native2 = __esm({
    "src/parsers/texttracks/webvtt/native/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_vtt_to_cues();
      native_default2 = parseVTTStringToVTTCues;
    }
  });

  // src/parsers/texttracks/ttml/get_parameters.ts
  function getParameters(tt) {
    const parsedFrameRate = tt.getAttribute("ttp:frameRate");
    const parsedSubFrameRate = tt.getAttribute("ttp:subFramRate");
    const parsedTickRate = tt.getAttribute("ttp:tickRate");
    const parsedFrameRateMultiplier = tt.getAttribute("ttp:frameRateMultiplier");
    const parsedSpaceStyle = tt.getAttribute("xml:space");
    const parsedCellResolution = tt.getAttribute("ttp:cellResolution");
    let cellResolution = {
      columns: 32,
      rows: 15
    };
    if (parsedCellResolution !== null) {
      const extractedData = CELL_RESOLUTION_REGEXP.exec(parsedCellResolution);
      if (extractedData === null || extractedData.length < 3) {
        log_default.warn("TTML Parser: Invalid cellResolution");
      } else {
        const columns = parseInt(extractedData[1], 10);
        const rows = parseInt(extractedData[2], 10);
        if (isNaN(columns) || isNaN(rows)) {
          log_default.warn("TTML Parser: Invalid cellResolution");
        } else {
          cellResolution = { columns, rows };
        }
      }
    }
    if (isNonEmptyString(parsedSpaceStyle) && parsedSpaceStyle !== "default" && parsedSpaceStyle !== "preserve") {
      throw new Error("Invalid spacing style");
    }
    let nbFrameRate = Number(parsedFrameRate);
    if (isNaN(nbFrameRate) || nbFrameRate <= 0) {
      nbFrameRate = 30;
    }
    let nbSubFrameRate = Number(parsedSubFrameRate);
    if (isNaN(nbSubFrameRate) || nbSubFrameRate <= 0) {
      nbSubFrameRate = 1;
    }
    let nbTickRate = Number(parsedTickRate);
    if (isNaN(nbTickRate) || nbTickRate <= 0) {
      nbTickRate = void 0;
    }
    let frameRate = nbFrameRate;
    const subFrameRate = nbSubFrameRate != null ? nbSubFrameRate : 1;
    const spaceStyle = parsedSpaceStyle !== null ? parsedSpaceStyle : "default";
    const tickRate = nbTickRate !== void 0 ? nbTickRate : nbFrameRate * nbSubFrameRate;
    if (parsedFrameRateMultiplier !== null) {
      const multiplierResults = /^(\d+) (\d+)$/g.exec(parsedFrameRateMultiplier);
      if (multiplierResults !== null) {
        const numerator = Number(multiplierResults[1]);
        const denominator = Number(multiplierResults[2]);
        const multiplierNum = numerator / denominator;
        frameRate = nbFrameRate * multiplierNum;
      }
    }
    return {
      cellResolution,
      tickRate,
      frameRate,
      subFrameRate,
      spaceStyle
    };
  }
  var CELL_RESOLUTION_REGEXP;
  var init_get_parameters = __esm({
    "src/parsers/texttracks/ttml/get_parameters.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_is_non_empty_string();
      CELL_RESOLUTION_REGEXP = /(\d+) (\d+)/;
    }
  });

  // src/parsers/texttracks/ttml/get_parent_elements_by_tag_name.ts
  function getParentElementsByTagName(element, tagName) {
    if (!(element.parentNode instanceof Element)) {
      return [];
    }
    function constructArray(_element) {
      const elements = [];
      if (_element.tagName.toLowerCase() === tagName.toLowerCase()) {
        elements.push(_element);
      }
      const parentNode = _element.parentNode;
      if (parentNode instanceof Element) {
        elements.push(...constructArray(parentNode));
      }
      return elements;
    }
    return constructArray(element.parentNode);
  }
  var init_get_parent_elements_by_tag_name = __esm({
    "src/parsers/texttracks/ttml/get_parent_elements_by_tag_name.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/texttracks/ttml/get_styling.ts
  function getStylingAttributes(attributes, nodes, styles, regions) {
    const currentStyle = {};
    const leftAttributes = attributes.slice();
    for (let i = 0; i <= nodes.length - 1; i++) {
      const node = nodes[i];
      if (node !== void 0) {
        let styleID;
        let regionID;
        if (node.nodeType === Node.ELEMENT_NODE) {
          const element = node;
          for (let j = 0; j <= element.attributes.length - 1; j++) {
            const attribute = element.attributes[j];
            const name = attribute.name;
            if (name === "style") {
              styleID = attribute.value;
            } else if (name === "region") {
              regionID = attribute.value;
            } else {
              const nameWithoutTTS = name.substring(4);
              if (arrayIncludes(leftAttributes, nameWithoutTTS)) {
                currentStyle[nameWithoutTTS] = attribute.value;
                leftAttributes.splice(j, 1);
                if (leftAttributes.length === 0) {
                  return currentStyle;
                }
              }
            }
          }
        }
        if (isNonEmptyString(styleID)) {
          const style = arrayFind(styles, (x) => x.id === styleID);
          if (style !== void 0) {
            for (let j = 0; j <= leftAttributes.length - 1; j++) {
              const attribute = leftAttributes[j];
              if (!isNonEmptyString(currentStyle[attribute])) {
                if (isNonEmptyString(style.style[attribute])) {
                  currentStyle[attribute] = style.style[attribute];
                  leftAttributes.splice(j, 1);
                  if (leftAttributes.length === 0) {
                    return currentStyle;
                  }
                  j--;
                }
              }
            }
          }
        }
        if (isNonEmptyString(regionID)) {
          const region = arrayFind(regions, (x) => x.id === regionID);
          if (region !== void 0) {
            for (let j = 0; j <= leftAttributes.length - 1; j++) {
              const attribute = leftAttributes[j];
              if (!isNonEmptyString(currentStyle[attribute])) {
                if (isNonEmptyString(region.style[attribute])) {
                  currentStyle[attribute] = region.style[attribute];
                  leftAttributes.splice(j, 1);
                  if (leftAttributes.length === 0) {
                    return currentStyle;
                  }
                  j--;
                }
              }
            }
          }
        }
      }
    }
    return currentStyle;
  }
  function getStylingFromElement(node) {
    if (node.nodeType !== Node.ELEMENT_NODE) {
      return {};
    }
    const element = node;
    const currentStyle = {};
    for (let i = 0; i <= element.attributes.length - 1; i++) {
      const styleAttribute = element.attributes[i];
      if (startsWith(styleAttribute.name, "tts")) {
        const nameWithoutTTS = styleAttribute.name.substring(4);
        currentStyle[nameWithoutTTS] = styleAttribute.value;
      }
    }
    return currentStyle;
  }
  var init_get_styling = __esm({
    "src/parsers/texttracks/ttml/get_styling.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_array_find();
      init_array_includes();
      init_is_non_empty_string();
      init_starts_with();
    }
  });

  // src/parsers/texttracks/ttml/nodes.ts
  function getBodyNode(tt) {
    const bodyNodes = tt.getElementsByTagName("body");
    return bodyNodes.length > 0 ? bodyNodes[0] : null;
  }
  function getStyleNodes(tt) {
    return tt.getElementsByTagName("style");
  }
  function getRegionNodes(tt) {
    return tt.getElementsByTagName("region");
  }
  function getTextNodes(tt) {
    return tt.getElementsByTagName("p");
  }
  var init_nodes = __esm({
    "src/parsers/texttracks/ttml/nodes.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/texttracks/ttml/resolve_styles_inheritance.ts
  function resolveStylesInheritance(styles) {
    const recursivelyBrowsedIndexes = [];
    function resolveStyleInheritance(styleElt, index) {
      recursivelyBrowsedIndexes.push(index);
      for (let j = 0; j < styleElt.extendsStyles.length; j++) {
        const extendedStyleID = styleElt.extendsStyles[j];
        const extendedStyleIndex = arrayFindIndex(styles, (x) => x.id === extendedStyleID);
        if (extendedStyleIndex < 0) {
          log_default.warn("TTML Parser: unknown style inheritance: " + extendedStyleID);
        } else {
          const extendedStyle = styles[extendedStyleIndex];
          if (arrayIncludes(recursivelyBrowsedIndexes, extendedStyleIndex)) {
            log_default.warn("TTML Parser: infinite style inheritance loop avoided");
          } else {
            resolveStyleInheritance(extendedStyle, extendedStyleIndex);
          }
          styleElt.style = object_assign_default({}, extendedStyle.style, styleElt.style);
        }
      }
      styleElt.extendsStyles.length = 0;
    }
    for (let i = 0; i < styles.length; i++) {
      resolveStyleInheritance(styles[i], i);
      recursivelyBrowsedIndexes.length = 0;
    }
  }
  var init_resolve_styles_inheritance = __esm({
    "src/parsers/texttracks/ttml/resolve_styles_inheritance.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_log();
      init_array_find_index();
      init_array_includes();
      init_object_assign();
    }
  });

  // src/parsers/texttracks/ttml/parse_ttml.ts
  function parseTTMLString(str, timeOffset) {
    const cues = [];
    const xml = new DOMParser().parseFromString(str, "text/xml");
    if (xml !== null && xml !== void 0) {
      const tts = xml.getElementsByTagName("tt");
      const tt = tts[0];
      if (tt === void 0) {
        throw new Error("invalid XML");
      }
      const body = getBodyNode(tt);
      const styleNodes = getStyleNodes(tt);
      const regionNodes = getRegionNodes(tt);
      const paragraphNodes = getTextNodes(tt);
      const ttParams = getParameters(tt);
      const idStyles = [];
      for (let i = 0; i <= styleNodes.length - 1; i++) {
        const styleNode = styleNodes[i];
        if (styleNode instanceof Element) {
          const styleID = styleNode.getAttribute("xml:id");
          if (styleID !== null) {
            const subStyles = styleNode.getAttribute("style");
            const extendsStyles = subStyles === null ? [] : subStyles.split(" ");
            idStyles.push({
              id: styleID,
              style: getStylingFromElement(styleNode),
              extendsStyles
            });
          }
        }
      }
      resolveStylesInheritance(idStyles);
      const regionStyles = [];
      for (let i = 0; i <= regionNodes.length - 1; i++) {
        const regionNode = regionNodes[i];
        if (regionNode instanceof Element) {
          const regionID = regionNode.getAttribute("xml:id");
          if (regionID !== null) {
            let regionStyle = getStylingFromElement(regionNode);
            const associatedStyleID = regionNode.getAttribute("style");
            if (isNonEmptyString(associatedStyleID)) {
              const style = arrayFind(idStyles, (x) => x.id === associatedStyleID);
              if (style !== void 0) {
                regionStyle = object_assign_default({}, style.style, regionStyle);
              }
            }
            regionStyles.push({
              id: regionID,
              style: regionStyle,
              extendsStyles: []
            });
          }
        }
      }
      const bodyStyle = getStylingAttributes(STYLE_ATTRIBUTES, body !== null ? [body] : [], idStyles, regionStyles);
      const bodySpaceAttribute = body !== null ? body.getAttribute("xml:space") : void 0;
      const shouldTrimWhiteSpaceOnBody = bodySpaceAttribute === "default" || ttParams.spaceStyle === "default";
      for (let i = 0; i < paragraphNodes.length; i++) {
        const paragraph = paragraphNodes[i];
        if (paragraph instanceof Element) {
          const divs = getParentElementsByTagName(paragraph, "div");
          const paragraphStyle = object_assign_default({}, bodyStyle, getStylingAttributes(STYLE_ATTRIBUTES, [
            paragraph,
            ...divs
          ], idStyles, regionStyles));
          const paragraphSpaceAttribute = paragraph.getAttribute("xml:space");
          const shouldTrimWhiteSpace = isNonEmptyString(paragraphSpaceAttribute) ? paragraphSpaceAttribute === "default" : shouldTrimWhiteSpaceOnBody;
          const cue = {
            paragraph,
            timeOffset,
            idStyles,
            regionStyles,
            body,
            paragraphStyle,
            ttParams,
            shouldTrimWhiteSpace
          };
          if (cue !== null) {
            cues.push(cue);
          }
        }
      }
    }
    return cues;
  }
  var STYLE_ATTRIBUTES;
  var init_parse_ttml = __esm({
    "src/parsers/texttracks/ttml/parse_ttml.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_array_find();
      init_is_non_empty_string();
      init_object_assign();
      init_get_parameters();
      init_get_parent_elements_by_tag_name();
      init_get_styling();
      init_nodes();
      init_resolve_styles_inheritance();
      STYLE_ATTRIBUTES = [
        "align",
        "backgroundColor",
        "color",
        "direction",
        "display",
        "displayAlign",
        "extent",
        "fontFamily",
        "fontSize",
        "fontStyle",
        "fontWeight",
        "lineHeight",
        "opacity",
        "origin",
        "overflow",
        "padding",
        "textAlign",
        "textDecoration",
        "textOutline",
        "unicodeBidi",
        "visibility",
        "wrapOption",
        "writingMode"
      ];
    }
  });

  // src/parsers/texttracks/ttml/regexps.ts
  var REGXP_TIME_COLON_FRAMES, REGXP_TIME_COLON, REGXP_TIME_COLON_MS, REGXP_TIME_FRAMES, REGXP_TIME_TICK, REGXP_TIME_HMS, REGXP_PERCENT_VALUES, REGXP_LENGTH, REGXP_8_HEX_COLOR, REGXP_4_HEX_COLOR, REGXP_RGB_COLOR, REGXP_RGBA_COLOR;
  var init_regexps = __esm({
    "src/parsers/texttracks/ttml/regexps.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      REGXP_TIME_COLON_FRAMES = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/;
      REGXP_TIME_COLON = /^(?:(\d{2,}):)?(\d{2}):(\d{2})$/;
      REGXP_TIME_COLON_MS = /^(?:(\d{2,}):)?(\d{2}):(\d{2}\.\d{2,})$/;
      REGXP_TIME_FRAMES = /^(\d*\.?\d*)f$/;
      REGXP_TIME_TICK = /^(\d*\.?\d*)t$/;
      REGXP_TIME_HMS = /^(?:(\d*\.?\d*)h)?(?:(\d*\.?\d*)m)?(?:(\d*\.?\d*)s)?(?:(\d*\.?\d*)ms)?$/;
      REGXP_PERCENT_VALUES = /^(\d{1,2}|100)% (\d{1,2}|100)%$/;
      REGXP_LENGTH = /^((?:\+|\-)?\d*(?:\.\d+)?)(px|em|c|%|rh|rw)$/;
      REGXP_8_HEX_COLOR = /^#([0-9A-f]{2})([0-9A-f]{2})([0-9A-f]{2})([0-9A-f]{2})$/;
      REGXP_4_HEX_COLOR = /^#([0-9A-f])([0-9A-f])([0-9A-f])([0-9A-f])$/;
      REGXP_RGB_COLOR = /^rgb\( *(\d+) *, *(\d+) *, *(\d+) *\)/;
      REGXP_RGBA_COLOR = /^rgba\( *(\d+) *, *(\d+) *, *(\d+) *, *(\d+) *\)/;
    }
  });

  // src/parsers/texttracks/ttml/time_parsing.ts
  function parseTime(text, ttParams) {
    if (REGXP_TIME_COLON_FRAMES.test(text)) {
      return parseColonTimeWithFrames(ttParams, text);
    } else if (REGXP_TIME_COLON.test(text)) {
      return parseTimeFromRegExp(REGXP_TIME_COLON, text);
    } else if (REGXP_TIME_COLON_MS.test(text)) {
      return parseTimeFromRegExp(REGXP_TIME_COLON_MS, text);
    } else if (REGXP_TIME_FRAMES.test(text)) {
      return parseFramesTime(ttParams, text);
    } else if (REGXP_TIME_TICK.test(text)) {
      return parseTickTime(ttParams, text);
    } else if (REGXP_TIME_HMS.test(text)) {
      return parseTimeFromRegExp(REGXP_TIME_HMS, text);
    }
  }
  function parseFramesTime(ttParams, text) {
    const results = REGXP_TIME_FRAMES.exec(text);
    const frames = Number(results[1]);
    return frames / ttParams.frameRate;
  }
  function parseTickTime(ttParams, text) {
    const results = REGXP_TIME_TICK.exec(text);
    const ticks = Number(results[1]);
    return ticks / ttParams.tickRate;
  }
  function parseColonTimeWithFrames(ttParams, text) {
    const results = REGXP_TIME_COLON_FRAMES.exec(text);
    const hours = Number(results[1]);
    const minutes = Number(results[2]);
    let seconds = Number(results[3]);
    let frames = Number(results[4]);
    let subframes = Number(results[5]);
    if (isNaN(subframes)) {
      subframes = 0;
    }
    frames += subframes / ttParams.subFrameRate;
    seconds += frames / ttParams.frameRate;
    return seconds + minutes * 60 + hours * 3600;
  }
  function parseTimeFromRegExp(regex, text) {
    const results = regex.exec(text);
    if (results === null || results[0] === "") {
      return null;
    }
    let hours = Number(results[1]);
    if (isNaN(hours)) {
      hours = 0;
    }
    let minutes = Number(results[2]);
    if (isNaN(minutes)) {
      minutes = 0;
    }
    let seconds = Number(results[3]);
    if (isNaN(seconds)) {
      seconds = 0;
    }
    let milliseconds = Number(results[4]);
    if (isNaN(milliseconds)) {
      milliseconds = 0;
    }
    return milliseconds / 1e3 + seconds + minutes * 60 + hours * 3600;
  }
  var time_parsing_default;
  var init_time_parsing = __esm({
    "src/parsers/texttracks/ttml/time_parsing.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_regexps();
      time_parsing_default = parseTime;
    }
  });

  // src/parsers/texttracks/ttml/get_time_delimiters.ts
  function getTimeDelimiters(element, ttParams) {
    const beginAttr = element.getAttribute("begin");
    const durationAttr = element.getAttribute("dur");
    const endAttr = element.getAttribute("end");
    const start = isNonEmptyString(beginAttr) ? time_parsing_default(beginAttr, ttParams) : null;
    const duration = isNonEmptyString(durationAttr) ? time_parsing_default(durationAttr, ttParams) : null;
    const parsedEnd = isNonEmptyString(endAttr) ? time_parsing_default(endAttr, ttParams) : null;
    if (start == null || parsedEnd == null && duration == null) {
      throw new Error("Invalid text cue");
    }
    const end = parsedEnd == null ? start + duration : parsedEnd;
    return { start, end };
  }
  var init_get_time_delimiters = __esm({
    "src/parsers/texttracks/ttml/get_time_delimiters.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_time_parsing();
    }
  });

  // src/parsers/texttracks/ttml/native/parse_cue.ts
  function parseCue(parsedCue) {
    const {
      paragraph,
      timeOffset,
      paragraphStyle,
      ttParams,
      shouldTrimWhiteSpace
    } = parsedCue;
    if (!paragraph.hasAttribute("begin") && !paragraph.hasAttribute("end") && /^\s*$/.test(paragraph.textContent === null ? "" : paragraph.textContent)) {
      return null;
    }
    const { start, end } = getTimeDelimiters(paragraph, ttParams);
    const text = generateTextContent(paragraph, shouldTrimWhiteSpace);
    const cue = makeCue(start + timeOffset, end + timeOffset, text);
    if (cue === null) {
      return null;
    }
    if (isVTTCue(cue)) {
      addStyle(cue, paragraphStyle);
    }
    return cue;
  }
  function generateTextContent(paragraph, shouldTrimWhiteSpaceForParagraph) {
    function loop(node, shouldTrimWhiteSpaceFromParent) {
      const childNodes = node.childNodes;
      let text = "";
      for (let i = 0; i < childNodes.length; i++) {
        const currentNode = childNodes[i];
        if (currentNode.nodeName === "#text") {
          let textContent = currentNode.textContent;
          if (textContent === null) {
            textContent = "";
          }
          if (shouldTrimWhiteSpaceFromParent) {
            let trimmed = textContent.trim();
            trimmed = trimmed.replace(/\s+/g, " ");
            textContent = trimmed;
          }
          const escapedTextContent = textContent.replace(/&|\u0026/g, "&amp;").replace(/<|\u003C/g, "&lt;").replace(/>|\u2265/g, "&gt;").replace(/\u200E/g, "&lrm;").replace(/\u200F/g, "&rlm;").replace(/\u00A0/g, "&nbsp;");
          text += escapedTextContent;
        } else if (currentNode.nodeName === "br") {
          text += "\n";
        } else if (currentNode.nodeName === "span" && currentNode.nodeType === Node.ELEMENT_NODE && currentNode.childNodes.length > 0) {
          const spaceAttribute = currentNode.getAttribute("xml:space");
          const shouldTrimWhiteSpaceForSpan = isNonEmptyString(spaceAttribute) ? spaceAttribute === "default" : shouldTrimWhiteSpaceFromParent;
          text += loop(currentNode, shouldTrimWhiteSpaceForSpan);
        }
      }
      return text;
    }
    return loop(paragraph, shouldTrimWhiteSpaceForParagraph);
  }
  function addStyle(cue, style) {
    const extent = style.extent;
    if (isNonEmptyString(extent)) {
      const results = REGXP_PERCENT_VALUES.exec(extent);
      if (results != null) {
        cue.size = Number(results[1]);
      }
    }
    const writingMode = style.writingMode;
    switch (writingMode) {
      case "tb":
      case "tblr":
        cue.vertical = "lr";
        break;
      case "tbrl":
        cue.vertical = "rl";
        break;
      default:
        break;
    }
    const origin = style.origin;
    if (isNonEmptyString(origin)) {
      const results = REGXP_PERCENT_VALUES.exec(origin);
      if (results != null) {
      }
    }
    const align = style.align;
    if (isNonEmptyString(align)) {
      cue.align = align;
      if (align === "center") {
        if (cue.align !== "center") {
          cue.align = "middle";
        }
        cue.position = "auto";
      }
      const positionAlign = TEXT_ALIGN_TO_POSITION_ALIGN[align];
      cue.positionAlign = positionAlign === void 0 ? "" : positionAlign;
      const lineAlign = TEXT_ALIGN_TO_LIGN_ALIGN[align];
      cue.lineAlign = lineAlign === void 0 ? "" : lineAlign;
    }
  }
  var TEXT_ALIGN_TO_LIGN_ALIGN, TEXT_ALIGN_TO_POSITION_ALIGN;
  var init_parse_cue = __esm({
    "src/parsers/texttracks/ttml/native/parse_cue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_is_non_empty_string();
      init_get_time_delimiters();
      init_regexps();
      TEXT_ALIGN_TO_LIGN_ALIGN = {
        left: "start",
        center: "center",
        right: "end",
        start: "start",
        end: "end"
      };
      TEXT_ALIGN_TO_POSITION_ALIGN = {
        left: "line-left",
        center: "center",
        right: "line-right"
      };
    }
  });

  // src/parsers/texttracks/ttml/native/parse_ttml_to_vtt.ts
  function parseTtmlToNative(str, timeOffset) {
    const parsedCues = parseTTMLString(str, timeOffset);
    const cues = [];
    for (let i = 0; i < parsedCues.length; i++) {
      const parsedCue = parsedCues[i];
      const cue = parseCue(parsedCue);
      if (cue !== null) {
        cues.push(cue);
      }
    }
    return cues;
  }
  var init_parse_ttml_to_vtt = __esm({
    "src/parsers/texttracks/ttml/native/parse_ttml_to_vtt.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_ttml();
      init_parse_cue();
    }
  });

  // src/parsers/texttracks/ttml/native/index.ts
  var native_exports3 = {};
  __export(native_exports3, {
    default: () => native_default3
  });
  var native_default3;
  var init_native3 = __esm({
    "src/parsers/texttracks/ttml/native/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_ttml_to_vtt();
      native_default3 = parseTtmlToNative;
    }
  });

  // src/parsers/texttracks/sami/native.ts
  var native_exports4 = {};
  __export(native_exports4, {
    default: () => native_default4
  });
  function createCuesFromArray(cuesArray) {
    const nativeCues = [];
    for (let i = 0; i < cuesArray.length; i++) {
      const { start, end, text } = cuesArray[i];
      if (isNonEmptyString(text) && end != null) {
        const cue = makeCue(start, end, text);
        if (cue != null) {
          nativeCues.push(cue);
        }
      }
    }
    return nativeCues;
  }
  function getClassNameByLang(str) {
    const ruleRe = /\.(\S+)\s*{([^}]*)}/gi;
    const langs = {};
    let m = ruleRe.exec(str);
    while (Array.isArray(m)) {
      const name = m[1];
      const lang = getCSSProperty(m[2], "lang");
      if (name != null && lang != null) {
        langs[lang] = name;
      }
      m = ruleRe.exec(str);
    }
    return langs;
  }
  function getCSSProperty(str, name) {
    const matches = new RegExp("\\s*" + name + ":\\s*(\\S+);", "i").exec(str);
    return Array.isArray(matches) ? matches[1] : null;
  }
  function decodeEntities(text) {
    return text.replace(BR, "\n").replace(HTML_ENTITIES, (_, $1) => String.fromCharCode(Number($1)));
  }
  function parseSami(smi, timeOffset, lang) {
    const syncOpen = /<sync[ >]/ig;
    const syncClose = /<sync[ >]|<\/body>/ig;
    const subs = [];
    const styleMatches = STYLE.exec(smi);
    const css = styleMatches !== null ? styleMatches[1] : "";
    let up;
    let to;
    syncClose.exec(smi);
    const langs = getClassNameByLang(css);
    let klass;
    if (isNonEmptyString(lang)) {
      klass = langs[lang];
      if (klass === void 0) {
        throw new Error(`sami: could not find lang ${lang} in CSS`);
      }
    }
    while (true) {
      up = syncOpen.exec(smi);
      to = syncClose.exec(smi);
      if (up === null && to === null) {
        break;
      }
      if (up === null || to === null || up.index >= to.index) {
        throw new Error("parse error");
      }
      const str = smi.slice(up.index, to.index);
      const tim = START.exec(str);
      if (tim === null) {
        throw new Error("parse error (sync time attribute)");
      }
      const start = +tim[1];
      if (isNaN(start)) {
        throw new Error("parse error (sync time attribute NaN)");
      }
      appendToSubs(str.split("\n"), start / 1e3);
    }
    return createCuesFromArray(subs);
    function appendToSubs(lines, start) {
      let i = lines.length;
      let m;
      while (--i >= 0) {
        m = PARAG.exec(lines[i]);
        if (m === null) {
          continue;
        }
        const [, kl, txt] = m;
        if (klass !== kl) {
          continue;
        }
        if (txt === "&nbsp;") {
          subs[subs.length - 1].end = start;
        } else {
          subs.push({
            text: decodeEntities(txt),
            start: start + timeOffset
          });
        }
      }
    }
  }
  var HTML_ENTITIES, BR, STYLE, PARAG, START, native_default4;
  var init_native4 = __esm({
    "src/parsers/texttracks/sami/native.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_is_non_empty_string();
      HTML_ENTITIES = /&#([0-9]+);/g;
      BR = /<br>/gi;
      STYLE = /<style[^>]*>([\s\S]*?)<\/style[^>]*>/i;
      PARAG = /\s*<p (?:class=([^>]+))?>(.*)/i;
      START = /<sync[^>]+?start="?([0-9]*)"?[^0-9]/i;
      native_default4 = parseSami;
    }
  });

  // src/parsers/texttracks/srt/find_end_of_cue_block.ts
  function findEndOfCueBlock2(linified, startIndex) {
    let firstEmptyLineIndex = startIndex + 1;
    while (isNonEmptyString(linified[firstEmptyLineIndex])) {
      firstEmptyLineIndex++;
    }
    return firstEmptyLineIndex;
  }
  var init_find_end_of_cue_block = __esm({
    "src/parsers/texttracks/srt/find_end_of_cue_block.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
    }
  });

  // src/parsers/texttracks/srt/get_cue_blocks.ts
  function getCueBlocks2(linified) {
    const cueBlocks = [];
    for (let i = 0; i < linified.length; i++) {
      if (isNonEmptyString(linified[i])) {
        const endOfCue = findEndOfCueBlock2(linified, i);
        const cueBlockCandidate = linified.slice(i, endOfCue);
        if (cueBlockCandidate.length > 0) {
          if (cueBlockCandidate.length === 1) {
            if (cueBlockCandidate[0].indexOf("-->") >= 0) {
              cueBlocks.push(cueBlockCandidate);
            }
          } else {
            if (cueBlockCandidate[1].indexOf("-->") >= 0 || cueBlockCandidate[0].indexOf("-->") >= 0) {
              cueBlocks.push(cueBlockCandidate);
            }
          }
        }
        i = endOfCue;
      }
    }
    return cueBlocks;
  }
  var init_get_cue_blocks2 = __esm({
    "src/parsers/texttracks/srt/get_cue_blocks.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_find_end_of_cue_block();
    }
  });

  // src/parsers/texttracks/srt/parse_timestamp.ts
  function parseTimestamp2(timestampString) {
    const splittedTS = timestampString.split(":");
    if (isNonEmptyString(splittedTS[2])) {
      const hours = parseInt(splittedTS[0], 10);
      const minutes = parseInt(splittedTS[1], 10);
      const seconds = parseFloat(splittedTS[2].replace(",", "."));
      if (isNaN(hours) || isNaN(minutes) || isNaN(seconds)) {
        return void 0;
      }
      return hours * 60 * 60 + minutes * 60 + seconds;
    }
  }
  var init_parse_timestamp2 = __esm({
    "src/parsers/texttracks/srt/parse_timestamp.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
    }
  });

  // src/parsers/texttracks/srt/parse_cue.ts
  function parseCueBlock2(cueLines, timeOffset) {
    if (cueLines.length === 0) {
      return null;
    }
    let startTimeString;
    let endTimeString;
    let payload = [];
    if (isNonEmptyString(cueLines[1]) && cueLines[1].indexOf("-->") !== -1) {
      [startTimeString, endTimeString] = cueLines[1].split("-->").map((s) => s.trim());
      payload = cueLines.slice(2, cueLines.length);
    }
    if (!isNonEmptyString(startTimeString) || !isNonEmptyString(endTimeString)) {
      [startTimeString, endTimeString] = cueLines[0].split("-->").map((s) => s.trim());
      payload = cueLines.slice(1, cueLines.length);
    }
    if (!isNonEmptyString(startTimeString) || !isNonEmptyString(endTimeString)) {
      return null;
    }
    const start = parseTimestamp2(startTimeString);
    const end = parseTimestamp2(endTimeString);
    if (start === void 0 || end === void 0) {
      return null;
    }
    return {
      start: start + timeOffset,
      end: end + timeOffset,
      payload
    };
  }
  var init_parse_cue2 = __esm({
    "src/parsers/texttracks/srt/parse_cue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_parse_timestamp2();
    }
  });

  // src/parsers/texttracks/srt/native.ts
  var native_exports5 = {};
  __export(native_exports5, {
    default: () => parseSRTStringToVTTCues
  });
  function parseSRTStringToVTTCues(srtStr, timeOffset) {
    const lines = srtStr.split(/\r\n|\n|\r/);
    const cueBlocks = getCueBlocks2(lines);
    const cues = [];
    for (let i = 0; i < cueBlocks.length; i++) {
      const cueObject = parseCueBlock2(cueBlocks[i], timeOffset);
      if (cueObject !== null) {
        const nativeCue = toNativeCue2(cueObject);
        if (nativeCue !== null) {
          cues.push(nativeCue);
        }
      }
    }
    return cues;
  }
  function toNativeCue2(cueObj) {
    const { start, end, payload } = cueObj;
    const text = payload.join("\n");
    return makeCue(start, end, text);
  }
  var init_native5 = __esm({
    "src/parsers/texttracks/srt/native.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_get_cue_blocks2();
      init_parse_cue2();
    }
  });

  // src/core/segment_buffers/implementations/text/html/parsers.ts
  function parseTextTrackToElements(type, data, timestampOffset, language) {
    log_default.debug("HTSB: Finding parser for html text tracks:", type);
    const parser = features_default.htmlTextTracksParsers[type];
    if (typeof parser !== "function") {
      throw new Error("no parser found for the given text track");
    }
    log_default.debug("HTSB: Parser found, parsing...");
    const parsed = parser(data, timestampOffset, language);
    log_default.debug("HTTB: Parsed successfully!", parsed);
    return parsed;
  }
  var init_parsers2 = __esm({
    "src/core/segment_buffers/implementations/text/html/parsers.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_features();
      init_log();
    }
  });

  // src/core/segment_buffers/implementations/text/html/utils.ts
  function areNearlyEqual(a, b) {
    return Math.abs(a - b) <= MAX_DELTA_BUFFER_TIME;
  }
  function getCuesBefore(cues, time) {
    for (let i = cues.length - 1; i >= 0; i--) {
      const cue = cues[i];
      if (cue.start < time) {
        return cues.slice(0, i + 1);
      }
    }
    return [];
  }
  function getCuesAfter(cues, time) {
    for (let i = 0; i < cues.length; i++) {
      const cue = cues[i];
      if (cue.end > time) {
        return cues.slice(i, cues.length);
      }
    }
    return [];
  }
  function removeCuesInfosBetween(cuesInfos, start, end) {
    const endCuesInfos1 = Math.max(cuesInfos.start, start);
    const cues1 = getCuesBefore(cuesInfos.cues, start);
    const cuesInfos1 = {
      start: cuesInfos.start,
      end: endCuesInfos1,
      cues: cues1
    };
    const startCuesInfos2 = Math.min(end, cuesInfos.end);
    const cues2 = getCuesAfter(cuesInfos.cues, end);
    const cuesInfos2 = {
      start: startCuesInfos2,
      end: cuesInfos.end,
      cues: cues2
    };
    return [cuesInfos1, cuesInfos2];
  }
  var MAX_DELTA_BUFFER_TIME;
  var init_utils7 = __esm({
    "src/core/segment_buffers/implementations/text/html/utils.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      MAX_DELTA_BUFFER_TIME = 0.2;
    }
  });

  // src/core/segment_buffers/implementations/text/html/text_track_cues_store.ts
  var TextTrackCuesStore;
  var init_text_track_cues_store = __esm({
    "src/core/segment_buffers/implementations/text/html/text_track_cues_store.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_assert();
      init_utils7();
      TextTrackCuesStore = class {
        constructor() {
          this._cuesBuffer = [];
        }
        get(time) {
          const cuesBuffer = this._cuesBuffer;
          const ret = [];
          for (let cueIdx = cuesBuffer.length - 1; cueIdx >= 0; cueIdx--) {
            const segment = cuesBuffer[cueIdx];
            if (time < segment.end && time >= segment.start) {
              const cues = segment.cues;
              for (let j = 0; j < cues.length; j++) {
                if (time >= cues[j].start && time < cues[j].end) {
                  ret.push(cues[j].element);
                }
              }
              return ret;
            }
          }
          return [];
        }
        remove(from2, _to) {
          if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
            assert(from2 >= 0);
            assert(_to >= 0);
            assert(_to > from2);
          }
          const to = Math.max(from2, _to);
          const cuesBuffer = this._cuesBuffer;
          for (let cueIdx = 0; cueIdx < cuesBuffer.length; cueIdx++) {
            if (cuesBuffer[cueIdx].end > from2) {
              const startCuesInfos = cuesBuffer[cueIdx];
              if (startCuesInfos.start >= to) {
                return;
              }
              if (startCuesInfos.end >= to) {
                if (from2 <= startCuesInfos.start) {
                  startCuesInfos.cues = getCuesAfter(startCuesInfos.cues, to);
                  startCuesInfos.start = to;
                } else {
                  const [
                    cuesInfos1,
                    cuesInfos2
                  ] = removeCuesInfosBetween(startCuesInfos, from2, to);
                  this._cuesBuffer[cueIdx] = cuesInfos1;
                  cuesBuffer.splice(cueIdx + 1, 0, cuesInfos2);
                }
                return;
              }
              if (startCuesInfos.start >= from2) {
                cuesBuffer.splice(cueIdx, 1);
                cueIdx--;
              } else {
                startCuesInfos.cues = getCuesBefore(startCuesInfos.cues, from2);
                startCuesInfos.end = Math.max(from2, startCuesInfos.start);
              }
            }
          }
        }
        insert(cues, start, end) {
          const cuesBuffer = this._cuesBuffer;
          const cuesInfosToInsert = { start, end, cues };
          function onIndexOfNextCueFound(indexOfNextCue) {
            const nextCue = cuesBuffer[indexOfNextCue];
            if (nextCue === void 0 || areNearlyEqual(cuesInfosToInsert.end, nextCue.end)) {
              cuesBuffer[indexOfNextCue] = cuesInfosToInsert;
            } else if (nextCue.start >= cuesInfosToInsert.end) {
              cuesBuffer.splice(indexOfNextCue, 0, cuesInfosToInsert);
            } else {
              nextCue.cues = getCuesAfter(nextCue.cues, cuesInfosToInsert.end);
              nextCue.start = cuesInfosToInsert.end;
              cuesBuffer.splice(indexOfNextCue, 0, cuesInfosToInsert);
            }
          }
          for (let cueIdx = 0; cueIdx < cuesBuffer.length; cueIdx++) {
            let cuesInfos = cuesBuffer[cueIdx];
            if (start < cuesInfos.end) {
              if (areNearlyEqual(start, cuesInfos.start)) {
                if (areNearlyEqual(end, cuesInfos.end)) {
                  cuesBuffer[cueIdx] = cuesInfosToInsert;
                  return;
                } else if (end < cuesInfos.end) {
                  cuesInfos.cues = getCuesAfter(cuesInfos.cues, end);
                  cuesInfos.start = end;
                  cuesBuffer.splice(cueIdx, 0, cuesInfosToInsert);
                  return;
                }
                do {
                  cuesBuffer.splice(cueIdx, 1);
                  cuesInfos = cuesBuffer[cueIdx];
                } while (cuesInfos !== void 0 && end > cuesInfos.end);
                onIndexOfNextCueFound(cueIdx);
                return;
              } else if (start < cuesInfos.start) {
                if (end < cuesInfos.start) {
                  cuesBuffer.splice(cueIdx, 0, cuesInfosToInsert);
                  return;
                } else if (areNearlyEqual(end, cuesInfos.start)) {
                  cuesInfos.start = end;
                  cuesBuffer.splice(cueIdx, 0, cuesInfosToInsert);
                  return;
                } else if (areNearlyEqual(end, cuesInfos.end)) {
                  cuesBuffer.splice(cueIdx, 1, cuesInfosToInsert);
                  return;
                } else if (end < cuesInfos.end) {
                  cuesInfos.cues = getCuesAfter(cuesInfos.cues, end);
                  cuesInfos.start = end;
                  cuesBuffer.splice(cueIdx, 0, cuesInfosToInsert);
                  return;
                }
                do {
                  cuesBuffer.splice(cueIdx, 1);
                  cuesInfos = cuesBuffer[cueIdx];
                } while (cuesInfos !== void 0 && end > cuesInfos.end);
                onIndexOfNextCueFound(cueIdx);
                return;
              }
              if (areNearlyEqual(cuesInfos.end, end)) {
                cuesInfos.cues = getCuesBefore(cuesInfos.cues, start);
                cuesInfos.end = start;
                cuesBuffer.splice(cueIdx + 1, 0, cuesInfosToInsert);
                return;
              } else if (cuesInfos.end > end) {
                const [
                  cuesInfos1,
                  cuesInfos2
                ] = removeCuesInfosBetween(cuesInfos, start, end);
                this._cuesBuffer[cueIdx] = cuesInfos1;
                cuesBuffer.splice(cueIdx + 1, 0, cuesInfosToInsert);
                cuesBuffer.splice(cueIdx + 2, 0, cuesInfos2);
                return;
              } else {
                cuesInfos.cues = getCuesBefore(cuesInfos.cues, start);
                cuesInfos.end = start;
                const nextCueIdx = cueIdx + 1;
                cuesInfos = cuesBuffer[nextCueIdx];
                while (cuesInfos !== void 0 && end > cuesInfos.end) {
                  cuesBuffer.splice(nextCueIdx, 1);
                  cuesInfos = cuesBuffer[nextCueIdx];
                }
                onIndexOfNextCueFound(nextCueIdx);
                return;
              }
            }
          }
          cuesBuffer.push(cuesInfosToInsert);
        }
      };
    }
  });

  // src/core/segment_buffers/implementations/text/html/update_proportional_elements.ts
  function updateProportionalElements(currentHeight, currentWidth, resolution, textTrackElement) {
    const cellUnit = [
      currentWidth / resolution.columns,
      currentHeight / resolution.rows
    ];
    const proportElts = textTrackElement.getElementsByClassName("proportional-style");
    for (let eltIdx = 0; eltIdx < proportElts.length; eltIdx++) {
      const elt = proportElts[eltIdx];
      if (elt instanceof HTMLElement) {
        const fontSizeVal = elt.getAttribute("data-proportional-font-size");
        if (fontSizeVal !== null && !isNaN(+fontSizeVal)) {
          elt.style.fontSize = String(+fontSizeVal * cellUnit[1]) + "px";
        }
        const widthVal = elt.getAttribute("data-proportional-width");
        if (widthVal !== null && !isNaN(+widthVal)) {
          elt.style.width = String(+widthVal * cellUnit[0]) + "px";
        }
        const heightVal = elt.getAttribute("data-proportional-height");
        if (heightVal !== null && !isNaN(+heightVal)) {
          elt.style.height = String(+heightVal * cellUnit[1]) + "px";
        }
        const lineHeightVal = elt.getAttribute("data-proportional-line-height");
        if (lineHeightVal !== null && !isNaN(+lineHeightVal)) {
          elt.style.lineHeight = String(+lineHeightVal * cellUnit[1]) + "px";
        }
        const leftVal = elt.getAttribute("data-proportional-left");
        if (leftVal !== null && !isNaN(+leftVal)) {
          elt.style.left = String(+leftVal * cellUnit[0]) + "px";
        }
        const topVal = elt.getAttribute("data-proportional-top");
        if (topVal !== null && !isNaN(+topVal)) {
          elt.style.top = String(+topVal * cellUnit[1]) + "px";
        }
        const paddingTopVal = elt.getAttribute("data-proportional-padding-top");
        if (paddingTopVal !== null && !isNaN(+paddingTopVal)) {
          elt.style.paddingTop = String(+paddingTopVal * cellUnit[1]) + "px";
        }
        const paddingBottomVal = elt.getAttribute("data-proportional-padding-bottom");
        if (paddingBottomVal !== null && !isNaN(+paddingBottomVal)) {
          elt.style.paddingBottom = String(+paddingBottomVal * cellUnit[1]) + "px";
        }
        const paddingLeftVal = elt.getAttribute("data-proportional-padding-left");
        if (paddingLeftVal !== null && !isNaN(+paddingLeftVal)) {
          elt.style.paddingLeft = String(+paddingLeftVal * cellUnit[0]) + "px";
        }
        const paddingRightVal = elt.getAttribute("data-proportional-padding-right");
        if (paddingRightVal !== null && !isNaN(+paddingRightVal)) {
          elt.style.paddingRight = String(+paddingRightVal * cellUnit[0]) + "px";
        }
      }
    }
    return proportElts.length > 0;
  }
  var init_update_proportional_elements = __esm({
    "src/core/segment_buffers/implementations/text/html/update_proportional_elements.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/core/segment_buffers/implementations/text/html/html_text_segment_buffer.ts
  function generateRefreshInterval(videoElement) {
    const seeking$ = onSeeking$3(videoElement);
    const seeked$ = onSeeked$2(videoElement);
    const ended$ = onEnded$3(videoElement);
    const { MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL } = config_default.getCurrent();
    const manualRefresh$ = merge(seeked$, ended$);
    const autoRefresh$ = interval(MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL).pipe(startWith(null));
    return manualRefresh$.pipe(startWith(null), switchMap(() => concat(autoRefresh$.pipe(map(() => true), takeUntil(seeking$)), of(false))));
  }
  function safelyRemoveChild(element, child) {
    try {
      element.removeChild(child);
    } catch (_error) {
      log_default.warn("HTSB: Can't remove text track: not in the element.");
    }
  }
  function getElementResolution(element) {
    const strRows = element.getAttribute("data-resolution-rows");
    const strColumns = element.getAttribute("data-resolution-columns");
    if (strRows === null || strColumns === null) {
      return null;
    }
    const rows = parseInt(strRows, 10);
    const columns = parseInt(strColumns, 10);
    if (rows === null || columns === null) {
      return null;
    }
    return { rows, columns };
  }
  function assertChunkIsTextTrackSegmentData2(chunk) {
    if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.PRODUCTION) {
      return;
    }
    if (typeof chunk !== "object" || chunk === null || typeof chunk.data !== "string" || typeof chunk.type !== "string" || chunk.language !== void 0 && typeof chunk.language !== "string" || chunk.start !== void 0 && typeof chunk.start !== "number" || chunk.end !== void 0 && typeof chunk.end !== "number") {
      throw new Error("Invalid format given to a NativeTextSegmentBuffer");
    }
  }
  var onEnded$3, onSeeked$2, onSeeking$3, HTMLTextSegmentBuffer;
  var init_html_text_segment_buffer = __esm({
    "src/core/segment_buffers/implementations/text/html/html_text_segment_buffer.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_compat();
      init_config2();
      init_log();
      init_types4();
      init_manual_time_ranges();
      init_parsers2();
      init_text_track_cues_store();
      init_update_proportional_elements();
      ({
        onEnded$: onEnded$3,
        onSeeked$: onSeeked$2,
        onSeeking$: onSeeking$3
      } = event_listeners_exports);
      HTMLTextSegmentBuffer = class extends SegmentBuffer {
        constructor(videoElement, textTrackElement) {
          log_default.debug("HTSB: Creating HTMLTextSegmentBuffer");
          super();
          this.bufferType = "text";
          this._buffered = new ManualTimeRanges();
          this._videoElement = videoElement;
          this._textTrackElement = textTrackElement;
          this._clearSizeUpdates$ = new Subject();
          this._destroy$ = new Subject();
          this._buffer = new TextTrackCuesStore();
          this._currentCues = [];
          generateRefreshInterval(this._videoElement).pipe(takeUntil(this._destroy$)).subscribe((shouldDisplay) => {
            if (!shouldDisplay) {
              this._disableCurrentCues();
              return;
            }
            const { MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL } = config_default.getCurrent();
            const time = Math.max(this._videoElement.currentTime + MAXIMUM_HTML_TEXT_TRACK_UPDATE_INTERVAL / 1e3 / 2, 0);
            const cues = this._buffer.get(time);
            if (cues.length === 0) {
              this._disableCurrentCues();
            } else {
              this._displayCues(cues);
            }
          });
        }
        pushChunk(infos) {
          return defer(() => {
            this.pushChunkSync(infos);
            return of(void 0);
          });
        }
        removeBuffer(start, end) {
          return defer(() => {
            this.removeBufferSync(start, end);
            return of(void 0);
          });
        }
        endOfSegment(_infos) {
          return defer(() => {
            this._segmentInventory.completeSegment(_infos, this._buffered);
            return of(void 0);
          });
        }
        getBufferedRanges() {
          return this._buffered;
        }
        dispose() {
          log_default.debug("HTSB: Disposing HTMLTextSegmentBuffer");
          this._disableCurrentCues();
          this._buffer.remove(0, Infinity);
          this._buffered.remove(0, Infinity);
          this._destroy$.next();
          this._destroy$.complete();
        }
        pushChunkSync(infos) {
          var _a2, _b2;
          log_default.debug("HTSB: Appending new html text tracks");
          const {
            timestampOffset,
            appendWindow,
            chunk
          } = infos.data;
          if (chunk === null) {
            return;
          }
          assertChunkIsTextTrackSegmentData2(chunk);
          const {
            start: startTime,
            end: endTime,
            data: dataString,
            type,
            language
          } = chunk;
          const appendWindowStart = (_a2 = appendWindow[0]) != null ? _a2 : 0;
          const appendWindowEnd = (_b2 = appendWindow[1]) != null ? _b2 : Infinity;
          const cues = parseTextTrackToElements(type, dataString, timestampOffset, language);
          if (appendWindowStart !== 0 && appendWindowEnd !== Infinity) {
            let i = 0;
            while (i < cues.length && cues[i].end <= appendWindowStart) {
              i++;
            }
            cues.splice(0, i);
            i = 0;
            while (i < cues.length && cues[i].start < appendWindowStart) {
              cues[i].start = appendWindowStart;
              i++;
            }
            i = cues.length - 1;
            while (i >= 0 && cues[i].start >= appendWindowEnd) {
              i--;
            }
            cues.splice(i, cues.length);
            i = cues.length - 1;
            while (i >= 0 && cues[i].end > appendWindowEnd) {
              cues[i].end = appendWindowEnd;
              i--;
            }
          }
          let start;
          if (startTime !== void 0) {
            start = Math.max(appendWindowStart, startTime);
          } else {
            if (cues.length <= 0) {
              log_default.warn("HTSB: Current text tracks have no cues nor start time. Aborting");
              return;
            }
            log_default.warn("HTSB: No start time given. Guessing from cues.");
            start = cues[0].start;
          }
          let end;
          if (endTime !== void 0) {
            end = Math.min(appendWindowEnd, endTime);
          } else {
            if (cues.length <= 0) {
              log_default.warn("HTSB: Current text tracks have no cues nor end time. Aborting");
              return;
            }
            log_default.warn("HTSB: No end time given. Guessing from cues.");
            end = cues[cues.length - 1].end;
          }
          if (end <= start) {
            log_default.warn("HTSB: Invalid text track appended: ", "the start time is inferior or equal to the end time.");
            return;
          }
          if (infos.inventoryInfos !== null) {
            this._segmentInventory.insertChunk(infos.inventoryInfos);
          }
          this._buffer.insert(cues, start, end);
          this._buffered.insert(start, end);
        }
        removeBufferSync(start, end) {
          log_default.debug("HTSB: Removing html text track data", start, end);
          this._buffer.remove(start, end);
          this._buffered.remove(start, end);
        }
        _disableCurrentCues() {
          this._clearSizeUpdates$.next();
          if (this._currentCues.length > 0) {
            for (let i = 0; i < this._currentCues.length; i++) {
              safelyRemoveChild(this._textTrackElement, this._currentCues[i].element);
            }
            this._currentCues = [];
          }
        }
        _displayCues(elements) {
          const nothingChanged = this._currentCues.length === elements.length && this._currentCues.every((current, index) => current.element === elements[index]);
          if (nothingChanged) {
            return;
          }
          this._clearSizeUpdates$.next();
          for (let i = 0; i < this._currentCues.length; i++) {
            safelyRemoveChild(this._textTrackElement, this._currentCues[i].element);
          }
          this._currentCues = [];
          for (let i = 0; i < elements.length; i++) {
            const element = elements[i];
            const resolution = getElementResolution(element);
            this._currentCues.push({ element, resolution });
            this._textTrackElement.appendChild(element);
          }
          const proportionalCues = this._currentCues.filter((cue) => cue.resolution !== null);
          if (proportionalCues.length > 0) {
            const { TEXT_TRACK_SIZE_CHECKS_INTERVAL } = config_default.getCurrent();
            onHeightWidthChange(this._textTrackElement, TEXT_TRACK_SIZE_CHECKS_INTERVAL).pipe(takeUntil(this._clearSizeUpdates$), takeUntil(this._destroy$)).subscribe(({ height, width }) => {
              for (let i = 0; i < proportionalCues.length; i++) {
                const { resolution, element } = proportionalCues[i];
                updateProportionalElements(height, width, resolution, element);
              }
            });
          }
        }
      };
      if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
        let _checkType = function(input) {
          function checkEqual(_arg) {
          }
          checkEqual(input);
        };
      }
    }
  });

  // src/core/segment_buffers/implementations/text/html/index.ts
  var html_exports = {};
  __export(html_exports, {
    default: () => html_default
  });
  var html_default;
  var init_html = __esm({
    "src/core/segment_buffers/implementations/text/html/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_html_text_segment_buffer();
      html_default = HTMLTextSegmentBuffer;
    }
  });

  // src/parsers/texttracks/sami/html.ts
  var html_exports2 = {};
  __export(html_exports2, {
    default: () => html_default2
  });
  function getClassNameByLang2(str) {
    const ruleRe = /\.(\S+)\s*{([^}]*)}/gi;
    const langs = {};
    let m = ruleRe.exec(str);
    while (m !== null) {
      const name = m[1];
      const lang = getCSSProperty2(m[2], "lang");
      if (name != null && lang != null) {
        langs[lang] = name;
      }
      m = ruleRe.exec(str);
    }
    return langs;
  }
  function getPCSSRules(str) {
    const pRuleRegex = /p\s*{([^}]*)}/gi;
    const rule = pRuleRegex.exec(str);
    if (rule === null) {
      return "";
    }
    return rule[1];
  }
  function getCSSProperty2(str, name) {
    const matches = new RegExp("\\s*" + name + ":\\s*(\\S+);", "i").exec(str);
    return Array.isArray(matches) ? matches[1] : null;
  }
  function decodeEntities2(text) {
    return text.replace(HTML_ENTITIES2, (_, $1) => String.fromCharCode(Number($1)));
  }
  function parseSami2(smi, timeOffset, lang) {
    const syncOpen = /<sync[ >]/ig;
    const syncClose = /<sync[ >]|<\/body>/ig;
    const subs = [];
    const styleMatches = STYLE2.exec(smi);
    const css = Array.isArray(styleMatches) ? styleMatches[1] : "";
    let up;
    let to;
    syncClose.exec(smi);
    const langs = getClassNameByLang2(css);
    const pCSS = getPCSSRules(css);
    let klass;
    if (isNonEmptyString(lang)) {
      klass = langs[lang];
      if (klass === void 0) {
        throw new Error(`sami: could not find lang ${lang} in CSS`);
      }
    }
    while (true) {
      up = syncOpen.exec(smi);
      to = syncClose.exec(smi);
      if (up === null && to === null) {
        break;
      }
      if (up === null || to === null || up.index >= to.index) {
        throw new Error("parse error");
      }
      const str = smi.slice(up.index, to.index);
      const tim = START2.exec(str);
      if (!Array.isArray(tim)) {
        throw new Error("parse error (sync time attribute)");
      }
      const start = +tim[1];
      if (isNaN(start)) {
        throw new Error("parse error (sync time attribute NaN)");
      }
      appendToSubs(str.split("\n"), start / 1e3);
    }
    return subs;
    function appendToSubs(lines, start) {
      let i = lines.length;
      while (--i >= 0) {
        const paragraphInfos = PARAG2.exec(lines[i]);
        if (!Array.isArray(paragraphInfos)) {
          continue;
        }
        const [, className, txt] = paragraphInfos;
        if (klass !== className) {
          continue;
        }
        if (txt === "&nbsp;") {
          subs[subs.length - 1].end = start;
        } else {
          const wrapperEl = document.createElement("DIV");
          wrapperEl.className = "rxp-texttrack-region";
          const divEl = document.createElement("DIV");
          divEl.className = "rxp-texttrack-div";
          divEl.style.position = "absolute";
          divEl.style.bottom = "0";
          divEl.style.width = "100%";
          divEl.style.color = "#fff";
          divEl.style.textShadow = "-1px -1px 0 #000,1px -1px 0 #000,-1px 1px 0 #000,1px 1px 0 #000";
          const pEl = document.createElement("div");
          pEl.className = "rxp-texttrack-p";
          if (isNonEmptyString(pCSS)) {
            pEl.style.cssText = pCSS;
          }
          const textEls = txt.split(BR2);
          for (let j = 0; j < textEls.length; j++) {
            if (j !== 0) {
              pEl.appendChild(document.createElement("BR"));
            }
            const spanEl = document.createElement("SPAN");
            spanEl.className = "rxp-texttrack-span";
            spanEl.textContent = decodeEntities2(textEls[j]);
            pEl.appendChild(spanEl);
          }
          divEl.appendChild(pEl);
          wrapperEl.appendChild(divEl);
          subs.push({
            element: wrapperEl,
            start: start + timeOffset,
            end: -1
          });
        }
      }
    }
  }
  var HTML_ENTITIES2, BR2, STYLE2, PARAG2, START2, html_default2;
  var init_html2 = __esm({
    "src/parsers/texttracks/sami/html.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      HTML_ENTITIES2 = /&#([0-9]+);/g;
      BR2 = /<br>/gi;
      STYLE2 = /<style[^>]*>([\s\S]*?)<\/style[^>]*>/i;
      PARAG2 = /\s*<p (?:class=([^>]+))?>(.*)/i;
      START2 = /<sync[^>]+?start="?([0-9]*)"?[^0-9]/i;
      html_default2 = parseSami2;
    }
  });

  // src/parsers/texttracks/ttml/html/apply_default_ttml_paragraph_style.ts
  function shouldApplyDefaultTTMLStyle(paragraphStyle) {
    return paragraphStyle.extent === void 0 && paragraphStyle.origin === void 0 && paragraphStyle.displayAlign === void 0 && paragraphStyle.display === void 0 && paragraphStyle.textAlign === void 0 && paragraphStyle.fontSize === void 0;
  }
  function applyDefaultTTMLStyle(paragraphStyle) {
    paragraphStyle.extent = "70% 20%";
    paragraphStyle.fontSize = "1c";
    paragraphStyle.origin = "15% 80%";
    paragraphStyle.displayAlign = "before";
    paragraphStyle.textAlign = "center";
  }
  var init_apply_default_ttml_paragraph_style = __esm({
    "src/parsers/texttracks/ttml/html/apply_default_ttml_paragraph_style.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
    }
  });

  // src/parsers/texttracks/ttml/html/apply_extent.ts
  function applyExtent(element, extent) {
    const trimmedExtent = extent.trim();
    if (trimmedExtent === "auto") {
      return;
    }
    const splittedExtent = trimmedExtent.split(" ");
    if (splittedExtent.length !== 2) {
      return;
    }
    const firstExtent = REGXP_LENGTH.exec(splittedExtent[0]);
    const secondExtent = REGXP_LENGTH.exec(splittedExtent[1]);
    if (firstExtent !== null && secondExtent !== null) {
      if (firstExtent[2] === "px" || firstExtent[2] === "%" || firstExtent[2] === "em") {
        element.style.width = firstExtent[1] + firstExtent[2];
      } else if (firstExtent[2] === "c") {
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-width", firstExtent[1]);
      } else {
        log_default.warn("TTML Parser: unhandled extent unit:", firstExtent[2]);
      }
      if (secondExtent[2] === "px" || secondExtent[2] === "%" || secondExtent[2] === "em") {
        element.style.height = secondExtent[1] + secondExtent[2];
      } else if (secondExtent[2] === "c") {
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-height", secondExtent[1]);
      } else {
        log_default.warn("TTML Parser: unhandled extent unit:", secondExtent[2]);
      }
    }
  }
  var init_apply_extent = __esm({
    "src/parsers/texttracks/ttml/html/apply_extent.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_regexps();
    }
  });

  // src/parsers/texttracks/ttml/html/apply_font_size.ts
  function applyFontSize(element, fontSize) {
    const trimmedFontSize = fontSize.trim();
    const splittedFontSize = trimmedFontSize.split(" ");
    if (splittedFontSize.length === 0) {
      return;
    }
    const firstFontSize = REGXP_LENGTH.exec(splittedFontSize[0]);
    if (firstFontSize === null) {
      return;
    }
    if (firstFontSize[2] === "px" || firstFontSize[2] === "em") {
      element.style.fontSize = firstFontSize[1] + firstFontSize[2];
    } else if (firstFontSize[2] === "c") {
      element.style.position = "relative";
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-font-size", firstFontSize[1]);
    } else if (firstFontSize[2] === "%") {
      const toNum = Number(firstFontSize[1]);
      if (isNaN(toNum)) {
        log_default.warn('TTML Parser: could not parse fontSize value "' + firstFontSize[1] + '" into a number');
      } else {
        element.style.position = "relative";
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-font-size", String(toNum / 100));
      }
    } else {
      log_default.warn("TTML Parser: unhandled fontSize unit:", firstFontSize[2]);
    }
  }
  var init_apply_font_size = __esm({
    "src/parsers/texttracks/ttml/html/apply_font_size.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_regexps();
    }
  });

  // src/parsers/texttracks/ttml/html/apply_line_height.ts
  function applyLineHeight(element, lineHeight) {
    const trimmedLineHeight = lineHeight.trim();
    if (trimmedLineHeight === "auto") {
      return;
    }
    const firstLineHeight = REGXP_LENGTH.exec(trimmedLineHeight[0]);
    if (firstLineHeight === null) {
      return;
    }
    if (firstLineHeight[2] === "px" || firstLineHeight[2] === "%" || firstLineHeight[2] === "em") {
      element.style.lineHeight = firstLineHeight[1] + firstLineHeight[2];
    } else if (firstLineHeight[2] === "c") {
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-line-height", firstLineHeight[1]);
    } else {
      log_default.warn("TTML Parser: unhandled lineHeight unit:", firstLineHeight[2]);
    }
  }
  var init_apply_line_height = __esm({
    "src/parsers/texttracks/ttml/html/apply_line_height.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_regexps();
    }
  });

  // src/parsers/texttracks/ttml/html/apply_origin.ts
  function applyOrigin(element, origin) {
    const trimmedOrigin = origin.trim();
    if (trimmedOrigin === "auto") {
      return;
    }
    const splittedOrigin = trimmedOrigin.split(" ");
    if (splittedOrigin.length !== 2) {
      return;
    }
    const firstOrigin = REGXP_LENGTH.exec(splittedOrigin[0]);
    const secondOrigin = REGXP_LENGTH.exec(splittedOrigin[1]);
    if (firstOrigin !== null && secondOrigin !== null) {
      if (firstOrigin[2] === "px" || firstOrigin[2] === "%" || firstOrigin[2] === "em") {
        element.style.left = firstOrigin[1] + firstOrigin[2];
      } else if (firstOrigin[2] === "c") {
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-left", firstOrigin[1]);
      } else {
        log_default.warn("TTML Parser: unhandled origin unit:", firstOrigin[2]);
      }
      if (secondOrigin[2] === "px" || secondOrigin[2] === "%" || secondOrigin[2] === "em") {
        element.style.top = secondOrigin[1] + secondOrigin[2];
      } else if (secondOrigin[2] === "c") {
        addClassName(element, "proportional-style");
        element.setAttribute("data-proportional-top", secondOrigin[1]);
      } else {
        log_default.warn("TTML Parser: unhandled origin unit:", secondOrigin[2]);
      }
    }
  }
  var init_apply_origin = __esm({
    "src/parsers/texttracks/ttml/html/apply_origin.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_regexps();
    }
  });

  // src/parsers/texttracks/ttml/html/apply_padding.ts
  function applyPadding(element, padding) {
    const trimmedPadding = padding.trim();
    const splittedPadding = trimmedPadding.split(" ");
    if (splittedPadding.length < 1) {
      return;
    }
    const firstPadding = REGXP_LENGTH.exec(splittedPadding[0]);
    if (firstPadding === null) {
      return;
    }
    if (firstPadding[2] === "px" || firstPadding[2] === "%" || firstPadding[2] === "em") {
      const firstPaddingValue = firstPadding[1] + firstPadding[2];
      if (splittedPadding.length === 1) {
        element.style.padding = firstPaddingValue;
      } else if (splittedPadding.length === 2) {
        element.style.paddingTop = firstPaddingValue;
        element.style.paddingBottom = firstPaddingValue;
      } else {
        element.style.paddingTop = firstPaddingValue;
      }
    } else if (firstPadding[2] === "c") {
      addClassName(element, "proportional-style");
      if (splittedPadding.length === 1) {
        element.setAttribute("data-proportional-padding-top", firstPadding[1]);
        element.setAttribute("data-proportional-padding-bottom", firstPadding[1]);
        element.setAttribute("data-proportional-padding-left", firstPadding[1]);
        element.setAttribute("data-proportional-padding-right", firstPadding[1]);
      } else if (splittedPadding.length === 2) {
        element.setAttribute("data-proportional-padding-top", firstPadding[1]);
        element.setAttribute("data-proportional-padding-bottom", firstPadding[1]);
      } else {
        element.setAttribute("data-proportional-padding-top", firstPadding[1]);
      }
    } else {
      log_default.warn("TTML Parser: unhandled padding unit:", firstPadding[2]);
    }
    if (splittedPadding.length === 1) {
      return;
    }
    const secondPadding = REGXP_LENGTH.exec(splittedPadding[1]);
    if (secondPadding === null) {
      return;
    }
    if (secondPadding[2] === "px" || secondPadding[2] === "%" || secondPadding[2] === "em") {
      const secondPaddingValue = secondPadding[1] + secondPadding[2];
      if (splittedPadding.length < 4) {
        element.style.paddingLeft = secondPaddingValue;
        element.style.paddingRight = secondPaddingValue;
      } else {
        element.style.paddingRight = secondPaddingValue;
      }
    } else if (secondPadding[2] === "c") {
      addClassName(element, "proportional-style");
      if (splittedPadding.length < 4) {
        element.setAttribute("data-proportional-padding-left", secondPadding[1]);
        element.setAttribute("data-proportional-padding-right", secondPadding[1]);
      } else {
        element.setAttribute("data-proportional-padding-right", secondPadding[1]);
      }
    } else {
      log_default.warn("TTML Parser: unhandled padding unit:", secondPadding[2]);
    }
    if (splittedPadding.length === 2) {
      return;
    }
    const thirdPadding = REGXP_LENGTH.exec(splittedPadding[2]);
    if (thirdPadding === null) {
      return;
    }
    if (thirdPadding[2] === "px" || thirdPadding[2] === "%" || thirdPadding[2] === "em") {
      const thirdPaddingValue = thirdPadding[1] + thirdPadding[2];
      element.style.paddingBottom = thirdPaddingValue;
    } else if (thirdPadding[2] === "c") {
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-padding-bottom", thirdPadding[1]);
    } else {
      log_default.warn("TTML Parser: unhandled padding unit:", thirdPadding[2]);
    }
    if (splittedPadding.length === 3) {
      return;
    }
    const fourthPadding = REGXP_LENGTH.exec(splittedPadding[3]);
    if (fourthPadding === null) {
      return;
    }
    if (fourthPadding[2] === "px" || fourthPadding[2] === "%" || fourthPadding[2] === "em") {
      const fourthPaddingValue = fourthPadding[1] + fourthPadding[2];
      element.style.paddingLeft = fourthPaddingValue;
    } else if (fourthPadding[2] === "c") {
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-padding-left", fourthPadding[1]);
    } else {
      log_default.warn("TTML Parser: unhandled padding unit:", fourthPadding[2]);
    }
  }
  var init_apply_padding = __esm({
    "src/parsers/texttracks/ttml/html/apply_padding.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_log();
      init_regexps();
    }
  });

  // src/parsers/texttracks/ttml/html/generate_css_test_outline.ts
  function generateCSSTextOutline(color, thickness) {
    let thick = thickness;
    if (isNonEmptyString(thickness) && thickness.trim().endsWith("%")) {
      thick = thickness.trim().slice(0, -1);
      thick = (parseInt(thick, 10) / 100).toString() + "em";
    }
    return `-1px -1px ${thick} ${color},1px -1px ${thick} ${color},-1px 1px ${thick} ${color},1px 1px ${thick} ${color}`;
  }
  var init_generate_css_test_outline = __esm({
    "src/parsers/texttracks/ttml/html/generate_css_test_outline.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
    }
  });

  // src/parsers/texttracks/ttml/html/ttml_color_to_css_color.ts
  function ttmlColorToCSSColor(color) {
    let regRes;
    regRes = REGXP_8_HEX_COLOR.exec(color);
    if (regRes != null) {
      return "rgba(" + String(parseInt(regRes[1], 16)) + "," + String(parseInt(regRes[2], 16)) + "," + String(parseInt(regRes[3], 16)) + "," + String(parseInt(regRes[4], 16) / 255) + ")";
    }
    regRes = REGXP_4_HEX_COLOR.exec(color);
    if (regRes != null) {
      return "rgba(" + String(parseInt(regRes[1] + regRes[1], 16)) + "," + String(parseInt(regRes[2] + regRes[2], 16)) + "," + String(parseInt(regRes[3] + regRes[3], 16)) + "," + String(parseInt(regRes[4] + regRes[4], 16) / 255) + ")";
    }
    regRes = REGXP_RGB_COLOR.exec(color);
    if (regRes != null) {
      return "rgb(" + String(+regRes[1]) + "," + String(+regRes[2]) + "," + String(+regRes[3]) + ")";
    }
    regRes = REGXP_RGBA_COLOR.exec(color);
    if (regRes != null) {
      return "rgba(" + String(+regRes[1]) + "," + String(+regRes[2]) + "," + String(+regRes[3]) + "," + String(+regRes[4] / 255) + ")";
    }
    return color;
  }
  var init_ttml_color_to_css_color = __esm({
    "src/parsers/texttracks/ttml/html/ttml_color_to_css_color.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_regexps();
    }
  });

  // src/parsers/texttracks/ttml/html/create_element.ts
  function applyTextStyle(element, style, shouldTrimWhiteSpace) {
    const color = style.color;
    if (isNonEmptyString(color)) {
      element.style.color = ttmlColorToCSSColor(color);
    }
    const backgroundColor = style.backgroundColor;
    if (isNonEmptyString(backgroundColor)) {
      element.style.backgroundColor = ttmlColorToCSSColor(backgroundColor);
    }
    const textOutline = style.textOutline;
    if (isNonEmptyString(textOutline)) {
      const outlineData = textOutline.trim().replace(/\s+/g, " ").split(" ");
      const len = outlineData.length;
      if (len === 3) {
        const outlineColor = ttmlColorToCSSColor(outlineData[0]);
        const thickness = outlineData[1];
        element.style.textShadow = generateCSSTextOutline(outlineColor, thickness);
      } else if (isNonEmptyString(color) && len === 1) {
        const thickness = outlineData[0];
        element.style.textShadow = generateCSSTextOutline(color, thickness);
      } else if (len === 2) {
        const isFirstArgAColor = /^[#A-Z]/i.test(outlineData[0]);
        const isFirstArgANumber = /^[0-9]/.test(outlineData[0]);
        if (isFirstArgAColor !== isFirstArgANumber) {
          if (isFirstArgAColor) {
            const outlineColor = ttmlColorToCSSColor(outlineData[0]);
            const thickness = outlineData[1];
            element.style.textShadow = generateCSSTextOutline(outlineColor, thickness);
          } else if (isNonEmptyString(color)) {
            const thickness = outlineData[0];
            element.style.textShadow = generateCSSTextOutline(color, thickness);
          }
        }
      }
    }
    const textDecoration = style.textDecoration;
    if (isNonEmptyString(textDecoration)) {
      switch (textDecoration) {
        case "noUnderline":
        case "noLineThrough":
        case "noOverline":
          element.style.textDecoration = "none";
          break;
        case "lineThrough":
          element.style.textDecoration = "line-through";
          break;
        default:
          element.style.textDecoration = textDecoration;
          break;
      }
    }
    const fontFamily = style.fontFamily;
    if (isNonEmptyString(fontFamily)) {
      switch (fontFamily) {
        case "proportionalSansSerif":
          element.style.fontFamily = "Arial, Helvetica, Liberation Sans, sans-serif";
          break;
        case "monospaceSansSerif":
        case "sansSerif":
          element.style.fontFamily = "sans-serif";
          break;
        case "monospaceSerif":
        case "default":
          element.style.fontFamily = "Courier New, Liberation Mono, monospace";
          break;
        case "proportionalSerif":
          element.style.fontFamily = "serif";
          break;
        default:
          element.style.fontFamily = fontFamily;
      }
    }
    const fontStyle = style.fontStyle;
    if (isNonEmptyString(fontStyle)) {
      element.style.fontStyle = fontStyle;
    }
    const fontWeight = style.fontWeight;
    if (isNonEmptyString(fontWeight)) {
      element.style.fontWeight = fontWeight;
    }
    const fontSize = style.fontSize;
    if (isNonEmptyString(fontSize)) {
      applyFontSize(element, fontSize);
    } else {
      addClassName(element, "proportional-style");
      element.setAttribute("data-proportional-font-size", "1");
    }
    const direction = style.direction;
    if (isNonEmptyString(direction)) {
      element.style.direction = direction;
    }
    const unicodeBidi = style.unicodeBidi;
    if (isNonEmptyString(unicodeBidi)) {
      switch (unicodeBidi) {
        case "bidiOverride":
          element.style.unicodeBidi = "bidi-override";
          break;
        case "embed":
          element.style.unicodeBidi = "embed";
          break;
        default:
          element.style.unicodeBidi = "normal";
      }
    }
    const visibility = style.visibility;
    if (isNonEmptyString(visibility)) {
      element.style.visibility = visibility;
    }
    const display = style.display;
    if (display === "none") {
      element.style.display = "none";
    }
    const wrapOption = style.wrapOption;
    element.style.whiteSpace = wrapOption === "noWrap" ? shouldTrimWhiteSpace ? "nowrap" : "pre" : shouldTrimWhiteSpace ? "normal" : "pre-wrap";
  }
  function applyGeneralStyle(element, style) {
    element.style.color = "white";
    element.style.position = "absolute";
    const extent = style.extent;
    if (isNonEmptyString(extent)) {
      applyExtent(element, extent);
    }
    const writingMode = style.writingMode;
    if (isNonEmptyString(writingMode)) {
    }
    const overflow = style.overflow;
    element.style.overflow = isNonEmptyString(overflow) ? overflow : "hidden";
    const padding = style.padding;
    if (isNonEmptyString(padding)) {
      applyPadding(element, padding);
    }
    const origin = style.origin;
    if (isNonEmptyString(origin)) {
      applyOrigin(element, origin);
    }
    const displayAlign = style.displayAlign;
    if (isNonEmptyString(displayAlign)) {
      element.style.display = "flex";
      element.style.flexDirection = "column";
      switch (displayAlign) {
        case "before":
          element.style.justifyContent = "flex-start";
          break;
        case "center":
          element.style.justifyContent = "center";
          break;
        case "after":
          element.style.justifyContent = "flex-end";
          break;
      }
    }
    const opacity = style.opacity;
    if (isNonEmptyString(opacity)) {
      element.style.opacity = opacity;
    }
    const visibility = style.visibility;
    if (isNonEmptyString(visibility)) {
      element.style.visibility = visibility;
    }
    const display = style.display;
    if (display === "none") {
      element.style.display = "none";
    }
  }
  function applyPStyle(element, style) {
    element.style.margin = "0px";
    const paragraphBackgroundColor = style.backgroundColor;
    if (isNonEmptyString(paragraphBackgroundColor)) {
      element.style.backgroundColor = ttmlColorToCSSColor(paragraphBackgroundColor);
    }
    const lineHeight = style.lineHeight;
    if (isNonEmptyString(lineHeight)) {
      applyLineHeight(element, lineHeight);
    }
    const textAlign = style.textAlign;
    if (isNonEmptyString(textAlign)) {
      switch (textAlign) {
        case "center":
          element.style.textAlign = "center";
          break;
        case "left":
        case "start":
          element.style.textAlign = "left";
          break;
        case "right":
        case "end":
          element.style.textAlign = "right";
          break;
      }
    }
  }
  function createTextElement(el, style, shouldTrimWhiteSpace) {
    const textElement = document.createElement("span");
    let textContent = el.textContent === null ? "" : el.textContent;
    if (shouldTrimWhiteSpace) {
      let trimmed = textContent.trim();
      trimmed = trimmed.replace(/\s+/g, " ");
      textContent = trimmed;
    }
    textElement.innerHTML = textContent;
    textElement.className = "rxp-texttrack-span";
    applyTextStyle(textElement, style, shouldTrimWhiteSpace);
    return textElement;
  }
  function generateTextContent2(paragraph, regions, styles, paragraphStyle, shouldTrimWhiteSpace) {
    function loop(node, style, spans, shouldTrimWhiteSpaceFromParent) {
      const childNodes = node.childNodes;
      const elements = [];
      for (let i = 0; i < childNodes.length; i++) {
        const currentNode = childNodes[i];
        if (currentNode.nodeName === "#text") {
          const { backgroundColor } = getStylingAttributes(["backgroundColor"], spans, styles, regions);
          if (isNonEmptyString(backgroundColor)) {
            style.backgroundColor = backgroundColor;
          } else {
            delete style.backgroundColor;
          }
          const el = createTextElement(currentNode, style, shouldTrimWhiteSpaceFromParent);
          elements.push(el);
        } else if (currentNode.nodeName === "br") {
          const br = document.createElement("BR");
          elements.push(br);
        } else if (currentNode.nodeName === "span" && currentNode.nodeType === Node.ELEMENT_NODE && currentNode.childNodes.length > 0) {
          const spaceAttribute = currentNode.getAttribute("xml:space");
          const shouldTrimWhiteSpaceOnSpan = isNonEmptyString(spaceAttribute) ? spaceAttribute === "default" : shouldTrimWhiteSpaceFromParent;
          const newStyle = object_assign_default({}, style, getStylingAttributes(SPAN_LEVEL_ATTRIBUTES, [currentNode], styles, regions));
          elements.push(...loop(currentNode, newStyle, [currentNode, ...spans], shouldTrimWhiteSpaceOnSpan));
        }
      }
      return elements;
    }
    return loop(paragraph, object_assign_default({}, paragraphStyle), [], shouldTrimWhiteSpace);
  }
  function createElement(paragraph, body, regions, styles, paragraphStyle, {
    cellResolution,
    shouldTrimWhiteSpace
  }) {
    const divs = getParentElementsByTagName(paragraph, "div");
    const parentElement = document.createElement("DIV");
    parentElement.className = "rxp-texttrack-region";
    parentElement.setAttribute("data-resolution-columns", String(cellResolution.columns));
    parentElement.setAttribute("data-resolution-rows", String(cellResolution.rows));
    applyGeneralStyle(parentElement, paragraphStyle);
    if (body !== null) {
      const { bodyBackgroundColor } = getStylingAttributes(["backgroundColor"], [...divs, body], styles, regions);
      if (isNonEmptyString(bodyBackgroundColor)) {
        parentElement.style.backgroundColor = ttmlColorToCSSColor(bodyBackgroundColor);
      }
    }
    const pElement = document.createElement("p");
    pElement.className = "rxp-texttrack-p";
    applyPStyle(pElement, paragraphStyle);
    const textContent = generateTextContent2(paragraph, regions, styles, paragraphStyle, shouldTrimWhiteSpace);
    for (let i = 0; i < textContent.length; i++) {
      pElement.appendChild(textContent[i]);
    }
    parentElement.appendChild(pElement);
    return parentElement;
  }
  var SPAN_LEVEL_ATTRIBUTES;
  var init_create_element = __esm({
    "src/parsers/texttracks/ttml/html/create_element.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_compat();
      init_is_non_empty_string();
      init_object_assign();
      init_get_parent_elements_by_tag_name();
      init_get_styling();
      init_apply_extent();
      init_apply_font_size();
      init_apply_line_height();
      init_apply_origin();
      init_apply_padding();
      init_generate_css_test_outline();
      init_ttml_color_to_css_color();
      SPAN_LEVEL_ATTRIBUTES = [
        "color",
        "direction",
        "display",
        "fontFamily",
        "fontSize",
        "fontStyle",
        "fontWeight",
        "textDecoration",
        "textOutline",
        "unicodeBidi",
        "visibility",
        "wrapOption"
      ];
    }
  });

  // src/parsers/texttracks/ttml/html/parse_cue.ts
  function parseCue2(parsedCue) {
    const {
      paragraph,
      ttParams,
      body,
      regionStyles,
      idStyles,
      paragraphStyle,
      timeOffset,
      shouldTrimWhiteSpace
    } = parsedCue;
    if (!paragraph.hasAttribute("begin") && !paragraph.hasAttribute("end") && /^\s*$/.test(paragraph.textContent === null ? "" : paragraph.textContent)) {
      return null;
    }
    const { cellResolution } = ttParams;
    const { start, end } = getTimeDelimiters(paragraph, ttParams);
    const element = createElement(paragraph, body, regionStyles, idStyles, paragraphStyle, { cellResolution, shouldTrimWhiteSpace });
    return {
      start: start + timeOffset,
      end: end + timeOffset,
      element
    };
  }
  var init_parse_cue3 = __esm({
    "src/parsers/texttracks/ttml/html/parse_cue.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_get_time_delimiters();
      init_create_element();
    }
  });

  // src/parsers/texttracks/ttml/html/parse_ttml_to_div.ts
  function parseTTMLToDiv(str, timeOffset) {
    const parsedCues = parseTTMLString(str, timeOffset);
    const cues = [];
    for (let i = 0; i < parsedCues.length; i++) {
      const { paragraphStyle } = parsedCues[i];
      if (shouldApplyDefaultTTMLStyle(paragraphStyle)) {
        applyDefaultTTMLStyle(paragraphStyle);
      }
      const cue = parseCue2(parsedCues[i]);
      if (cue !== null) {
        cues.push(cue);
      }
    }
    return cues;
  }
  var init_parse_ttml_to_div = __esm({
    "src/parsers/texttracks/ttml/html/parse_ttml_to_div.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_ttml();
      init_apply_default_ttml_paragraph_style();
      init_parse_cue3();
    }
  });

  // src/parsers/texttracks/ttml/html/index.ts
  var html_exports3 = {};
  __export(html_exports3, {
    default: () => html_default3
  });
  var html_default3;
  var init_html3 = __esm({
    "src/parsers/texttracks/ttml/html/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_ttml_to_div();
      html_default3 = parseTTMLToDiv;
    }
  });

  // src/parsers/texttracks/srt/html.ts
  var html_exports4 = {};
  __export(html_exports4, {
    default: () => parseSRTStringToHTML
  });
  function parseSRTStringToHTML(srtStr, timeOffset) {
    const lines = srtStr.split(/\r\n|\n|\r/);
    const cueBlocks = getCueBlocks2(lines);
    const cues = [];
    for (let i = 0; i < cueBlocks.length; i++) {
      const cueObject = parseCueBlock2(cueBlocks[i], timeOffset);
      if (cueObject != null) {
        const htmlCue = toHTML(cueObject);
        if (htmlCue != null) {
          cues.push(htmlCue);
        }
      }
    }
    return cues;
  }
  function toHTML(cueObj) {
    const { start, end, payload } = cueObj;
    const pEl = document.createElement("div");
    pEl.className = "rxp-texttrack-p";
    pEl.style.fontSize = "28px";
    pEl.style.position = "absolute";
    pEl.style.bottom = "5%";
    pEl.style.width = "100%";
    pEl.style.textAlign = "center";
    pEl.style.color = "#fff";
    pEl.style.textShadow = "-1px -1px 2px #000,1px -1px 2px #000,-1px 1px 2px #000,1px 1px 2px #000";
    for (let i = 0; i < payload.length; i++) {
      if (i !== 0) {
        pEl.appendChild(document.createElement("br"));
      }
      const span = generateSpansFromSRTText(payload[i]);
      pEl.appendChild(span);
    }
    return {
      start,
      end,
      element: pEl
    };
  }
  function generateSpansFromSRTText(text) {
    const secureDiv = document.createElement("div");
    secureDiv.innerHTML = text;
    const _loop = function(node) {
      const childNodes = node.childNodes;
      const span = document.createElement("span");
      span.className = "rxp-texttrack-span";
      for (let i = 0; i < childNodes.length; i++) {
        const currentNode = childNodes[i];
        if (currentNode.nodeName === "#text") {
          const linifiedText = currentNode.wholeText.split("\n");
          for (let line = 0; line < linifiedText.length; line++) {
            if (line !== 0) {
              span.appendChild(document.createElement("br"));
            }
            if (linifiedText[line].length > 0) {
              const textNode = document.createTextNode(linifiedText[line]);
              span.appendChild(textNode);
            }
          }
        } else if (currentNode.nodeName === "B") {
          const spanChild = _loop(currentNode);
          spanChild.style.fontWeight = "bold";
          span.appendChild(spanChild);
        } else if (currentNode.nodeName === "I") {
          const spanChild = _loop(currentNode);
          spanChild.style.fontStyle = "italic";
          span.appendChild(spanChild);
        } else if (currentNode.nodeName === "U") {
          const spanChild = _loop(currentNode);
          spanChild.style.textDecoration = "underline";
          span.appendChild(spanChild);
        } else if (isNodeFontWithColorProp(currentNode) && typeof currentNode.color === "string") {
          const spanChild = _loop(currentNode);
          spanChild.style.color = currentNode.color;
          span.appendChild(spanChild);
        } else {
          const spanChild = _loop(currentNode);
          span.appendChild(spanChild);
        }
      }
      return span;
    };
    return _loop(secureDiv);
  }
  function isNodeFontWithColorProp(node) {
    return node.nodeName === "FONT" && "color" in node;
  }
  var init_html4 = __esm({
    "src/parsers/texttracks/srt/html.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_get_cue_blocks2();
      init_parse_cue2();
    }
  });

  // src/parsers/texttracks/webvtt/get_style_blocks.ts
  function getStyleBlocks(linified, headerOffset) {
    const styleBlocks = [];
    for (let i = headerOffset; i < linified.length; i++) {
      if (isStartOfStyleBlock(linified, i)) {
        const startOfStyleBlock = i;
        i++;
        while (isNonEmptyString(linified[i])) {
          i++;
        }
        const styleBlock = linified.slice(startOfStyleBlock, i);
        styleBlocks.push(styleBlock);
      } else if (isNonEmptyString(linified[i])) {
        while (isNonEmptyString(linified[i])) {
          i++;
        }
      }
    }
    return styleBlocks;
  }
  var init_get_style_blocks = __esm({
    "src/parsers/texttracks/webvtt/get_style_blocks.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_utils6();
    }
  });

  // src/parsers/texttracks/webvtt/html/create_default_style_elements.ts
  function createDefaultStyleElements() {
    return Object.keys(colorMap).reduce((result, key) => {
      result[key] = `color: ${colorMap[key]};`;
      result[`bg_${key}`] = `background-color: ${colorMap[key]};`;
      return result;
    }, {});
  }
  var colorMap;
  var init_create_default_style_elements = __esm({
    "src/parsers/texttracks/webvtt/html/create_default_style_elements.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      colorMap = {
        white: "#ffffff",
        lime: "#00ff00",
        cyan: "#00ffff",
        red: "#ff0000",
        yellow: "#ffff00",
        magenta: "#ff00ff",
        blue: "#0000ff",
        black: "#000000"
      };
    }
  });

  // src/parsers/texttracks/webvtt/html/parse_style_block.ts
  function parseStyleBlocks(styleBlocks) {
    const classes = createDefaultStyleElements();
    let global2 = "";
    styleBlocks.forEach((styleBlock) => {
      if (styleBlock.length >= 2) {
        for (let index = 1; index < styleBlock.length; index++) {
          let line = styleBlock[index];
          if (Array.isArray(/::cue {/.exec(line))) {
            line = styleBlock[++index];
            while (isNonEmptyString(line) && !(Array.isArray(/}/.exec(line)) || line.length === 0)) {
              global2 += line;
              line = styleBlock[++index];
            }
          } else {
            const classNames = [];
            let cueClassLine = /::cue\(\.?(.*?)\)(?:,| {)/.exec(line);
            while (isNonEmptyString(line) && Array.isArray(cueClassLine)) {
              classNames.push(cueClassLine[1]);
              line = styleBlock[++index];
              cueClassLine = /::cue\(\.?(.*?)\)(?:,| {)/.exec(line);
            }
            let styleContent = "";
            while (isNonEmptyString(line) && !(Array.isArray(/}/.exec(line)) || line.length === 0)) {
              styleContent += line;
              line = styleBlock[++index];
            }
            classNames.forEach((className) => {
              const styleElement = classes[className];
              if (styleElement === void 0) {
                classes[className] = styleContent;
              } else {
                classes[className] += styleContent;
              }
            });
          }
        }
      }
    });
    return { classes, global: global2 };
  }
  var init_parse_style_block = __esm({
    "src/parsers/texttracks/webvtt/html/parse_style_block.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_create_default_style_elements();
    }
  });

  // src/parsers/texttracks/webvtt/html/create_styled_element.ts
  function createStyledElement(baseNode, styleElements) {
    const HTMLTags = ["u", "i", "b"];
    const authorizedNodeNames = ["u", "i", "b", "c", "#text"];
    const mainNodeName = baseNode.nodeName.toLowerCase().split(".")[0];
    let nodeWithStyle;
    if (arrayIncludes(authorizedNodeNames, mainNodeName)) {
      if (mainNodeName === "#text") {
        const linifiedText = baseNode.wholeText.split("\n");
        nodeWithStyle = document.createElement("span");
        for (let i = 0; i < linifiedText.length; i++) {
          if (i > 0) {
            nodeWithStyle.appendChild(document.createElement("br"));
          }
          if (linifiedText[i].length > 0) {
            const textNode = document.createTextNode(linifiedText[i]);
            nodeWithStyle.appendChild(textNode);
          }
        }
      } else {
        const nodeClasses = baseNode.nodeName.toLowerCase().split(".");
        const styleContents = [];
        nodeClasses.forEach((nodeClass) => {
          if (isNonEmptyString(styleElements[nodeClass])) {
            styleContents.push(styleElements[nodeClass]);
          }
        });
        if (styleContents.length !== 0) {
          const attr = document.createAttribute("style");
          styleContents.forEach((styleContent) => {
            attr.value += styleContent;
          });
          const nameClass = arrayIncludes(HTMLTags, mainNodeName) ? mainNodeName : "span";
          nodeWithStyle = document.createElement(nameClass);
          nodeWithStyle.setAttributeNode(attr);
        } else {
          const elementTag = !arrayIncludes(HTMLTags, mainNodeName) ? "span" : mainNodeName;
          nodeWithStyle = document.createElement(elementTag);
        }
        for (let j = 0; j < baseNode.childNodes.length; j++) {
          const child = createStyledElement(baseNode.childNodes[j], styleElements);
          nodeWithStyle.appendChild(child);
        }
      }
    } else {
      nodeWithStyle = document.createElement("span");
      for (let j = 0; j < baseNode.childNodes.length; j++) {
        const child = createStyledElement(baseNode.childNodes[j], styleElements);
        nodeWithStyle.appendChild(child);
      }
    }
    return nodeWithStyle;
  }
  var init_create_styled_element = __esm({
    "src/parsers/texttracks/webvtt/html/create_styled_element.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_array_includes();
      init_is_non_empty_string();
    }
  });

  // src/parsers/texttracks/webvtt/html/convert_payload_to_html.ts
  function convertPayloadToHTML(text, styleElements) {
    const filteredText = text.replace(/<[0-9]{2}:[0-9]{2}.[0-9]{3}>/, "").replace(/<([u,i,b,c])(\..*?)?(?: .*?)?>(.*?)<\/\1>/g, "<$1$2>$3</$1$2>");
    const parsedWebVTT = new DOMParser().parseFromString(filteredText, "text/html");
    const nodes = parsedWebVTT.body.childNodes;
    const styledElements = [];
    for (let i = 0; i < nodes.length; i++) {
      styledElements.push(createStyledElement(nodes[i], styleElements));
    }
    return styledElements;
  }
  var init_convert_payload_to_html = __esm({
    "src/parsers/texttracks/webvtt/html/convert_payload_to_html.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_create_styled_element();
    }
  });

  // src/parsers/texttracks/webvtt/html/create_style_attribute.ts
  function createStyleAttribute(settings) {
    const pAttr = document.createAttribute("style");
    pAttr.value = getAttrValue(settings);
    return pAttr;
  }
  var getAttrValue, getPositioningX, getXPositionPercentage, getXOffsetPercentage, getPositioningY, getYPositionPercentage, getYOffsetPercentage, getAlignValue, getSizePercentage, getPercentageValueOrDefault, getPercentageValue;
  var init_create_style_attribute = __esm({
    "src/parsers/texttracks/webvtt/html/create_style_attribute.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_object_values();
      getAttrValue = (settings) => {
        const hasSettings = settings !== void 0 && object_values_default(settings).length !== 0;
        if (!hasSettings) {
          return "text-align:center";
        }
        const xPositioning = getPositioningX(settings);
        const yPositioning = getPositioningY(settings);
        return `position: absolute;margin: 0;transform: translate(${xPositioning.offset}%,${yPositioning.offset}%);width: ${getSizePercentage(settings.size)}%;left: ${xPositioning.position}%;top: ${yPositioning.position !== null ? `${yPositioning.position}%` : "auto"};text-align: ${getAlignValue(settings.align)};`;
      };
      getPositioningX = (settings) => {
        return {
          position: getXPositionPercentage(settings),
          offset: getXOffsetPercentage(settings)
        };
      };
      getXPositionPercentage = (settings) => {
        const positionPercentage = getPercentageValue(settings.position);
        if (positionPercentage !== null) {
          return positionPercentage;
        }
        const align = getAlignValue(settings.align);
        const alignMap = {
          ["left" /* LEFT */]: 0,
          ["center" /* CENTER */]: 50,
          ["right" /* RIGHT */]: 100
        };
        return alignMap[align];
      };
      getXOffsetPercentage = (settings) => {
        const getPositionAlignment = (positionSetting) => {
          const positionRegex = /,(line-left|line-right|center)/;
          const matches = positionRegex.exec(positionSetting);
          if (!Array.isArray(matches) || matches.length < 2) {
            return null;
          }
          return matches[1];
        };
        const positionAlignmentMap = {
          ["line-left" /* LINE_LEFT */]: 0,
          ["center" /* CENTER */]: -50,
          ["line-right" /* LINE_RIGHT */]: -100
        };
        const positionAlignment = settings.position !== void 0 ? getPositionAlignment(settings.position) : null;
        if (positionAlignment !== null) {
          return positionAlignmentMap[positionAlignment];
        }
        const alignMap = {
          ["left" /* LEFT */]: 0,
          ["center" /* CENTER */]: -50,
          ["right" /* RIGHT */]: -100
        };
        const align = settings.align !== void 0 ? getAlignValue(settings.align) : "center" /* CENTER */;
        return alignMap[align];
      };
      getPositioningY = (settings) => {
        return {
          position: getYPositionPercentage(settings.line),
          offset: getYOffsetPercentage(settings.line)
        };
      };
      getYPositionPercentage = (lineSetting) => {
        return getPercentageValue(lineSetting);
      };
      getYOffsetPercentage = (lineSetting) => {
        const getLineAlignment = (line) => {
          const positionRegex = /,(start|center|end)/;
          const matches = positionRegex.exec(line);
          if (!Array.isArray(matches) || matches.length < 2) {
            return null;
          }
          return matches[1];
        };
        const lineAlignmentMap = {
          ["start" /* START */]: 0,
          ["center" /* CENTER */]: -50,
          ["end" /* END */]: -100
        };
        if (lineSetting === void 0) {
          return lineAlignmentMap["start" /* START */];
        }
        const lineAlignment = getLineAlignment(lineSetting);
        return lineAlignment !== null ? lineAlignmentMap[lineAlignment] : lineAlignmentMap["start" /* START */];
      };
      getAlignValue = (alignSetting) => {
        switch (alignSetting) {
          case "left":
          case "start":
            return "left";
          case "right":
          case "end":
            return "right";
          default:
            return "center";
        }
      };
      getSizePercentage = (sizeSetting) => {
        const defaultSize = 100;
        return getPercentageValueOrDefault(sizeSetting, defaultSize);
      };
      getPercentageValueOrDefault = (percentageString, defaultValue) => {
        const value = getPercentageValue(percentageString);
        return value !== null ? value : defaultValue;
      };
      getPercentageValue = (percentageString) => {
        if (percentageString === void 0) {
          return null;
        }
        const percentageValueRegex = /^([\d.]+)%/;
        const matches = percentageValueRegex.exec(percentageString);
        if (!Array.isArray(matches) || matches.length < 2) {
          return null;
        }
        return parseInt(matches[1], 10);
      };
    }
  });

  // src/parsers/texttracks/webvtt/html/to_html.ts
  function toHTML2(cueObj, styling) {
    const { start, end, settings, header, payload } = cueObj;
    const region = document.createElement("div");
    const regionAttr = document.createAttribute("style");
    regionAttr.value = "width:100%;height:100%;display:flex;flex-direction:column;justify-content:flex-end;align-items:center;";
    region.setAttributeNode(regionAttr);
    const pElement = document.createElement("p");
    const pAttr = createStyleAttribute(settings);
    pElement.setAttributeNode(pAttr);
    const spanElement = document.createElement("span");
    const attr = document.createAttribute("style");
    attr.value = "background-color:rgba(0,0,0,0.8);color:white;";
    spanElement.setAttributeNode(attr);
    const { global: global2, classes } = styling;
    const localStyle = isNonEmptyString(header) ? classes[header] : void 0;
    const styles = [global2, localStyle].filter((s) => s !== void 0).join("");
    attr.value += styles;
    spanElement.setAttributeNode(attr);
    convertPayloadToHTML(payload.join("\n"), classes).forEach((element) => {
      spanElement.appendChild(element);
    });
    region.appendChild(pElement);
    pElement.appendChild(spanElement);
    return {
      start,
      end,
      element: region
    };
  }
  var init_to_html = __esm({
    "src/parsers/texttracks/webvtt/html/to_html.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_is_non_empty_string();
      init_convert_payload_to_html();
      init_create_style_attribute();
    }
  });

  // src/parsers/texttracks/webvtt/html/parse_webvtt_to_div.ts
  function parseWebVTT(text, timeOffset) {
    const newLineChar = /\r\n|\n|\r/g;
    const linified = text.split(newLineChar);
    const cuesArray = [];
    if (/^WEBVTT( |\t|\n|\r|$)/.exec(linified[0]) === null) {
      throw new Error("Can't parse WebVTT: Invalid File.");
    }
    const firstLineAfterHeader = getFirstLineAfterHeader(linified);
    const styleBlocks = getStyleBlocks(linified, firstLineAfterHeader);
    const cueBlocks = getCueBlocks(linified, firstLineAfterHeader);
    const styles = parseStyleBlocks(styleBlocks);
    for (let i = 0; i < cueBlocks.length; i++) {
      const cueObject = parseCueBlock(cueBlocks[i], timeOffset);
      if (cueObject != null) {
        const htmlCue = toHTML2(cueObject, styles);
        cuesArray.push(htmlCue);
      }
    }
    return cuesArray;
  }
  var init_parse_webvtt_to_div = __esm({
    "src/parsers/texttracks/webvtt/html/parse_webvtt_to_div.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_get_cue_blocks();
      init_get_style_blocks();
      init_parse_cue_block();
      init_utils6();
      init_parse_style_block();
      init_to_html();
    }
  });

  // src/parsers/texttracks/webvtt/html/index.ts
  var html_exports5 = {};
  __export(html_exports5, {
    default: () => html_default4
  });
  var html_default4;
  var init_html5 = __esm({
    "src/parsers/texttracks/webvtt/html/index.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_parse_webvtt_to_div();
      html_default4 = parseWebVTT;
    }
  });

  // src/core/init/initialize_directfile.ts
  var initialize_directfile_exports = {};
  __export(initialize_directfile_exports, {
    default: () => initializeDirectfileContent
  });
  function getDirectFileInitialTime(mediaElement, startAt) {
    if (startAt == null) {
      return 0;
    }
    if (startAt.position != null) {
      return startAt.position;
    } else if (startAt.wallClockTime != null) {
      return startAt.wallClockTime;
    } else if (startAt.fromFirstPosition != null) {
      return startAt.fromFirstPosition;
    }
    const duration = mediaElement.duration;
    if (duration == null || !isFinite(duration)) {
      log_default.warn("startAt.fromLastPosition set but no known duration, beginning at 0.");
      return 0;
    }
    if (typeof startAt.fromLastPosition === "number") {
      return Math.max(0, duration + startAt.fromLastPosition);
    } else if (startAt.percentage != null) {
      const { percentage } = startAt;
      if (percentage >= 100) {
        return duration;
      } else if (percentage <= 0) {
        return 0;
      }
      const ratio = +percentage / 100;
      return duration * ratio;
    }
    return 0;
  }
  function initializeDirectfileContent({
    autoPlay: autoPlay2,
    keySystems,
    mediaElement,
    playbackObserver,
    speed,
    startAt,
    url
  }) {
    clearElementSrc(mediaElement);
    if (url == null) {
      throw new Error("No URL for a DirectFile content");
    }
    const linkURL$ = setElementSrc$(mediaElement, url);
    log_default.debug("Init: Calculating initial time");
    const initialTime = () => getDirectFileInitialTime(mediaElement, startAt);
    log_default.debug("Init: Initial time calculated:", initialTime);
    const { seekAndPlay$ } = initialSeekAndPlay({
      mediaElement,
      playbackObserver,
      startTime: initialTime,
      mustAutoPlay: autoPlay2
    });
    const drmEvents$ = linkDrmAndContent(mediaElement, keySystems, EMPTY, linkURL$).pipe(deferSubscriptions(), share());
    const mediaError$ = throwOnMediaError(mediaElement);
    const observation$ = playbackObserver.observe(true);
    const playbackRate$ = updatePlaybackRate(mediaElement, speed, observation$).pipe(ignoreElements());
    const stallAvoider$ = StallAvoider(playbackObserver, null, EMPTY, EMPTY);
    const loadingEvts$ = drmEvents$.pipe(filter((evt) => evt.type === "decryption-ready" || evt.type === "decryption-disabled"), take(1), mergeMap(() => seekAndPlay$), switchMap((evt) => {
      if (evt.type === "warning") {
        return of(evt);
      }
      return emitLoadedEvent(observation$, mediaElement, null, true);
    }));
    return merge(loadingEvts$, drmEvents$.pipe(ignoreElements()), mediaError$, playbackRate$, stallAvoider$);
  }
  var init_initialize_directfile = __esm({
    "src/core/init/initialize_directfile.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_esm5();
      init_compat();
      init_log();
      init_defer_subscriptions();
      init_emit_loaded_event();
      init_initial_seek_and_play();
      init_link_drm_and_content();
      init_stall_avoider();
      init_throw_on_media_error();
      init_update_playback_rate();
    }
  });

  // src/core/api/media_element_track_choice_manager.ts
  var media_element_track_choice_manager_exports = {};
  __export(media_element_track_choice_manager_exports, {
    default: () => MediaElementTrackChoiceManager
  });
  function areTrackArraysDifferent(oldTrackArray, newTrackArray) {
    var _a2;
    if (newTrackArray.length !== oldTrackArray.length) {
      return true;
    }
    for (let i = 0; i < newTrackArray.length; i++) {
      if (newTrackArray[i].nativeTrack !== ((_a2 = oldTrackArray[i]) == null ? void 0 : _a2.nativeTrack)) {
        return true;
      }
    }
    return false;
  }
  function createAudioTracks(audioTracks) {
    var _a2;
    const newAudioTracks = [];
    const languagesOccurences = {};
    for (let i = 0; i < audioTracks.length; i++) {
      const audioTrack = audioTracks[i];
      const language = audioTrack.language === "" ? "nolang" : audioTrack.language;
      const occurences = (_a2 = languagesOccurences[language]) != null ? _a2 : 1;
      const id = "gen_audio_" + language + "_" + occurences.toString();
      languagesOccurences[language] = occurences + 1;
      const track = {
        language: audioTrack.language,
        id,
        normalized: languages_default(audioTrack.language),
        audioDescription: false,
        representations: []
      };
      newAudioTracks.push({
        track,
        nativeTrack: audioTrack
      });
    }
    return newAudioTracks;
  }
  function createTextTracks(textTracks) {
    var _a2;
    const newTextTracks = [];
    const languagesOccurences = {};
    for (let i = 0; i < textTracks.length; i++) {
      const textTrack = textTracks[i];
      const language = textTrack.language === "" ? "nolang" : textTrack.language;
      const occurences = (_a2 = languagesOccurences[language]) != null ? _a2 : 1;
      const id = "gen_text_" + language + "_" + occurences.toString();
      languagesOccurences[language] = occurences + 1;
      const track = {
        language: textTrack.language,
        id,
        normalized: languages_default(textTrack.language),
        closedCaption: textTrack.kind === "captions"
      };
      newTextTracks.push({
        track,
        nativeTrack: textTrack
      });
    }
    return newTextTracks;
  }
  function createVideoTracks(videoTracks) {
    var _a2;
    const newVideoTracks = [];
    const languagesOccurences = {};
    for (let i = 0; i < videoTracks.length; i++) {
      const videoTrack = videoTracks[i];
      const language = videoTrack.language === "" ? "nolang" : videoTrack.language;
      const occurences = (_a2 = languagesOccurences[language]) != null ? _a2 : 1;
      const id = "gen_video_" + language + "_" + occurences.toString();
      languagesOccurences[language] = occurences + 1;
      newVideoTracks.push({
        track: {
          id,
          representations: []
        },
        nativeTrack: videoTrack
      });
    }
    return newVideoTracks;
  }
  function disableTextTracks(textTracks) {
    for (let i = 0; i < textTracks.length; i++) {
      const { nativeTrack } = textTracks[i];
      nativeTrack.mode = "disabled";
    }
  }
  function disableAllTextTracksBut(textTracks, track) {
    for (let i = 0; i < textTracks.length; i++) {
      const { nativeTrack } = textTracks[i];
      if (nativeTrack !== track && (nativeTrack.mode === "showing" || nativeTrack.mode === "hidden")) {
        nativeTrack.mode = "disabled";
      }
    }
  }
  function disableVideoTracks(videoTracks) {
    for (let i = 0; i < videoTracks.length; i++) {
      const { nativeTrack } = videoTracks[i];
      nativeTrack.selected = false;
    }
  }
  var MediaElementTrackChoiceManager;
  var init_media_element_track_choice_manager = __esm({
    "src/core/api/media_element_track_choice_manager.ts"() {
      init_define_ENVIRONMENT();
      init_define_FEATURES();
      init_define_LOGGER_LEVEL();
      init_assert();
      init_event_emitter();
      init_languages();
      MediaElementTrackChoiceManager = class extends EventEmitter {
        constructor(mediaElement) {
          super();
          var _a2, _b2, _c;
          this._preferredAudioTracks = [];
          this._preferredTextTracks = [];
          this._preferredVideoTracks = [];
          this._nativeAudioTracks = mediaElement.audioTracks;
          this._nativeVideoTracks = mediaElement.videoTracks;
          this._nativeTextTracks = mediaElement.textTracks;
          this._audioTracks = this._nativeAudioTracks !== void 0 ? createAudioTracks(this._nativeAudioTracks) : [];
          this._videoTracks = this._nativeVideoTracks !== void 0 ? createVideoTracks(this._nativeVideoTracks) : [];
          this._textTracks = this._nativeTextTracks !== void 0 ? createTextTracks(this._nativeTextTracks) : [];
          this._lastEmittedNativeAudioTrack = (_a2 = this._getPrivateChosenAudioTrack()) == null ? void 0 : _a2.nativeTrack;
          this._lastEmittedNativeVideoTrack = (_b2 = this._getPrivateChosenVideoTrack()) == null ? void 0 : _b2.nativeTrack;
          this._lastEmittedNativeTextTrack = (_c = this._getPrivateChosenTextTrack()) == null ? void 0 : _c.nativeTrack;
          this._handleNativeTracksCallbacks();
        }
        setPreferredAudioTracks(preferredAudioTracks, shouldApply) {
          this._preferredAudioTracks = preferredAudioTracks;
          if (shouldApply) {
            this._applyAudioPreferences();
          }
        }
        setPreferredTextTracks(preferredTextTracks, shouldApply) {
          this._preferredTextTracks = preferredTextTracks;
          if (shouldApply) {
            this._applyTextPreferences();
          }
        }
        setPreferredVideoTracks(preferredVideoTracks, shouldApply) {
          this._preferredVideoTracks = preferredVideoTracks;
          if (shouldApply) {
            this._applyVideoPreferences();
          }
        }
        setAudioTrackById(id) {
          for (let i = 0; i < this._audioTracks.length; i++) {
            const { track, nativeTrack } = this._audioTracks[i];
            if (track.id === id) {
              this._enableAudioTrackFromIndex(i);
              this._audioTrackLockedOn = nativeTrack;
              return;
            }
          }
          throw new Error("Audio track not found.");
        }
        disableTextTrack() {
          disableTextTracks(this._textTracks);
          this._textTrackLockedOn = null;
        }
        setTextTrackById(id) {
          let hasSetTrack = false;
          for (let i = 0; i < this._textTracks.length; i++) {
            const { track, nativeTrack } = this._textTracks[i];
            if (track.id === id) {
              nativeTrack.mode = "showing";
              hasSetTrack = true;
              this._textTrackLockedOn = nativeTrack;
            } else if (nativeTrack.mode === "showing" || nativeTrack.mode === "hidden") {
              nativeTrack.mode = "disabled";
            }
          }
          if (!hasSetTrack) {
            throw new Error("Text track not found.");
          }
        }
        disableVideoTrack() {
          disableVideoTracks(this._videoTracks);
          this._videoTrackLockedOn = null;
        }
        setVideoTrackById(id) {
          for (let i = 0; i < this._videoTracks.length; i++) {
            const { track, nativeTrack } = this._videoTracks[i];
            if (track.id === id) {
              nativeTrack.selected = true;
              this._videoTrackLockedOn = nativeTrack;
              return;
            }
          }
          throw new Error("Video track not found.");
        }
        getChosenAudioTrack() {
          const chosenPrivateAudioTrack = this._getPrivateChosenAudioTrack();
          if (chosenPrivateAudioTrack != null) {
            return chosenPrivateAudioTrack.track;
          }
          return chosenPrivateAudioTrack;
        }
        getChosenTextTrack() {
          const chosenPrivateTextTrack = this._getPrivateChosenTextTrack();
          if (chosenPrivateTextTrack != null) {
            return chosenPrivateTextTrack.track;
          }
          return chosenPrivateTextTrack;
        }
        getChosenVideoTrack() {
          const chosenPrivateVideoTrack = this._getPrivateChosenVideoTrack();
          if (chosenPrivateVideoTrack != null) {
            return chosenPrivateVideoTrack.track;
          }
          return chosenPrivateVideoTrack;
        }
        getAvailableAudioTracks() {
          return this._audioTracks.map(({ track, nativeTrack }) => {
            return {
              id: track.id,
              language: track.language,
              normalized: track.normalized,
              audioDescription: track.audioDescription,
              active: nativeTrack.enabled,
              representations: track.representations
            };
          });
        }
        getAvailableTextTracks() {
          return this._textTracks.map(({ track, nativeTrack }) => {
            return {
              id: track.id,
              language: track.language,
              normalized: track.normalized,
              closedCaption: track.closedCaption,
              active: nativeTrack.mode === "showing"
            };
          });
        }
        getAvailableVideoTracks() {
          return this._videoTracks.map(({ track, nativeTrack }) => {
            return {
              id: track.id,
              representations: track.representations,
              active: nativeTrack.selected
            };
          });
        }
        dispose() {
          if (this._nativeVideoTracks !== void 0) {
            this._nativeVideoTracks.onchange = null;
            this._nativeVideoTracks.onaddtrack = null;
            this._nativeVideoTracks.onremovetrack = null;
          }
          if (this._nativeAudioTracks !== void 0) {
            this._nativeAudioTracks.onchange = null;
            this._nativeAudioTracks.onaddtrack = null;
            this._nativeAudioTracks.onremovetrack = null;
          }
          if (this._nativeTextTracks !== void 0) {
            this._nativeTextTracks.onchange = null;
            this._nativeTextTracks.onaddtrack = null;
            this._nativeTextTracks.onremovetrack = null;
          }
          this.removeEventListener();
        }
        _getPrivateChosenAudioTrack() {
          if (this._nativeAudioTracks === void 0) {
            return void 0;
          }
          for (let i = 0; i < this._audioTracks.length; i++) {
            const audioTrack = this._audioTracks[i];
            if (audioTrack.nativeTrack.enabled) {
              return audioTrack;
            }
          }
          return null;
        }
        _getPrivateChosenVideoTrack() {
          if (this._nativeVideoTracks === void 0) {
            return void 0;
          }
          for (let i = 0; i < this._videoTracks.length; i++) {
            const videoTrack = this._videoTracks[i];
            if (videoTrack.nativeTrack.selected) {
              return videoTrack;
            }
          }
          return null;
        }
        _getPrivateChosenTextTrack() {
          if (this._nativeTextTracks === void 0) {
            return void 0;
          }
          for (let i = 0; i < this._textTracks.length; i++) {
            const textTrack = this._textTracks[i];
            if (textTrack.nativeTrack.mode === "showing") {
              return textTrack;
            }
          }
          return null;
        }
        _setOptimalAudioTrack() {
          if (this._audioTrackLockedOn !== void 0) {
            for (let i = 0; i < this._audioTracks.length; i++) {
              const { nativeTrack } = this._audioTracks[i];
              if (nativeTrack === this._audioTrackLockedOn) {
                this._enableAudioTrackFromIndex(i);
                return;
              }
            }
          }
          this._applyAudioPreferences();
        }
        _applyAudioPreferences() {
          this._audioTrackLockedOn = void 0;
          const preferredAudioTracks = this._preferredAudioTracks;
          for (let i = 0; i < preferredAudioTracks.length; i++) {
            const track = preferredAudioTracks[i];
            if (track !== null && track.language !== void 0) {
              const normalized = languages_default(track.language);
              for (let j = 0; j < this._audioTracks.length; j++) {
                const audioTrack = this._audioTracks[j];
                if (audioTrack.track.normalized === normalized && audioTrack.track.audioDescription === track.audioDescription) {
                  this._enableAudioTrackFromIndex(j);
                  return;
                }
              }
            }
          }
        }
        _setOptimalTextTrack() {
          if (this._textTrackLockedOn === null) {
            disableTextTracks(this._textTracks);
            return;
          } else if (this._textTrackLockedOn !== void 0) {
            for (let i = 0; i < this._textTracks.length; i++) {
              const { nativeTrack } = this._textTracks[i];
              if (nativeTrack === this._textTrackLockedOn) {
                disableAllTextTracksBut(this._textTracks, nativeTrack);
                if (nativeTrack.mode !== "showing") {
                  nativeTrack.mode = "showing";
                }
                return;
              }
            }
          }
          this._applyTextPreferences();
        }
        _applyTextPreferences() {
          this._textTrackLockedOn = void 0;
          const preferredTextTracks = this._preferredTextTracks;
          for (let i = 0; i < preferredTextTracks.length; i++) {
            const track = preferredTextTracks[i];
            if (track === null) {
              disableTextTracks(this._textTracks);
              return;
            }
            const normalized = languages_default(track.language);
            for (let j = 0; j < this._textTracks.length; j++) {
              const textTrack = this._textTracks[j];
              if (textTrack.track.normalized === normalized && textTrack.track.closedCaption === track.closedCaption) {
                disableAllTextTracksBut(this._textTracks, textTrack.nativeTrack);
                if (textTrack.nativeTrack.mode !== "showing") {
                  textTrack.nativeTrack.mode = "showing";
                }
                return;
              }
            }
          }
          disableTextTracks(this._textTracks);
        }
        _setOptimalVideoTrack() {
          if (this._videoTrackLockedOn === null) {
            disableVideoTracks(this._videoTracks);
            return;
          } else if (this._videoTrackLockedOn !== void 0) {
            for (let i = 0; i < this._videoTracks.length; i++) {
              const { nativeTrack } = this._videoTracks[i];
              if (nativeTrack === this._videoTrackLockedOn) {
                nativeTrack.selected = true;
                return;
              }
            }
          }
          this._applyVideoPreferences();
        }
        _applyVideoPreferences() {
          this._videoTrackLockedOn = void 0;
          const preferredVideoTracks = this._preferredVideoTracks;
          const hasNullPreference = preferredVideoTracks.some((p) => p === null);
          if (hasNullPreference) {
            disableVideoTracks(this._videoTracks);
          }
        }
        _handleNativeTracksCallbacks() {
          if (this._nativeAudioTracks !== void 0) {
            this._nativeAudioTracks.onaddtrack = () => {
              var _a2, _b2;
              if (this._nativeAudioTracks !== void 0) {
                const newAudioTracks = createAudioTracks(this._nativeAudioTracks);
                if (areTrackArraysDifferent(this._audioTracks, newAudioTracks)) {
                  this._audioTracks = newAudioTracks;
                  this._setOptimalAudioTrack();
                  this.trigger("availableAudioTracksChange", this.getAvailableAudioTracks());
                  const chosenAudioTrack = this._getPrivateChosenAudioTrack();
                  if ((chosenAudioTrack == null ? void 0 : chosenAudioTrack.nativeTrack) !== this._lastEmittedNativeAudioTrack) {
                    this.trigger("audioTrackChange", (_a2 = chosenAudioTrack == null ? void 0 : chosenAudioTrack.track) != null ? _a2 : null);
                    this._lastEmittedNativeAudioTrack = (_b2 = chosenAudioTrack == null ? void 0 : chosenAudioTrack.nativeTrack) != null ? _b2 : null;
                  }
                }
              }
            };
            this._nativeAudioTracks.onremovetrack = () => {
              var _a2, _b2;
              if (this._nativeAudioTracks !== void 0) {
                const newAudioTracks = createAudioTracks(this._nativeAudioTracks);
                if (areTrackArraysDifferent(this._audioTracks, newAudioTracks)) {
                  this._audioTracks = newAudioTracks;
                  this.trigger("availableAudioTracksChange", this.getAvailableAudioTracks());
                  const chosenAudioTrack = this._getPrivateChosenAudioTrack();
                  if ((chosenAudioTrack == null ? void 0 : chosenAudioTrack.nativeTrack) !== this._lastEmittedNativeAudioTrack) {
                    this.trigger("audioTrackChange", (_a2 = chosenAudioTrack == null ? void 0 : chosenAudioTrack.track) != null ? _a2 : null);
                    this._lastEmittedNativeAudioTrack = (_b2 = chosenAudioTrack == null ? void 0 : chosenAudioTrack.nativeTrack) != null ? _b2 : null;
                  }
                }
              }
            };
            this._nativeAudioTracks.onchange = () => {
              if (this._audioTracks !== void 0) {
                for (let i = 0; i < this._audioTracks.length; i++) {
                  const { track, nativeTrack } = this._audioTracks[i];
                  if (nativeTrack.enabled) {
                    if (nativeTrack !== this._lastEmittedNativeAudioTrack) {
                      this.trigger("audioTrackChange", track);
                      this._lastEmittedNativeAudioTrack = nativeTrack;
                    }
                    return;
                  }
                }
              }
              if (this._lastEmittedNativeAudioTrack !== null) {
                this.trigger("audioTrackChange", null);
                this._lastEmittedNativeAudioTrack = null;
              }
              return;
            };
          }
          if (this._nativeTextTracks !== void 0) {
            this._nativeTextTracks.onaddtrack = () => {
              var _a2, _b2;
              if (this._nativeTextTracks !== void 0) {
                const newTextTracks = createTextTracks(this._nativeTextTracks);
                if (areTrackArraysDifferent(this._textTracks, newTextTracks)) {
                  this._textTracks = newTextTracks;
                  this._setOptimalTextTrack();
                  this.trigger("availableTextTracksChange", this.getAvailableTextTracks());
                  const chosenTextTrack = this._getPrivateChosenTextTrack();
                  if ((chosenTextTrack == null ? void 0 : chosenTextTrack.nativeTrack) !== this._lastEmittedNativeTextTrack) {
                    this.trigger("textTrackChange", (_a2 = chosenTextTrack == null ? void 0 : chosenTextTrack.track) != null ? _a2 : null);
                    this._lastEmittedNativeTextTrack = (_b2 = chosenTextTrack == null ? void 0 : chosenTextTrack.nativeTrack) != null ? _b2 : null;
                  }
                }
              }
            };
            this._nativeTextTracks.onremovetrack = () => {
              var _a2, _b2;
              if (this._nativeTextTracks !== void 0) {
                const newTextTracks = createTextTracks(this._nativeTextTracks);
                if (areTrackArraysDifferent(this._textTracks, newTextTracks)) {
                  this._textTracks = newTextTracks;
                  this._setOptimalTextTrack();
                  this.trigger("availableTextTracksChange", this.getAvailableTextTracks());
                  const chosenTextTrack = this._getPrivateChosenTextTrack();
                  if ((chosenTextTrack == null ? void 0 : chosenTextTrack.nativeTrack) !== this._lastEmittedNativeTextTrack) {
                    this.trigger("textTrackChange", (_a2 = chosenTextTrack == null ? void 0 : chosenTextTrack.track) != null ? _a2 : null);
                    this._lastEmittedNativeTextTrack = (_b2 = chosenTextTrack == null ? void 0 : chosenTextTrack.nativeTrack) != null ? _b2 : null;
                  }
                }
              }
            };
            this._nativeTextTracks.onchange = () => {
              if (this._textTracks !== void 0) {
                for (let i = 0; i < this._textTracks.length; i++) {
                  const { track, nativeTrack } = this._textTracks[i];
                  if (nativeTrack.mode === "showing") {
                    if (nativeTrack !== this._lastEmittedNativeTextTrack) {
                      this.trigger("textTrackChange", track);
                      this._lastEmittedNativeTextTrack = nativeTrack;
                    }
                    return;
                  }
                }
              }
              if (this._lastEmittedNativeTextTrack !== null) {
                this.trigger("textTrackChange", null);
                this._lastEmittedNativeTextTrack = null;
              }
              return;
            };
          }
          if (this._nativeVideoTracks !== void 0) {
            this._nativeVideoTracks.onaddtrack = () => {
              var _a2, _b2;
              if (this._nativeVideoTracks !== void 0) {
                const newVideoTracks = createVideoTracks(this._nativeVideoTracks);
                if (areTrackArraysDifferent(this._videoTracks, newVideoTracks)) {
                  this._videoTracks = newVideoTracks;
                  this._setOptimalVideoTrack();
                  this.trigger("availableVideoTracksChange", this.getAvailableVideoTracks());
                  const chosenVideoTrack = this._getPrivateChosenVideoTrack();
                  if ((chosenVideoTrack == null ? void 0 : chosenVideoTrack.nativeTrack) !== this._lastEmittedNativeVideoTrack) {
                    this.trigger("videoTrackChange", (_a2 = chosenVideoTrack == null ? void 0 : chosenVideoTrack.track) != null ? _a2 : null);
                    this._lastEmittedNativeVideoTrack = (_b2 = chosenVideoTrack == null ? void 0 : chosenVideoTrack.nativeTrack) != null ? _b2 : null;
                  }
                }
              }
            };
            this._nativeVideoTracks.onremovetrack = () => {
              var _a2, _b2;
              if (this._nativeVideoTracks !== void 0) {
                const newVideoTracks = createVideoTracks(this._nativeVideoTracks);
                if (areTrackArraysDifferent(this._videoTracks, newVideoTracks)) {
                  this._videoTracks = newVideoTracks;
                  this._setOptimalVideoTrack();
                  this.trigger("availableVideoTracksChange", this.getAvailableVideoTracks());
                  const chosenVideoTrack = this._getPrivateChosenVideoTrack();
                  if ((chosenVideoTrack == null ? void 0 : chosenVideoTrack.nativeTrack) !== this._lastEmittedNativeVideoTrack) {
                    this.trigger("videoTrackChange", (_a2 = chosenVideoTrack == null ? void 0 : chosenVideoTrack.track) != null ? _a2 : null);
                    this._lastEmittedNativeVideoTrack = (_b2 = chosenVideoTrack == null ? void 0 : chosenVideoTrack.nativeTrack) != null ? _b2 : null;
                  }
                }
              }
            };
            this._nativeVideoTracks.onchange = () => {
              if (this._videoTracks !== void 0) {
                for (let i = 0; i < this._videoTracks.length; i++) {
                  const { track, nativeTrack } = this._videoTracks[i];
                  if (nativeTrack.selected) {
                    if (nativeTrack !== this._lastEmittedNativeVideoTrack) {
                      this.trigger("videoTrackChange", track);
                      this._lastEmittedNativeVideoTrack = nativeTrack;
                    }
                    return;
                  }
                }
              }
              if (this._lastEmittedNativeVideoTrack !== null) {
                this.trigger("videoTrackChange", null);
                this._lastEmittedNativeVideoTrack = null;
              }
              return;
            };
          }
        }
        _enableAudioTrackFromIndex(index) {
          assert(index < this._audioTracks.length);
          for (const audioTrack of this._audioTracks) {
            audioTrack.nativeTrack.enabled = false;
          }
          this._audioTracks[index].nativeTrack.enabled = true;
          return;
        }
      };
    }
  });

  // demo/full/scripts/index.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_stable = __toESM(require_stable());
  var import_runtime = __toESM(require_runtime());
  var import_react47 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // demo/full/scripts/controllers/Main.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/api/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/api/playback_observer.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_config2();
  init_log();
  init_object_assign();
  init_ranges();
  var SCANNED_MEDIA_ELEMENTS_EVENTS = [
    "canplay",
    "play",
    "seeking",
    "seeked",
    "loadedmetadata",
    "ratechange"
  ];
  var PlaybackObserver = class {
    constructor(mediaElement, options) {
      this._internalSeekingEventsIncomingCounter = 0;
      this._mediaElement = mediaElement;
      this._withMediaSource = options.withMediaSource;
      this._lowLatencyMode = options.lowLatencyMode;
      this._lastObservation = null;
      this._observation$ = null;
    }
    getCurrentTime() {
      return this._mediaElement.currentTime;
    }
    setCurrentTime(time) {
      this._internalSeekingEventsIncomingCounter += 1;
      this._mediaElement.currentTime = time;
    }
    getReadyState() {
      return this._mediaElement.readyState;
    }
    observe(includeLastObservation) {
      return defer(() => {
        if (this._observation$ === null || this._lastObservation === null) {
          this._lastObservation = this._generateInitialObservation();
          this._observation$ = this._createInnerObservable().pipe(share());
          return this.observe(includeLastObservation);
        } else {
          return includeLastObservation ? this._observation$.pipe(startWith(this._lastObservation)) : this._observation$;
        }
      });
    }
    deriveReadOnlyObserver(mapObservable) {
      return generateReadOnlyObserver(this, mapObservable);
    }
    _createInnerObservable() {
      return defer(() => {
        const {
          SAMPLING_INTERVAL_MEDIASOURCE,
          SAMPLING_INTERVAL_LOW_LATENCY,
          SAMPLING_INTERVAL_NO_MEDIASOURCE
        } = config_default.getCurrent();
        const getCurrentObservation = (event) => {
          var _a2;
          let tmpEvt = event;
          if (tmpEvt === "seeking" && this._internalSeekingEventsIncomingCounter > 0) {
            tmpEvt = "internal-seeking";
            this._internalSeekingEventsIncomingCounter -= 1;
          }
          const lastObservation = (_a2 = this._lastObservation) != null ? _a2 : this._generateInitialObservation();
          const mediaTimings = getMediaInfos(this._mediaElement, tmpEvt);
          const internalSeeking = mediaTimings.seeking && (tmpEvt === "internal-seeking" || lastObservation.internalSeeking && tmpEvt !== "seeking");
          const rebufferingStatus = getRebufferingStatus(lastObservation, mediaTimings, {
            lowLatencyMode: this._lowLatencyMode,
            withMediaSource: this._withMediaSource
          });
          const freezingStatus = getFreezingStatus(lastObservation, mediaTimings);
          const timings = object_assign_default({}, {
            rebuffering: rebufferingStatus,
            freezing: freezingStatus,
            internalSeeking
          }, mediaTimings);
          log_default.debug("API: current media element state", timings);
          return timings;
        };
        const eventObs = SCANNED_MEDIA_ELEMENTS_EVENTS.map((eventName) => fromEvent(this._mediaElement, eventName).pipe(map(() => eventName)));
        const interval2 = this._lowLatencyMode ? SAMPLING_INTERVAL_LOW_LATENCY : this._withMediaSource ? SAMPLING_INTERVAL_MEDIASOURCE : SAMPLING_INTERVAL_NO_MEDIASOURCE;
        const interval$ = interval(interval2).pipe(map(() => "timeupdate"));
        return merge(interval$, ...eventObs).pipe(map((event) => {
          const newObservation = getCurrentObservation(event);
          if (log_default.getLevel() === "DEBUG") {
            log_default.debug("API: current playback timeline:\n" + prettyPrintBuffered(newObservation.buffered, newObservation.position), `
${event}`);
          }
          this._lastObservation = newObservation;
          return newObservation;
        }));
      });
    }
    _generateInitialObservation() {
      return object_assign_default(getMediaInfos(this._mediaElement, "init"), {
        rebuffering: null,
        freezing: null,
        internalSeeking: false
      });
    }
  };
  function getRebufferingEndGap(rebufferingStatus, lowLatencyMode) {
    if (rebufferingStatus === null) {
      return 0;
    }
    const suffix = lowLatencyMode ? "LOW_LATENCY" : "DEFAULT";
    const {
      RESUME_GAP_AFTER_SEEKING,
      RESUME_GAP_AFTER_NOT_ENOUGH_DATA,
      RESUME_GAP_AFTER_BUFFERING
    } = config_default.getCurrent();
    switch (rebufferingStatus.reason) {
      case "seeking":
        return RESUME_GAP_AFTER_SEEKING[suffix];
      case "not-ready":
        return RESUME_GAP_AFTER_NOT_ENOUGH_DATA[suffix];
      case "buffering":
        return RESUME_GAP_AFTER_BUFFERING[suffix];
    }
  }
  function hasLoadedUntilTheEnd(currentRange, duration, lowLatencyMode) {
    const { REBUFFERING_GAP } = config_default.getCurrent();
    const suffix = lowLatencyMode ? "LOW_LATENCY" : "DEFAULT";
    return currentRange !== null && duration - currentRange.end <= REBUFFERING_GAP[suffix];
  }
  function getMediaInfos(mediaElement, event) {
    const {
      buffered,
      currentTime,
      duration,
      ended,
      paused,
      playbackRate,
      readyState,
      seeking
    } = mediaElement;
    const currentRange = getRange(buffered, currentTime);
    return {
      bufferGap: currentRange !== null ? currentRange.end - currentTime : Infinity,
      buffered,
      currentRange,
      position: currentTime,
      duration,
      ended,
      paused,
      playbackRate,
      readyState,
      seeking,
      event
    };
  }
  function getRebufferingStatus(prevObservation, currentInfo, { withMediaSource, lowLatencyMode }) {
    const { REBUFFERING_GAP } = config_default.getCurrent();
    const {
      event: currentEvt,
      position: currentTime,
      bufferGap,
      currentRange,
      duration,
      paused,
      readyState,
      ended
    } = currentInfo;
    const {
      rebuffering: prevRebuffering,
      event: prevEvt,
      position: prevTime
    } = prevObservation;
    const fullyLoaded = hasLoadedUntilTheEnd(currentRange, duration, lowLatencyMode);
    const canSwitchToRebuffering = readyState >= 1 && currentEvt !== "loadedmetadata" && prevRebuffering === null && !(fullyLoaded || ended);
    let rebufferEndPosition = null;
    let shouldRebuffer;
    let shouldStopRebuffer;
    const rebufferGap = lowLatencyMode ? REBUFFERING_GAP.LOW_LATENCY : REBUFFERING_GAP.DEFAULT;
    if (withMediaSource) {
      if (canSwitchToRebuffering) {
        if (bufferGap <= rebufferGap) {
          shouldRebuffer = true;
          rebufferEndPosition = currentTime + bufferGap;
        } else if (bufferGap === Infinity) {
          shouldRebuffer = true;
          rebufferEndPosition = currentTime;
        }
      } else if (prevRebuffering !== null) {
        const resumeGap = getRebufferingEndGap(prevRebuffering, lowLatencyMode);
        if (shouldRebuffer !== true && prevRebuffering !== null && readyState > 1 && (fullyLoaded || ended || bufferGap < Infinity && bufferGap > resumeGap)) {
          shouldStopRebuffer = true;
        } else if (bufferGap === Infinity || bufferGap <= resumeGap) {
          rebufferEndPosition = bufferGap === Infinity ? currentTime : currentTime + bufferGap;
        }
      }
    } else {
      if (canSwitchToRebuffering && (!paused && currentEvt === "timeupdate" && prevEvt === "timeupdate" && currentTime === prevTime || currentEvt === "seeking" && bufferGap === Infinity)) {
        shouldRebuffer = true;
      } else if (prevRebuffering !== null && (currentEvt !== "seeking" && currentTime !== prevTime || currentEvt === "canplay" || bufferGap < Infinity && (bufferGap > getRebufferingEndGap(prevRebuffering, lowLatencyMode) || fullyLoaded || ended))) {
        shouldStopRebuffer = true;
      }
    }
    if (shouldStopRebuffer === true) {
      return null;
    } else if (shouldRebuffer === true || prevRebuffering !== null) {
      let reason;
      if (currentEvt === "seeking" || prevRebuffering !== null && prevRebuffering.reason === "seeking") {
        reason = "seeking";
      } else if (currentInfo.seeking) {
        reason = "seeking";
      } else if (readyState === 1) {
        reason = "not-ready";
      } else {
        reason = "buffering";
      }
      if (prevRebuffering !== null && prevRebuffering.reason === reason) {
        return {
          reason: prevRebuffering.reason,
          timestamp: prevRebuffering.timestamp,
          position: rebufferEndPosition
        };
      }
      return {
        reason,
        timestamp: performance.now(),
        position: rebufferEndPosition
      };
    }
    return null;
  }
  function getFreezingStatus(prevObservation, currentInfo) {
    const { MINIMUM_BUFFER_AMOUNT_BEFORE_FREEZING } = config_default.getCurrent();
    if (prevObservation.freezing) {
      if (currentInfo.ended || currentInfo.paused || currentInfo.readyState === 0 || currentInfo.playbackRate === 0 || prevObservation.position !== currentInfo.position) {
        return null;
      }
      return prevObservation.freezing;
    }
    return currentInfo.event === "timeupdate" && currentInfo.bufferGap > MINIMUM_BUFFER_AMOUNT_BEFORE_FREEZING && !currentInfo.ended && !currentInfo.paused && currentInfo.readyState >= 1 && currentInfo.playbackRate !== 0 && currentInfo.position === prevObservation.position ? { timestamp: performance.now() } : null;
  }
  function prettyPrintBuffered(buffered, currentTime) {
    let str = "";
    let currentTimeStr = "";
    for (let i = 0; i < buffered.length; i++) {
      const start = buffered.start(i);
      const end = buffered.end(i);
      const fixedStart = start.toFixed(2);
      const fixedEnd = end.toFixed(2);
      const fixedDuration = (end - start).toFixed(2);
      const newIntervalStr = `${fixedStart}|==${fixedDuration}==|${fixedEnd}`;
      str += newIntervalStr;
      if (currentTimeStr.length === 0 && end > currentTime) {
        const padBefore = str.length - Math.floor(newIntervalStr.length / 2);
        currentTimeStr = " ".repeat(padBefore) + `^${currentTime}`;
      }
      if (i < buffered.length - 1) {
        const nextStart = buffered.start(i + 1);
        const fixedDiff = (nextStart - end).toFixed(2);
        const holeStr = ` ~${fixedDiff}~ `;
        str += holeStr;
        if (currentTimeStr.length === 0 && currentTime < nextStart) {
          const padBefore = str.length - Math.floor(holeStr.length / 2);
          currentTimeStr = " ".repeat(padBefore) + `^${currentTime}`;
        }
      }
    }
    if (currentTimeStr.length === 0) {
      currentTimeStr = " ".repeat(str.length) + `^${currentTime}`;
    }
    return str + "\n" + currentTimeStr;
  }
  function generateReadOnlyObserver(src, mapObservable) {
    const newObs = defer(() => mapObservable(src.observe(true))).pipe(shareReplay({ bufferSize: 1, refCount: true }));
    return {
      getCurrentTime() {
        return src.getCurrentTime();
      },
      getReadyState() {
        return src.getReadyState();
      },
      observe(includeLastObservation) {
        return includeLastObservation ? newObs : newObs.pipe(skip(1));
      },
      deriveReadOnlyObserver(newUdateObserver) {
        return generateReadOnlyObserver(this, newUdateObserver);
      }
    };
  }

  // src/core/api/public_api.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_compat();

  // src/compat/can_rely_on_video_visibility_and_size.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_browser_detection();

  // src/compat/browser_version.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_log();
  init_browser_detection();
  function getFirefoxVersion() {
    if (!isFirefox) {
      log_default.warn("Compat: Can't access Firefox version on no firefox browser.");
      return null;
    }
    const userAgent = navigator.userAgent;
    const match = /Firefox\/([0-9]+)\./.exec(userAgent);
    if (match === null) {
      return -1;
    }
    const result = parseInt(match[1], 10);
    if (isNaN(result)) {
      return -1;
    }
    return result;
  }

  // src/compat/can_rely_on_video_visibility_and_size.ts
  function canRelyOnVideoVisibilityAndSize() {
    if (!isFirefox) {
      return true;
    }
    const firefoxVersion = getFirefoxVersion();
    if (firefoxVersion === null || firefoxVersion < 67) {
      return true;
    }
    const proto = HTMLVideoElement == null ? void 0 : HTMLVideoElement.prototype;
    return (proto == null ? void 0 : proto.requirePictureInPicture) !== void 0;
  }

  // src/core/api/public_api.ts
  init_config2();
  init_errors();
  init_features();
  init_log();
  init_manifest2();
  init_are_arrays_of_numbers_equal();
  init_event_emitter();
  init_is_null_or_undefined();
  init_object_assign();
  init_ranges();
  init_reference();
  init_warn_once();
  init_decrypt();

  // src/core/fetchers/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/fetchers/manifest/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/fetchers/manifest/manifest_fetcher.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_config2();
  init_errors();
  init_log();
  init_assert();
  init_task_canceller();

  // src/core/fetchers/utils/error_selector.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_errors();
  function errorSelector(error) {
    if (error instanceof RequestError) {
      return new NetworkError("PIPELINE_LOAD_ERROR", error);
    }
    return formatError(error, {
      defaultCode: "PIPELINE_LOAD_ERROR",
      defaultReason: "Unknown error when fetching the Manifest"
    });
  }

  // src/core/fetchers/utils/try_urls_with_backoff.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_compat();
  init_errors();
  init_log();
  init_cancellable_sleep();
  init_get_fuzzed_delay();
  init_task_canceller();
  function shouldRetry(error) {
    if (error instanceof RequestError) {
      if (error.type === NetworkErrorTypes.ERROR_HTTP_CODE) {
        return error.status >= 500 || error.status === 404 || error.status === 415 || error.status === 412;
      }
      return error.type === NetworkErrorTypes.TIMEOUT || error.type === NetworkErrorTypes.ERROR_EVENT;
    } else if (error instanceof CustomLoaderError) {
      if (typeof error.canRetry === "boolean") {
        return error.canRetry;
      }
      if (error.xhr !== void 0) {
        return error.xhr.status >= 500 || error.xhr.status === 404 || error.xhr.status === 415 || error.xhr.status === 412;
      }
      return false;
    }
    return isKnownError(error) && error.code === "INTEGRITY_ERROR";
  }
  function isOfflineRequestError(error) {
    if (error instanceof RequestError) {
      return error.type === NetworkErrorTypes.ERROR_EVENT && isOffline();
    } else if (error instanceof CustomLoaderError) {
      return error.isOfflineError;
    }
    return false;
  }
  function getRequestErrorType(error) {
    return isOfflineRequestError(error) ? 2 /* Offline */ : 1 /* Regular */;
  }
  function tryURLsWithBackoff(urls, performRequest, options, cancellationSignal) {
    if (cancellationSignal.isCancelled) {
      return Promise.reject(cancellationSignal.cancellationError);
    }
    const {
      baseDelay,
      maxDelay,
      maxRetryRegular,
      maxRetryOffline,
      onRetry
    } = options;
    let retryCount = 0;
    let lastError = 0 /* None */;
    const urlsToTry = urls.slice();
    if (urlsToTry.length === 0) {
      log_default.warn("Fetchers: no URL given to `tryURLsWithBackoff`.");
      return Promise.reject(new Error("No URL to request"));
    }
    return tryURLsRecursively(urlsToTry[0], 0);
    async function tryURLsRecursively(url, index) {
      try {
        const res = await performRequest(url, cancellationSignal);
        return res;
      } catch (error) {
        if (TaskCanceller.isCancellationError(error)) {
          throw error;
        }
        if (!shouldRetry(error)) {
          if (urlsToTry.length <= 1) {
            throw error;
          }
          urlsToTry.splice(index, 1);
          const newIndex = index >= urlsToTry.length - 1 ? 0 : index;
          onRetry(error);
          if (cancellationSignal.isCancelled) {
            throw cancellationSignal.cancellationError;
          }
          return tryURLsRecursively(urlsToTry[newIndex], newIndex);
        }
        const currentError = getRequestErrorType(error);
        const maxRetry = currentError === 2 /* Offline */ ? maxRetryOffline : maxRetryRegular;
        if (currentError !== lastError) {
          retryCount = 0;
          lastError = currentError;
        }
        if (index < urlsToTry.length - 1) {
          const newIndex = index + 1;
          onRetry(error);
          if (cancellationSignal.isCancelled) {
            throw cancellationSignal.cancellationError;
          }
          return tryURLsRecursively(urlsToTry[newIndex], newIndex);
        }
        retryCount++;
        if (retryCount > maxRetry) {
          throw error;
        }
        const delay2 = Math.min(baseDelay * Math.pow(2, retryCount - 1), maxDelay);
        const fuzzedDelay = getFuzzedDelay(delay2);
        const nextURL = urlsToTry[0];
        onRetry(error);
        if (cancellationSignal.isCancelled) {
          throw cancellationSignal.cancellationError;
        }
        await cancellableSleep(fuzzedDelay, cancellationSignal);
        return tryURLsRecursively(nextURL, 0);
      }
    }
  }
  function tryRequestPromiseWithBackoff(performRequest, options, cancellationSignal) {
    return tryURLsWithBackoff([null], performRequest, options, cancellationSignal);
  }

  // src/core/fetchers/manifest/manifest_fetcher.ts
  var ManifestFetcher = class {
    constructor(url, pipelines, settings) {
      this._manifestUrl = url;
      this._pipelines = pipelines.manifest;
      this._settings = settings;
    }
    fetch(url) {
      return new Observable((obs) => {
        const pipelines = this._pipelines;
        const requestUrl = url != null ? url : this._manifestUrl;
        let hasFinishedLoading = false;
        const canceller = new TaskCanceller();
        const backoffSettings = this._getBackoffSetting((err) => {
          obs.next({ type: "warning", value: errorSelector(err) });
        });
        const loadingPromise = pipelines.resolveManifestUrl === void 0 ? callLoaderWithRetries(requestUrl) : callResolverWithRetries(requestUrl).then(callLoaderWithRetries);
        loadingPromise.then((response) => {
          hasFinishedLoading = true;
          obs.next({
            type: "response",
            parse: (parserOptions) => {
              return this._parseLoadedManifest(response, parserOptions);
            }
          });
          obs.complete();
        }).catch((err) => {
          if (canceller.isUsed) {
            return;
          }
          hasFinishedLoading = true;
          obs.error(errorSelector(err));
        });
        return () => {
          if (!hasFinishedLoading) {
            canceller.cancel();
          }
        };
        function callResolverWithRetries(resolverUrl) {
          const { resolveManifestUrl } = pipelines;
          assert(resolveManifestUrl !== void 0);
          const callResolver = () => resolveManifestUrl(resolverUrl, canceller.signal);
          return tryRequestPromiseWithBackoff(callResolver, backoffSettings, canceller.signal);
        }
        function callLoaderWithRetries(manifestUrl) {
          const { loadManifest } = pipelines;
          const callLoader = () => loadManifest(manifestUrl, canceller.signal);
          return tryRequestPromiseWithBackoff(callLoader, backoffSettings, canceller.signal);
        }
      });
    }
    parse(manifest, parserOptions) {
      return this._parseLoadedManifest({
        responseData: manifest,
        size: void 0,
        requestDuration: void 0
      }, parserOptions);
    }
    _parseLoadedManifest(loaded2, parserOptions) {
      return new Observable((obs) => {
        const parsingTimeStart = performance.now();
        const canceller = new TaskCanceller();
        const { sendingTime, receivedTime } = loaded2;
        const backoffSettings = this._getBackoffSetting((err) => {
          obs.next({ type: "warning", value: errorSelector(err) });
        });
        const opts = {
          externalClockOffset: parserOptions.externalClockOffset,
          unsafeMode: parserOptions.unsafeMode,
          previousManifest: parserOptions.previousManifest,
          originalUrl: this._manifestUrl
        };
        try {
          const res = this._pipelines.parseManifest(loaded2, opts, onWarnings, canceller.signal, scheduleRequest);
          if (!isPromise2(res)) {
            emitManifestAndComplete(res.manifest);
          } else {
            res.then(({ manifest }) => emitManifestAndComplete(manifest)).catch((err) => {
              if (canceller.isUsed) {
                return;
              }
              emitError(err, true);
            });
          }
        } catch (err) {
          if (canceller.isUsed) {
            return void 0;
          }
          emitError(err, true);
        }
        return () => {
          canceller.cancel();
        };
        async function scheduleRequest(performRequest) {
          try {
            const data = await tryRequestPromiseWithBackoff(performRequest, backoffSettings, canceller.signal);
            return data;
          } catch (err) {
            throw errorSelector(err);
          }
        }
        function onWarnings(warnings) {
          for (const warning2 of warnings) {
            if (canceller.isUsed) {
              return;
            }
            emitError(warning2, false);
          }
        }
        function emitManifestAndComplete(manifest) {
          onWarnings(manifest.contentWarnings);
          const parsingTime = performance.now() - parsingTimeStart;
          log_default.info(`MF: Manifest parsed in ${parsingTime}ms`);
          obs.next({
            type: "parsed",
            manifest,
            sendingTime,
            receivedTime,
            parsingTime
          });
          obs.complete();
        }
        function emitError(err, isFatal) {
          const formattedError = formatError(err, {
            defaultCode: "PIPELINE_PARSE_ERROR",
            defaultReason: "Unknown error when parsing the Manifest"
          });
          if (isFatal) {
            obs.error(formattedError);
          } else {
            obs.next({
              type: "warning",
              value: formattedError
            });
          }
        }
      });
    }
    _getBackoffSetting(onRetry) {
      const {
        DEFAULT_MAX_MANIFEST_REQUEST_RETRY,
        DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE,
        INITIAL_BACKOFF_DELAY_BASE,
        MAX_BACKOFF_DELAY_BASE
      } = config_default.getCurrent();
      const {
        lowLatencyMode,
        maxRetryRegular: ogRegular,
        maxRetryOffline: ogOffline
      } = this._settings;
      const baseDelay = lowLatencyMode ? INITIAL_BACKOFF_DELAY_BASE.LOW_LATENCY : INITIAL_BACKOFF_DELAY_BASE.REGULAR;
      const maxDelay = lowLatencyMode ? MAX_BACKOFF_DELAY_BASE.LOW_LATENCY : MAX_BACKOFF_DELAY_BASE.REGULAR;
      const maxRetryRegular = ogRegular != null ? ogRegular : DEFAULT_MAX_MANIFEST_REQUEST_RETRY;
      const maxRetryOffline = ogOffline != null ? ogOffline : DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE;
      return {
        onRetry,
        baseDelay,
        maxDelay,
        maxRetryRegular,
        maxRetryOffline
      };
    }
  };
  function isPromise2(val) {
    return val instanceof Promise;
  }

  // src/core/fetchers/manifest/index.ts
  var manifest_default2 = ManifestFetcher;

  // src/core/fetchers/segment/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/fetchers/segment/prioritized_segment_fetcher.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_log();
  function applyPrioritizerToSegmentFetcher(prioritizer, fetcher) {
    const taskHandlers = /* @__PURE__ */ new WeakMap();
    return {
      createRequest(content, priority = 0) {
        const task = prioritizer.create(fetcher(content), priority);
        const flattenTask = task.pipe(map((evt) => {
          return evt.type === "data" ? evt.value : evt;
        }));
        taskHandlers.set(flattenTask, task);
        return flattenTask;
      },
      updatePriority(observable2, priority) {
        const correspondingTask = taskHandlers.get(observable2);
        if (correspondingTask === void 0) {
          log_default.warn("Fetchers: Cannot update the priority of a request: task not found.");
          return;
        }
        prioritizer.updatePriority(correspondingTask, priority);
      }
    };
  }

  // src/core/fetchers/segment/segment_fetcher.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_config2();
  init_errors();
  init_log();
  init_manifest2();
  init_array_includes();
  init_id_generator();

  // src/utils/initialization_segment_cache.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var InitializationSegmentCache = class {
    constructor() {
      this._cache = /* @__PURE__ */ new WeakMap();
    }
    add({
      representation,
      segment
    }, response) {
      if (segment.isInit) {
        this._cache.set(representation, response);
      }
    }
    get({
      representation,
      segment
    }) {
      if (segment.isInit) {
        const value = this._cache.get(representation);
        if (value !== void 0) {
          return value;
        }
      }
      return null;
    }
  };
  var initialization_segment_cache_default = InitializationSegmentCache;

  // src/core/fetchers/segment/segment_fetcher.ts
  init_is_null_or_undefined();
  init_object_assign();
  init_task_canceller();
  var generateRequestID = idGenerator();
  function createSegmentFetcher(bufferType, pipeline, callbacks, options) {
    const cache = arrayIncludes(["audio", "video"], bufferType) ? new initialization_segment_cache_default() : void 0;
    const { loadSegment: loadSegment2, parseSegment } = pipeline;
    return function fetchSegment(content) {
      const { segment } = content;
      const segmentIdString = getLoggableSegmentId(content);
      return new Observable((obs) => {
        var _a2, _b2;
        const requestId = generateRequestID();
        const canceller = new TaskCanceller();
        let requestInfo;
        const parsedChunks = [];
        let segmentDurationAcc = 0;
        let metricsSent = false;
        const loaderCallbacks = {
          onProgress(info) {
            var _a3;
            if (info.totalSize !== void 0 && info.size < info.totalSize) {
              (_a3 = callbacks.onProgress) == null ? void 0 : _a3.call(callbacks, {
                duration: info.duration,
                size: info.size,
                totalSize: info.totalSize,
                timestamp: performance.now(),
                id: requestId
              });
            }
          },
          onNewChunk(chunkData) {
            obs.next({
              type: "chunk",
              parse: generateParserFunction(chunkData, true)
            });
          }
        };
        const cached = cache !== void 0 ? cache.get(content) : null;
        if (cached !== null) {
          log_default.debug("SF: Found wanted segment in cache", segmentIdString);
          obs.next({
            type: "chunk",
            parse: generateParserFunction(cached, false)
          });
          obs.next({ type: "chunk-complete" });
          obs.complete();
          return void 0;
        }
        log_default.debug("SF: Beginning request", segmentIdString);
        (_a2 = callbacks.onRequestBegin) == null ? void 0 : _a2.call(callbacks, {
          requestTimestamp: performance.now(),
          id: requestId,
          content
        });
        tryURLsWithBackoff((_b2 = segment.mediaURLs) != null ? _b2 : [null], callLoaderWithUrl, object_assign_default({ onRetry }, options), canceller.signal).then((res) => {
          var _a3;
          log_default.debug("SF: Segment request ended with success", segmentIdString);
          if (res.resultType === "segment-loaded") {
            const loadedData = res.resultData.responseData;
            if (cache !== void 0) {
              cache.add(content, res.resultData.responseData);
            }
            obs.next({
              type: "chunk",
              parse: generateParserFunction(loadedData, false)
            });
          } else if (res.resultType === "segment-created") {
            obs.next({
              type: "chunk",
              parse: generateParserFunction(res.resultData, false)
            });
          }
          log_default.debug("SF: Segment request ended with success", segmentIdString);
          obs.next({ type: "chunk-complete" });
          if (res.resultType !== "segment-created") {
            requestInfo = res.resultData;
            sendNetworkMetricsIfAvailable();
          } else {
            requestInfo = null;
          }
          if (!canceller.isUsed) {
            (_a3 = callbacks.onRequestEnd) == null ? void 0 : _a3.call(callbacks, { id: requestId });
          }
          obs.complete();
        }).catch((err) => {
          log_default.debug("SF: Segment request failed", segmentIdString);
          requestInfo = null;
          obs.error(errorSelector(err));
        });
        return () => {
          var _a3;
          if (requestInfo !== void 0) {
            return;
          }
          log_default.debug("SF: Segment request cancelled", segmentIdString);
          requestInfo = null;
          canceller.cancel();
          (_a3 = callbacks.onRequestEnd) == null ? void 0 : _a3.call(callbacks, { id: requestId });
        };
        function callLoaderWithUrl(url, cancellationSignal) {
          return loadSegment2(url, content, cancellationSignal, loaderCallbacks);
        }
        function generateParserFunction(data, isChunked) {
          parsedChunks.push(false);
          const parsedChunkId = parsedChunks.length - 1;
          return function parse(initTimescale) {
            const loaded2 = { data, isChunked };
            try {
              const parsed = parseSegment(loaded2, content, initTimescale);
              if (!parsedChunks[parsedChunkId]) {
                segmentDurationAcc = segmentDurationAcc !== void 0 && parsed.segmentType === "media" && parsed.chunkInfos !== null && parsed.chunkInfos.duration !== void 0 ? segmentDurationAcc + parsed.chunkInfos.duration : void 0;
                parsedChunks[parsedChunkId] = true;
                sendNetworkMetricsIfAvailable();
              }
              return parsed;
            } catch (error) {
              throw formatError(error, {
                defaultCode: "PIPELINE_PARSE_ERROR",
                defaultReason: "Unknown parsing error"
              });
            }
          };
        }
        function onRetry(err) {
          obs.next({
            type: "retry",
            value: errorSelector(err)
          });
        }
        function sendNetworkMetricsIfAvailable() {
          var _a3;
          if (metricsSent) {
            return;
          }
          if (!isNullOrUndefined(requestInfo) && requestInfo.size !== void 0 && requestInfo.requestDuration !== void 0 && parsedChunks.length > 0 && parsedChunks.every((isParsed) => isParsed)) {
            metricsSent = true;
            (_a3 = callbacks.onMetrics) == null ? void 0 : _a3.call(callbacks, {
              size: requestInfo.size,
              requestDuration: requestInfo.requestDuration,
              content,
              segmentDuration: segmentDurationAcc
            });
          }
        }
      });
    };
  }
  function getSegmentFetcherOptions(bufferType, {
    maxRetryRegular,
    maxRetryOffline,
    lowLatencyMode
  }) {
    const {
      DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR,
      DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE,
      INITIAL_BACKOFF_DELAY_BASE,
      MAX_BACKOFF_DELAY_BASE
    } = config_default.getCurrent();
    return {
      maxRetryRegular: bufferType === "image" ? 0 : maxRetryRegular != null ? maxRetryRegular : DEFAULT_MAX_REQUESTS_RETRY_ON_ERROR,
      maxRetryOffline: maxRetryOffline != null ? maxRetryOffline : DEFAULT_MAX_REQUESTS_RETRY_ON_OFFLINE,
      baseDelay: lowLatencyMode ? INITIAL_BACKOFF_DELAY_BASE.LOW_LATENCY : INITIAL_BACKOFF_DELAY_BASE.REGULAR,
      maxDelay: lowLatencyMode ? MAX_BACKOFF_DELAY_BASE.LOW_LATENCY : MAX_BACKOFF_DELAY_BASE.REGULAR
    };
  }

  // src/core/fetchers/segment/segment_fetcher_creator.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_config2();

  // src/core/fetchers/segment/prioritizer.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_log();
  init_array_find_index();
  var ObservablePrioritizer = class {
    constructor({ prioritySteps }) {
      this._minPendingPriority = null;
      this._waitingQueue = [];
      this._pendingTasks = [];
      this._prioritySteps = prioritySteps;
      if (this._prioritySteps.high >= this._prioritySteps.low) {
        throw new Error("FP Error: the max high level priority should be given a lowerpriority number than the min low priority.");
      }
    }
    create(obs, priority) {
      const pObs$ = new Observable((subscriber) => {
        let isStillSubscribed = true;
        let newTask;
        const trigger = (shouldRun) => {
          if (newTask.subscription !== null) {
            newTask.subscription.unsubscribe();
            newTask.subscription = null;
            if (isStillSubscribed) {
              subscriber.next({ type: "interrupted" });
            }
          }
          if (!shouldRun) {
            return;
          }
          this._minPendingPriority = this._minPendingPriority === null ? newTask.priority : Math.min(this._minPendingPriority, newTask.priority);
          this._pendingTasks.push(newTask);
          newTask.subscription = obs.subscribe({
            next: (evt) => subscriber.next({ type: "data", value: evt }),
            error: (error) => {
              subscriber.error(error);
              newTask.subscription = null;
              newTask.finished = true;
              this._onTaskEnd(newTask);
            },
            complete: () => {
              subscriber.next({ type: "ended" });
              if (isStillSubscribed) {
                subscriber.complete();
              }
              newTask.subscription = null;
              newTask.finished = true;
              this._onTaskEnd(newTask);
            }
          });
        };
        newTask = {
          observable: pObs$,
          priority,
          trigger,
          subscription: null,
          finished: false
        };
        if (!this._canBeStartedNow(newTask)) {
          this._waitingQueue.push(newTask);
        } else {
          newTask.trigger(true);
          if (this._isRunningHighPriorityTasks()) {
            this._interruptCancellableTasks();
          }
        }
        return () => {
          isStillSubscribed = false;
          if (newTask.subscription !== null) {
            newTask.subscription.unsubscribe();
            newTask.subscription = null;
          }
          if (newTask.finished) {
            return;
          }
          const waitingQueueIndex = arrayFindIndex(this._waitingQueue, (elt) => elt.observable === pObs$);
          if (waitingQueueIndex >= 0) {
            this._waitingQueue.splice(waitingQueueIndex, 1);
          } else {
            const pendingTasksIndex = arrayFindIndex(this._pendingTasks, (elt) => elt.observable === pObs$);
            if (pendingTasksIndex < 0) {
              log_default.warn("FP: unsubscribing non-existent task");
              return;
            }
            const pendingTask = this._pendingTasks.splice(pendingTasksIndex, 1)[0];
            if (this._pendingTasks.length === 0) {
              this._minPendingPriority = null;
              this._loopThroughWaitingQueue();
            } else if (this._minPendingPriority === pendingTask.priority) {
              this._minPendingPriority = Math.min(...this._pendingTasks.map((t) => t.priority));
              this._loopThroughWaitingQueue();
            }
          }
        };
      });
      return pObs$;
    }
    updatePriority(obs, priority) {
      const waitingQueueIndex = arrayFindIndex(this._waitingQueue, (elt) => elt.observable === obs);
      if (waitingQueueIndex >= 0) {
        const waitingQueueElt = this._waitingQueue[waitingQueueIndex];
        if (waitingQueueElt.priority === priority) {
          return;
        }
        waitingQueueElt.priority = priority;
        if (!this._canBeStartedNow(waitingQueueElt)) {
          return;
        }
        this._startWaitingQueueTask(waitingQueueIndex);
        if (this._isRunningHighPriorityTasks()) {
          this._interruptCancellableTasks();
        }
        return;
      }
      const pendingTasksIndex = arrayFindIndex(this._pendingTasks, (elt) => elt.observable === obs);
      if (pendingTasksIndex < 0) {
        log_default.warn("FP: request to update the priority of a non-existent task");
        return;
      }
      const task = this._pendingTasks[pendingTasksIndex];
      if (task.priority === priority) {
        return;
      }
      const prevPriority = task.priority;
      task.priority = priority;
      if (this._minPendingPriority === null || priority < this._minPendingPriority) {
        this._minPendingPriority = priority;
      } else if (this._minPendingPriority === prevPriority) {
        if (this._pendingTasks.length === 1) {
          this._minPendingPriority = priority;
        } else {
          this._minPendingPriority = Math.min(...this._pendingTasks.map((t) => t.priority));
        }
        this._loopThroughWaitingQueue();
      } else {
        return;
      }
      if (this._isRunningHighPriorityTasks()) {
        this._interruptCancellableTasks();
      }
    }
    _loopThroughWaitingQueue() {
      const minWaitingPriority = this._waitingQueue.reduce((acc, elt) => {
        return acc === null || acc > elt.priority ? elt.priority : acc;
      }, null);
      if (minWaitingPriority === null || this._minPendingPriority !== null && this._minPendingPriority < minWaitingPriority) {
        return;
      }
      for (let i = 0; i < this._waitingQueue.length; i++) {
        const priorityToCheck = this._minPendingPriority === null ? minWaitingPriority : Math.min(this._minPendingPriority, minWaitingPriority);
        const elt = this._waitingQueue[i];
        if (elt.priority <= priorityToCheck) {
          this._startWaitingQueueTask(i);
          i--;
        }
      }
    }
    _interruptCancellableTasks() {
      for (let i = 0; i < this._pendingTasks.length; i++) {
        const pendingObj = this._pendingTasks[i];
        if (pendingObj.priority >= this._prioritySteps.low) {
          this._interruptPendingTask(pendingObj);
          return this._interruptCancellableTasks();
        }
      }
    }
    _startWaitingQueueTask(index) {
      const task = this._waitingQueue.splice(index, 1)[0];
      task.trigger(true);
    }
    _interruptPendingTask(task) {
      const pendingTasksIndex = arrayFindIndex(this._pendingTasks, (elt) => elt.observable === task.observable);
      if (pendingTasksIndex < 0) {
        log_default.warn("FP: Interrupting a non-existent pending task. Aborting...");
        return;
      }
      this._pendingTasks.splice(pendingTasksIndex, 1);
      this._waitingQueue.push(task);
      if (this._pendingTasks.length === 0) {
        this._minPendingPriority = null;
      } else if (this._minPendingPriority === task.priority) {
        this._minPendingPriority = Math.min(...this._pendingTasks.map((t) => t.priority));
      }
      task.trigger(false);
    }
    _onTaskEnd(task) {
      const pendingTasksIndex = arrayFindIndex(this._pendingTasks, (elt) => elt.observable === task.observable);
      if (pendingTasksIndex < 0) {
        return;
      }
      this._pendingTasks.splice(pendingTasksIndex, 1);
      if (this._pendingTasks.length > 0) {
        if (this._minPendingPriority === task.priority) {
          this._minPendingPriority = Math.min(...this._pendingTasks.map((t) => t.priority));
        }
        return;
      }
      this._minPendingPriority = null;
      this._loopThroughWaitingQueue();
    }
    _canBeStartedNow(task) {
      return this._minPendingPriority === null || task.priority <= this._minPendingPriority;
    }
    _isRunningHighPriorityTasks() {
      return this._minPendingPriority !== null && this._minPendingPriority <= this._prioritySteps.high;
    }
  };

  // src/core/fetchers/segment/segment_fetcher_creator.ts
  var SegmentFetcherCreator = class {
    constructor(transport, options) {
      const {
        MIN_CANCELABLE_PRIORITY,
        MAX_HIGH_PRIORITY_LEVEL
      } = config_default.getCurrent();
      this._transport = transport;
      this._prioritizer = new ObservablePrioritizer({
        prioritySteps: {
          high: MAX_HIGH_PRIORITY_LEVEL,
          low: MIN_CANCELABLE_PRIORITY
        }
      });
      this._backoffOptions = options;
    }
    createSegmentFetcher(bufferType, callbacks) {
      const backoffOptions = getSegmentFetcherOptions(bufferType, this._backoffOptions);
      const pipelines = this._transport[bufferType];
      const segmentFetcher = createSegmentFetcher(bufferType, pipelines, callbacks, backoffOptions);
      return applyPrioritizerToSegmentFetcher(this._prioritizer, segmentFetcher);
    }
  };

  // src/core/fetchers/segment/index.ts
  var segment_default = SegmentFetcherCreator;

  // src/core/init/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/init/initialize_media_source.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_compat();
  init_config2();
  init_log();
  init_defer_subscriptions();
  init_event_emitter();
  init_filter_map();
  init_object_assign();

  // src/core/abr/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/abr/abr_manager.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_log();
  init_object_assign();
  init_take_first_set();

  // src/core/abr/bandwidth_estimator.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_config2();

  // src/core/abr/utils/ewma.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var EWMA = class {
    constructor(halfLife) {
      this._alpha = Math.exp(Math.log(0.5) / halfLife);
      this._lastEstimate = 0;
      this._totalWeight = 0;
    }
    addSample(weight, value) {
      const adjAlpha = Math.pow(this._alpha, weight);
      const newEstimate = value * (1 - adjAlpha) + adjAlpha * this._lastEstimate;
      if (!isNaN(newEstimate)) {
        this._lastEstimate = newEstimate;
        this._totalWeight += weight;
      }
    }
    getEstimate() {
      const zeroFactor = 1 - Math.pow(this._alpha, this._totalWeight);
      return this._lastEstimate / zeroFactor;
    }
  };

  // src/core/abr/bandwidth_estimator.ts
  var BandwidthEstimator = class {
    constructor() {
      const { ABR_FAST_EMA, ABR_SLOW_EMA } = config_default.getCurrent();
      this._fastEWMA = new EWMA(ABR_FAST_EMA);
      this._slowEWMA = new EWMA(ABR_SLOW_EMA);
      this._bytesSampled = 0;
    }
    addSample(durationInMs, numberOfBytes) {
      const { ABR_MINIMUM_CHUNK_SIZE } = config_default.getCurrent();
      if (numberOfBytes < ABR_MINIMUM_CHUNK_SIZE) {
        return;
      }
      const bandwidth = numberOfBytes * 8e3 / durationInMs;
      const weight = durationInMs / 1e3;
      this._bytesSampled += numberOfBytes;
      this._fastEWMA.addSample(weight, bandwidth);
      this._slowEWMA.addSample(weight, bandwidth);
    }
    getEstimate() {
      const { ABR_MINIMUM_TOTAL_BYTES } = config_default.getCurrent();
      if (this._bytesSampled < ABR_MINIMUM_TOTAL_BYTES) {
        return void 0;
      }
      return Math.min(this._fastEWMA.getEstimate(), this._slowEWMA.getEstimate());
    }
    reset() {
      const { ABR_FAST_EMA, ABR_SLOW_EMA } = config_default.getCurrent();
      this._fastEWMA = new EWMA(ABR_FAST_EMA);
      this._slowEWMA = new EWMA(ABR_SLOW_EMA);
      this._bytesSampled = 0;
    }
  };

  // src/core/abr/representation_estimator.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_log();
  init_ranges();

  // src/core/abr/buffer_based_chooser.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_log();
  init_array_find_index();

  // src/core/abr/get_buffer_levels.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function getBufferLevels(bitrates) {
    const logs = bitrates.map((b) => Math.log(b / bitrates[0]));
    const utilities = logs.map((l) => l - logs[0] + 1);
    const gp = (utilities[utilities.length - 1] - 1) / (bitrates.length * 2 + 10);
    const Vp = 1 / gp;
    return bitrates.map((_, i) => minBufferLevelForBitrate(i));
    function minBufferLevelForBitrate(index) {
      if (index === 0) {
        return 0;
      }
      const boundedIndex = Math.min(Math.max(1, index), bitrates.length - 1);
      if (bitrates[boundedIndex] === bitrates[boundedIndex - 1]) {
        return minBufferLevelForBitrate(index - 1);
      }
      return Vp * (gp + (bitrates[boundedIndex] * utilities[boundedIndex - 1] - bitrates[boundedIndex - 1] * utilities[boundedIndex]) / (bitrates[boundedIndex] - bitrates[boundedIndex - 1])) + 4;
    }
  }

  // src/core/abr/buffer_based_chooser.ts
  var BufferBasedChooser = class {
    constructor(bitrates) {
      this._levelsMap = getBufferLevels(bitrates);
      this._bitrates = bitrates;
      log_default.debug("ABR: Steps for buffer based chooser.", this._levelsMap.map((l, i) => ({ bufferLevel: l, bitrate: bitrates[i] })));
    }
    getEstimate(playbackObservation) {
      const bufferLevels = this._levelsMap;
      const bitrates = this._bitrates;
      const { bufferGap, currentBitrate, currentScore, speed } = playbackObservation;
      if (currentBitrate == null) {
        return bitrates[0];
      }
      const currentBitrateIndex = arrayFindIndex(bitrates, (b) => b === currentBitrate);
      if (currentBitrateIndex < 0 || bitrates.length !== bufferLevels.length) {
        log_default.error("ABR: Current Bitrate not found in the calculated levels");
        return bitrates[0];
      }
      let scaledScore;
      if (currentScore != null) {
        scaledScore = speed === 0 ? currentScore : currentScore / speed;
      }
      if (scaledScore != null && scaledScore > 1) {
        const currentBufferLevel = bufferLevels[currentBitrateIndex];
        const nextIndex = (() => {
          for (let i = currentBitrateIndex + 1; i < bufferLevels.length; i++) {
            if (bufferLevels[i] > currentBufferLevel) {
              return i;
            }
          }
        })();
        if (nextIndex != null) {
          const nextBufferLevel = bufferLevels[nextIndex];
          if (bufferGap >= nextBufferLevel) {
            return bitrates[nextIndex];
          }
        }
      }
      if (scaledScore == null || scaledScore < 1.15) {
        const currentBufferLevel = bufferLevels[currentBitrateIndex];
        if (bufferGap < currentBufferLevel) {
          for (let i = currentBitrateIndex - 1; i >= 0; i--) {
            if (bitrates[i] < currentBitrate) {
              return bitrates[i];
            }
          }
          return currentBitrate;
        }
      }
      return currentBitrate;
    }
  };

  // src/core/abr/guess_based_chooser.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_log();
  init_array_find_index();

  // src/core/abr/last_estimate_storage.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var LastEstimateStorage = class {
    constructor() {
      this.bandwidth = void 0;
      this.representation = null;
      this.algorithmType = ABRAlgorithmType.None;
    }
    update(representation, bandwidth, algorithmType) {
      this.representation = representation;
      this.bandwidth = bandwidth;
      this.algorithmType = algorithmType;
    }
  };
  var ABRAlgorithmType = /* @__PURE__ */ ((ABRAlgorithmType2) => {
    ABRAlgorithmType2[ABRAlgorithmType2["BufferBased"] = 0] = "BufferBased";
    ABRAlgorithmType2[ABRAlgorithmType2["BandwidthBased"] = 1] = "BandwidthBased";
    ABRAlgorithmType2[ABRAlgorithmType2["GuessBased"] = 2] = "GuessBased";
    ABRAlgorithmType2[ABRAlgorithmType2["None"] = 3] = "None";
    return ABRAlgorithmType2;
  })(ABRAlgorithmType || {});

  // src/core/abr/network_analyzer.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_config2();
  init_log();
  init_array_find();
  function getConcernedRequests(requests2, neededPosition) {
    let nextSegmentIndex = -1;
    for (let i = 0; i < requests2.length; i++) {
      const { segment } = requests2[i].content;
      if (segment.duration <= 0) {
        continue;
      }
      const segmentEnd = segment.time + segment.duration;
      if (!segment.complete) {
        if (i === requests2.length - 1 && neededPosition - segment.time > -1.2) {
          nextSegmentIndex = i;
          break;
        }
      }
      if (segmentEnd > neededPosition && neededPosition - segment.time > -1.2) {
        nextSegmentIndex = i;
        break;
      }
    }
    if (nextSegmentIndex < 0) {
      return [];
    }
    const nextRequest = requests2[nextSegmentIndex];
    const segmentTime = nextRequest.content.segment.time;
    const filteredRequests = [nextRequest];
    for (let i = nextSegmentIndex + 1; i < requests2.length; i++) {
      if (requests2[i].content.segment.time === segmentTime) {
        filteredRequests.push(requests2[i]);
      } else {
        break;
      }
    }
    return filteredRequests;
  }
  function estimateRequestBandwidth(request2) {
    if (request2.progress.length < 5) {
      return void 0;
    }
    const ewma1 = new EWMA(2);
    const { progress } = request2;
    for (let i = 1; i < progress.length; i++) {
      const bytesDownloaded = progress[i].size - progress[i - 1].size;
      const timeElapsed = progress[i].timestamp - progress[i - 1].timestamp;
      const reqBitrate = bytesDownloaded * 8 / (timeElapsed / 1e3);
      ewma1.addSample(timeElapsed / 1e3, reqBitrate);
    }
    return ewma1.getEstimate();
  }
  function estimateRemainingTime(lastProgressEvent, bandwidthEstimate) {
    const remainingData = (lastProgressEvent.totalSize - lastProgressEvent.size) * 8;
    return Math.max(remainingData / bandwidthEstimate, 0);
  }
  function estimateStarvationModeBitrate(pendingRequests, playbackInfo, currentRepresentation, lowLatencyMode, lastEstimatedBitrate) {
    if (lowLatencyMode) {
      return void 0;
    }
    const { bufferGap, speed, position } = playbackInfo;
    const realBufferGap = isFinite(bufferGap) ? bufferGap : 0;
    const nextNeededPosition = position + realBufferGap;
    const concernedRequests = getConcernedRequests(pendingRequests, nextNeededPosition);
    if (concernedRequests.length !== 1) {
      return void 0;
    }
    const concernedRequest = concernedRequests[0];
    const now = performance.now();
    const lastProgressEvent = concernedRequest.progress.length > 0 ? concernedRequest.progress[concernedRequest.progress.length - 1] : void 0;
    const bandwidthEstimate = estimateRequestBandwidth(concernedRequest);
    if (lastProgressEvent !== void 0 && bandwidthEstimate !== void 0) {
      const remainingTime = estimateRemainingTime(lastProgressEvent, bandwidthEstimate);
      if ((now - lastProgressEvent.timestamp) / 1e3 <= remainingTime) {
        const expectedRebufferingTime = remainingTime - realBufferGap / speed;
        if (expectedRebufferingTime > 2e3) {
          return bandwidthEstimate;
        }
      }
    }
    if (!concernedRequest.content.segment.complete) {
      return void 0;
    }
    const chunkDuration = concernedRequest.content.segment.duration;
    const requestElapsedTime = (now - concernedRequest.requestTimestamp) / 1e3;
    const reasonableElapsedTime = requestElapsedTime <= (chunkDuration * 1.5 + 2) / speed;
    if (currentRepresentation == null || reasonableElapsedTime) {
      return void 0;
    }
    const factor = chunkDuration / requestElapsedTime;
    const reducedBitrate = currentRepresentation.bitrate * Math.min(0.7, factor);
    if (lastEstimatedBitrate === void 0 || reducedBitrate < lastEstimatedBitrate) {
      return reducedBitrate;
    }
  }
  function shouldDirectlySwitchToLowBitrate(playbackInfo, requests2, lowLatencyMode) {
    if (lowLatencyMode) {
      return true;
    }
    const realBufferGap = isFinite(playbackInfo.bufferGap) ? playbackInfo.bufferGap : 0;
    const nextNeededPosition = playbackInfo.position + realBufferGap;
    const nextRequest = arrayFind(requests2, ({ content }) => content.segment.duration > 0 && content.segment.time + content.segment.duration > nextNeededPosition);
    if (nextRequest === void 0) {
      return true;
    }
    const now = performance.now();
    const lastProgressEvent = nextRequest.progress.length > 0 ? nextRequest.progress[nextRequest.progress.length - 1] : void 0;
    const bandwidthEstimate = estimateRequestBandwidth(nextRequest);
    if (lastProgressEvent === void 0 || bandwidthEstimate === void 0) {
      return true;
    }
    const remainingTime = estimateRemainingTime(lastProgressEvent, bandwidthEstimate);
    if ((now - lastProgressEvent.timestamp) / 1e3 > remainingTime * 1.2) {
      return true;
    }
    const expectedRebufferingTime = remainingTime - realBufferGap / playbackInfo.speed;
    return expectedRebufferingTime > -1.5;
  }
  var NetworkAnalyzer = class {
    constructor(initialBitrate, lowLatencyMode) {
      const {
        ABR_STARVATION_GAP,
        OUT_OF_STARVATION_GAP,
        ABR_STARVATION_FACTOR,
        ABR_REGULAR_FACTOR
      } = config_default.getCurrent();
      this._initialBitrate = initialBitrate;
      this._inStarvationMode = false;
      this._lowLatencyMode = lowLatencyMode;
      if (lowLatencyMode) {
        this._config = {
          starvationGap: ABR_STARVATION_GAP.LOW_LATENCY,
          outOfStarvationGap: OUT_OF_STARVATION_GAP.LOW_LATENCY,
          starvationBitrateFactor: ABR_STARVATION_FACTOR.LOW_LATENCY,
          regularBitrateFactor: ABR_REGULAR_FACTOR.LOW_LATENCY
        };
      } else {
        this._config = {
          starvationGap: ABR_STARVATION_GAP.DEFAULT,
          outOfStarvationGap: OUT_OF_STARVATION_GAP.DEFAULT,
          starvationBitrateFactor: ABR_STARVATION_FACTOR.DEFAULT,
          regularBitrateFactor: ABR_REGULAR_FACTOR.DEFAULT
        };
      }
    }
    getBandwidthEstimate(playbackInfo, bandwidthEstimator, currentRepresentation, currentRequests, lastEstimatedBitrate) {
      let newBitrateCeil;
      let bandwidthEstimate;
      const localConf = this._config;
      const { bufferGap, position, duration } = playbackInfo;
      const realBufferGap = isFinite(bufferGap) ? bufferGap : 0;
      const { ABR_STARVATION_DURATION_DELTA } = config_default.getCurrent();
      if (isNaN(duration) || realBufferGap + position < duration - ABR_STARVATION_DURATION_DELTA) {
        if (!this._inStarvationMode && realBufferGap <= localConf.starvationGap) {
          log_default.info("ABR: enter starvation mode.");
          this._inStarvationMode = true;
        } else if (this._inStarvationMode && realBufferGap >= localConf.outOfStarvationGap) {
          log_default.info("ABR: exit starvation mode.");
          this._inStarvationMode = false;
        }
      } else if (this._inStarvationMode) {
        log_default.info("ABR: exit starvation mode.");
        this._inStarvationMode = false;
      }
      if (this._inStarvationMode) {
        bandwidthEstimate = estimateStarvationModeBitrate(currentRequests, playbackInfo, currentRepresentation, this._lowLatencyMode, lastEstimatedBitrate);
        if (bandwidthEstimate != null) {
          log_default.info("ABR: starvation mode emergency estimate:", bandwidthEstimate);
          bandwidthEstimator.reset();
          newBitrateCeil = currentRepresentation == null ? bandwidthEstimate : Math.min(bandwidthEstimate, currentRepresentation.bitrate);
        }
      }
      if (newBitrateCeil == null) {
        bandwidthEstimate = bandwidthEstimator.getEstimate();
        if (bandwidthEstimate != null) {
          newBitrateCeil = bandwidthEstimate * (this._inStarvationMode ? localConf.starvationBitrateFactor : localConf.regularBitrateFactor);
        } else if (lastEstimatedBitrate != null) {
          newBitrateCeil = lastEstimatedBitrate * (this._inStarvationMode ? localConf.starvationBitrateFactor : localConf.regularBitrateFactor);
        } else {
          newBitrateCeil = this._initialBitrate;
        }
      }
      if (playbackInfo.speed > 1) {
        newBitrateCeil /= playbackInfo.speed;
      }
      return { bandwidthEstimate, bitrateChosen: newBitrateCeil };
    }
    isUrgent(bitrate, currentRepresentation, currentRequests, playbackInfo) {
      if (currentRepresentation === null) {
        return true;
      } else if (bitrate === currentRepresentation.bitrate) {
        return false;
      } else if (bitrate > currentRepresentation.bitrate) {
        return !this._inStarvationMode;
      }
      return shouldDirectlySwitchToLowBitrate(playbackInfo, currentRequests, this._lowLatencyMode);
    }
  };

  // src/core/abr/representation_score_calculator.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_log();
  var RepresentationScoreCalculator = class {
    constructor() {
      this._currentRepresentationData = null;
      this._lastRepresentationWithGoodScore = null;
    }
    addSample(representation, requestDuration, segmentDuration) {
      const ratio = segmentDuration / requestDuration;
      const currentRep = this._currentRepresentationData;
      let currentEWMA;
      if (currentRep !== null && currentRep.representation.id === representation.id) {
        currentEWMA = currentRep.ewma;
        currentRep.ewma.addSample(requestDuration, ratio);
        currentRep.loadedDuration += segmentDuration;
        currentRep.loadedSegments++;
      } else {
        currentEWMA = new EWMA(5);
        currentEWMA.addSample(requestDuration, ratio);
        this._currentRepresentationData = {
          representation,
          ewma: currentEWMA,
          loadedDuration: segmentDuration,
          loadedSegments: 0
        };
      }
      if (currentEWMA.getEstimate() > 1 && this._lastRepresentationWithGoodScore !== representation) {
        log_default.debug("ABR: New last stable representation", representation.bitrate);
        this._lastRepresentationWithGoodScore = representation;
      }
    }
    getEstimate(representation) {
      if (this._currentRepresentationData === null || this._currentRepresentationData.representation.id !== representation.id) {
        return void 0;
      }
      const { ewma, loadedSegments, loadedDuration } = this._currentRepresentationData;
      const estimate = ewma.getEstimate();
      const confidenceLevel = loadedSegments >= 5 && loadedDuration >= 10 ? ScoreConfidenceLevel.HIGH : ScoreConfidenceLevel.LOW;
      return [estimate, confidenceLevel];
    }
    getLastStableRepresentation() {
      return this._lastRepresentationWithGoodScore;
    }
  };
  var ScoreConfidenceLevel = /* @__PURE__ */ ((ScoreConfidenceLevel2) => {
    ScoreConfidenceLevel2[ScoreConfidenceLevel2["HIGH"] = 1] = "HIGH";
    ScoreConfidenceLevel2[ScoreConfidenceLevel2["LOW"] = 0] = "LOW";
    return ScoreConfidenceLevel2;
  })(ScoreConfidenceLevel || {});

  // src/core/abr/guess_based_chooser.ts
  var GuessBasedChooser = class {
    constructor(scoreCalculator, prevEstimate) {
      this._scoreCalculator = scoreCalculator;
      this._lastAbrEstimate = prevEstimate;
      this._consecutiveWrongGuesses = 0;
      this._blockGuessesUntil = 0;
      this._lastMaintanableBitrate = null;
    }
    getGuess(representations, observation, currentRepresentation, incomingBestBitrate, requests2) {
      const { bufferGap, speed } = observation;
      const lastChosenRep = this._lastAbrEstimate.representation;
      if (lastChosenRep === null) {
        return null;
      }
      if (incomingBestBitrate > lastChosenRep.bitrate) {
        if (this._lastAbrEstimate.algorithmType === 2 /* GuessBased */) {
          if (this._lastAbrEstimate.representation !== null) {
            this._lastMaintanableBitrate = this._lastAbrEstimate.representation.bitrate;
          }
          this._consecutiveWrongGuesses = 0;
        }
        return null;
      }
      const scoreData = this._scoreCalculator.getEstimate(currentRepresentation);
      if (this._lastAbrEstimate.algorithmType !== 2 /* GuessBased */) {
        if (scoreData === void 0) {
          return null;
        }
        if (this._canGuessHigher(bufferGap, speed, scoreData)) {
          const nextRepresentation = getNextRepresentation(representations, currentRepresentation);
          if (nextRepresentation !== null) {
            return nextRepresentation;
          }
        }
        return null;
      }
      if (this._isLastGuessValidated(lastChosenRep, incomingBestBitrate, scoreData)) {
        log_default.debug("ABR: Guessed Representation validated", lastChosenRep.bitrate);
        this._lastMaintanableBitrate = lastChosenRep.bitrate;
        this._consecutiveWrongGuesses = 0;
      }
      if (currentRepresentation.id !== lastChosenRep.id) {
        return lastChosenRep;
      }
      const shouldStopGuess = this._shouldStopGuess(currentRepresentation, scoreData, bufferGap, requests2);
      if (shouldStopGuess) {
        this._consecutiveWrongGuesses++;
        this._blockGuessesUntil = performance.now() + Math.min(this._consecutiveWrongGuesses * 15e3, 12e4);
        return getPreviousRepresentation(representations, currentRepresentation);
      } else if (scoreData === void 0) {
        return currentRepresentation;
      }
      if (this._canGuessHigher(bufferGap, speed, scoreData)) {
        const nextRepresentation = getNextRepresentation(representations, currentRepresentation);
        if (nextRepresentation !== null) {
          return nextRepresentation;
        }
      }
      return currentRepresentation;
    }
    _canGuessHigher(bufferGap, speed, [score, scoreConfidenceLevel]) {
      return isFinite(bufferGap) && bufferGap >= 2.5 && performance.now() > this._blockGuessesUntil && scoreConfidenceLevel === 1 /* HIGH */ && score / speed > 1.01;
    }
    _shouldStopGuess(lastGuess, scoreData, bufferGap, requests2) {
      if (scoreData !== void 0 && scoreData[0] < 1.01) {
        return true;
      } else if ((scoreData === void 0 || scoreData[0] < 1.2) && bufferGap < 0.6) {
        return true;
      }
      const guessedRepresentationRequests = requests2.filter((req) => {
        return req.content.representation.id === lastGuess.id;
      });
      const now = performance.now();
      for (const req of guessedRepresentationRequests) {
        const requestElapsedTime = now - req.requestTimestamp;
        if (req.content.segment.isInit) {
          if (requestElapsedTime > 1e3) {
            return true;
          }
        } else if (requestElapsedTime > req.content.segment.duration * 1e3 + 200) {
          return true;
        } else {
          const fastBw = estimateRequestBandwidth(req);
          if (fastBw !== void 0 && fastBw < lastGuess.bitrate * 0.8) {
            return true;
          }
        }
      }
      return false;
    }
    _isLastGuessValidated(lastGuess, incomingBestBitrate, scoreData) {
      if (scoreData !== void 0 && scoreData[1] === 1 /* HIGH */ && scoreData[0] > 1.5) {
        return true;
      }
      return incomingBestBitrate >= lastGuess.bitrate && (this._lastMaintanableBitrate === null || this._lastMaintanableBitrate < lastGuess.bitrate);
    }
  };
  function getNextRepresentation(representations, currentRepresentation) {
    const len = representations.length;
    let index = arrayFindIndex(representations, ({ id }) => id === currentRepresentation.id);
    if (index < 0) {
      log_default.error("ABR: Current Representation not found.");
      return null;
    }
    while (++index < len) {
      if (representations[index].bitrate > currentRepresentation.bitrate) {
        return representations[index];
      }
    }
    return null;
  }
  function getPreviousRepresentation(representations, currentRepresentation) {
    let index = arrayFindIndex(representations, ({ id }) => id === currentRepresentation.id);
    if (index < 0) {
      log_default.error("ABR: Current Representation not found.");
      return null;
    }
    while (--index >= 0) {
      if (representations[index].bitrate < currentRepresentation.bitrate) {
        return representations[index];
      }
    }
    return null;
  }

  // src/core/abr/pending_requests_store.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_log();
  init_object_values();
  var PendingRequestsStore = class {
    constructor() {
      this._currentRequests = {};
    }
    add(payload) {
      const { id, requestTimestamp, content } = payload;
      this._currentRequests[id] = {
        requestTimestamp,
        progress: [],
        content
      };
    }
    addProgress(progress) {
      const request2 = this._currentRequests[progress.id];
      if (request2 == null) {
        if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
          throw new Error("ABR: progress for a request not added");
        }
        log_default.warn("ABR: progress for a request not added");
        return;
      }
      request2.progress.push(progress);
    }
    remove(id) {
      if (this._currentRequests[id] == null) {
        if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
          throw new Error("ABR: can't remove unknown request");
        }
        log_default.warn("ABR: can't remove unknown request");
      }
      delete this._currentRequests[id];
    }
    getRequests() {
      return object_values_default(this._currentRequests).filter((x) => x != null).sort((reqA, reqB) => reqA.content.segment.time - reqB.content.segment.time);
    }
  };

  // src/core/abr/utils/filter_by_bitrate.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_array_find_index();
  function filterByBitrate(representations, bitrate) {
    if (representations.length === 0) {
      return [];
    }
    representations.sort((ra, rb) => ra.bitrate - rb.bitrate);
    const minimumBitrate = representations[0].bitrate;
    const bitrateCeil = Math.max(bitrate, minimumBitrate);
    const firstSuperiorBitrateIndex = arrayFindIndex(representations, (representation) => representation.bitrate > bitrateCeil);
    if (firstSuperiorBitrateIndex === -1) {
      return representations;
    }
    return representations.slice(0, firstSuperiorBitrateIndex);
  }

  // src/core/abr/utils/filter_by_width.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_array_find();
  init_take_first_set();
  function filterByWidth(representations, width) {
    const sortedRepsByWidth = representations.slice().sort((a, b) => takeFirstSet(a.width, 0) - takeFirstSet(b.width, 0));
    const repWithMaxWidth = arrayFind(sortedRepsByWidth, (representation) => typeof representation.width === "number" && representation.width >= width);
    if (repWithMaxWidth === void 0) {
      return representations;
    }
    const maxWidth = typeof repWithMaxWidth.width === "number" ? repWithMaxWidth.width : 0;
    return representations.filter((representation) => typeof representation.width === "number" ? representation.width <= maxWidth : true);
  }

  // src/core/abr/utils/select_optimal_representation.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_array_find_index();
  function selectOptimalRepresentation(representations, optimalBitrate, minBitrate, maxBitrate) {
    const wantedBitrate = optimalBitrate <= minBitrate ? minBitrate : optimalBitrate >= maxBitrate ? maxBitrate : optimalBitrate;
    const firstIndexTooHigh = arrayFindIndex(representations, (representation) => representation.bitrate > wantedBitrate);
    if (firstIndexTooHigh === -1) {
      return representations[representations.length - 1];
    } else if (firstIndexTooHigh === 0) {
      return representations[0];
    }
    return representations[firstIndexTooHigh - 1];
  }

  // src/core/abr/representation_estimator.ts
  function getFilteredRepresentations(representations, filters) {
    let filteredReps = representations;
    if (filters.bitrate != null) {
      filteredReps = filterByBitrate(filteredReps, filters.bitrate);
    }
    if (filters.width != null) {
      filteredReps = filterByWidth(filteredReps, filters.width);
    }
    return filteredReps;
  }
  function RepresentationEstimator({
    bandwidthEstimator,
    context: context2,
    observation$,
    filters$,
    initialBitrate,
    lowLatencyMode,
    manualBitrate$,
    minAutoBitrate$,
    maxAutoBitrate$,
    representations,
    streamEvents$
  }) {
    const scoreCalculator = new RepresentationScoreCalculator();
    const networkAnalyzer = new NetworkAnalyzer(initialBitrate == null ? 0 : initialBitrate, lowLatencyMode);
    const requestsStore = new PendingRequestsStore();
    function onMetric(value) {
      const { requestDuration, segmentDuration, size, content } = value;
      bandwidthEstimator.addSample(requestDuration, size);
      if (!content.segment.isInit) {
        const { segment, representation } = content;
        if (segmentDuration === void 0 && !segment.complete) {
          return;
        }
        const segDur = segmentDuration != null ? segmentDuration : segment.duration;
        scoreCalculator.addSample(representation, requestDuration / 1e3, segDur);
      }
    }
    const metrics$ = streamEvents$.pipe(filter((e) => e.type === "metrics"), tap(({ value }) => onMetric(value)), ignoreElements());
    const requests$ = streamEvents$.pipe(tap((evt) => {
      switch (evt.type) {
        case "requestBegin":
          requestsStore.add(evt.value);
          break;
        case "requestEnd":
          requestsStore.remove(evt.value.id);
          break;
        case "progress":
          requestsStore.addProgress(evt.value);
          break;
      }
    }), ignoreElements());
    const currentRepresentation$ = streamEvents$.pipe(filter((e) => e.type === "representationChange"), map((e) => e.value.representation), startWith(null));
    const estimate$ = defer(() => {
      if (representations.length === 0) {
        throw new Error("ABRManager: no representation choice given");
      }
      if (representations.length === 1) {
        return of({
          bitrate: void 0,
          representation: representations[0],
          manual: false,
          urgent: true,
          knownStableBitrate: void 0
        });
      }
      return manualBitrate$.pipe(switchMap((manualBitrate) => {
        if (manualBitrate >= 0) {
          const manualRepresentation = selectOptimalRepresentation(representations, manualBitrate, 0, Infinity);
          return of({
            representation: manualRepresentation,
            bitrate: void 0,
            knownStableBitrate: void 0,
            manual: true,
            urgent: true
          });
        }
        const prevEstimate = new LastEstimateStorage();
        let allowBufferBasedEstimates = false;
        const guessBasedChooser = new GuessBasedChooser(scoreCalculator, prevEstimate);
        const bufferBasedobservation$ = streamEvents$.pipe(filter((e) => e.type === "added-segment"), withLatestFrom(observation$), map(([{ value: evtValue }, { speed, position }]) => {
          const timeRanges = evtValue.buffered;
          const bufferGap = getLeftSizeOfRange(timeRanges, position);
          const { representation } = evtValue.content;
          const scoreData = scoreCalculator.getEstimate(representation);
          const currentScore = scoreData == null ? void 0 : scoreData[0];
          const currentBitrate = representation.bitrate;
          return { bufferGap, currentBitrate, currentScore, speed };
        }));
        const bitrates = representations.map((r) => r.bitrate);
        const bufferBasedChooser = new BufferBasedChooser(bitrates);
        const bufferBasedEstimation$ = bufferBasedobservation$.pipe(map((bbo) => bufferBasedChooser.getEstimate(bbo)), startWith(void 0));
        return combineLatest([
          observation$,
          minAutoBitrate$,
          maxAutoBitrate$,
          filters$,
          bufferBasedEstimation$
        ]).pipe(withLatestFrom(currentRepresentation$), map(([
          [
            observation,
            minAutoBitrate,
            maxAutoBitrate,
            filters,
            bufferBasedBitrate
          ],
          currentRepresentation
        ]) => {
          const { bufferGap, position, maximumPosition } = observation;
          const filteredReps = getFilteredRepresentations(representations, filters);
          const requests2 = requestsStore.getRequests();
          const { bandwidthEstimate, bitrateChosen } = networkAnalyzer.getBandwidthEstimate(observation, bandwidthEstimator, currentRepresentation, requests2, prevEstimate.bandwidth);
          const stableRepresentation = scoreCalculator.getLastStableRepresentation();
          const knownStableBitrate = stableRepresentation === null ? void 0 : stableRepresentation.bitrate / (observation.speed > 0 ? observation.speed : 1);
          if (allowBufferBasedEstimates && bufferGap <= 5) {
            allowBufferBasedEstimates = false;
          } else if (!allowBufferBasedEstimates && isFinite(bufferGap) && bufferGap > 10) {
            allowBufferBasedEstimates = true;
          }
          const chosenRepFromBandwidth = selectOptimalRepresentation(filteredReps, bitrateChosen, minAutoBitrate, maxAutoBitrate);
          let currentBestBitrate = chosenRepFromBandwidth.bitrate;
          let chosenRepFromBufferSize = null;
          if (allowBufferBasedEstimates && bufferBasedBitrate !== void 0 && bufferBasedBitrate > currentBestBitrate) {
            chosenRepFromBufferSize = selectOptimalRepresentation(filteredReps, bufferBasedBitrate, minAutoBitrate, maxAutoBitrate);
            currentBestBitrate = chosenRepFromBufferSize.bitrate;
          }
          let chosenRepFromGuessMode = null;
          if (lowLatencyMode && currentRepresentation !== null && context2.manifest.isDynamic && maximumPosition - position < 40) {
            chosenRepFromGuessMode = guessBasedChooser.getGuess(representations, observation, currentRepresentation, currentBestBitrate, requests2);
          }
          if (chosenRepFromGuessMode !== null && chosenRepFromGuessMode.bitrate > currentBestBitrate) {
            log_default.debug("ABR: Choosing representation with guess-based estimation.", chosenRepFromGuessMode.bitrate, chosenRepFromGuessMode.id);
            prevEstimate.update(chosenRepFromGuessMode, bandwidthEstimate, 2 /* GuessBased */);
            return {
              bitrate: bandwidthEstimate,
              representation: chosenRepFromGuessMode,
              urgent: currentRepresentation === null || chosenRepFromGuessMode.bitrate < currentRepresentation.bitrate,
              manual: false,
              knownStableBitrate
            };
          } else if (chosenRepFromBufferSize !== null) {
            log_default.debug("ABR: Choosing representation with buffer-based estimation.", chosenRepFromBufferSize.bitrate, chosenRepFromBufferSize.id);
            prevEstimate.update(chosenRepFromBufferSize, bandwidthEstimate, 0 /* BufferBased */);
            return {
              bitrate: bandwidthEstimate,
              representation: chosenRepFromBufferSize,
              urgent: networkAnalyzer.isUrgent(chosenRepFromBufferSize.bitrate, currentRepresentation, requests2, observation),
              manual: false,
              knownStableBitrate
            };
          } else {
            log_default.debug("ABR: Choosing representation with bandwidth estimation.", chosenRepFromBandwidth.bitrate, chosenRepFromBandwidth.id);
            prevEstimate.update(chosenRepFromBandwidth, bandwidthEstimate, 1 /* BandwidthBased */);
            return {
              bitrate: bandwidthEstimate,
              representation: chosenRepFromBandwidth,
              urgent: networkAnalyzer.isUrgent(chosenRepFromBandwidth.bitrate, currentRepresentation, requests2, observation),
              manual: false,
              knownStableBitrate
            };
          }
        }));
      }));
    });
    return merge(metrics$, requests$, estimate$);
  }

  // src/core/abr/abr_manager.ts
  var ABRManager = class {
    constructor(options) {
      this._manualBitrates = options.manualBitrates;
      this._minAutoBitrates = options.minAutoBitrates;
      this._maxAutoBitrates = options.maxAutoBitrates;
      this._initialBitrates = options.initialBitrates;
      this._throttlers = options.throttlers;
      this._bandwidthEstimators = {};
      this._lowLatencyMode = options.lowLatencyMode;
    }
    get$(context2, representations, observation$, streamEvents$) {
      var _a2, _b2, _c;
      const { type } = context2.adaptation;
      const bandwidthEstimator = this._getBandwidthEstimator(type);
      const manualBitrate$ = takeFirstSet((_a2 = this._manualBitrates[type]) == null ? void 0 : _a2.asObservable(), of(-1));
      const minAutoBitrate$ = takeFirstSet((_b2 = this._minAutoBitrates[type]) == null ? void 0 : _b2.asObservable(), of(0));
      const maxAutoBitrate$ = takeFirstSet((_c = this._maxAutoBitrates[type]) == null ? void 0 : _c.asObservable(), of(Infinity));
      const initialBitrate = takeFirstSet(this._initialBitrates[type], 0);
      const filters$ = createFilters(this._throttlers.limitWidth[type], this._throttlers.throttleBitrate[type], this._throttlers.throttle[type]);
      return RepresentationEstimator({
        bandwidthEstimator,
        context: context2,
        streamEvents$,
        observation$,
        filters$,
        initialBitrate,
        manualBitrate$,
        minAutoBitrate$,
        maxAutoBitrate$,
        representations,
        lowLatencyMode: this._lowLatencyMode
      });
    }
    _getBandwidthEstimator(bufferType) {
      const originalBandwidthEstimator = this._bandwidthEstimators[bufferType];
      if (originalBandwidthEstimator == null) {
        log_default.debug("ABR: Creating new BandwidthEstimator for ", bufferType);
        const bandwidthEstimator = new BandwidthEstimator();
        this._bandwidthEstimators[bufferType] = bandwidthEstimator;
        return bandwidthEstimator;
      }
      return originalBandwidthEstimator;
    }
  };
  function createFilters(limitWidth$, throttleBitrate$, throttle$) {
    const deviceEventsArray = [];
    if (limitWidth$ != null) {
      deviceEventsArray.push(limitWidth$.pipe(map((width) => ({ width }))));
    }
    if (throttle$ != null) {
      deviceEventsArray.push(throttle$.pipe(map((bitrate) => ({ bitrate }))));
    }
    if (throttleBitrate$ != null) {
      deviceEventsArray.push(throttleBitrate$.pipe(map((bitrate) => ({ bitrate }))));
    }
    return deviceEventsArray.length > 0 ? combineLatest(deviceEventsArray).pipe(map((args) => object_assign_default({}, ...args))) : of({});
  }

  // src/core/abr/index.ts
  var abr_default = ABRManager;

  // src/core/init/initialize_media_source.ts
  init_decrypt();

  // src/core/init/create_media_source.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_compat();
  init_errors();
  init_log();
  init_is_non_empty_string();
  var { onSourceOpen$: onSourceOpen$2 } = event_listeners_exports;
  function resetMediaSource(mediaElement, mediaSource, mediaSourceURL) {
    if (mediaSource !== null && mediaSource.readyState !== "closed") {
      const { readyState, sourceBuffers } = mediaSource;
      for (let i = sourceBuffers.length - 1; i >= 0; i--) {
        const sourceBuffer = sourceBuffers[i];
        try {
          if (readyState === "open") {
            log_default.info("Init: Removing SourceBuffer from mediaSource");
            sourceBuffer.abort();
          }
          mediaSource.removeSourceBuffer(sourceBuffer);
        } catch (e) {
          log_default.warn("Init: Error while disposing SourceBuffer", e);
        }
      }
      if (sourceBuffers.length > 0) {
        log_default.warn("Init: Not all SourceBuffers could have been removed.");
      }
    }
    clearElementSrc(mediaElement);
    if (mediaSourceURL !== null) {
      try {
        log_default.debug("Init: Revoking previous URL");
        URL.revokeObjectURL(mediaSourceURL);
      } catch (e) {
        log_default.warn("Init: Error while revoking the media source URL", e);
      }
    }
  }
  function createMediaSource(mediaElement) {
    return new Observable((observer) => {
      if (MediaSource_ == null) {
        throw new MediaError("MEDIA_SOURCE_NOT_SUPPORTED", "No MediaSource Object was found in the current browser.");
      }
      const oldSrc = isNonEmptyString(mediaElement.src) ? mediaElement.src : null;
      resetMediaSource(mediaElement, null, oldSrc);
      log_default.info("Init: Creating MediaSource");
      const mediaSource = new MediaSource_();
      const objectURL = URL.createObjectURL(mediaSource);
      log_default.info("Init: Attaching MediaSource URL to the media element", objectURL);
      mediaElement.src = objectURL;
      observer.next(mediaSource);
      return () => {
        resetMediaSource(mediaElement, mediaSource, objectURL);
      };
    });
  }
  function openMediaSource(mediaElement) {
    return createMediaSource(mediaElement).pipe(mergeMap((mediaSource) => {
      return onSourceOpen$2(mediaSource).pipe(take(1), map(() => mediaSource));
    }));
  }

  // src/core/init/initialize_media_source.ts
  init_events_generators();

  // src/core/init/get_initial_time.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_config2();
  init_log();
  init_is_null_or_undefined();
  function getInitialTime(manifest, lowLatencyMode, startAt) {
    if (!isNullOrUndefined(startAt)) {
      const min = manifest.getMinimumSafePosition();
      let max;
      if (manifest.isLive) {
        max = manifest.getLivePosition();
      }
      if (max === void 0) {
        max = manifest.getMaximumSafePosition();
      }
      if (!isNullOrUndefined(startAt.position)) {
        log_default.debug("Init: using startAt.minimumPosition");
        return Math.max(Math.min(startAt.position, max), min);
      } else if (!isNullOrUndefined(startAt.wallClockTime)) {
        log_default.debug("Init: using startAt.wallClockTime");
        const ast = manifest.availabilityStartTime === void 0 ? 0 : manifest.availabilityStartTime;
        const position = startAt.wallClockTime - ast;
        return Math.max(Math.min(position, max), min);
      } else if (!isNullOrUndefined(startAt.fromFirstPosition)) {
        log_default.debug("Init: using startAt.fromFirstPosition");
        const { fromFirstPosition } = startAt;
        return fromFirstPosition <= 0 ? min : Math.min(max, min + fromFirstPosition);
      } else if (!isNullOrUndefined(startAt.fromLastPosition)) {
        log_default.debug("Init: using startAt.fromLastPosition");
        const { fromLastPosition } = startAt;
        return fromLastPosition >= 0 ? max : Math.max(min, max + fromLastPosition);
      } else if (!isNullOrUndefined(startAt.percentage)) {
        log_default.debug("Init: using startAt.percentage");
        const { percentage } = startAt;
        if (percentage > 100) {
          return max;
        } else if (percentage < 0) {
          return min;
        }
        const ratio = +percentage / 100;
        const extent = max - min;
        return min + extent * ratio;
      }
    }
    const minimumPosition = manifest.getMinimumSafePosition();
    if (manifest.isLive) {
      const {
        suggestedPresentationDelay,
        clockOffset
      } = manifest;
      const maximumPosition = manifest.getMaximumSafePosition();
      let liveTime;
      const { DEFAULT_LIVE_GAP } = config_default.getCurrent();
      if (clockOffset === void 0) {
        log_default.info("Init: no clock offset found for a live content, starting close to maximum available position");
        liveTime = maximumPosition;
      } else {
        log_default.info("Init: clock offset found for a live content, checking if we can start close to it");
        const ast = manifest.availabilityStartTime === void 0 ? 0 : manifest.availabilityStartTime;
        const clockRelativeLiveTime = (performance.now() + clockOffset) / 1e3 - ast;
        liveTime = Math.min(maximumPosition, clockRelativeLiveTime);
      }
      const diffFromLiveTime = suggestedPresentationDelay !== void 0 ? suggestedPresentationDelay : lowLatencyMode ? DEFAULT_LIVE_GAP.LOW_LATENCY : DEFAULT_LIVE_GAP.DEFAULT;
      log_default.debug(`Init: ${liveTime} defined as the live time, applying a live gap of ${diffFromLiveTime}`);
      return Math.max(liveTime - diffFromLiveTime, minimumPosition);
    }
    log_default.info("Init: starting at the minimum available position:", minimumPosition);
    return minimumPosition;
  }

  // src/core/init/initialize_media_source.ts
  init_link_drm_and_content();

  // src/core/init/load_on_media_source.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_errors();
  init_log();
  init_segment_buffers();
  init_stream();

  // src/core/init/content_time_boundaries_observer.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_errors();
  init_event_emitter();
  init_filter_map();
  init_reference();
  init_events_generators();
  function ContentTimeBoundariesObserver(manifest, streams, playbackObserver) {
    const maximumPositionCalculator = new MaximumPositionCalculator(manifest);
    const outOfManifest$ = playbackObserver.observe(true).pipe(filterMap(({ position, wantedTimeOffset }) => {
      const offsetedPosition = wantedTimeOffset + position;
      if (offsetedPosition < manifest.getMinimumSafePosition()) {
        const warning2 = new MediaError("MEDIA_TIME_BEFORE_MANIFEST", "The current position is behind the earliest time announced in the Manifest.");
        return events_generators_default.warning(warning2);
      } else if (offsetedPosition > maximumPositionCalculator.getCurrentMaximumPosition()) {
        const warning2 = new MediaError("MEDIA_TIME_AFTER_MANIFEST", "The current position is after the latest time announced in the Manifest.");
        return events_generators_default.warning(warning2);
      }
      return null;
    }, null));
    const contentDuration = reference_default(void 0);
    const updateDurationOnManifestUpdate$ = fromEvent2(manifest, "manifestUpdate").pipe(startWith(null), tap(() => {
      if (!manifest.isDynamic) {
        const maxPos = maximumPositionCalculator.getCurrentMaximumPosition();
        contentDuration.setValue(maxPos);
      } else {
        contentDuration.setValue(void 0);
      }
    }), ignoreElements());
    const updateDurationAndTimeBoundsOnTrackChange$ = streams.pipe(tap((message) => {
      if (message.type === "adaptationChange") {
        const lastPeriod = manifest.periods[manifest.periods.length - 1];
        if (message.value.period.id === (lastPeriod == null ? void 0 : lastPeriod.id)) {
          if (message.value.type === "audio") {
            maximumPositionCalculator.updateLastAudioAdaptation(message.value.adaptation);
            if (!manifest.isDynamic) {
              contentDuration.setValue(maximumPositionCalculator.getCurrentMaximumPosition());
            }
          } else if (message.value.type === "video") {
            maximumPositionCalculator.updateLastVideoAdaptation(message.value.adaptation);
            if (!manifest.isDynamic) {
              contentDuration.setValue(maximumPositionCalculator.getCurrentMaximumPosition());
            }
          }
        }
      }
    }), ignoreElements());
    return merge(updateDurationOnManifestUpdate$, updateDurationAndTimeBoundsOnTrackChange$, outOfManifest$, contentDuration.asObservable().pipe(skipWhile((val) => val === void 0), distinctUntilChanged(), map((value) => ({ type: "contentDurationUpdate", value }))));
  }
  var MaximumPositionCalculator = class {
    constructor(manifest) {
      this._manifest = manifest;
      this._lastAudioAdaptation = void 0;
      this._lastVideoAdaptation = void 0;
    }
    updateLastAudioAdaptation(adaptation) {
      this._lastAudioAdaptation = adaptation;
    }
    updateLastVideoAdaptation(adaptation) {
      this._lastVideoAdaptation = adaptation;
    }
    getCurrentMaximumPosition() {
      var _a2;
      if (this._manifest.isDynamic) {
        return (_a2 = this._manifest.getLivePosition()) != null ? _a2 : this._manifest.getMaximumSafePosition();
      }
      if (this._lastVideoAdaptation === void 0 || this._lastAudioAdaptation === void 0) {
        return this._manifest.getMaximumSafePosition();
      } else if (this._lastAudioAdaptation === null) {
        if (this._lastVideoAdaptation === null) {
          return this._manifest.getMaximumSafePosition();
        } else {
          const lastVideoPosition = getLastPositionFromAdaptation(this._lastVideoAdaptation);
          if (typeof lastVideoPosition !== "number") {
            return this._manifest.getMaximumSafePosition();
          }
          return lastVideoPosition;
        }
      } else if (this._lastVideoAdaptation === null) {
        const lastAudioPosition = getLastPositionFromAdaptation(this._lastAudioAdaptation);
        if (typeof lastAudioPosition !== "number") {
          return this._manifest.getMaximumSafePosition();
        }
        return lastAudioPosition;
      } else {
        const lastAudioPosition = getLastPositionFromAdaptation(this._lastAudioAdaptation);
        const lastVideoPosition = getLastPositionFromAdaptation(this._lastVideoAdaptation);
        if (typeof lastAudioPosition !== "number" || typeof lastVideoPosition !== "number") {
          return this._manifest.getMaximumSafePosition();
        } else {
          return Math.min(lastAudioPosition, lastVideoPosition);
        }
      }
    }
  };
  function getLastPositionFromAdaptation(adaptation) {
    const { representations } = adaptation;
    let min = null;
    let lastIndex;
    for (let i = 0; i < representations.length; i++) {
      if (representations[i].index !== lastIndex) {
        lastIndex = representations[i].index;
        const lastPosition = representations[i].index.getLastPosition();
        if (lastPosition === void 0) {
          return void 0;
        }
        if (lastPosition !== null) {
          min = min == null ? lastPosition : Math.min(min, lastPosition);
        }
      }
    }
    if (min === null) {
      return null;
    }
    return min;
  }

  // src/core/init/create_stream_playback_observer.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  function createStreamPlaybackObserver(manifest, playbackObserver, {
    autoPlay: autoPlay2,
    initialPlayPerformed,
    initialSeekPerformed,
    speed,
    startTime
  }) {
    return playbackObserver.deriveReadOnlyObserver(function mapObservable(observation$) {
      return combineLatest([observation$, speed.asObservable()]).pipe(map(([observation, lastSpeed]) => {
        let wantedTimeOffset = 0;
        if (!initialSeekPerformed.getValue()) {
          wantedTimeOffset = startTime - observation.position;
        } else if (!manifest.isDynamic || manifest.isLastPeriodKnown) {
          const lastPeriod = manifest.periods[manifest.periods.length - 1];
          if (lastPeriod !== void 0 && lastPeriod.end !== void 0 && observation.position > lastPeriod.end) {
            wantedTimeOffset = lastPeriod.end - observation.position - 1;
          }
        }
        return {
          maximumPosition: manifest.getMaximumSafePosition(),
          position: observation.position,
          duration: observation.duration,
          isPaused: initialPlayPerformed.getValue() ? observation.paused : !autoPlay2,
          readyState: observation.readyState,
          speed: lastSpeed,
          wantedTimeOffset
        };
      }));
    });
  }

  // src/core/init/load_on_media_source.ts
  init_emit_loaded_event();

  // src/core/init/end_of_stream.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_compat();
  init_log();
  var {
    onRemoveSourceBuffers$: onRemoveSourceBuffers$2,
    onSourceOpen$: onSourceOpen$3,
    onUpdate$: onUpdate$2
  } = event_listeners_exports;
  function getUpdatingSourceBuffers(sourceBuffers) {
    const updatingSourceBuffers = [];
    for (let i = 0; i < sourceBuffers.length; i++) {
      const SourceBuffer = sourceBuffers[i];
      if (SourceBuffer.updating) {
        updatingSourceBuffers.push(SourceBuffer);
      }
    }
    return updatingSourceBuffers;
  }
  function triggerEndOfStream(mediaSource) {
    return defer(() => {
      log_default.debug("Init: Trying to call endOfStream");
      if (mediaSource.readyState !== "open") {
        log_default.debug("Init: MediaSource not open, cancel endOfStream");
        return of(null);
      }
      const { sourceBuffers } = mediaSource;
      const updatingSourceBuffers = getUpdatingSourceBuffers(sourceBuffers);
      if (updatingSourceBuffers.length === 0) {
        log_default.info("Init: Triggering end of stream");
        mediaSource.endOfStream();
        return of(null);
      }
      log_default.debug("Init: Waiting SourceBuffers to be updated before calling endOfStream.");
      const updatedSourceBuffers$ = updatingSourceBuffers.map((sourceBuffer) => onUpdate$2(sourceBuffer).pipe(take(1)));
      return race(merge(...updatedSourceBuffers$).pipe(takeLast(1)), onRemoveSourceBuffers$2(sourceBuffers).pipe(take(1))).pipe(mergeMap(() => {
        return triggerEndOfStream(mediaSource);
      }));
    });
  }
  function maintainEndOfStream(mediaSource) {
    return onSourceOpen$3(mediaSource).pipe(startWith(null), switchMap(() => triggerEndOfStream(mediaSource)));
  }

  // src/core/init/load_on_media_source.ts
  init_initial_seek_and_play();

  // src/core/init/media_duration_updater.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_event_listeners();
  init_log();
  init_event_emitter();
  init_reference();
  var YEAR_IN_SECONDS = 365 * 24 * 3600;
  var MediaDurationUpdater = class {
    constructor(manifest, mediaSource) {
      this._lastKnownDuration = reference_default(void 0);
      this._subscription = isMediaSourceOpened$(mediaSource).pipe(switchMap((canUpdate) => canUpdate ? combineLatest([
        this._lastKnownDuration.asObservable(),
        fromEvent2(manifest, "manifestUpdate").pipe(startWith(null))
      ]) : EMPTY), switchMap(([lastKnownDuration]) => areSourceBuffersUpdating$(mediaSource.sourceBuffers).pipe(switchMap((areSBUpdating) => {
        return areSBUpdating ? EMPTY : recursivelyTryUpdatingDuration();
        function recursivelyTryUpdatingDuration() {
          const res = setMediaSourceDuration(mediaSource, manifest, lastKnownDuration);
          if (res === MediaSourceDurationUpdateStatus.Success) {
            return EMPTY;
          }
          return timer(2e3).pipe(mergeMap(() => recursivelyTryUpdatingDuration()));
        }
      })))).subscribe();
    }
    updateKnownDuration(newDuration) {
      this._lastKnownDuration.setValue(newDuration);
    }
    stop() {
      this._subscription.unsubscribe();
    }
  };
  function setMediaSourceDuration(mediaSource, manifest, knownDuration) {
    var _a2;
    let newDuration = knownDuration;
    if (newDuration === void 0) {
      if (manifest.isDynamic) {
        const maxPotentialPos = (_a2 = manifest.getLivePosition()) != null ? _a2 : manifest.getMaximumSafePosition();
        newDuration = Math.max(Math.pow(2, 32), maxPotentialPos + YEAR_IN_SECONDS);
      } else {
        newDuration = manifest.getMaximumSafePosition();
      }
    }
    let maxBufferedEnd = 0;
    for (let i = 0; i < mediaSource.sourceBuffers.length; i++) {
      const sourceBuffer = mediaSource.sourceBuffers[i];
      const sbBufferedLen = sourceBuffer.buffered.length;
      if (sbBufferedLen > 0) {
        maxBufferedEnd = Math.max(sourceBuffer.buffered.end(sbBufferedLen - 1));
      }
    }
    if (newDuration === mediaSource.duration) {
      return MediaSourceDurationUpdateStatus.Success;
    } else if (maxBufferedEnd > newDuration) {
      if (maxBufferedEnd < mediaSource.duration) {
        try {
          log_default.info("Init: Updating duration to what is currently buffered", maxBufferedEnd);
          mediaSource.duration = newDuration;
        } catch (err) {
          log_default.warn("Duration Updater: Can't update duration on the MediaSource.", err);
          return MediaSourceDurationUpdateStatus.Failed;
        }
      }
      return MediaSourceDurationUpdateStatus.Partial;
    } else {
      const oldDuration = mediaSource.duration;
      try {
        log_default.info("Init: Updating duration", newDuration);
        mediaSource.duration = newDuration;
      } catch (err) {
        log_default.warn("Duration Updater: Can't update duration on the MediaSource.", err);
        return MediaSourceDurationUpdateStatus.Failed;
      }
      const deltaToExpected = Math.abs(mediaSource.duration - newDuration);
      if (deltaToExpected >= 0.1) {
        const deltaToBefore = Math.abs(mediaSource.duration - oldDuration);
        return deltaToExpected < deltaToBefore ? MediaSourceDurationUpdateStatus.Partial : MediaSourceDurationUpdateStatus.Failed;
      }
      return MediaSourceDurationUpdateStatus.Success;
    }
  }
  var MediaSourceDurationUpdateStatus = /* @__PURE__ */ ((MediaSourceDurationUpdateStatus2) => {
    MediaSourceDurationUpdateStatus2["Success"] = "success";
    MediaSourceDurationUpdateStatus2["Partial"] = "partial";
    MediaSourceDurationUpdateStatus2["Failed"] = "failed";
    return MediaSourceDurationUpdateStatus2;
  })(MediaSourceDurationUpdateStatus || {});
  function areSourceBuffersUpdating$(sourceBuffers) {
    if (sourceBuffers.length === 0) {
      return of(false);
    }
    const sourceBufferUpdatingStatuses = [];
    for (let i = 0; i < sourceBuffers.length; i++) {
      const sourceBuffer = sourceBuffers[i];
      sourceBufferUpdatingStatuses.push(merge(fromEvent(sourceBuffer, "updatestart").pipe(map(() => true)), fromEvent(sourceBuffer, "update").pipe(map(() => false)), interval(500).pipe(map(() => sourceBuffer.updating))).pipe(startWith(sourceBuffer.updating), distinctUntilChanged()));
    }
    return combineLatest(sourceBufferUpdatingStatuses).pipe(map((areUpdating) => {
      return areUpdating.some((isUpdating) => isUpdating);
    }), distinctUntilChanged());
  }
  function isMediaSourceOpened$(mediaSource) {
    return merge(onSourceOpen$(mediaSource).pipe(map(() => true)), onSourceEnded$(mediaSource).pipe(map(() => false)), onSourceClose$(mediaSource).pipe(map(() => false))).pipe(startWith(mediaSource.readyState === "open"), distinctUntilChanged());
  }

  // src/core/init/load_on_media_source.ts
  init_stall_avoider();

  // src/core/init/stream_events_emitter/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/init/stream_events_emitter/stream_events_emitter.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_config2();
  init_event_emitter();

  // src/core/init/stream_events_emitter/refresh_scheduled_events_list.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/core/init/stream_events_emitter/are_same_stream_events.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function areSameStreamEvents(evt1, evt2) {
    return evt1.id === evt2.id && evt1.start === evt2.start && evt1.end === evt2.end;
  }
  var are_same_stream_events_default = areSameStreamEvents;

  // src/core/init/stream_events_emitter/refresh_scheduled_events_list.ts
  function refreshScheduledEventsList(oldScheduledEvents, manifest) {
    const scheduledEvents = [];
    const { periods } = manifest;
    for (let i = 0; i < periods.length; i++) {
      const period = periods[i];
      const { streamEvents } = period;
      streamEvents.forEach(({ start, end, id, data }) => {
        for (let j = 0; j < oldScheduledEvents.length; j++) {
          const currentScheduledEvent = oldScheduledEvents[j];
          if (are_same_stream_events_default(currentScheduledEvent, { id, start, end })) {
            scheduledEvents.push(currentScheduledEvent);
            return;
          }
        }
        if (end === void 0) {
          const newScheduledEvent = {
            start,
            id,
            data,
            publicEvent: {
              start,
              data
            }
          };
          scheduledEvents.push(newScheduledEvent);
        } else {
          const newScheduledEvent = {
            start,
            end,
            id,
            data,
            publicEvent: {
              start,
              end,
              data
            }
          };
          scheduledEvents.push(newScheduledEvent);
        }
      });
    }
    return scheduledEvents;
  }
  var refresh_scheduled_events_list_default = refreshScheduledEventsList;

  // src/core/init/stream_events_emitter/stream_events_emitter.ts
  function isFiniteStreamEvent(evt) {
    return evt.end !== void 0;
  }
  function streamEventsEmitter(manifest, mediaElement, observation$) {
    const eventsBeingPlayed = /* @__PURE__ */ new WeakMap();
    let lastScheduledEvents = [];
    const scheduledEvents$ = fromEvent2(manifest, "manifestUpdate").pipe(startWith(null), scan((oldScheduledEvents) => {
      return refresh_scheduled_events_list_default(oldScheduledEvents, manifest);
    }, []));
    function emitStreamEvents$(scheduledEvents, oldObservation, newObservation) {
      const { currentTime: previousTime } = oldObservation;
      const { isSeeking, currentTime } = newObservation;
      const eventsToSend = [];
      const eventsToExit = [];
      for (let i = 0; i < scheduledEvents.length; i++) {
        const event = scheduledEvents[i];
        const start = event.start;
        const end = isFiniteStreamEvent(event) ? event.end : void 0;
        const isBeingPlayed = eventsBeingPlayed.has(event);
        if (isBeingPlayed) {
          if (start > currentTime || end !== void 0 && currentTime >= end) {
            if (isFiniteStreamEvent(event)) {
              eventsToExit.push(event.publicEvent);
            }
            eventsBeingPlayed.delete(event);
          }
        } else if (start <= currentTime && end !== void 0 && currentTime < end) {
          eventsToSend.push({
            type: "stream-event",
            value: event.publicEvent
          });
          eventsBeingPlayed.set(event, true);
        } else if (previousTime < start && currentTime >= (end != null ? end : start)) {
          if (isSeeking) {
            eventsToSend.push({
              type: "stream-event-skip",
              value: event.publicEvent
            });
          } else {
            eventsToSend.push({
              type: "stream-event",
              value: event.publicEvent
            });
            if (isFiniteStreamEvent(event)) {
              eventsToExit.push(event.publicEvent);
            }
          }
        }
      }
      return concat(eventsToSend.length > 0 ? of(...eventsToSend) : EMPTY, eventsToExit.length > 0 ? of(...eventsToExit).pipe(tap((evt) => {
        if (typeof evt.onExit === "function") {
          evt.onExit();
        }
      }), ignoreElements()) : EMPTY);
    }
    return scheduledEvents$.pipe(tap((scheduledEvents) => lastScheduledEvents = scheduledEvents), map((evt) => evt.length > 0), distinctUntilChanged(), switchMap((hasEvents) => {
      if (!hasEvents) {
        return EMPTY;
      }
      const { STREAM_EVENT_EMITTER_POLL_INTERVAL } = config_default.getCurrent();
      return combineLatest([
        interval(STREAM_EVENT_EMITTER_POLL_INTERVAL).pipe(startWith(null)),
        observation$
      ]).pipe(map(([_, observation]) => {
        const { seeking } = observation;
        return {
          isSeeking: seeking,
          currentTime: mediaElement.currentTime
        };
      }), pairwise(), mergeMap(([oldObservation, newObservation]) => emitStreamEvents$(lastScheduledEvents, oldObservation, newObservation)));
    }));
  }
  var stream_events_emitter_default = streamEventsEmitter;

  // src/core/init/stream_events_emitter/index.ts
  var stream_events_emitter_default2 = stream_events_emitter_default;

  // src/core/init/load_on_media_source.ts
  init_update_playback_rate();
  function createMediaSourceLoader({
    mediaElement,
    manifest,
    speed,
    bufferOptions,
    abrManager,
    playbackObserver,
    segmentFetcherCreator
  }) {
    return function loadContentOnMediaSource(mediaSource, initialTime, autoPlay2) {
      var _a2;
      const mediaDurationUpdater = new MediaDurationUpdater(manifest, mediaSource);
      const initialPeriod = (_a2 = manifest.getPeriodForTime(initialTime)) != null ? _a2 : manifest.getNextPeriod(initialTime);
      if (initialPeriod === void 0) {
        const error = new MediaError("MEDIA_STARTING_TIME_NOT_FOUND", "Wanted starting time not found in the Manifest.");
        return throwError(() => error);
      }
      const segmentBuffersStore = new segment_buffers_default(mediaElement, mediaSource);
      const {
        seekAndPlay$,
        initialPlayPerformed,
        initialSeekPerformed
      } = initialSeekAndPlay({
        mediaElement,
        playbackObserver,
        startTime: initialTime,
        mustAutoPlay: autoPlay2
      });
      const observation$ = playbackObserver.observe(true);
      const streamEvents$ = initialPlayPerformed.asObservable().pipe(filter((hasPlayed) => hasPlayed), mergeMap(() => stream_events_emitter_default2(manifest, mediaElement, observation$)));
      const streamObserver = createStreamPlaybackObserver(manifest, playbackObserver, {
        autoPlay: autoPlay2,
        initialPlayPerformed,
        initialSeekPerformed,
        speed,
        startTime: initialTime
      });
      const cancelEndOfStream$ = new Subject();
      const discontinuityUpdate$ = new Subject();
      const lockedStream$ = new Subject();
      const streams$ = stream_default({ manifest, initialPeriod }, streamObserver, abrManager, segmentBuffersStore, segmentFetcherCreator, bufferOptions).pipe(mergeMap((evt) => {
        switch (evt.type) {
          case "end-of-stream":
            log_default.debug("Init: end-of-stream order received.");
            return maintainEndOfStream(mediaSource).pipe(ignoreElements(), takeUntil(cancelEndOfStream$));
          case "resume-stream":
            log_default.debug("Init: resume-stream order received.");
            cancelEndOfStream$.next(null);
            return EMPTY;
          case "stream-status":
            const { period, bufferType, imminentDiscontinuity, position } = evt.value;
            discontinuityUpdate$.next({
              period,
              bufferType,
              discontinuity: imminentDiscontinuity,
              position
            });
            return EMPTY;
          case "locked-stream":
            lockedStream$.next(evt.value);
            return EMPTY;
          default:
            return of(evt);
        }
      }));
      const contentTimeObserver = ContentTimeBoundariesObserver(manifest, streams$, streamObserver).pipe(mergeMap((evt) => {
        switch (evt.type) {
          case "contentDurationUpdate":
            log_default.debug("Init: Duration has to be updated.", evt.value);
            mediaDurationUpdater.updateKnownDuration(evt.value);
            return EMPTY;
          default:
            return of(evt);
        }
      }));
      const playbackRate$ = updatePlaybackRate(mediaElement, speed, observation$).pipe(ignoreElements());
      const stallAvoider$ = StallAvoider(playbackObserver, manifest, lockedStream$, discontinuityUpdate$);
      const loadingEvts$ = seekAndPlay$.pipe(switchMap((evt) => evt.type === "warning" ? of(evt) : emitLoadedEvent(observation$, mediaElement, segmentBuffersStore, false)));
      return merge(loadingEvts$, playbackRate$, stallAvoider$, streams$, contentTimeObserver, streamEvents$).pipe(finalize(() => {
        mediaDurationUpdater.stop();
        segmentBuffersStore.disposeAll();
      }));
    };
  }

  // src/core/init/manifest_update_scheduler.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_config2();
  init_log();

  // src/utils/rx-throttle.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  function throttle2(func) {
    let isPending = false;
    return (...args) => {
      return new Observable((obs) => {
        if (isPending) {
          obs.complete();
          return void 0;
        }
        isPending = true;
        const funcSubscription = func(...args).subscribe({
          next: (i) => {
            obs.next(i);
          },
          error: (e) => {
            isPending = false;
            obs.error(e);
          },
          complete: () => {
            isPending = false;
            obs.complete();
          }
        });
        return () => {
          funcSubscription.unsubscribe();
          isPending = false;
        };
      });
    };
  }

  // src/core/init/manifest_update_scheduler.ts
  function manifestUpdateScheduler({
    initialManifest,
    manifestFetcher,
    minimumManifestUpdateInterval,
    scheduleRefresh$
  }) {
    const fetchManifest = throttle2((manifestURL, options) => manifestFetcher.fetch(manifestURL).pipe(mergeMap((response) => response.type === "warning" ? of(response) : response.parse(options)), share()));
    const { manifest } = initialManifest;
    let consecutiveUnsafeMode = 0;
    return defer(() => handleManifestRefresh$(initialManifest));
    function handleManifestRefresh$({ sendingTime, parsingTime, updatingTime }) {
      const totalUpdateTime = parsingTime !== void 0 ? parsingTime + (updatingTime != null ? updatingTime : 0) : void 0;
      const {
        MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE,
        MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE
      } = config_default.getCurrent();
      const unsafeModeEnabled = consecutiveUnsafeMode > 0 ? consecutiveUnsafeMode < MAX_CONSECUTIVE_MANIFEST_PARSING_IN_UNSAFE_MODE : totalUpdateTime !== void 0 ? totalUpdateTime >= MIN_MANIFEST_PARSING_TIME_TO_ENTER_UNSAFE_MODE : false;
      const timeSinceRequest = sendingTime === void 0 ? 0 : performance.now() - sendingTime;
      const minInterval = Math.max(minimumManifestUpdateInterval - timeSinceRequest, 0);
      const internalRefresh$ = scheduleRefresh$.pipe(mergeMap(({ completeRefresh, delay: delay2, canUseUnsafeMode }) => {
        const unsafeMode = canUseUnsafeMode && unsafeModeEnabled;
        return startManualRefreshTimer(delay2 != null ? delay2 : 0, minimumManifestUpdateInterval, sendingTime).pipe(map(() => ({ completeRefresh, unsafeMode })));
      }));
      const expired$ = manifest.expired === null ? EMPTY : timer(minInterval).pipe(mergeMap(() => manifest.expired === null ? EMPTY : from(manifest.expired)), map(() => ({ completeRefresh: true, unsafeMode: unsafeModeEnabled })));
      const autoRefresh$ = createAutoRefreshObservable();
      return merge(autoRefresh$, internalRefresh$, expired$).pipe(take(1), mergeMap(({
        completeRefresh,
        unsafeMode
      }) => refreshManifest({
        completeRefresh,
        unsafeMode
      })), mergeMap((evt) => {
        if (evt.type === "warning") {
          return of(evt);
        }
        return handleManifestRefresh$(evt);
      }));
      function createAutoRefreshObservable() {
        if (manifest.lifetime === void 0 || manifest.lifetime < 0) {
          return EMPTY;
        }
        const regularRefreshDelay = manifest.lifetime * 1e3 - timeSinceRequest;
        let actualRefreshInterval;
        if (totalUpdateTime === void 0) {
          actualRefreshInterval = regularRefreshDelay;
        } else if (manifest.lifetime < 3 && totalUpdateTime >= 100) {
          actualRefreshInterval = Math.min(Math.max(3e3 - timeSinceRequest, Math.max(regularRefreshDelay, 0) + totalUpdateTime), regularRefreshDelay * 6);
          log_default.info("MUS: Manifest update rythm is too frequent. Postponing next request.", regularRefreshDelay, actualRefreshInterval);
        } else if (totalUpdateTime >= manifest.lifetime * 1e3 / 10) {
          actualRefreshInterval = Math.min(Math.max(regularRefreshDelay, 0) + totalUpdateTime, regularRefreshDelay * 6);
          log_default.info("MUS: Manifest took too long to parse. Postponing next request", actualRefreshInterval, actualRefreshInterval);
        } else {
          actualRefreshInterval = regularRefreshDelay;
        }
        return timer(Math.max(actualRefreshInterval, minInterval)).pipe(map(() => ({ completeRefresh: false, unsafeMode: unsafeModeEnabled })));
      }
    }
    function refreshManifest({
      completeRefresh,
      unsafeMode
    }) {
      const manifestUpdateUrl = manifest.updateUrl;
      const fullRefresh = completeRefresh || manifestUpdateUrl === void 0;
      const refreshURL = fullRefresh ? manifest.getUrl() : manifestUpdateUrl;
      const externalClockOffset = manifest.clockOffset;
      if (unsafeMode) {
        consecutiveUnsafeMode += 1;
        log_default.info('Init: Refreshing the Manifest in "unsafeMode" for the ' + String(consecutiveUnsafeMode) + " consecutive time.");
      } else if (consecutiveUnsafeMode > 0) {
        log_default.info('Init: Not parsing the Manifest in "unsafeMode" anymore after ' + String(consecutiveUnsafeMode) + " consecutive times.");
        consecutiveUnsafeMode = 0;
      }
      return fetchManifest(refreshURL, {
        externalClockOffset,
        previousManifest: manifest,
        unsafeMode
      }).pipe(mergeMap((value) => {
        if (value.type === "warning") {
          return of(value);
        }
        const {
          manifest: newManifest,
          sendingTime: newSendingTime,
          receivedTime,
          parsingTime
        } = value;
        const updateTimeStart = performance.now();
        if (fullRefresh) {
          manifest.replace(newManifest);
        } else {
          try {
            manifest.update(newManifest);
          } catch (e) {
            const message = e instanceof Error ? e.message : "unknown error";
            log_default.warn(`MUS: Attempt to update Manifest failed: ${message}`, "Re-downloading the Manifest fully");
            const { FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY } = config_default.getCurrent();
            return startManualRefreshTimer(FAILED_PARTIAL_UPDATE_MANIFEST_REFRESH_DELAY, minimumManifestUpdateInterval, newSendingTime).pipe(mergeMap(() => refreshManifest({ completeRefresh: true, unsafeMode: false })));
          }
        }
        return of({
          type: "parsed",
          manifest,
          sendingTime: newSendingTime,
          receivedTime,
          parsingTime,
          updatingTime: performance.now() - updateTimeStart
        });
      }));
    }
  }
  function startManualRefreshTimer(wantedDelay, minimumManifestUpdateInterval, lastManifestRequestTime) {
    return defer(() => {
      const timeSinceLastRefresh = lastManifestRequestTime === void 0 ? 0 : performance.now() - lastManifestRequestTime;
      const _minInterval = Math.max(minimumManifestUpdateInterval - timeSinceLastRefresh, 0);
      return timer(Math.max(wantedDelay - timeSinceLastRefresh, _minInterval));
    });
  }

  // src/core/init/initialize_media_source.ts
  init_throw_on_media_error();
  function InitializeOnMediaSource({
    adaptiveOptions,
    autoPlay: autoPlay2,
    bufferOptions,
    keySystems,
    lowLatencyMode,
    manifest$,
    manifestFetcher,
    mediaElement,
    minimumManifestUpdateInterval,
    playbackObserver,
    segmentFetcherCreator,
    speed,
    startAt,
    textTrackOptions
  }) {
    const abrManager = new abr_default(adaptiveOptions);
    const openMediaSource$ = openMediaSource(mediaElement).pipe(shareReplay({ refCount: true }));
    const protectedSegments$ = new Subject();
    const drmEvents$ = linkDrmAndContent(mediaElement, keySystems, protectedSegments$, openMediaSource$).pipe(deferSubscriptions(), share());
    const mediaError$ = throwOnMediaError(mediaElement);
    const mediaSourceReady$ = drmEvents$.pipe(filter((evt) => evt.type === "decryption-ready" || evt.type === "decryption-disabled"), map((e) => e.value), take(1));
    const loadContent$ = combineLatest([manifest$, mediaSourceReady$]).pipe(mergeMap(([manifestEvt, { drmSystemId, mediaSource: initialMediaSource }]) => {
      if (manifestEvt.type === "warning") {
        return of(manifestEvt);
      }
      const { manifest } = manifestEvt;
      log_default.debug("Init: Calculating initial time");
      const initialTime = getInitialTime(manifest, lowLatencyMode, startAt);
      log_default.debug("Init: Initial time calculated:", initialTime);
      const mediaSourceLoader = createMediaSourceLoader({
        abrManager,
        bufferOptions: object_assign_default({ textTrackOptions, drmSystemId }, bufferOptions),
        manifest,
        mediaElement,
        playbackObserver,
        segmentFetcherCreator,
        speed
      });
      const recursiveLoad$ = recursivelyLoadOnMediaSource(initialMediaSource, initialTime, autoPlay2);
      const scheduleRefresh$ = new Subject();
      const manifestUpdate$ = manifestUpdateScheduler({
        initialManifest: manifestEvt,
        manifestFetcher,
        minimumManifestUpdateInterval,
        scheduleRefresh$
      });
      const manifestEvents$ = merge(fromEvent2(manifest, "manifestUpdate").pipe(map(() => events_generators_default.manifestUpdate())), fromEvent2(manifest, "decipherabilityUpdate").pipe(map(events_generators_default.decipherabilityUpdate)));
      return merge(manifestEvents$, manifestUpdate$, recursiveLoad$).pipe(startWith(events_generators_default.manifestReady(manifest)), finalize(() => {
        scheduleRefresh$.complete();
      }));
      function recursivelyLoadOnMediaSource(mediaSource, startingPos, shouldPlay) {
        const reloadMediaSource$ = new Subject();
        const mediaSourceLoader$ = mediaSourceLoader(mediaSource, startingPos, shouldPlay).pipe(filterMap((evt) => {
          switch (evt.type) {
            case "needs-manifest-refresh":
              scheduleRefresh$.next({
                completeRefresh: false,
                canUseUnsafeMode: true
              });
              return null;
            case "manifest-might-be-out-of-sync":
              const { OUT_OF_SYNC_MANIFEST_REFRESH_DELAY } = config_default.getCurrent();
              scheduleRefresh$.next({
                completeRefresh: true,
                canUseUnsafeMode: false,
                delay: OUT_OF_SYNC_MANIFEST_REFRESH_DELAY
              });
              return null;
            case "needs-media-source-reload":
              reloadMediaSource$.next(evt.value);
              return null;
            case "needs-decipherability-flush":
              const keySystem = getCurrentKeySystem(mediaElement);
              if (shouldReloadMediaSourceOnDecipherabilityUpdate(keySystem)) {
                reloadMediaSource$.next(evt.value);
                return null;
              }
              const { position } = evt.value;
              if (position + 1e-3 < evt.value.duration) {
                playbackObserver.setCurrentTime(mediaElement.currentTime + 1e-3);
              } else {
                playbackObserver.setCurrentTime(position);
              }
              return null;
            case "encryption-data-encountered":
              protectedSegments$.next(evt.value);
              return null;
            case "needs-buffer-flush":
              playbackObserver.setCurrentTime(mediaElement.currentTime + 1e-3);
              return null;
          }
          return evt;
        }, null));
        const currentLoad$ = mediaSourceLoader$.pipe(takeUntil(reloadMediaSource$));
        const handleReloads$ = reloadMediaSource$.pipe(switchMap((reloadOrder) => {
          return openMediaSource(mediaElement).pipe(mergeMap((newMS) => recursivelyLoadOnMediaSource(newMS, reloadOrder.position, reloadOrder.autoPlay)), startWith(events_generators_default.reloadingMediaSource()));
        }));
        return merge(handleReloads$, currentLoad$);
      }
    }));
    return merge(loadContent$, mediaError$, drmEvents$.pipe(ignoreElements()));
  }

  // src/core/init/index.ts
  init_types6();
  var init_default = InitializeOnMediaSource;

  // src/core/api/emit_seek_events.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  function emitSeekEvents(mediaElement, observation$) {
    return defer(() => {
      if (mediaElement === null) {
        return EMPTY;
      }
      let isSeeking$ = observation$.pipe(filter((observation) => observation.event === "seeking"), map(() => "seeking"));
      if (mediaElement.seeking) {
        isSeeking$ = isSeeking$.pipe(startWith("seeking"));
      }
      const hasSeeked$ = isSeeking$.pipe(switchMap(() => observation$.pipe(filter((observation) => observation.event === "seeked"), map(() => "seeked"), take(1))));
      return merge(isSeeking$, hasSeeked$);
    });
  }

  // src/core/api/get_player_state.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_config2();
  var PLAYER_STATES = {
    STOPPED: "STOPPED",
    LOADED: "LOADED",
    LOADING: "LOADING",
    PLAYING: "PLAYING",
    PAUSED: "PAUSED",
    ENDED: "ENDED",
    BUFFERING: "BUFFERING",
    SEEKING: "SEEKING",
    RELOADING: "RELOADING"
  };
  function getLoadedContentState(mediaElement, isPlaying, stalledStatus) {
    const { FORCED_ENDED_THRESHOLD } = config_default.getCurrent();
    if (mediaElement.ended) {
      return PLAYER_STATES.ENDED;
    }
    if (stalledStatus !== null) {
      const gapBetweenDurationAndCurrentTime = Math.abs(mediaElement.duration - mediaElement.currentTime);
      if (FORCED_ENDED_THRESHOLD != null && gapBetweenDurationAndCurrentTime < FORCED_ENDED_THRESHOLD) {
        return PLAYER_STATES.ENDED;
      }
      return stalledStatus === "seeking" ? PLAYER_STATES.SEEKING : PLAYER_STATES.BUFFERING;
    }
    return isPlaying ? PLAYER_STATES.PLAYING : PLAYER_STATES.PAUSED;
  }

  // src/core/api/option_utils.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_config2();
  init_log();
  init_array_includes();
  init_is_null_or_undefined();
  init_languages();
  init_object_assign();
  init_warn_once();
  function parseConstructorOptions(options) {
    let maxBufferAhead;
    let maxBufferBehind;
    let wantedBufferAhead;
    let maxVideoBufferSize;
    let throttleWhenHidden;
    let throttleVideoBitrateWhenHidden;
    let preferredAudioTracks;
    let preferredTextTracks;
    let preferredVideoTracks;
    let videoElement;
    let initialVideoBitrate;
    let initialAudioBitrate;
    let minAudioBitrate;
    let minVideoBitrate;
    let maxAudioBitrate;
    let maxVideoBitrate;
    const {
      DEFAULT_INITIAL_BITRATES,
      DEFAULT_LIMIT_VIDEO_WIDTH,
      DEFAULT_MIN_BITRATES,
      DEFAULT_MAX_BITRATES,
      DEFAULT_MAX_BUFFER_AHEAD,
      DEFAULT_MAX_BUFFER_BEHIND,
      DEFAULT_MAX_VIDEO_BUFFER_SIZE,
      DEFAULT_STOP_AT_END,
      DEFAULT_THROTTLE_WHEN_HIDDEN,
      DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN,
      DEFAULT_WANTED_BUFFER_AHEAD
    } = config_default.getCurrent();
    if (isNullOrUndefined(options.maxBufferAhead)) {
      maxBufferAhead = DEFAULT_MAX_BUFFER_AHEAD;
    } else {
      maxBufferAhead = Number(options.maxBufferAhead);
      if (isNaN(maxBufferAhead)) {
        throw new Error("Invalid maxBufferAhead parameter. Should be a number.");
      }
    }
    if (isNullOrUndefined(options.maxBufferBehind)) {
      maxBufferBehind = DEFAULT_MAX_BUFFER_BEHIND;
    } else {
      maxBufferBehind = Number(options.maxBufferBehind);
      if (isNaN(maxBufferBehind)) {
        throw new Error("Invalid maxBufferBehind parameter. Should be a number.");
      }
    }
    if (isNullOrUndefined(options.wantedBufferAhead)) {
      wantedBufferAhead = DEFAULT_WANTED_BUFFER_AHEAD;
    } else {
      wantedBufferAhead = Number(options.wantedBufferAhead);
      if (isNaN(wantedBufferAhead)) {
        throw new Error("Invalid wantedBufferAhead parameter. Should be a number.");
      }
    }
    if (isNullOrUndefined(options.maxVideoBufferSize)) {
      maxVideoBufferSize = DEFAULT_MAX_VIDEO_BUFFER_SIZE;
    } else {
      maxVideoBufferSize = Number(options.maxVideoBufferSize);
      if (isNaN(maxVideoBufferSize)) {
        throw new Error("Invalid maxVideoBufferSize parameter. Should be a number.");
      }
    }
    const limitVideoWidth = isNullOrUndefined(options.limitVideoWidth) ? DEFAULT_LIMIT_VIDEO_WIDTH : !!options.limitVideoWidth;
    if (!isNullOrUndefined(options.throttleWhenHidden)) {
      warnOnce("`throttleWhenHidden` API is deprecated. Consider using `throttleVideoBitrateWhenHidden` instead.");
      throttleWhenHidden = !!options.throttleWhenHidden;
    } else {
      throttleWhenHidden = DEFAULT_THROTTLE_WHEN_HIDDEN;
    }
    if (throttleWhenHidden) {
      throttleVideoBitrateWhenHidden = false;
    } else {
      throttleVideoBitrateWhenHidden = isNullOrUndefined(options.throttleVideoBitrateWhenHidden) ? DEFAULT_THROTTLE_VIDEO_BITRATE_WHEN_HIDDEN : !!options.throttleVideoBitrateWhenHidden;
    }
    if (options.preferredTextTracks !== void 0) {
      if (!Array.isArray(options.preferredTextTracks)) {
        warnOnce("Invalid `preferredTextTracks` option, it should be an Array");
        preferredTextTracks = [];
      } else {
        preferredTextTracks = options.preferredTextTracks;
      }
    } else {
      preferredTextTracks = [];
    }
    if (options.preferredAudioTracks !== void 0) {
      if (!Array.isArray(options.preferredAudioTracks)) {
        warnOnce("Invalid `preferredAudioTracks` option, it should be an Array");
        preferredAudioTracks = [];
      } else {
        preferredAudioTracks = options.preferredAudioTracks;
      }
    } else {
      preferredAudioTracks = [];
    }
    if (options.preferredVideoTracks !== void 0) {
      if (!Array.isArray(options.preferredVideoTracks)) {
        warnOnce("Invalid `preferredVideoTracks` option, it should be an Array");
        preferredVideoTracks = [];
      } else {
        preferredVideoTracks = options.preferredVideoTracks;
      }
    } else {
      preferredVideoTracks = [];
    }
    if (isNullOrUndefined(options.videoElement)) {
      videoElement = document.createElement("video");
    } else if (options.videoElement instanceof HTMLMediaElement) {
      videoElement = options.videoElement;
    } else {
      throw new Error("Invalid videoElement parameter. Should be a HTMLMediaElement.");
    }
    if (isNullOrUndefined(options.initialVideoBitrate)) {
      initialVideoBitrate = DEFAULT_INITIAL_BITRATES.video;
    } else {
      initialVideoBitrate = Number(options.initialVideoBitrate);
      if (isNaN(initialVideoBitrate)) {
        throw new Error("Invalid initialVideoBitrate parameter. Should be a number.");
      }
    }
    if (isNullOrUndefined(options.initialAudioBitrate)) {
      initialAudioBitrate = DEFAULT_INITIAL_BITRATES.audio;
    } else {
      initialAudioBitrate = Number(options.initialAudioBitrate);
      if (isNaN(initialAudioBitrate)) {
        throw new Error("Invalid initialAudioBitrate parameter. Should be a number.");
      }
    }
    if (isNullOrUndefined(options.minVideoBitrate)) {
      minVideoBitrate = DEFAULT_MIN_BITRATES.video;
    } else {
      minVideoBitrate = Number(options.minVideoBitrate);
      if (isNaN(minVideoBitrate)) {
        throw new Error("Invalid maxVideoBitrate parameter. Should be a number.");
      }
    }
    if (isNullOrUndefined(options.minAudioBitrate)) {
      minAudioBitrate = DEFAULT_MIN_BITRATES.audio;
    } else {
      minAudioBitrate = Number(options.minAudioBitrate);
      if (isNaN(minAudioBitrate)) {
        throw new Error("Invalid minAudioBitrate parameter. Should be a number.");
      }
    }
    if (isNullOrUndefined(options.maxVideoBitrate)) {
      maxVideoBitrate = DEFAULT_MAX_BITRATES.video;
    } else {
      maxVideoBitrate = Number(options.maxVideoBitrate);
      if (isNaN(maxVideoBitrate)) {
        throw new Error("Invalid maxVideoBitrate parameter. Should be a number.");
      } else if (minVideoBitrate > maxVideoBitrate) {
        throw new Error(`Invalid maxVideoBitrate parameter. Its value, "${maxVideoBitrate}", is inferior to the set minVideoBitrate, "${minVideoBitrate}"`);
      }
    }
    if (isNullOrUndefined(options.maxAudioBitrate)) {
      maxAudioBitrate = DEFAULT_MAX_BITRATES.audio;
    } else {
      maxAudioBitrate = Number(options.maxAudioBitrate);
      if (isNaN(maxAudioBitrate)) {
        throw new Error("Invalid maxAudioBitrate parameter. Should be a number.");
      } else if (minAudioBitrate > maxAudioBitrate) {
        throw new Error(`Invalid maxAudioBitrate parameter. Its value, "${maxAudioBitrate}", is inferior to the set minAudioBitrate, "${minAudioBitrate}"`);
      }
    }
    const stopAtEnd = isNullOrUndefined(options.stopAtEnd) ? DEFAULT_STOP_AT_END : !!options.stopAtEnd;
    return {
      maxBufferAhead,
      maxBufferBehind,
      limitVideoWidth,
      videoElement,
      wantedBufferAhead,
      maxVideoBufferSize,
      throttleWhenHidden,
      throttleVideoBitrateWhenHidden,
      preferredAudioTracks,
      preferredTextTracks,
      preferredVideoTracks,
      initialAudioBitrate,
      initialVideoBitrate,
      minAudioBitrate,
      minVideoBitrate,
      maxAudioBitrate,
      maxVideoBitrate,
      stopAtEnd
    };
  }
  function checkReloadOptions(options) {
    var _a2, _b2, _c, _d;
    if (options === null || typeof options !== "object" && options !== void 0) {
      throw new Error("API: reload - Invalid options format.");
    }
    if ((options == null ? void 0 : options.reloadAt) === null || typeof (options == null ? void 0 : options.reloadAt) !== "object" && (options == null ? void 0 : options.reloadAt) !== void 0) {
      throw new Error("API: reload - Invalid 'reloadAt' option format.");
    }
    if (typeof ((_a2 = options == null ? void 0 : options.reloadAt) == null ? void 0 : _a2.position) !== "number" && ((_b2 = options == null ? void 0 : options.reloadAt) == null ? void 0 : _b2.position) !== void 0) {
      throw new Error("API: reload - Invalid 'reloadAt.position' option format.");
    }
    if (typeof ((_c = options == null ? void 0 : options.reloadAt) == null ? void 0 : _c.relative) !== "number" && ((_d = options == null ? void 0 : options.reloadAt) == null ? void 0 : _d.relative) !== void 0) {
      throw new Error("API: reload - Invalid 'reloadAt.relative' option format.");
    }
  }
  function parseLoadVideoOptions(options) {
    var _a2, _b2, _c, _d, _e, _f;
    let url;
    let transport;
    let keySystems;
    let textTrackMode;
    let textTrackElement;
    let startAt;
    const {
      DEFAULT_AUDIO_TRACK_SWITCHING_MODE,
      DEFAULT_AUTO_PLAY,
      DEFAULT_CODEC_SWITCHING_BEHAVIOR,
      DEFAULT_ENABLE_FAST_SWITCHING,
      DEFAULT_MANUAL_BITRATE_SWITCHING_MODE,
      DEFAULT_SHOW_NATIVE_SUBTITLE,
      DEFAULT_TEXT_TRACK_MODE
    } = config_default.getCurrent();
    if (isNullOrUndefined(options)) {
      throw new Error("No option set on loadVideo");
    }
    if (!isNullOrUndefined(options.url)) {
      url = String(options.url);
    } else if (isNullOrUndefined((_a2 = options.transportOptions) == null ? void 0 : _a2.initialManifest) && isNullOrUndefined((_b2 = options.transportOptions) == null ? void 0 : _b2.manifestLoader)) {
      throw new Error("Unable to load a content: no url set on loadVideo.\nPlease provide at least either an `url` argument, a `transportOptions.initialManifest` option or a `transportOptions.manifestLoader` option so the RxPlayer can load the content.");
    }
    if (isNullOrUndefined(options.transport)) {
      throw new Error("No transport set on loadVideo");
    } else {
      transport = String(options.transport);
    }
    const autoPlay2 = isNullOrUndefined(options.autoPlay) ? DEFAULT_AUTO_PLAY : !!options.autoPlay;
    if (isNullOrUndefined(options.keySystems)) {
      keySystems = [];
    } else {
      keySystems = Array.isArray(options.keySystems) ? options.keySystems : [options.keySystems];
      for (const keySystem of keySystems) {
        if (typeof keySystem.type !== "string" || typeof keySystem.getLicense !== "function") {
          throw new Error("Invalid key system given: Missing type string or getLicense callback");
        }
      }
    }
    const lowLatencyMode = options.lowLatencyMode === void 0 ? false : !!options.lowLatencyMode;
    const transportOptsArg = typeof options.transportOptions === "object" && options.transportOptions !== null ? options.transportOptions : {};
    const initialManifest = (_c = options.transportOptions) == null ? void 0 : _c.initialManifest;
    const minimumManifestUpdateInterval = (_e = (_d = options.transportOptions) == null ? void 0 : _d.minimumManifestUpdateInterval) != null ? _e : 0;
    let audioTrackSwitchingMode = isNullOrUndefined(options.audioTrackSwitchingMode) ? DEFAULT_AUDIO_TRACK_SWITCHING_MODE : options.audioTrackSwitchingMode;
    if (!arrayIncludes(["seamless", "direct", "reload"], audioTrackSwitchingMode)) {
      log_default.warn("The `audioTrackSwitchingMode` loadVideo option must match one of the following strategy name:\n- `seamless`\n- `direct`\n- `reload`\nIf badly set, " + DEFAULT_AUDIO_TRACK_SWITCHING_MODE + " strategy will be used as default");
      audioTrackSwitchingMode = DEFAULT_AUDIO_TRACK_SWITCHING_MODE;
    }
    let onCodecSwitch = isNullOrUndefined(options.onCodecSwitch) ? DEFAULT_CODEC_SWITCHING_BEHAVIOR : options.onCodecSwitch;
    if (!arrayIncludes(["continue", "reload"], onCodecSwitch)) {
      log_default.warn("The `onCodecSwitch` loadVideo option must match one of the following string:\n- `continue`\n- `reload`\nIf badly set, " + DEFAULT_CODEC_SWITCHING_BEHAVIOR + " will be used as default");
      onCodecSwitch = DEFAULT_CODEC_SWITCHING_BEHAVIOR;
    }
    const transportOptions = object_assign_default({}, transportOptsArg, {
      supplementaryImageTracks: [],
      supplementaryTextTracks: [],
      lowLatencyMode
    });
    delete transportOptions.initialManifest;
    delete transportOptions.minimumManifestUpdateInterval;
    if (options.supplementaryTextTracks !== void 0) {
      warnOnce("The `supplementaryTextTracks` loadVideo option is deprecated.\nPlease use the `TextTrackRenderer` tool instead.");
      const supplementaryTextTracks = Array.isArray(options.supplementaryTextTracks) ? options.supplementaryTextTracks : [options.supplementaryTextTracks];
      for (const supplementaryTextTrack of supplementaryTextTracks) {
        if (typeof supplementaryTextTrack.language !== "string" || typeof supplementaryTextTrack.mimeType !== "string" || typeof supplementaryTextTrack.url !== "string") {
          throw new Error("Invalid supplementary text track given. Missing either language, mimetype or url");
        }
      }
      transportOptions.supplementaryTextTracks = supplementaryTextTracks;
    }
    if (options.supplementaryImageTracks !== void 0) {
      warnOnce("The `supplementaryImageTracks` loadVideo option is deprecated.\nPlease use the `parseBifThumbnails` tool instead.");
      const supplementaryImageTracks = Array.isArray(options.supplementaryImageTracks) ? options.supplementaryImageTracks : [options.supplementaryImageTracks];
      for (const supplementaryImageTrack of supplementaryImageTracks) {
        if (typeof supplementaryImageTrack.mimeType !== "string" || typeof supplementaryImageTrack.url !== "string") {
          throw new Error("Invalid supplementary image track given. Missing either mimetype or url");
        }
      }
      transportOptions.supplementaryImageTracks = supplementaryImageTracks;
    }
    if (isNullOrUndefined(options.textTrackMode)) {
      textTrackMode = DEFAULT_TEXT_TRACK_MODE;
    } else {
      if (options.textTrackMode !== "native" && options.textTrackMode !== "html") {
        throw new Error("Invalid textTrackMode.");
      }
      textTrackMode = options.textTrackMode;
    }
    if (!isNullOrUndefined(options.defaultAudioTrack)) {
      warnOnce("The `defaultAudioTrack` loadVideo option is deprecated.\nPlease use the `preferredAudioTracks` constructor option or the`setPreferredAudioTracks` method instead");
    }
    const defaultAudioTrack = normalizeAudioTrack(options.defaultAudioTrack);
    if (!isNullOrUndefined(options.defaultTextTrack)) {
      warnOnce("The `defaultTextTrack` loadVideo option is deprecated.\nPlease use the `preferredTextTracks` constructor option or the`setPreferredTextTracks` method instead");
    }
    const defaultTextTrack = normalizeTextTrack(options.defaultTextTrack);
    let hideNativeSubtitle = !DEFAULT_SHOW_NATIVE_SUBTITLE;
    if (!isNullOrUndefined(options.hideNativeSubtitle)) {
      warnOnce("The `hideNativeSubtitle` loadVideo option is deprecated");
      hideNativeSubtitle = !!options.hideNativeSubtitle;
    }
    const manualBitrateSwitchingMode = (_f = options.manualBitrateSwitchingMode) != null ? _f : DEFAULT_MANUAL_BITRATE_SWITCHING_MODE;
    const enableFastSwitching = isNullOrUndefined(options.enableFastSwitching) ? DEFAULT_ENABLE_FAST_SWITCHING : options.enableFastSwitching;
    if (textTrackMode === "html") {
      if (isNullOrUndefined(options.textTrackElement)) {
        throw new Error('You have to provide a textTrackElement in "html" textTrackMode.');
      } else if (!(options.textTrackElement instanceof HTMLElement)) {
        throw new Error("textTrackElement should be an HTMLElement.");
      } else {
        textTrackElement = options.textTrackElement;
      }
    } else if (!isNullOrUndefined(options.textTrackElement)) {
      log_default.warn('API: You have set a textTrackElement without being in an "html" textTrackMode. It will be ignored.');
    }
    if (!isNullOrUndefined(options.startAt)) {
      if (options.startAt.wallClockTime instanceof Date) {
        const wallClockTime = options.startAt.wallClockTime.getTime() / 1e3;
        startAt = object_assign_default({}, options.startAt, { wallClockTime });
      } else {
        startAt = options.startAt;
      }
    }
    const networkConfig = isNullOrUndefined(options.networkConfig) ? {} : {
      manifestRetry: options.networkConfig.manifestRetry,
      offlineRetry: options.networkConfig.offlineRetry,
      segmentRetry: options.networkConfig.segmentRetry
    };
    return {
      autoPlay: autoPlay2,
      defaultAudioTrack,
      defaultTextTrack,
      enableFastSwitching,
      hideNativeSubtitle,
      keySystems,
      initialManifest,
      lowLatencyMode,
      manualBitrateSwitchingMode,
      audioTrackSwitchingMode,
      minimumManifestUpdateInterval,
      networkConfig,
      onCodecSwitch,
      startAt,
      textTrackElement,
      textTrackMode,
      transport,
      transportOptions,
      url
    };
  }

  // src/core/api/track_choice_manager.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_log();
  init_array_find();
  init_array_includes();
  init_is_null_or_undefined();
  init_languages();
  init_sorted_list();
  init_take_first_set();
  function normalizeAudioTracks(tracks) {
    return tracks.map((t) => t === null ? t : {
      normalized: t.language === void 0 ? void 0 : languages_default(t.language),
      audioDescription: t.audioDescription,
      codec: t.codec
    });
  }
  function normalizeTextTracks(tracks) {
    return tracks.map((t) => t === null ? t : {
      normalized: languages_default(t.language),
      closedCaption: t.closedCaption
    });
  }
  var TrackChoiceManager = class {
    constructor(args) {
      this._periods = new SortedList((a, b) => a.period.start - b.period.start);
      this._audioChoiceMemory = /* @__PURE__ */ new WeakMap();
      this._textChoiceMemory = /* @__PURE__ */ new WeakMap();
      this._videoChoiceMemory = /* @__PURE__ */ new WeakMap();
      this._preferredAudioTracks = [];
      this._preferredTextTracks = [];
      this._preferredVideoTracks = [];
      this.trickModeTrackEnabled = args.preferTrickModeTracks;
    }
    setPreferredAudioTracks(preferredAudioTracks, shouldApply) {
      this._preferredAudioTracks = preferredAudioTracks;
      if (shouldApply) {
        this._applyAudioPreferences();
      }
    }
    setPreferredTextTracks(preferredTextTracks, shouldApply) {
      this._preferredTextTracks = preferredTextTracks;
      if (shouldApply) {
        this._applyTextPreferences();
      }
    }
    setPreferredVideoTracks(preferredVideoTracks, shouldApply) {
      this._preferredVideoTracks = preferredVideoTracks;
      if (shouldApply) {
        this._applyVideoPreferences();
      }
    }
    addPeriod(bufferType, period, adaptation$) {
      const periodItem = getPeriodItem(this._periods, period);
      const adaptations = period.getSupportedAdaptations(bufferType);
      if (periodItem !== void 0) {
        if (periodItem[bufferType] !== void 0) {
          log_default.warn(`TrackChoiceManager: ${bufferType} already added for period`, period.start);
          return;
        } else {
          periodItem[bufferType] = { adaptations, adaptation$ };
        }
      } else {
        this._periods.add({
          period,
          [bufferType]: { adaptations, adaptation$ }
        });
      }
    }
    removePeriod(bufferType, period) {
      const periodIndex = findPeriodIndex(this._periods, period);
      if (periodIndex === void 0) {
        log_default.warn(`TrackChoiceManager: ${bufferType} not found for period`, period.start);
        return;
      }
      const periodItem = this._periods.get(periodIndex);
      if (periodItem[bufferType] === void 0) {
        log_default.warn(`TrackChoiceManager: ${bufferType} already removed for period`, period.start);
        return;
      }
      delete periodItem[bufferType];
      if (periodItem.audio === void 0 && periodItem.text === void 0 && periodItem.video === void 0) {
        this._periods.removeElement(periodItem);
      }
    }
    resetPeriods() {
      while (this._periods.length() > 0) {
        this._periods.pop();
      }
    }
    update() {
      this._resetChosenAudioTracks();
      this._resetChosenTextTracks();
      this._resetChosenVideoTracks();
    }
    setInitialAudioTrack(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const audioInfos = periodItem !== void 0 ? periodItem.audio : null;
      if (isNullOrUndefined(audioInfos) || periodItem === void 0) {
        throw new Error("TrackChoiceManager: Given Period not found.");
      }
      const audioAdaptations = period.getSupportedAdaptations("audio");
      const chosenAudioAdaptation = this._audioChoiceMemory.get(period);
      if (chosenAudioAdaptation === null) {
        audioInfos.adaptation$.next(null);
      } else if (chosenAudioAdaptation === void 0 || !arrayIncludes(audioAdaptations, chosenAudioAdaptation)) {
        const preferredAudioTracks = this._preferredAudioTracks;
        const normalizedPref = normalizeAudioTracks(preferredAudioTracks);
        const optimalAdaptation = findFirstOptimalAudioAdaptation(audioAdaptations, normalizedPref);
        this._audioChoiceMemory.set(period, optimalAdaptation);
        audioInfos.adaptation$.next(optimalAdaptation);
      } else {
        audioInfos.adaptation$.next(chosenAudioAdaptation);
      }
    }
    setInitialTextTrack(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const textInfos = periodItem !== void 0 ? periodItem.text : null;
      if (isNullOrUndefined(textInfos) || periodItem === void 0) {
        throw new Error("TrackChoiceManager: Given Period not found.");
      }
      const textAdaptations = period.getSupportedAdaptations("text");
      const chosenTextAdaptation = this._textChoiceMemory.get(period);
      if (chosenTextAdaptation === null) {
        textInfos.adaptation$.next(null);
      } else if (chosenTextAdaptation === void 0 || !arrayIncludes(textAdaptations, chosenTextAdaptation)) {
        const preferredTextTracks = this._preferredTextTracks;
        const normalizedPref = normalizeTextTracks(preferredTextTracks);
        const optimalAdaptation = findFirstOptimalTextAdaptation(textAdaptations, normalizedPref);
        this._textChoiceMemory.set(period, optimalAdaptation);
        textInfos.adaptation$.next(optimalAdaptation);
      } else {
        textInfos.adaptation$.next(chosenTextAdaptation);
      }
    }
    setInitialVideoTrack(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const videoInfos = periodItem !== void 0 ? periodItem.video : null;
      if (isNullOrUndefined(videoInfos) || periodItem === void 0) {
        throw new Error("TrackChoiceManager: Given Period not found.");
      }
      const videoAdaptations = period.getSupportedAdaptations("video");
      const prevVideoAdaptation = this._videoChoiceMemory.get(period);
      let newBaseAdaptation;
      if (prevVideoAdaptation === null) {
        newBaseAdaptation = null;
      } else if (prevVideoAdaptation !== void 0 && arrayIncludes(videoAdaptations, prevVideoAdaptation.baseAdaptation)) {
        newBaseAdaptation = prevVideoAdaptation.baseAdaptation;
      } else {
        const preferredVideoTracks = this._preferredVideoTracks;
        newBaseAdaptation = findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks);
      }
      if (newBaseAdaptation === null) {
        this._videoChoiceMemory.set(period, null);
        videoInfos.adaptation$.next(null);
        return;
      }
      const newVideoAdaptation = getRightVideoTrack(newBaseAdaptation, this.trickModeTrackEnabled);
      this._videoChoiceMemory.set(period, {
        baseAdaptation: newBaseAdaptation,
        adaptation: newVideoAdaptation
      });
      videoInfos.adaptation$.next(newVideoAdaptation);
    }
    setAudioTrackByID(period, wantedId) {
      const periodItem = getPeriodItem(this._periods, period);
      const audioInfos = periodItem !== void 0 ? periodItem.audio : null;
      if (isNullOrUndefined(audioInfos)) {
        throw new Error("TrackChoiceManager: Given Period not found.");
      }
      const wantedAdaptation = arrayFind(audioInfos.adaptations, ({ id }) => id === wantedId);
      if (wantedAdaptation === void 0) {
        throw new Error("Audio Track not found.");
      }
      const chosenAudioAdaptation = this._audioChoiceMemory.get(period);
      if (chosenAudioAdaptation === wantedAdaptation) {
        return;
      }
      this._audioChoiceMemory.set(period, wantedAdaptation);
      audioInfos.adaptation$.next(wantedAdaptation);
    }
    setTextTrackByID(period, wantedId) {
      const periodItem = getPeriodItem(this._periods, period);
      const textInfos = periodItem !== void 0 ? periodItem.text : null;
      if (isNullOrUndefined(textInfos)) {
        throw new Error("TrackChoiceManager: Given Period not found.");
      }
      const wantedAdaptation = arrayFind(textInfos.adaptations, ({ id }) => id === wantedId);
      if (wantedAdaptation === void 0) {
        throw new Error("Text Track not found.");
      }
      const chosenTextAdaptation = this._textChoiceMemory.get(period);
      if (chosenTextAdaptation === wantedAdaptation) {
        return;
      }
      this._textChoiceMemory.set(period, wantedAdaptation);
      textInfos.adaptation$.next(wantedAdaptation);
    }
    setVideoTrackByID(period, wantedId) {
      const periodItem = getPeriodItem(this._periods, period);
      const videoInfos = periodItem !== void 0 ? periodItem.video : null;
      if (isNullOrUndefined(videoInfos)) {
        throw new Error("LanguageManager: Given Period not found.");
      }
      const wantedBaseAdaptation = arrayFind(videoInfos.adaptations, ({ id }) => id === wantedId);
      if (wantedBaseAdaptation === void 0) {
        throw new Error("Video Track not found.");
      }
      const newVideoAdaptation = getRightVideoTrack(wantedBaseAdaptation, this.trickModeTrackEnabled);
      this._videoChoiceMemory.set(period, {
        baseAdaptation: wantedBaseAdaptation,
        adaptation: newVideoAdaptation
      });
      videoInfos.adaptation$.next(newVideoAdaptation);
    }
    disableTextTrack(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const textInfos = periodItem !== void 0 ? periodItem.text : null;
      if (isNullOrUndefined(textInfos)) {
        throw new Error("TrackChoiceManager: Given Period not found.");
      }
      const chosenTextAdaptation = this._textChoiceMemory.get(period);
      if (chosenTextAdaptation === null) {
        return;
      }
      this._textChoiceMemory.set(period, null);
      textInfos.adaptation$.next(null);
    }
    disableVideoTrack(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const videoInfos = periodItem == null ? void 0 : periodItem.video;
      if (videoInfos === void 0) {
        throw new Error("TrackManager: Given Period not found.");
      }
      const chosenVideoAdaptation = this._videoChoiceMemory.get(period);
      if (chosenVideoAdaptation === null) {
        return;
      }
      this._videoChoiceMemory.set(period, null);
      videoInfos.adaptation$.next(null);
    }
    disableVideoTrickModeTracks() {
      this.trickModeTrackEnabled = false;
      this._resetChosenVideoTracks();
    }
    enableVideoTrickModeTracks() {
      this.trickModeTrackEnabled = true;
      this._resetChosenVideoTracks();
    }
    isTrickModeEnabled() {
      return this.trickModeTrackEnabled;
    }
    getChosenAudioTrack(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const audioInfos = periodItem !== void 0 ? periodItem.audio : null;
      if (isNullOrUndefined(audioInfos)) {
        return null;
      }
      const chosenTrack = this._audioChoiceMemory.get(period);
      if (isNullOrUndefined(chosenTrack)) {
        return null;
      }
      const audioTrack = {
        language: takeFirstSet(chosenTrack.language, ""),
        normalized: takeFirstSet(chosenTrack.normalizedLanguage, ""),
        audioDescription: chosenTrack.isAudioDescription === true,
        id: chosenTrack.id,
        representations: chosenTrack.representations.map(parseAudioRepresentation)
      };
      if (chosenTrack.isDub === true) {
        audioTrack.dub = true;
      }
      return audioTrack;
    }
    getChosenTextTrack(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const textInfos = periodItem !== void 0 ? periodItem.text : null;
      if (isNullOrUndefined(textInfos)) {
        return null;
      }
      const chosenTextAdaptation = this._textChoiceMemory.get(period);
      if (isNullOrUndefined(chosenTextAdaptation)) {
        return null;
      }
      return {
        language: takeFirstSet(chosenTextAdaptation.language, ""),
        normalized: takeFirstSet(chosenTextAdaptation.normalizedLanguage, ""),
        closedCaption: chosenTextAdaptation.isClosedCaption === true,
        id: chosenTextAdaptation.id
      };
    }
    getChosenVideoTrack(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const videoInfos = periodItem !== void 0 ? periodItem.video : null;
      if (isNullOrUndefined(videoInfos)) {
        return null;
      }
      const chosenVideoAdaptation = this._videoChoiceMemory.get(period);
      if (isNullOrUndefined(chosenVideoAdaptation)) {
        return null;
      }
      const currAdaptation = chosenVideoAdaptation.adaptation;
      const trickModeTracks = currAdaptation.trickModeTracks !== void 0 ? currAdaptation.trickModeTracks.map((trickModeAdaptation) => {
        const representations = trickModeAdaptation.representations.map(parseVideoRepresentation);
        const trickMode = {
          id: trickModeAdaptation.id,
          representations,
          isTrickModeTrack: true
        };
        if (trickModeAdaptation.isSignInterpreted === true) {
          trickMode.signInterpreted = true;
        }
        return trickMode;
      }) : void 0;
      const videoTrack = {
        id: currAdaptation.id,
        representations: currAdaptation.representations.map(parseVideoRepresentation)
      };
      if (currAdaptation.isSignInterpreted === true) {
        videoTrack.signInterpreted = true;
      }
      if (currAdaptation.isTrickModeTrack === true) {
        videoTrack.isTrickModeTrack = true;
      }
      if (trickModeTracks !== void 0) {
        videoTrack.trickModeTracks = trickModeTracks;
      }
      return videoTrack;
    }
    getAvailableAudioTracks(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const audioInfos = periodItem !== void 0 ? periodItem.audio : null;
      if (isNullOrUndefined(audioInfos)) {
        return [];
      }
      const chosenAudioAdaptation = this._audioChoiceMemory.get(period);
      const currentId = !isNullOrUndefined(chosenAudioAdaptation) ? chosenAudioAdaptation.id : null;
      return audioInfos.adaptations.map((adaptation) => {
        const formatted = {
          language: takeFirstSet(adaptation.language, ""),
          normalized: takeFirstSet(adaptation.normalizedLanguage, ""),
          audioDescription: adaptation.isAudioDescription === true,
          id: adaptation.id,
          active: currentId === null ? false : currentId === adaptation.id,
          representations: adaptation.representations.map(parseAudioRepresentation)
        };
        if (adaptation.isDub === true) {
          formatted.dub = true;
        }
        return formatted;
      });
    }
    getAvailableTextTracks(period) {
      const periodItem = getPeriodItem(this._periods, period);
      const textInfos = periodItem !== void 0 ? periodItem.text : null;
      if (isNullOrUndefined(textInfos)) {
        return [];
      }
      const chosenTextAdaptation = this._textChoiceMemory.get(period);
      const currentId = !isNullOrUndefined(chosenTextAdaptation) ? chosenTextAdaptation.id : null;
      return textInfos.adaptations.map((adaptation) => ({
        language: takeFirstSet(adaptation.language, ""),
        normalized: takeFirstSet(adaptation.normalizedLanguage, ""),
        closedCaption: adaptation.isClosedCaption === true,
        id: adaptation.id,
        active: currentId === null ? false : currentId === adaptation.id
      }));
    }
    getAvailableVideoTracks(period) {
      var _a2;
      const periodItem = getPeriodItem(this._periods, period);
      const videoInfos = periodItem !== void 0 ? periodItem.video : null;
      if (isNullOrUndefined(videoInfos)) {
        return [];
      }
      const chosenVideoAdaptation = this._videoChoiceMemory.get(period);
      const currentId = chosenVideoAdaptation === void 0 ? void 0 : (_a2 = chosenVideoAdaptation == null ? void 0 : chosenVideoAdaptation.adaptation.id) != null ? _a2 : void 0;
      return videoInfos.adaptations.map((adaptation) => {
        const trickModeTracks = adaptation.trickModeTracks !== void 0 ? adaptation.trickModeTracks.map((trickModeAdaptation) => {
          const isActive = currentId === null ? false : currentId === trickModeAdaptation.id;
          const representations = trickModeAdaptation.representations.map(parseVideoRepresentation);
          const trickMode = {
            id: trickModeAdaptation.id,
            representations,
            isTrickModeTrack: true,
            active: isActive
          };
          if (trickModeAdaptation.isSignInterpreted === true) {
            trickMode.signInterpreted = true;
          }
          return trickMode;
        }) : void 0;
        const formatted = {
          id: adaptation.id,
          active: currentId === null ? false : currentId === adaptation.id,
          representations: adaptation.representations.map(parseVideoRepresentation)
        };
        if (adaptation.isSignInterpreted === true) {
          formatted.signInterpreted = true;
        }
        if (trickModeTracks !== void 0) {
          formatted.trickModeTracks = trickModeTracks;
        }
        return formatted;
      });
    }
    _applyAudioPreferences() {
      this._audioChoiceMemory = /* @__PURE__ */ new WeakMap();
      this._resetChosenAudioTracks();
    }
    _applyTextPreferences() {
      this._textChoiceMemory = /* @__PURE__ */ new WeakMap();
      this._resetChosenTextTracks();
    }
    _applyVideoPreferences() {
      this._videoChoiceMemory = /* @__PURE__ */ new WeakMap();
      this._resetChosenVideoTracks();
    }
    _resetChosenAudioTracks() {
      const preferredAudioTracks = this._preferredAudioTracks;
      const normalizedPref = normalizeAudioTracks(preferredAudioTracks);
      const recursiveUpdateAudioTrack = (index) => {
        if (index >= this._periods.length()) {
          return;
        }
        const periodItem = this._periods.get(index);
        if (isNullOrUndefined(periodItem.audio)) {
          recursiveUpdateAudioTrack(index + 1);
          return;
        }
        const {
          period,
          audio: audioItem
        } = periodItem;
        const audioAdaptations = period.getSupportedAdaptations("audio");
        const chosenAudioAdaptation = this._audioChoiceMemory.get(period);
        if (chosenAudioAdaptation === null || chosenAudioAdaptation !== void 0 && arrayIncludes(audioAdaptations, chosenAudioAdaptation)) {
          recursiveUpdateAudioTrack(index + 1);
          return;
        }
        const optimalAdaptation = findFirstOptimalAudioAdaptation(audioAdaptations, normalizedPref);
        this._audioChoiceMemory.set(period, optimalAdaptation);
        audioItem.adaptation$.next(optimalAdaptation);
        recursiveUpdateAudioTrack(0);
      };
      recursiveUpdateAudioTrack(0);
    }
    _resetChosenTextTracks() {
      const preferredTextTracks = this._preferredTextTracks;
      const normalizedPref = normalizeTextTracks(preferredTextTracks);
      const recursiveUpdateTextTrack = (index) => {
        if (index >= this._periods.length()) {
          return;
        }
        const periodItem = this._periods.get(index);
        if (isNullOrUndefined(periodItem.text)) {
          recursiveUpdateTextTrack(index + 1);
          return;
        }
        const {
          period,
          text: textItem
        } = periodItem;
        const textAdaptations = period.getSupportedAdaptations("text");
        const chosenTextAdaptation = this._textChoiceMemory.get(period);
        if (chosenTextAdaptation === null || chosenTextAdaptation !== void 0 && arrayIncludes(textAdaptations, chosenTextAdaptation)) {
          recursiveUpdateTextTrack(index + 1);
          return;
        }
        const optimalAdaptation = findFirstOptimalTextAdaptation(textAdaptations, normalizedPref);
        this._textChoiceMemory.set(period, optimalAdaptation);
        textItem.adaptation$.next(optimalAdaptation);
        recursiveUpdateTextTrack(0);
      };
      recursiveUpdateTextTrack(0);
    }
    _resetChosenVideoTracks() {
      const preferredVideoTracks = this._preferredVideoTracks;
      const recursiveUpdateVideoTrack = (index) => {
        if (index >= this._periods.length()) {
          return;
        }
        const periodItem = this._periods.get(index);
        if (isNullOrUndefined(periodItem.video)) {
          recursiveUpdateVideoTrack(index + 1);
          return;
        }
        const { period, video: videoItem } = periodItem;
        const videoAdaptations = period.getSupportedAdaptations("video");
        const chosenVideoAdaptation = this._videoChoiceMemory.get(period);
        if (chosenVideoAdaptation === null) {
          recursiveUpdateVideoTrack(index + 1);
          return;
        } else if (chosenVideoAdaptation !== void 0 && arrayIncludes(videoAdaptations, chosenVideoAdaptation.baseAdaptation)) {
          const wantedVideoAdaptation = getRightVideoTrack(chosenVideoAdaptation.baseAdaptation, this.trickModeTrackEnabled);
          if (wantedVideoAdaptation.id === chosenVideoAdaptation.adaptation.id) {
            recursiveUpdateVideoTrack(index + 1);
            return;
          } else {
            this._videoChoiceMemory.set(period, {
              baseAdaptation: chosenVideoAdaptation.baseAdaptation,
              adaptation: wantedVideoAdaptation
            });
            videoItem.adaptation$.next(wantedVideoAdaptation);
            return recursiveUpdateVideoTrack(0);
          }
        }
        const optimalAdaptation = findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks);
        if (optimalAdaptation === null) {
          this._videoChoiceMemory.set(period, null);
          videoItem.adaptation$.next(null);
          return recursiveUpdateVideoTrack(0);
        }
        const newVideoAdaptation = getRightVideoTrack(optimalAdaptation, this.trickModeTrackEnabled);
        this._videoChoiceMemory.set(period, {
          baseAdaptation: optimalAdaptation,
          adaptation: newVideoAdaptation
        });
        videoItem.adaptation$.next(newVideoAdaptation);
        return recursiveUpdateVideoTrack(0);
      };
      recursiveUpdateVideoTrack(0);
    }
  };
  function createAudioPreferenceMatcher(preferredAudioTrack) {
    return function matchAudioPreference(audioAdaptation) {
      var _a2;
      if (preferredAudioTrack.normalized !== void 0) {
        const language = (_a2 = audioAdaptation.normalizedLanguage) != null ? _a2 : "";
        if (language !== preferredAudioTrack.normalized) {
          return false;
        }
      }
      if (preferredAudioTrack.audioDescription !== void 0) {
        if (preferredAudioTrack.audioDescription) {
          if (audioAdaptation.isAudioDescription !== true) {
            return false;
          }
        } else if (audioAdaptation.isAudioDescription === true) {
          return false;
        }
      }
      if (preferredAudioTrack.codec === void 0) {
        return true;
      }
      const regxp = preferredAudioTrack.codec.test;
      const codecTestingFn = (rep) => rep.codec !== void 0 && regxp.test(rep.codec);
      if (preferredAudioTrack.codec.all) {
        return audioAdaptation.representations.every(codecTestingFn);
      }
      return audioAdaptation.representations.some(codecTestingFn);
    };
  }
  function findFirstOptimalAudioAdaptation(audioAdaptations, preferredAudioTracks) {
    if (audioAdaptations.length === 0) {
      return null;
    }
    for (let i = 0; i < preferredAudioTracks.length; i++) {
      const preferredAudioTrack = preferredAudioTracks[i];
      if (preferredAudioTrack === null) {
        return null;
      }
      const matchPreferredAudio = createAudioPreferenceMatcher(preferredAudioTrack);
      const foundAdaptation = arrayFind(audioAdaptations, matchPreferredAudio);
      if (foundAdaptation !== void 0) {
        return foundAdaptation;
      }
    }
    return audioAdaptations[0];
  }
  function createTextPreferenceMatcher(preferredTextTrack) {
    return function matchTextPreference(textAdaptation) {
      return takeFirstSet(textAdaptation.normalizedLanguage, "") === preferredTextTrack.normalized && (preferredTextTrack.closedCaption ? textAdaptation.isClosedCaption === true : textAdaptation.isClosedCaption !== true);
    };
  }
  function findFirstOptimalTextAdaptation(textAdaptations, preferredTextTracks) {
    if (textAdaptations.length === 0) {
      return null;
    }
    for (let i = 0; i < preferredTextTracks.length; i++) {
      const preferredTextTrack = preferredTextTracks[i];
      if (preferredTextTrack === null) {
        return null;
      }
      const matchPreferredText = createTextPreferenceMatcher(preferredTextTrack);
      const foundAdaptation = arrayFind(textAdaptations, matchPreferredText);
      if (foundAdaptation !== void 0) {
        return foundAdaptation;
      }
    }
    return null;
  }
  function createVideoPreferenceMatcher(preferredVideoTrack) {
    return function matchVideoPreference(videoAdaptation) {
      if (preferredVideoTrack.signInterpreted !== void 0 && preferredVideoTrack.signInterpreted !== videoAdaptation.isSignInterpreted) {
        return false;
      }
      if (preferredVideoTrack.codec === void 0) {
        return true;
      }
      const regxp = preferredVideoTrack.codec.test;
      const codecTestingFn = (rep) => rep.codec !== void 0 && regxp.test(rep.codec);
      if (preferredVideoTrack.codec.all) {
        return videoAdaptation.representations.every(codecTestingFn);
      }
      return videoAdaptation.representations.some(codecTestingFn);
    };
  }
  function findFirstOptimalVideoAdaptation(videoAdaptations, preferredVideoTracks) {
    if (videoAdaptations.length === 0) {
      return null;
    }
    for (let i = 0; i < preferredVideoTracks.length; i++) {
      const preferredVideoTrack = preferredVideoTracks[i];
      if (preferredVideoTrack === null) {
        return null;
      }
      const matchPreferredVideo = createVideoPreferenceMatcher(preferredVideoTrack);
      const foundAdaptation = arrayFind(videoAdaptations, matchPreferredVideo);
      if (foundAdaptation !== void 0) {
        return foundAdaptation;
      }
    }
    return videoAdaptations[0];
  }
  function findPeriodIndex(periods, period) {
    for (let i = 0; i < periods.length(); i++) {
      const periodI = periods.get(i);
      if (periodI.period.id === period.id) {
        return i;
      }
    }
  }
  function getPeriodItem(periods, period) {
    for (let i = 0; i < periods.length(); i++) {
      const periodI = periods.get(i);
      if (periodI.period.id === period.id) {
        return periodI;
      }
    }
  }
  function parseVideoRepresentation({ id, bitrate, frameRate, width, height, codec, hdrInfo }) {
    return { id, bitrate, frameRate, width, height, codec, hdrInfo };
  }
  function parseAudioRepresentation({ id, bitrate, codec }) {
    return { id, bitrate, codec };
  }
  function getRightVideoTrack(adaptation, isTrickModeEnabled) {
    var _a2;
    if (isTrickModeEnabled && ((_a2 = adaptation.trickModeTracks) == null ? void 0 : _a2[0]) !== void 0) {
      return adaptation.trickModeTracks[0];
    }
    return adaptation;
  }

  // src/core/api/public_api.ts
  var {
    isPageActive: isPageActive2,
    isVideoVisible: isVideoVisible2,
    onEnded$: onEnded$2,
    onFullscreenChange$: onFullscreenChange$2,
    onPlayPause$: onPlayPause$2,
    onPictureInPictureEvent$: onPictureInPictureEvent$2,
    onSeeking$: onSeeking$2,
    onTextTrackChanges$: onTextTrackChanges$2,
    videoWidth$: videoWidth$2
  } = event_listeners_exports;
  var Player = class extends EventEmitter {
    static get ErrorTypes() {
      return ErrorTypes;
    }
    static get ErrorCodes() {
      return ErrorCodes;
    }
    static get LogLevel() {
      return log_default.getLevel();
    }
    static set LogLevel(logLevel) {
      log_default.setLevel(logLevel);
    }
    constructor(options = {}) {
      super();
      const {
        initialAudioBitrate,
        initialVideoBitrate,
        limitVideoWidth,
        minAudioBitrate,
        minVideoBitrate,
        maxAudioBitrate,
        maxBufferAhead,
        maxBufferBehind,
        maxVideoBitrate,
        preferredAudioTracks,
        preferredTextTracks,
        preferredVideoTracks,
        throttleWhenHidden,
        throttleVideoBitrateWhenHidden,
        videoElement,
        wantedBufferAhead,
        maxVideoBufferSize,
        stopAtEnd
      } = parseConstructorOptions(options);
      const { DEFAULT_UNMUTED_VOLUME } = config_default.getCurrent();
      videoElement.preload = "auto";
      this.version = "3.27.0";
      this.log = log_default;
      this.state = "STOPPED";
      this.videoElement = videoElement;
      this._priv_destroy$ = new Subject();
      this._priv_pictureInPictureEvent$ = new ReplaySubject(1);
      onPictureInPictureEvent$2(videoElement).pipe(takeUntil(this._priv_destroy$)).subscribe(this._priv_pictureInPictureEvent$);
      onFullscreenChange$2(videoElement).pipe(takeUntil(this._priv_destroy$)).subscribe(() => this.trigger("fullscreenChange", this.isFullscreen()));
      onTextTrackChanges$2(videoElement.textTracks).pipe(takeUntil(this._priv_destroy$), map((evt) => {
        const target = evt.target;
        const arr = [];
        for (let i = 0; i < target.length; i++) {
          const textTrack = target[i];
          arr.push(textTrack);
        }
        return arr;
      }), distinctUntilChanged((textTracksA, textTracksB) => {
        if (textTracksA.length !== textTracksB.length) {
          return false;
        }
        for (let i = 0; i < textTracksA.length; i++) {
          if (textTracksA[i] !== textTracksB[i]) {
            return false;
          }
        }
        return true;
      })).subscribe((x) => this._priv_onNativeTextTracksNext(x));
      this._priv_isPlaying = reference_default(false);
      this._priv_speed = reference_default(videoElement.playbackRate);
      this._priv_preferTrickModeTracks = false;
      this._priv_contentLock = reference_default(false);
      this._priv_bufferOptions = {
        wantedBufferAhead: reference_default(wantedBufferAhead),
        maxBufferAhead: reference_default(maxBufferAhead),
        maxBufferBehind: reference_default(maxBufferBehind),
        maxVideoBufferSize: reference_default(maxVideoBufferSize)
      };
      this._priv_bitrateInfos = {
        lastBitrates: {
          audio: initialAudioBitrate,
          video: initialVideoBitrate
        },
        minAutoBitrates: {
          audio: reference_default(minAudioBitrate),
          video: reference_default(minVideoBitrate)
        },
        maxAutoBitrates: {
          audio: reference_default(maxAudioBitrate),
          video: reference_default(maxVideoBitrate)
        },
        manualBitrates: {
          audio: reference_default(-1),
          video: reference_default(-1)
        }
      };
      this._priv_throttleWhenHidden = throttleWhenHidden;
      this._priv_throttleVideoBitrateWhenHidden = throttleVideoBitrateWhenHidden;
      this._priv_limitVideoWidth = limitVideoWidth;
      this._priv_mutedMemory = DEFAULT_UNMUTED_VOLUME;
      this._priv_trackChoiceManager = null;
      this._priv_mediaElementTrackChoiceManager = null;
      this._priv_currentError = null;
      this._priv_contentInfos = null;
      this._priv_contentEventsMemory = {};
      this._priv_stopAtEnd = stopAtEnd;
      this._priv_setPlayerState(PLAYER_STATES.STOPPED);
      this._priv_preferredAudioTracks = preferredAudioTracks;
      this._priv_preferredTextTracks = preferredTextTracks;
      this._priv_preferredVideoTracks = preferredVideoTracks;
      this._priv_lastContentPlaybackInfos = {};
    }
    stop() {
      if (this._priv_contentInfos !== null) {
        this._priv_contentInfos.stop$.next();
        this._priv_contentInfos.stop$.complete();
      }
      this._priv_cleanUpCurrentContentState();
      if (this.state !== PLAYER_STATES.STOPPED) {
        this._priv_setPlayerState(PLAYER_STATES.STOPPED);
      }
    }
    dispose() {
      this.stop();
      if (this.videoElement !== null) {
        disposeDecryptionResources(this.videoElement).catch((err) => {
          const message = err instanceof Error ? err.message : "Unknown error";
          log_default.error("API: Could not dispose decryption resources: " + message);
        });
      }
      this._priv_destroy$.next();
      this._priv_destroy$.complete();
      this._priv_pictureInPictureEvent$.complete();
      this._priv_isPlaying.finish();
      this._priv_speed.finish();
      this._priv_contentLock.finish();
      this._priv_bufferOptions.wantedBufferAhead.finish();
      this._priv_bufferOptions.maxVideoBufferSize.finish();
      this._priv_bufferOptions.maxBufferAhead.finish();
      this._priv_bufferOptions.maxBufferBehind.finish();
      this._priv_bitrateInfos.manualBitrates.video.finish();
      this._priv_bitrateInfos.manualBitrates.audio.finish();
      this._priv_bitrateInfos.minAutoBitrates.video.finish();
      this._priv_bitrateInfos.minAutoBitrates.audio.finish();
      this._priv_bitrateInfos.maxAutoBitrates.video.finish();
      this._priv_bitrateInfos.maxAutoBitrates.audio.finish();
      this._priv_lastContentPlaybackInfos = {};
      this.videoElement = null;
    }
    loadVideo(opts) {
      const options = parseLoadVideoOptions(opts);
      log_default.info("API: Calling loadvideo", options);
      this._priv_lastContentPlaybackInfos = { options };
      this._priv_initializeContentPlayback(options);
    }
    reload(reloadOpts) {
      const {
        options,
        manifest,
        lastPlaybackPosition
      } = this._priv_lastContentPlaybackInfos;
      if (options === void 0 || manifest === void 0 || lastPlaybackPosition === void 0) {
        throw new Error("API: Can't reload without having previously loaded a content.");
      }
      checkReloadOptions(reloadOpts);
      let startAtPositon;
      if (reloadOpts !== void 0 && reloadOpts.reloadAt !== void 0 && reloadOpts.reloadAt.position !== void 0) {
        startAtPositon = reloadOpts.reloadAt.position;
      } else {
        let playbackPosition;
        if (this.state === "STOPPED" || this.state === "ENDED") {
          playbackPosition = lastPlaybackPosition;
        } else {
          if (this.videoElement === null) {
            throw new Error("Can't reload when video element does not exist.");
          }
          playbackPosition = this.videoElement.currentTime;
        }
        if (reloadOpts !== void 0 && reloadOpts.reloadAt !== void 0 && reloadOpts.reloadAt.relative !== void 0) {
          startAtPositon = reloadOpts.reloadAt.relative + playbackPosition;
        } else {
          startAtPositon = playbackPosition;
        }
      }
      const newOptions = __spreadProps(__spreadValues({}, options), {
        initialManifest: manifest
      });
      newOptions.startAt = { position: startAtPositon };
      this._priv_initializeContentPlayback(newOptions);
    }
    _priv_initializeContentPlayback(options) {
      var _a2, _b2, _c;
      const {
        autoPlay: autoPlay2,
        audioTrackSwitchingMode,
        defaultAudioTrack,
        defaultTextTrack,
        enableFastSwitching,
        initialManifest,
        keySystems,
        lowLatencyMode,
        manualBitrateSwitchingMode,
        minimumManifestUpdateInterval,
        networkConfig,
        onCodecSwitch,
        startAt,
        transport,
        transportOptions,
        url
      } = options;
      if (this.videoElement === null) {
        throw new Error("the attached video element is disposed");
      }
      const isDirectFile = transport === "directfile";
      const stopContent$ = new Subject();
      const contentInfos = {
        url,
        stop$: stopContent$,
        isDirectFile,
        segmentBuffersStore: null,
        thumbnails: null,
        manifest: null,
        currentPeriod: null,
        activeAdaptations: null,
        activeRepresentations: null,
        initialAudioTrack: defaultAudioTrack,
        initialTextTrack: defaultTextTrack
      };
      const videoElement = this.videoElement;
      const playbackObserver = new PlaybackObserver(videoElement, {
        withMediaSource: !isDirectFile,
        lowLatencyMode
      });
      let playback$;
      if (!isDirectFile) {
        const transportFn = features_default.transports[transport];
        if (typeof transportFn !== "function") {
          this.stop();
          this._priv_currentError = null;
          this._priv_isPlaying.setValue(false);
          throw new Error(`transport "${transport}" not supported`);
        }
        const transportPipelines = transportFn(transportOptions);
        const { offlineRetry, segmentRetry, manifestRetry } = networkConfig;
        const manifestFetcher = new manifest_default2(url, transportPipelines, {
          lowLatencyMode,
          maxRetryRegular: manifestRetry,
          maxRetryOffline: offlineRetry
        });
        const segmentFetcherCreator = new segment_default(transportPipelines, {
          lowLatencyMode,
          maxRetryOffline: offlineRetry,
          maxRetryRegular: segmentRetry
        });
        let manifest$;
        if (initialManifest instanceof manifest_default) {
          manifest$ = of({
            type: "parsed",
            manifest: initialManifest
          });
        } else if (initialManifest !== void 0) {
          manifest$ = manifestFetcher.parse(initialManifest, {
            previousManifest: null,
            unsafeMode: false
          });
        } else {
          manifest$ = manifestFetcher.fetch(url).pipe(mergeMap((response) => response.type === "warning" ? of(response) : response.parse({ previousManifest: null, unsafeMode: false })));
        }
        manifest$ = manifest$.pipe(takeUntil(stopContent$), shareReplay());
        manifest$.subscribe();
        this.stop();
        this._priv_currentError = null;
        this._priv_isPlaying.setValue(false);
        this._priv_contentInfos = contentInfos;
        const relyOnVideoVisibilityAndSize = canRelyOnVideoVisibilityAndSize();
        const throttlers = {
          throttle: {},
          throttleBitrate: {},
          limitWidth: {}
        };
        if (this._priv_throttleWhenHidden) {
          if (!relyOnVideoVisibilityAndSize) {
            log_default.warn("API: Can't apply throttleWhenHidden because browser can't be trusted for visibility.");
          } else {
            throttlers.throttle = {
              video: isPageActive2().pipe(map((active) => active ? Infinity : 0), takeUntil(stopContent$))
            };
          }
        }
        if (this._priv_throttleVideoBitrateWhenHidden) {
          if (!relyOnVideoVisibilityAndSize) {
            log_default.warn("API: Can't apply throttleVideoBitrateWhenHidden because browser can't be trusted for visibility.");
          } else {
            throttlers.throttleBitrate = {
              video: isVideoVisible2(this._priv_pictureInPictureEvent$).pipe(map((active) => active ? Infinity : 0), takeUntil(stopContent$))
            };
          }
        }
        if (this._priv_limitVideoWidth) {
          if (!relyOnVideoVisibilityAndSize) {
            log_default.warn("API: Can't apply limitVideoWidth because browser can't be trusted for video size.");
          } else {
            throttlers.limitWidth = {
              video: videoWidth$2(videoElement, this._priv_pictureInPictureEvent$).pipe(takeUntil(stopContent$))
            };
          }
        }
        const adaptiveOptions = {
          initialBitrates: this._priv_bitrateInfos.lastBitrates,
          lowLatencyMode,
          manualBitrates: this._priv_bitrateInfos.manualBitrates,
          minAutoBitrates: this._priv_bitrateInfos.minAutoBitrates,
          maxAutoBitrates: this._priv_bitrateInfos.maxAutoBitrates,
          throttlers
        };
        const textTrackOptions = options.textTrackMode === "native" ? {
          textTrackMode: "native",
          hideNativeSubtitle: options.hideNativeSubtitle
        } : {
          textTrackMode: "html",
          textTrackElement: options.textTrackElement
        };
        const bufferOptions = object_assign_default({
          audioTrackSwitchingMode,
          enableFastSwitching,
          manualBitrateSwitchingMode,
          onCodecSwitch
        }, this._priv_bufferOptions);
        const init$ = init_default({
          adaptiveOptions,
          autoPlay: autoPlay2,
          bufferOptions,
          playbackObserver,
          keySystems,
          lowLatencyMode,
          manifest$,
          manifestFetcher,
          mediaElement: videoElement,
          minimumManifestUpdateInterval,
          segmentFetcherCreator,
          speed: this._priv_speed,
          startAt,
          textTrackOptions
        }).pipe(takeUntil(stopContent$));
        playback$ = connectable(init$, {
          connector: () => new Subject(),
          resetOnDisconnect: false
        });
      } else {
        this.stop();
        this._priv_currentError = null;
        this._priv_isPlaying.setValue(false);
        if (features_default.directfile === null) {
          throw new Error("DirectFile feature not activated in your build.");
        }
        this._priv_contentInfos = contentInfos;
        this._priv_mediaElementTrackChoiceManager = new features_default.directfile.mediaElementTrackChoiceManager(this.videoElement);
        const preferredAudioTracks = defaultAudioTrack === void 0 ? this._priv_preferredAudioTracks : [defaultAudioTrack];
        this._priv_mediaElementTrackChoiceManager.setPreferredAudioTracks(preferredAudioTracks, true);
        const preferredTextTracks = defaultTextTrack === void 0 ? this._priv_preferredTextTracks : [defaultTextTrack];
        this._priv_mediaElementTrackChoiceManager.setPreferredTextTracks(preferredTextTracks, true);
        this._priv_mediaElementTrackChoiceManager.setPreferredVideoTracks(this._priv_preferredVideoTracks, true);
        this.trigger("availableAudioTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableAudioTracks());
        this.trigger("availableVideoTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableVideoTracks());
        this.trigger("availableTextTracksChange", this._priv_mediaElementTrackChoiceManager.getAvailableTextTracks());
        this.trigger("audioTrackChange", (_a2 = this._priv_mediaElementTrackChoiceManager.getChosenAudioTrack()) != null ? _a2 : null);
        this.trigger("textTrackChange", (_b2 = this._priv_mediaElementTrackChoiceManager.getChosenTextTrack()) != null ? _b2 : null);
        this.trigger("videoTrackChange", (_c = this._priv_mediaElementTrackChoiceManager.getChosenVideoTrack()) != null ? _c : null);
        this._priv_mediaElementTrackChoiceManager.addEventListener("availableVideoTracksChange", (val) => this.trigger("availableVideoTracksChange", val));
        this._priv_mediaElementTrackChoiceManager.addEventListener("availableAudioTracksChange", (val) => this.trigger("availableAudioTracksChange", val));
        this._priv_mediaElementTrackChoiceManager.addEventListener("availableTextTracksChange", (val) => this.trigger("availableTextTracksChange", val));
        this._priv_mediaElementTrackChoiceManager.addEventListener("audioTrackChange", (val) => this.trigger("audioTrackChange", val));
        this._priv_mediaElementTrackChoiceManager.addEventListener("videoTrackChange", (val) => this.trigger("videoTrackChange", val));
        this._priv_mediaElementTrackChoiceManager.addEventListener("textTrackChange", (val) => this.trigger("textTrackChange", val));
        const directfileInit$ = features_default.directfile.initDirectFile({
          autoPlay: autoPlay2,
          keySystems,
          mediaElement: videoElement,
          speed: this._priv_speed,
          playbackObserver,
          startAt,
          url
        }).pipe(takeUntil(stopContent$));
        playback$ = connectable(directfileInit$, {
          connector: () => new Subject(),
          resetOnDisconnect: false
        });
      }
      const stalled$ = playback$.pipe(filter((evt) => evt.type === "stalled" || evt.type === "unstalled"), map((x) => x.value), distinctUntilChanged((prevStallReason, currStallReason) => {
        return prevStallReason === null && currStallReason === null || prevStallReason !== null && currStallReason !== null && prevStallReason === currStallReason;
      }));
      const loaded$ = playback$.pipe(filter((evt) => evt.type === "loaded"), share());
      const reloading$ = playback$.pipe(filter((evt) => evt.type === "reloading-media-source"), share());
      const endedEvent$ = onEnded$2(videoElement);
      const seekingEvent$ = onSeeking$2(videoElement);
      const loadedStateUpdates$ = combineLatest([
        this._priv_isPlaying.asObservable(),
        stalled$.pipe(startWith(null)),
        endedEvent$.pipe(startWith(null)),
        seekingEvent$.pipe(startWith(null))
      ]).pipe(takeUntil(stopContent$), map(([isPlaying, stalledStatus]) => getLoadedContentState(videoElement, isPlaying, stalledStatus)));
      const playerState$ = concat(of(PLAYER_STATES.LOADING), loaded$.pipe(switchMap((_, i) => {
        const isFirstLoad = i === 0;
        return merge(reloading$.pipe(map(() => PLAYER_STATES.RELOADING)), isFirstLoad ? of(PLAYER_STATES.LOADED) : EMPTY, loadedStateUpdates$.pipe(takeUntil(reloading$), skipWhile((state) => isFirstLoad && state === PLAYER_STATES.PAUSED)));
      }))).pipe(distinctUntilChanged());
      let playbackSubscription;
      stopContent$.pipe(take(1)).subscribe(() => {
        if (playbackSubscription !== void 0) {
          playbackSubscription.unsubscribe();
        }
      });
      onPlayPause$2(videoElement).pipe(takeUntil(stopContent$)).subscribe((e) => this._priv_onPlayPauseNext(e.type === "play"));
      const observation$ = playbackObserver.observe(true);
      observation$.pipe(takeUntil(stopContent$)).subscribe((o) => this._priv_triggerPositionUpdate(o));
      loaded$.pipe(switchMap(() => emitSeekEvents(this.videoElement, observation$)), takeUntil(stopContent$)).subscribe((evt) => {
        log_default.info(`API: Triggering "${evt}" event`);
        this.trigger(evt, null);
      });
      playerState$.pipe(takeUntil(stopContent$)).subscribe((x) => this._priv_setPlayerState(x));
      (this._priv_stopAtEnd ? onEnded$2(videoElement) : EMPTY).pipe(takeUntil(stopContent$)).subscribe(() => {
        stopContent$.next();
        stopContent$.complete();
      });
      playback$.subscribe({
        next: (x) => this._priv_onPlaybackEvent(x),
        error: (err) => this._priv_onPlaybackError(err),
        complete: () => this._priv_onPlaybackFinished()
      });
      this._priv_contentLock.asObservable().pipe(filter((isLocked) => !isLocked), take(1), takeUntil(stopContent$)).subscribe(() => {
        playbackSubscription = playback$.connect();
      });
    }
    getError() {
      return this._priv_currentError;
    }
    getManifest() {
      warnOnce("getManifest is deprecated. Please open an issue if you used this API.");
      if (this._priv_contentInfos === null) {
        return null;
      }
      return this._priv_contentInfos.manifest;
    }
    getCurrentAdaptations() {
      warnOnce("getCurrentAdaptations is deprecated. Please open an issue if you used this API.");
      if (this._priv_contentInfos === null) {
        return null;
      }
      const { currentPeriod, activeAdaptations } = this._priv_contentInfos;
      if (currentPeriod === null || activeAdaptations === null || isNullOrUndefined(activeAdaptations[currentPeriod.id])) {
        return null;
      }
      return activeAdaptations[currentPeriod.id];
    }
    getCurrentRepresentations() {
      warnOnce("getCurrentRepresentations is deprecated. Please open an issue if you used this API.");
      return this._priv_getCurrentRepresentations();
    }
    getVideoElement() {
      return this.videoElement;
    }
    getNativeTextTrack() {
      warnOnce("getNativeTextTrack is deprecated. Please open an issue if you used this API.");
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      const videoElement = this.videoElement;
      const textTracks = videoElement.textTracks;
      if (textTracks.length > 0) {
        return videoElement.textTracks[0];
      } else {
        return null;
      }
    }
    getPlayerState() {
      return this.state;
    }
    isLive() {
      if (this._priv_contentInfos === null) {
        return false;
      }
      const { isDirectFile, manifest } = this._priv_contentInfos;
      if (isDirectFile || manifest === null) {
        return false;
      }
      return manifest.isLive;
    }
    areTrickModeTracksEnabled() {
      return this._priv_preferTrickModeTracks;
    }
    getUrl() {
      if (this._priv_contentInfos === null) {
        return void 0;
      }
      const { isDirectFile, manifest, url } = this._priv_contentInfos;
      if (isDirectFile) {
        return url;
      }
      if (manifest !== null) {
        return manifest.getUrl();
      }
      return void 0;
    }
    getVideoDuration() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      return this.videoElement.duration;
    }
    getVideoBufferGap() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      const videoElement = this.videoElement;
      return getLeftSizeOfRange(videoElement.buffered, videoElement.currentTime);
    }
    getVideoLoadedTime() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      const videoElement = this.videoElement;
      return getSizeOfRange(videoElement.buffered, videoElement.currentTime);
    }
    getVideoPlayedTime() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      const videoElement = this.videoElement;
      return getPlayedSizeOfRange(videoElement.buffered, videoElement.currentTime);
    }
    getWallClockTime() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      if (this._priv_contentInfos === null) {
        return this.videoElement.currentTime;
      }
      const { isDirectFile, manifest } = this._priv_contentInfos;
      if (isDirectFile) {
        const startDate = getStartDate(this.videoElement);
        return (startDate != null ? startDate : 0) + this.videoElement.currentTime;
      }
      if (manifest !== null) {
        const currentTime = this.videoElement.currentTime;
        const ast = manifest.availabilityStartTime !== void 0 ? manifest.availabilityStartTime : 0;
        return currentTime + ast;
      }
      return 0;
    }
    getPosition() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      return this.videoElement.currentTime;
    }
    getPlaybackRate() {
      return this._priv_speed.getValue();
    }
    setPlaybackRate(rate, opts) {
      if (rate !== this._priv_speed.getValue()) {
        this._priv_speed.setValue(rate);
      }
      const preferTrickModeTracks = opts == null ? void 0 : opts.preferTrickModeTracks;
      if (typeof preferTrickModeTracks !== "boolean") {
        return;
      }
      this._priv_preferTrickModeTracks = preferTrickModeTracks;
      if (this._priv_trackChoiceManager !== null) {
        if (preferTrickModeTracks && !this._priv_trackChoiceManager.isTrickModeEnabled()) {
          this._priv_trackChoiceManager.enableVideoTrickModeTracks();
        } else if (!preferTrickModeTracks && this._priv_trackChoiceManager.isTrickModeEnabled()) {
          this._priv_trackChoiceManager.disableVideoTrickModeTracks();
        }
      }
    }
    getAvailableVideoBitrates() {
      if (this._priv_contentInfos === null) {
        return [];
      }
      const { currentPeriod, activeAdaptations } = this._priv_contentInfos;
      if (currentPeriod === null || activeAdaptations === null) {
        return [];
      }
      const adaptations = activeAdaptations[currentPeriod.id];
      if (adaptations === void 0 || isNullOrUndefined(adaptations.video)) {
        return [];
      }
      return adaptations.video.getAvailableBitrates();
    }
    getAvailableAudioBitrates() {
      if (this._priv_contentInfos === null) {
        return [];
      }
      const { currentPeriod, activeAdaptations } = this._priv_contentInfos;
      if (currentPeriod === null || activeAdaptations === null) {
        return [];
      }
      const adaptations = activeAdaptations[currentPeriod.id];
      if (adaptations === void 0 || isNullOrUndefined(adaptations.audio)) {
        return [];
      }
      return adaptations.audio.getAvailableBitrates();
    }
    getManualAudioBitrate() {
      return this._priv_bitrateInfos.manualBitrates.audio.getValue();
    }
    getManualVideoBitrate() {
      return this._priv_bitrateInfos.manualBitrates.video.getValue();
    }
    getVideoBitrate() {
      const representations = this._priv_getCurrentRepresentations();
      if (representations === null || isNullOrUndefined(representations.video)) {
        return void 0;
      }
      return representations.video.bitrate;
    }
    getAudioBitrate() {
      const representations = this._priv_getCurrentRepresentations();
      if (representations === null || isNullOrUndefined(representations.audio)) {
        return void 0;
      }
      return representations.audio.bitrate;
    }
    getMinVideoBitrate() {
      return this._priv_bitrateInfos.minAutoBitrates.video.getValue();
    }
    getMinAudioBitrate() {
      return this._priv_bitrateInfos.minAutoBitrates.audio.getValue();
    }
    getMaxVideoBitrate() {
      return this._priv_bitrateInfos.maxAutoBitrates.video.getValue();
    }
    getMaxAudioBitrate() {
      return this._priv_bitrateInfos.maxAutoBitrates.audio.getValue();
    }
    play() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      const playPromise = this.videoElement.play();
      if (isNullOrUndefined(playPromise) || typeof playPromise.catch !== "function") {
        return Promise.resolve();
      }
      return playPromise.catch((error) => {
        if (error.name === "NotAllowedError") {
          const warning2 = new MediaError("MEDIA_ERR_PLAY_NOT_ALLOWED", error.toString());
          this.trigger("warning", warning2);
        }
        throw error;
      });
    }
    pause() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      this.videoElement.pause();
    }
    seekTo(time) {
      var _a2;
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      if (this._priv_contentInfos === null) {
        throw new Error("player: no content loaded");
      }
      const { isDirectFile, manifest } = this._priv_contentInfos;
      if (!isDirectFile && manifest === null) {
        throw new Error("player: the content did not load yet");
      }
      let positionWanted;
      if (typeof time === "number") {
        positionWanted = time;
      } else if (typeof time === "object") {
        const timeObj = time;
        const currentTs = this.videoElement.currentTime;
        if (!isNullOrUndefined(timeObj.relative)) {
          positionWanted = currentTs + timeObj.relative;
        } else if (!isNullOrUndefined(timeObj.position)) {
          positionWanted = timeObj.position;
        } else if (!isNullOrUndefined(timeObj.wallClockTime)) {
          if (manifest !== null) {
            positionWanted = timeObj.wallClockTime - ((_a2 = manifest.availabilityStartTime) != null ? _a2 : 0);
          } else if (isDirectFile && this.videoElement !== null) {
            const startDate = getStartDate(this.videoElement);
            if (startDate !== void 0) {
              positionWanted = timeObj.wallClockTime - startDate;
            }
          }
          if (positionWanted === void 0) {
            positionWanted = timeObj.wallClockTime;
          }
        } else {
          throw new Error('invalid time object. You must set one of the following properties: "relative", "position" or "wallClockTime"');
        }
      }
      if (positionWanted === void 0) {
        throw new Error("invalid time given");
      }
      this.videoElement.currentTime = positionWanted;
      return positionWanted;
    }
    isFullscreen() {
      warnOnce("isFullscreen is deprecated. Fullscreen management should now be managed by the application");
      return isFullscreen();
    }
    setFullscreen(goFull = true) {
      warnOnce("setFullscreen is deprecated. Fullscreen management should now be managed by the application");
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      if (goFull) {
        requestFullscreen(this.videoElement);
      } else {
        exitFullscreen();
      }
    }
    exitFullscreen() {
      warnOnce("exitFullscreen is deprecated. Fullscreen management should now be managed by the application");
      exitFullscreen();
    }
    getVolume() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      return this.videoElement.volume;
    }
    setVolume(volume) {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      const videoElement = this.videoElement;
      if (volume !== videoElement.volume) {
        videoElement.volume = volume;
        this.trigger("volumeChange", volume);
      }
    }
    isMute() {
      return this.getVolume() === 0;
    }
    mute() {
      this._priv_mutedMemory = this.getVolume();
      this.setVolume(0);
    }
    unMute() {
      const { DEFAULT_UNMUTED_VOLUME } = config_default.getCurrent();
      const vol = this.getVolume();
      if (vol === 0) {
        this.setVolume(this._priv_mutedMemory === 0 ? DEFAULT_UNMUTED_VOLUME : this._priv_mutedMemory);
      }
    }
    setVideoBitrate(btr) {
      this._priv_bitrateInfos.manualBitrates.video.setValue(btr);
    }
    setAudioBitrate(btr) {
      this._priv_bitrateInfos.manualBitrates.audio.setValue(btr);
    }
    setMinVideoBitrate(btr) {
      const maxVideoBitrate = this._priv_bitrateInfos.maxAutoBitrates.video.getValue();
      if (btr > maxVideoBitrate) {
        throw new Error(`Invalid minimum video bitrate given. Its value, "${btr}" is superior the current maximum video birate, "${maxVideoBitrate}".`);
      }
      this._priv_bitrateInfos.minAutoBitrates.video.setValue(btr);
    }
    setMinAudioBitrate(btr) {
      const maxAudioBitrate = this._priv_bitrateInfos.maxAutoBitrates.audio.getValue();
      if (btr > maxAudioBitrate) {
        throw new Error(`Invalid minimum audio bitrate given. Its value, "${btr}" is superior the current maximum audio birate, "${maxAudioBitrate}".`);
      }
      this._priv_bitrateInfos.minAutoBitrates.audio.setValue(btr);
    }
    setMaxVideoBitrate(btr) {
      const minVideoBitrate = this._priv_bitrateInfos.minAutoBitrates.video.getValue();
      if (btr < minVideoBitrate) {
        throw new Error(`Invalid maximum video bitrate given. Its value, "${btr}" is inferior the current minimum video birate, "${minVideoBitrate}".`);
      }
      this._priv_bitrateInfos.maxAutoBitrates.video.setValue(btr);
    }
    setMaxAudioBitrate(btr) {
      const minAudioBitrate = this._priv_bitrateInfos.minAutoBitrates.audio.getValue();
      if (btr < minAudioBitrate) {
        throw new Error(`Invalid maximum audio bitrate given. Its value, "${btr}" is inferior the current minimum audio birate, "${minAudioBitrate}".`);
      }
      this._priv_bitrateInfos.maxAutoBitrates.audio.setValue(btr);
    }
    setMaxBufferBehind(depthInSeconds) {
      this._priv_bufferOptions.maxBufferBehind.setValue(depthInSeconds);
    }
    setMaxBufferAhead(depthInSeconds) {
      this._priv_bufferOptions.maxBufferAhead.setValue(depthInSeconds);
    }
    setWantedBufferAhead(sizeInSeconds) {
      this._priv_bufferOptions.wantedBufferAhead.setValue(sizeInSeconds);
    }
    setMaxVideoBufferSize(sizeInKBytes) {
      this._priv_bufferOptions.maxVideoBufferSize.setValue(sizeInKBytes);
    }
    getMaxBufferBehind() {
      return this._priv_bufferOptions.maxBufferBehind.getValue();
    }
    getMaxBufferAhead() {
      return this._priv_bufferOptions.maxBufferAhead.getValue();
    }
    getWantedBufferAhead() {
      return this._priv_bufferOptions.wantedBufferAhead.getValue();
    }
    getMaxVideoBufferSize() {
      return this._priv_bufferOptions.maxVideoBufferSize.getValue();
    }
    getCurrentKeySystem() {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      return getCurrentKeySystem(this.videoElement);
    }
    getAvailableAudioTracks() {
      var _a2, _b2;
      if (this._priv_contentInfos === null) {
        return [];
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        return (_b2 = (_a2 = this._priv_mediaElementTrackChoiceManager) == null ? void 0 : _a2.getAvailableAudioTracks()) != null ? _b2 : [];
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        return [];
      }
      return this._priv_trackChoiceManager.getAvailableAudioTracks(currentPeriod);
    }
    getAvailableTextTracks() {
      var _a2, _b2;
      if (this._priv_contentInfos === null) {
        return [];
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        return (_b2 = (_a2 = this._priv_mediaElementTrackChoiceManager) == null ? void 0 : _a2.getAvailableTextTracks()) != null ? _b2 : [];
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        return [];
      }
      return this._priv_trackChoiceManager.getAvailableTextTracks(currentPeriod);
    }
    getAvailableVideoTracks() {
      var _a2, _b2;
      if (this._priv_contentInfos === null) {
        return [];
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        return (_b2 = (_a2 = this._priv_mediaElementTrackChoiceManager) == null ? void 0 : _a2.getAvailableVideoTracks()) != null ? _b2 : [];
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        return [];
      }
      return this._priv_trackChoiceManager.getAvailableVideoTracks(currentPeriod);
    }
    getAudioTrack() {
      if (this._priv_contentInfos === null) {
        return void 0;
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        if (this._priv_mediaElementTrackChoiceManager === null) {
          return void 0;
        }
        return this._priv_mediaElementTrackChoiceManager.getChosenAudioTrack();
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        return void 0;
      }
      return this._priv_trackChoiceManager.getChosenAudioTrack(currentPeriod);
    }
    getTextTrack() {
      if (this._priv_contentInfos === null) {
        return void 0;
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        if (this._priv_mediaElementTrackChoiceManager === null) {
          return void 0;
        }
        return this._priv_mediaElementTrackChoiceManager.getChosenTextTrack();
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        return void 0;
      }
      return this._priv_trackChoiceManager.getChosenTextTrack(currentPeriod);
    }
    getVideoTrack() {
      if (this._priv_contentInfos === null) {
        return void 0;
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        if (this._priv_mediaElementTrackChoiceManager === null) {
          return void 0;
        }
        return this._priv_mediaElementTrackChoiceManager.getChosenVideoTrack();
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        return void 0;
      }
      return this._priv_trackChoiceManager.getChosenVideoTrack(currentPeriod);
    }
    setAudioTrack(audioId) {
      var _a2;
      if (this._priv_contentInfos === null) {
        throw new Error("No content loaded");
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        try {
          (_a2 = this._priv_mediaElementTrackChoiceManager) == null ? void 0 : _a2.setAudioTrackById(audioId);
          return;
        } catch (e) {
          throw new Error("player: unknown audio track");
        }
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        throw new Error("No compatible content launched.");
      }
      try {
        this._priv_trackChoiceManager.setAudioTrackByID(currentPeriod, audioId);
      } catch (e) {
        throw new Error("player: unknown audio track");
      }
    }
    setTextTrack(textId) {
      var _a2;
      if (this._priv_contentInfos === null) {
        throw new Error("No content loaded");
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        try {
          (_a2 = this._priv_mediaElementTrackChoiceManager) == null ? void 0 : _a2.setTextTrackById(textId);
          return;
        } catch (e) {
          throw new Error("player: unknown text track");
        }
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        throw new Error("No compatible content launched.");
      }
      try {
        this._priv_trackChoiceManager.setTextTrackByID(currentPeriod, textId);
      } catch (e) {
        throw new Error("player: unknown text track");
      }
    }
    disableTextTrack() {
      var _a2;
      if (this._priv_contentInfos === null) {
        return;
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        (_a2 = this._priv_mediaElementTrackChoiceManager) == null ? void 0 : _a2.disableTextTrack();
        return;
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        return;
      }
      return this._priv_trackChoiceManager.disableTextTrack(currentPeriod);
    }
    setVideoTrack(videoId) {
      var _a2;
      if (this._priv_contentInfos === null) {
        throw new Error("No content loaded");
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile) {
        try {
          (_a2 = this._priv_mediaElementTrackChoiceManager) == null ? void 0 : _a2.setVideoTrackById(videoId);
          return;
        } catch (e) {
          throw new Error("player: unknown video track");
        }
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        throw new Error("No compatible content launched.");
      }
      try {
        this._priv_trackChoiceManager.setVideoTrackByID(currentPeriod, videoId);
      } catch (e) {
        throw new Error("player: unknown video track");
      }
    }
    disableVideoTrack() {
      if (this._priv_contentInfos === null) {
        return;
      }
      const { currentPeriod, isDirectFile } = this._priv_contentInfos;
      if (isDirectFile && this._priv_mediaElementTrackChoiceManager !== null) {
        return this._priv_mediaElementTrackChoiceManager.disableVideoTrack();
      }
      if (this._priv_trackChoiceManager === null || currentPeriod === null) {
        return;
      }
      return this._priv_trackChoiceManager.disableVideoTrack(currentPeriod);
    }
    getPreferredAudioTracks() {
      return this._priv_preferredAudioTracks;
    }
    getPreferredTextTracks() {
      return this._priv_preferredTextTracks;
    }
    getPreferredVideoTracks() {
      return this._priv_preferredVideoTracks;
    }
    setPreferredAudioTracks(tracks, shouldApply = false) {
      if (!Array.isArray(tracks)) {
        throw new Error("Invalid `setPreferredAudioTracks` argument. Should have been an Array.");
      }
      this._priv_preferredAudioTracks = tracks;
      if (this._priv_trackChoiceManager !== null) {
        this._priv_trackChoiceManager.setPreferredAudioTracks(tracks, shouldApply);
      } else if (this._priv_mediaElementTrackChoiceManager !== null) {
        this._priv_mediaElementTrackChoiceManager.setPreferredAudioTracks(tracks, shouldApply);
      }
    }
    setPreferredTextTracks(tracks, shouldApply = false) {
      if (!Array.isArray(tracks)) {
        throw new Error("Invalid `setPreferredTextTracks` argument. Should have been an Array.");
      }
      this._priv_preferredTextTracks = tracks;
      if (this._priv_trackChoiceManager !== null) {
        this._priv_trackChoiceManager.setPreferredTextTracks(tracks, shouldApply);
      } else if (this._priv_mediaElementTrackChoiceManager !== null) {
        this._priv_mediaElementTrackChoiceManager.setPreferredTextTracks(tracks, shouldApply);
      }
    }
    setPreferredVideoTracks(tracks, shouldApply = false) {
      if (!Array.isArray(tracks)) {
        throw new Error("Invalid `setPreferredVideoTracks` argument. Should have been an Array.");
      }
      this._priv_preferredVideoTracks = tracks;
      if (this._priv_trackChoiceManager !== null) {
        this._priv_trackChoiceManager.setPreferredVideoTracks(tracks, shouldApply);
      } else if (this._priv_mediaElementTrackChoiceManager !== null) {
        this._priv_mediaElementTrackChoiceManager.setPreferredVideoTracks(tracks, shouldApply);
      }
    }
    getImageTrackData() {
      warnOnce("`getImageTrackData` is deprecated.Please use the `parseBifThumbnails` tool instead.");
      if (this._priv_contentInfos === null) {
        return null;
      }
      return this._priv_contentInfos.thumbnails;
    }
    getMinimumPosition() {
      if (this._priv_contentInfos === null) {
        return null;
      }
      if (this._priv_contentInfos.isDirectFile) {
        return 0;
      }
      const { manifest } = this._priv_contentInfos;
      if (manifest !== null) {
        return manifest.getMinimumSafePosition();
      }
      return null;
    }
    getMaximumPosition() {
      if (this._priv_contentInfos === null) {
        return null;
      }
      const { isDirectFile, manifest } = this._priv_contentInfos;
      if (isDirectFile) {
        if (this.videoElement === null) {
          throw new Error("Disposed player");
        }
        return this.videoElement.duration;
      }
      if (manifest !== null) {
        if (!manifest.isDynamic && this.videoElement !== null) {
          return this.videoElement.duration;
        }
        return manifest.getMaximumSafePosition();
      }
      return null;
    }
    __priv_getSegmentBufferContent(bufferType) {
      if (this._priv_contentInfos === null || this._priv_contentInfos.segmentBuffersStore === null) {
        return null;
      }
      const segmentBufferStatus = this._priv_contentInfos.segmentBuffersStore.getStatus(bufferType);
      return segmentBufferStatus.type === "initialized" ? segmentBufferStatus.value.getInventory() : null;
    }
    _priv_cleanUpCurrentContentState() {
      var _a2;
      log_default.debug("Locking `contentLock` to clean-up the current content.");
      this._priv_contentLock.setValue(true);
      this._priv_contentInfos = null;
      this._priv_trackChoiceManager = null;
      (_a2 = this._priv_mediaElementTrackChoiceManager) == null ? void 0 : _a2.dispose();
      this._priv_mediaElementTrackChoiceManager = null;
      this._priv_contentEventsMemory = {};
      const freeUpContentLock = () => {
        log_default.debug("Unlocking `contentLock`. Next content can begin.");
        this._priv_contentLock.setValue(false);
      };
      if (!isNullOrUndefined(this.videoElement)) {
        clearOnStop(this.videoElement).then(() => {
          log_default.debug("API: DRM session cleaned-up with success!");
          freeUpContentLock();
        }, (err) => {
          log_default.error("API: An error arised when trying to clean-up the DRM session:" + (err instanceof Error ? err.toString() : "Unknown Error"));
          freeUpContentLock();
        });
      } else {
        freeUpContentLock();
      }
    }
    _priv_onPlaybackEvent(event) {
      switch (event.type) {
        case "inband-events":
          const inbandEvents = event.value;
          this.trigger("inbandEvents", inbandEvents);
          return;
        case "stream-event":
          this.trigger("streamEvent", event.value);
          break;
        case "stream-event-skip":
          this.trigger("streamEventSkip", event.value);
          break;
        case "activePeriodChanged":
          this._priv_onActivePeriodChanged(event.value);
          break;
        case "periodStreamReady":
          this._priv_onPeriodStreamReady(event.value);
          break;
        case "periodStreamCleared":
          this._priv_onPeriodStreamCleared(event.value);
          break;
        case "reloading-media-source":
          this._priv_onReloadingMediaSource();
          break;
        case "representationChange":
          this._priv_onRepresentationChange(event.value);
          break;
        case "adaptationChange":
          this._priv_onAdaptationChange(event.value);
          break;
        case "bitrateEstimationChange":
          this._priv_onBitrateEstimationChange(event.value);
          break;
        case "manifestReady":
          this._priv_onManifestReady(event.value);
          break;
        case "warning":
          this._priv_onPlaybackWarning(event.value);
          break;
        case "loaded":
          if (this._priv_contentInfos === null) {
            log_default.error("API: Loaded event while no content is loaded");
            return;
          }
          this._priv_contentInfos.segmentBuffersStore = event.value.segmentBuffersStore;
          break;
        case "decipherabilityUpdate":
          this.trigger("decipherabilityUpdate", event.value);
          break;
        case "added-segment":
          if (this._priv_contentInfos === null) {
            log_default.error("API: Added segment while no content is loaded");
            return;
          }
          const { content, segmentData } = event.value;
          if (content.adaptation.type === "image") {
            if (!isNullOrUndefined(segmentData) && segmentData.type === "bif") {
              const imageData = segmentData.data;
              this._priv_contentInfos.thumbnails = imageData;
              this.trigger("imageTrackUpdate", { data: this._priv_contentInfos.thumbnails });
            }
          }
      }
    }
    _priv_onPlaybackError(error) {
      const formattedError = formatError(error, {
        defaultCode: "NONE",
        defaultReason: "An unknown error stopped content playback."
      });
      formattedError.fatal = true;
      if (this._priv_contentInfos !== null) {
        this._priv_contentInfos.stop$.next();
        this._priv_contentInfos.stop$.complete();
      }
      this._priv_cleanUpCurrentContentState();
      this._priv_currentError = formattedError;
      log_default.error("API: The player stopped because of an error:", error);
      this._priv_setPlayerState(PLAYER_STATES.STOPPED);
      if (this._priv_currentError === formattedError) {
        this.trigger("error", formattedError);
      }
    }
    _priv_onPlaybackFinished() {
      log_default.info("API: Previous playback finished. Stopping and cleaning-up...");
      if (this._priv_contentInfos !== null) {
        this._priv_contentInfos.stop$.next();
        this._priv_contentInfos.stop$.complete();
      }
      this._priv_cleanUpCurrentContentState();
      this._priv_setPlayerState(PLAYER_STATES.ENDED);
    }
    _priv_onPlaybackWarning(error) {
      const formattedError = formatError(error, {
        defaultCode: "NONE",
        defaultReason: "An unknown error happened."
      });
      log_default.warn("API: Sending warning:", formattedError);
      this.trigger("warning", formattedError);
    }
    _priv_onManifestReady({ manifest }) {
      const contentInfos = this._priv_contentInfos;
      if (contentInfos === null) {
        log_default.error("API: The manifest is loaded but no content is.");
        return;
      }
      contentInfos.manifest = manifest;
      this._priv_lastContentPlaybackInfos.manifest = manifest;
      const { initialAudioTrack, initialTextTrack } = contentInfos;
      this._priv_trackChoiceManager = new TrackChoiceManager({
        preferTrickModeTracks: this._priv_preferTrickModeTracks
      });
      const preferredAudioTracks = initialAudioTrack === void 0 ? this._priv_preferredAudioTracks : [initialAudioTrack];
      this._priv_trackChoiceManager.setPreferredAudioTracks(preferredAudioTracks, true);
      const preferredTextTracks = initialTextTrack === void 0 ? this._priv_preferredTextTracks : [initialTextTrack];
      this._priv_trackChoiceManager.setPreferredTextTracks(preferredTextTracks, true);
      this._priv_trackChoiceManager.setPreferredVideoTracks(this._priv_preferredVideoTracks, true);
      fromEvent2(manifest, "manifestUpdate").pipe(takeUntil(contentInfos.stop$)).subscribe(() => {
        if (this._priv_trackChoiceManager !== null) {
          this._priv_trackChoiceManager.update();
        }
      });
    }
    _priv_onActivePeriodChanged({ period }) {
      var _a2, _b2, _c, _d, _e, _f;
      if (this._priv_contentInfos === null) {
        log_default.error("API: The active period changed but no content is loaded");
        return;
      }
      this._priv_contentInfos.currentPeriod = period;
      if (this._priv_contentEventsMemory.periodChange !== period) {
        this._priv_contentEventsMemory.periodChange = period;
        this.trigger("periodChange", period);
      }
      this.trigger("availableAudioTracksChange", this.getAvailableAudioTracks());
      this.trigger("availableTextTracksChange", this.getAvailableTextTracks());
      this.trigger("availableVideoTracksChange", this.getAvailableVideoTracks());
      if (this._priv_trackChoiceManager !== null) {
        const audioTrack = this._priv_trackChoiceManager.getChosenAudioTrack(period);
        const textTrack = this._priv_trackChoiceManager.getChosenTextTrack(period);
        const videoTrack = this._priv_trackChoiceManager.getChosenVideoTrack(period);
        this.trigger("audioTrackChange", audioTrack);
        this.trigger("textTrackChange", textTrack);
        this.trigger("videoTrackChange", videoTrack);
      } else {
        this.trigger("audioTrackChange", null);
        this.trigger("textTrackChange", null);
        this.trigger("videoTrackChange", null);
      }
      this._priv_triggerAvailableBitratesChangeEvent("availableAudioBitratesChange", this.getAvailableAudioBitrates());
      this._priv_triggerAvailableBitratesChangeEvent("availableVideoBitratesChange", this.getAvailableVideoBitrates());
      const audioBitrate = (_c = (_b2 = (_a2 = this._priv_getCurrentRepresentations()) == null ? void 0 : _a2.audio) == null ? void 0 : _b2.bitrate) != null ? _c : -1;
      this._priv_triggerCurrentBitrateChangeEvent("audioBitrateChange", audioBitrate);
      const videoBitrate = (_f = (_e = (_d = this._priv_getCurrentRepresentations()) == null ? void 0 : _d.video) == null ? void 0 : _e.bitrate) != null ? _f : -1;
      this._priv_triggerCurrentBitrateChangeEvent("videoBitrateChange", videoBitrate);
    }
    _priv_onPeriodStreamReady(value) {
      const { type, period, adaptation$ } = value;
      switch (type) {
        case "video":
          if (this._priv_trackChoiceManager === null) {
            log_default.error("API: TrackChoiceManager not instanciated for a new video period");
            adaptation$.next(null);
          } else {
            this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);
            this._priv_trackChoiceManager.setInitialVideoTrack(period);
          }
          break;
        case "audio":
          if (this._priv_trackChoiceManager === null) {
            log_default.error(`API: TrackChoiceManager not instanciated for a new ${type} period`);
            adaptation$.next(null);
          } else {
            this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);
            this._priv_trackChoiceManager.setInitialAudioTrack(period);
          }
          break;
        case "text":
          if (this._priv_trackChoiceManager === null) {
            log_default.error(`API: TrackChoiceManager not instanciated for a new ${type} period`);
            adaptation$.next(null);
          } else {
            this._priv_trackChoiceManager.addPeriod(type, period, adaptation$);
            this._priv_trackChoiceManager.setInitialTextTrack(period);
          }
          break;
        default:
          const adaptations = period.adaptations[type];
          if (!isNullOrUndefined(adaptations) && adaptations.length > 0) {
            adaptation$.next(adaptations[0]);
          } else {
            adaptation$.next(null);
          }
          break;
      }
    }
    _priv_onPeriodStreamCleared(value) {
      const { type, period } = value;
      switch (type) {
        case "audio":
        case "text":
        case "video":
          if (this._priv_trackChoiceManager !== null) {
            this._priv_trackChoiceManager.removePeriod(type, period);
          }
          break;
      }
      if (this._priv_contentInfos === null) {
        return;
      }
      const { activeAdaptations, activeRepresentations } = this._priv_contentInfos;
      if (!isNullOrUndefined(activeAdaptations) && !isNullOrUndefined(activeAdaptations[period.id])) {
        const activePeriodAdaptations = activeAdaptations[period.id];
        delete activePeriodAdaptations[type];
        if (Object.keys(activePeriodAdaptations).length === 0) {
          delete activeAdaptations[period.id];
        }
      }
      if (!isNullOrUndefined(activeRepresentations) && !isNullOrUndefined(activeRepresentations[period.id])) {
        const activePeriodRepresentations = activeRepresentations[period.id];
        delete activePeriodRepresentations[type];
        if (Object.keys(activePeriodRepresentations).length === 0) {
          delete activeRepresentations[period.id];
        }
      }
    }
    _priv_onReloadingMediaSource() {
      if (this._priv_contentInfos !== null) {
        this._priv_contentInfos.segmentBuffersStore = null;
      }
      if (this._priv_trackChoiceManager !== null) {
        this._priv_trackChoiceManager.resetPeriods();
      }
    }
    _priv_onAdaptationChange({
      type,
      adaptation,
      period
    }) {
      if (this._priv_contentInfos === null) {
        log_default.error("API: The adaptations changed but no content is loaded");
        return;
      }
      if (this._priv_contentInfos.activeAdaptations === null) {
        this._priv_contentInfos.activeAdaptations = {};
      }
      const { activeAdaptations, currentPeriod } = this._priv_contentInfos;
      const activePeriodAdaptations = activeAdaptations[period.id];
      if (isNullOrUndefined(activePeriodAdaptations)) {
        activeAdaptations[period.id] = { [type]: adaptation };
      } else {
        activePeriodAdaptations[type] = adaptation;
      }
      if (this._priv_trackChoiceManager !== null && currentPeriod !== null && !isNullOrUndefined(period) && period.id === currentPeriod.id) {
        switch (type) {
          case "audio":
            const audioTrack = this._priv_trackChoiceManager.getChosenAudioTrack(currentPeriod);
            this.trigger("audioTrackChange", audioTrack);
            const availableAudioBitrates = this.getAvailableAudioBitrates();
            this._priv_triggerAvailableBitratesChangeEvent("availableAudioBitratesChange", availableAudioBitrates);
            break;
          case "text":
            const textTrack = this._priv_trackChoiceManager.getChosenTextTrack(currentPeriod);
            this.trigger("textTrackChange", textTrack);
            break;
          case "video":
            const videoTrack = this._priv_trackChoiceManager.getChosenVideoTrack(currentPeriod);
            this.trigger("videoTrackChange", videoTrack);
            const availableVideoBitrates = this.getAvailableVideoBitrates();
            this._priv_triggerAvailableBitratesChangeEvent("availableVideoBitratesChange", availableVideoBitrates);
            break;
        }
      }
    }
    _priv_onRepresentationChange({
      type,
      period,
      representation
    }) {
      var _a2;
      if (this._priv_contentInfos === null) {
        log_default.error("API: The representations changed but no content is loaded");
        return;
      }
      if (this._priv_contentInfos.activeRepresentations === null) {
        this._priv_contentInfos.activeRepresentations = {};
      }
      const { activeRepresentations, currentPeriod } = this._priv_contentInfos;
      const activePeriodRepresentations = activeRepresentations[period.id];
      if (isNullOrUndefined(activePeriodRepresentations)) {
        activeRepresentations[period.id] = { [type]: representation };
      } else {
        activePeriodRepresentations[type] = representation;
      }
      const bitrate = (_a2 = representation == null ? void 0 : representation.bitrate) != null ? _a2 : -1;
      if (!isNullOrUndefined(period) && currentPeriod !== null && currentPeriod.id === period.id) {
        if (type === "video") {
          this._priv_triggerCurrentBitrateChangeEvent("videoBitrateChange", bitrate);
        } else if (type === "audio") {
          this._priv_triggerCurrentBitrateChangeEvent("audioBitrateChange", bitrate);
        }
      }
    }
    _priv_onBitrateEstimationChange({
      type,
      bitrate
    }) {
      if (bitrate !== void 0) {
        this._priv_bitrateInfos.lastBitrates[type] = bitrate;
      }
      this.trigger("bitrateEstimationChange", { type, bitrate });
    }
    _priv_onPlayPauseNext(isPlaying) {
      if (this.videoElement === null) {
        throw new Error("Disposed player");
      }
      this._priv_isPlaying.setValue(isPlaying);
    }
    _priv_onNativeTextTracksNext(tracks) {
      this.trigger("nativeTextTracksChange", tracks);
    }
    _priv_setPlayerState(newState) {
      if (this.state !== newState) {
        this.state = newState;
        log_default.info("API: playerStateChange event", newState);
        this.trigger("playerStateChange", newState);
      }
    }
    _priv_triggerPositionUpdate(observation) {
      var _a2;
      if (this._priv_contentInfos === null) {
        log_default.warn("API: Cannot perform time update: no content loaded.");
        return;
      }
      if (this.state === PLAYER_STATES.RELOADING) {
        return;
      }
      const { isDirectFile, manifest } = this._priv_contentInfos;
      if (!isDirectFile && manifest === null || isNullOrUndefined(observation)) {
        return;
      }
      this._priv_lastContentPlaybackInfos.lastPlaybackPosition = observation.position;
      const maximumPosition = manifest !== null ? manifest.getMaximumSafePosition() : void 0;
      const positionData = {
        position: observation.position,
        duration: observation.duration,
        playbackRate: observation.playbackRate,
        maximumBufferTime: maximumPosition,
        bufferGap: isFinite(observation.bufferGap) ? observation.bufferGap : 0
      };
      if (manifest !== null && manifest.isLive && observation.position > 0) {
        const ast = (_a2 = manifest.availabilityStartTime) != null ? _a2 : 0;
        positionData.wallClockTime = observation.position + ast;
        const livePosition = manifest.getLivePosition();
        if (livePosition !== void 0) {
          positionData.liveGap = livePosition - observation.position;
        }
      } else if (isDirectFile && this.videoElement !== null) {
        const startDate = getStartDate(this.videoElement);
        if (startDate !== void 0) {
          positionData.wallClockTime = startDate + observation.position;
        }
      }
      this.trigger("positionUpdate", positionData);
    }
    _priv_triggerAvailableBitratesChangeEvent(event, newVal) {
      const prevVal = this._priv_contentEventsMemory[event];
      if (prevVal === void 0 || !areArraysOfNumbersEqual(newVal, prevVal)) {
        this._priv_contentEventsMemory[event] = newVal;
        this.trigger(event, newVal);
      }
    }
    _priv_triggerCurrentBitrateChangeEvent(event, newVal) {
      if (newVal !== this._priv_contentEventsMemory[event]) {
        this._priv_contentEventsMemory[event] = newVal;
        this.trigger(event, newVal);
      }
    }
    _priv_getCurrentRepresentations() {
      if (this._priv_contentInfos === null) {
        return null;
      }
      const { currentPeriod, activeRepresentations } = this._priv_contentInfos;
      if (currentPeriod === null || activeRepresentations === null || isNullOrUndefined(activeRepresentations[currentPeriod.id])) {
        return null;
      }
      return activeRepresentations[currentPeriod.id];
    }
  };
  Player.version = "3.27.0";
  var public_api_default = Player;

  // src/core/api/index.ts
  var api_default = public_api_default;

  // src/features/initialize_features.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_features_object();
  function initializeFeaturesObject() {
    if (define_FEATURES_default.EME === define_FEATURES_default.IS_ENABLED) {
      features_object_default.ContentDecryptor = (init_decrypt(), __toCommonJS(decrypt_exports)).default;
    }
    if (define_FEATURES_default.BIF_PARSER === define_FEATURES_default.IS_ENABLED) {
      features_object_default.imageBuffer = (init_image(), __toCommonJS(image_exports)).default;
      features_object_default.imageParser = (init_bif(), __toCommonJS(bif_exports)).default;
    }
    const HAS_NATIVE_MODE = define_FEATURES_default.NATIVE_VTT || define_FEATURES_default.NATIVE_SAMI || define_FEATURES_default.NATIVE_TTML || define_FEATURES_default.NATIVE_SRT;
    if (define_FEATURES_default.SMOOTH === define_FEATURES_default.IS_ENABLED) {
      features_object_default.transports.smooth = (init_smooth2(), __toCommonJS(smooth_exports)).default;
    }
    if (define_FEATURES_default.DASH === define_FEATURES_default.IS_ENABLED) {
      features_object_default.transports.dash = (init_dash2(), __toCommonJS(dash_exports)).default;
      features_object_default.dashParsers.js = (init_js_parser(), __toCommonJS(js_parser_exports)).default;
    }
    if (define_FEATURES_default.LOCAL_MANIFEST === define_FEATURES_default.IS_ENABLED) {
      features_object_default.transports.local = (init_local2(), __toCommonJS(local_exports)).default;
    }
    if (define_FEATURES_default.METAPLAYLIST === define_FEATURES_default.IS_ENABLED) {
      features_object_default.transports.metaplaylist = (init_metaplaylist2(), __toCommonJS(metaplaylist_exports)).default;
    }
    if (HAS_NATIVE_MODE === define_FEATURES_default.IS_ENABLED) {
      features_object_default.nativeTextTracksBuffer = (init_native(), __toCommonJS(native_exports)).default;
      if (define_FEATURES_default.NATIVE_VTT === define_FEATURES_default.IS_ENABLED) {
        features_object_default.nativeTextTracksParsers.vtt = (init_native2(), __toCommonJS(native_exports2)).default;
      }
      if (define_FEATURES_default.NATIVE_TTML === define_FEATURES_default.IS_ENABLED) {
        features_object_default.nativeTextTracksParsers.ttml = (init_native3(), __toCommonJS(native_exports3)).default;
      }
      if (define_FEATURES_default.NATIVE_SAMI === define_FEATURES_default.IS_ENABLED) {
        features_object_default.nativeTextTracksParsers.sami = (init_native4(), __toCommonJS(native_exports4)).default;
      }
      if (define_FEATURES_default.NATIVE_SRT === define_FEATURES_default.IS_ENABLED) {
        features_object_default.nativeTextTracksParsers.srt = (init_native5(), __toCommonJS(native_exports5)).default;
      }
    }
    const HAS_HTML_MODE = define_FEATURES_default.HTML_VTT || define_FEATURES_default.HTML_SAMI || define_FEATURES_default.HTML_TTML || define_FEATURES_default.HTML_SRT;
    if (HAS_HTML_MODE === define_FEATURES_default.IS_ENABLED) {
      features_object_default.htmlTextTracksBuffer = (init_html(), __toCommonJS(html_exports)).default;
      if (define_FEATURES_default.HTML_SAMI === define_FEATURES_default.IS_ENABLED) {
        features_object_default.htmlTextTracksParsers.sami = (init_html2(), __toCommonJS(html_exports2)).default;
      }
      if (define_FEATURES_default.HTML_TTML === define_FEATURES_default.IS_ENABLED) {
        features_object_default.htmlTextTracksParsers.ttml = (init_html3(), __toCommonJS(html_exports3)).default;
      }
      if (define_FEATURES_default.HTML_SRT === define_FEATURES_default.IS_ENABLED) {
        features_object_default.htmlTextTracksParsers.srt = (init_html4(), __toCommonJS(html_exports4)).default;
      }
      if (define_FEATURES_default.HTML_VTT === define_FEATURES_default.IS_ENABLED) {
        features_object_default.htmlTextTracksParsers.vtt = (init_html5(), __toCommonJS(html_exports5)).default;
      }
    }
    if (define_FEATURES_default.DIRECTFILE === define_FEATURES_default.IS_ENABLED) {
      const initDirectFile = (init_initialize_directfile(), __toCommonJS(initialize_directfile_exports)).default;
      const mediaElementTrackChoiceManager = (init_media_element_track_choice_manager(), __toCommonJS(media_element_track_choice_manager_exports)).default;
      features_object_default.directfile = {
        initDirectFile,
        mediaElementTrackChoiceManager
      };
    }
  }

  // src/index.ts
  init_log();
  initializeFeaturesObject();
  if (define_ENVIRONMENT_default.CURRENT_ENV === define_ENVIRONMENT_default.DEV) {
    log_default.setLevel(define_LOGGER_LEVEL_default.CURRENT_LEVEL);
  }
  var src_default = api_default;

  // demo/full/scripts/controllers/Main.jsx
  var import_react46 = __toESM(require_react());

  // demo/full/scripts/controllers/Player.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react45 = __toESM(require_react());
  init_esm5();

  // demo/full/scripts/lib/vespertine.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  var createModule = (module, payload) => {
    if (typeof module !== "function") {
      throw new Error("A module should be a function");
    }
    const moduleState = {};
    const $destroy = new Subject();
    const $updates = new Subject().pipe(takeUntil($destroy));
    const getFromModule = (...args) => {
      if (!args.length) {
        return moduleState;
      }
      if (args.length === 1) {
        return moduleState[args[0]];
      }
      return args.map((arg) => moduleState[arg]);
    };
    const $getFromModule = (...args) => {
      if (!args.length) {
        return $updates;
      }
      if (args.length === 1) {
        return $updates.pipe(map((state) => state[args]), distinctUntilChanged());
      }
      const observables = args.map((arg) => $updates.pipe(map((state) => state[arg]), distinctUntilChanged()));
      return combineLatest(observables);
    };
    const moduleArgs = {
      state: {
        get: getFromModule,
        set: (arg) => {
          const newState = Object.assign(moduleState, arg);
          $updates.next(newState);
        }
      },
      $destroy
    };
    const moduleActions = module(moduleArgs, payload);
    return {
      dispatch: (actionName, actionPayload) => {
        if (!moduleActions || typeof moduleActions[actionName] !== "function") {
          throw new Error(`The ${actionName} action does not exist on this module.`);
        }
        return moduleActions[actionName](actionPayload);
      },
      get: getFromModule,
      $get: $getFromModule,
      destroy: () => {
        $destroy.next();
        $destroy.complete();
      }
    };
  };

  // demo/full/scripts/modules/player/index.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();

  // demo/full/scripts/modules/player/events.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();

  // demo/full/scripts/modules/player/fromPlayerEvent.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  function fromPlayerEvent(player, event) {
    return new Observable((obs) => {
      const func = (payload) => obs.next(payload);
      player.addEventListener(event, func);
      return () => {
        player.removeEventListener(event, func);
      };
    });
  }

  // demo/full/scripts/modules/player/events.js
  var POSITION_UPDATES_INTERVAL = 100;
  var BUFFERED_DATA_UPDATES_INTERVAL = 100;
  var linkPlayerEventsToState = (player, state, $destroy) => {
    const linkPlayerEventToState = (event, stateItem) => fromPlayerEvent(player, event).pipe(takeUntil($destroy)).subscribe((arg) => state.set({ [stateItem]: arg }));
    linkPlayerEventToState("textTrackChange", "subtitle");
    linkPlayerEventToState("audioTrackChange", "language");
    linkPlayerEventToState("videoTrackChange", "videoTrack");
    linkPlayerEventToState("videoBitrateChange", "videoBitrate");
    linkPlayerEventToState("audioBitrateChange", "audioBitrate");
    linkPlayerEventToState("error", "error");
    linkPlayerEventToState("volumeChange", "volume");
    linkPlayerEventToState("availableAudioTracksChange", "availableLanguages");
    linkPlayerEventToState("availableVideoTracksChange", "availableVideoTracks");
    linkPlayerEventToState("availableTextTracksChange", "availableSubtitles");
    linkPlayerEventToState("availableAudioBitratesChange", "availableAudioBitrates");
    linkPlayerEventToState("availableVideoBitratesChange", "availableVideoBitrates");
    fromPlayerEvent(player, "imageTrackUpdate").pipe(distinctUntilChanged(), takeUntil($destroy), map(({ data }) => data)).subscribe((images) => state.set({ images }));
    interval(POSITION_UPDATES_INTERVAL).pipe(map(() => {
      const position = player.getPosition();
      const duration = player.getVideoDuration();
      const videoTrack = player.getVideoTrack();
      return {
        currentTime: player.getPosition(),
        wallClockDiff: player.getWallClockTime() - position,
        bufferGap: player.getVideoLoadedTime() - player.getVideoPlayedTime(),
        duration: Number.isNaN(duration) ? void 0 : duration,
        minimumPosition: player.getMinimumPosition(),
        maximumPosition: player.getMaximumPosition(),
        liveGap: player.getMaximumPosition() - player.getPosition(),
        playbackPosition: player.getPlaybackRate(),
        videoTrackHasTrickMode: videoTrack !== null && videoTrack !== void 0 && videoTrack.trickModeTracks !== void 0 && videoTrack.trickModeTracks.length > 0
      };
    }), takeUntil($destroy)).subscribe((arg) => {
      state.set(arg);
    });
    fromPlayerEvent(player, "playerStateChange").pipe(distinctUntilChanged(), takeUntil($destroy)).subscribe((arg) => {
      const stateUpdates = {
        cannotLoadMetadata: false,
        hasEnded: arg === "ENDED",
        hasCurrentContent: !["STOPPED", "LOADING"].includes(arg),
        isContentLoaded: !["STOPPED", "LOADING", "RELOADING"].includes(arg),
        isBuffering: arg === "BUFFERING",
        isLoading: arg === "LOADING",
        isReloading: arg === "RELOADING",
        isSeeking: arg === "SEEKING",
        isStopped: arg === "STOPPED"
      };
      switch (arg) {
        case "ENDED":
          stateUpdates.autoPlayBlocked = false;
          stateUpdates.isPaused = true;
          break;
        case "PAUSED":
          stateUpdates.isPaused = true;
          break;
        case "PLAYING":
          stateUpdates.autoPlayBlocked = false;
          stateUpdates.isPaused = false;
          break;
        case "LOADED":
          stateUpdates.isPaused = true;
          stateUpdates.isLive = player.isLive();
          break;
        case "STOPPED":
          stateUpdates.audioBitrate = void 0;
          stateUpdates.autoPlayBlocked = false;
          stateUpdates.videoBitrate = void 0;
          stateUpdates.availableAudioBitrates = [];
          stateUpdates.availableVideoBitrates = [];
          stateUpdates.availableVideoTracks = [];
          stateUpdates.availableLanguages = [];
          stateUpdates.availableSubtitles = [];
          stateUpdates.lowLatencyMode = false;
          stateUpdates.images = [];
          stateUpdates.subtitle = null;
          stateUpdates.language = null;
          stateUpdates.videoTrack = null;
          stateUpdates.currentTime = void 0;
          stateUpdates.wallClockDiff = void 0;
          stateUpdates.bufferGap = void 0;
          stateUpdates.bufferedData = null;
          stateUpdates.duration = void 0;
          stateUpdates.minimumPosition = void 0;
          stateUpdates.maximumPosition = void 0;
          break;
      }
      if (arg !== "STOPPED") {
        stateUpdates.error = null;
      }
      state.set(stateUpdates);
    });
    fromPlayerEvent(player, "playerStateChange").pipe(map((playerState) => playerState === "STOPPED"), distinctUntilChanged(), takeUntil($destroy), switchMap((isStopped) => {
      if (isStopped) {
        state.set({ bufferedData: null });
        return EMPTY;
      }
      return interval(BUFFERED_DATA_UPDATES_INTERVAL).pipe(startWith(0), tap(() => {
        let audioContent = player.__priv_getSegmentBufferContent("audio");
        if (Array.isArray(audioContent)) {
          audioContent = audioContent.slice();
        }
        let textContent = player.__priv_getSegmentBufferContent("text");
        if (Array.isArray(textContent)) {
          textContent = textContent.slice();
        }
        let videoContent = player.__priv_getSegmentBufferContent("video");
        if (Array.isArray(videoContent)) {
          videoContent = videoContent.slice();
        }
        state.set({ bufferedData: {
          audio: audioContent,
          video: videoContent,
          text: textContent
        } });
      }));
    })).subscribe();
    fromPlayerEvent(player, "warning").pipe(takeUntil($destroy)).subscribe((warning2) => {
      if (warning2 === null || warning2 === void 0) {
        return;
      }
      switch (warning2.code) {
        case "MEDIA_ERR_NOT_LOADED_METADATA":
          state.set({ cannotLoadMetadata: true });
          break;
        case "MEDIA_ERR_BLOCKED_AUTOPLAY":
          state.set({ autoPlayBlocked: true });
          break;
      }
    });
  };

  // demo/full/scripts/modules/player/catchUp.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  var LIVE_GAP_GOAL_WHEN_CATCHING_UP = 3.5;
  var CATCH_UP_CHANGE_RATE_STEP = 6;
  var CATCH_UP_SEEKING_STEP = 15;
  var MAX_RATE = 5;
  function $handleCatchUpMode($switchCatchUpMode, rxPlayer, state) {
    let isCatchingUp = false;
    function stopCatchingUp() {
      if (!isCatchingUp) {
        return EMPTY;
      }
      rxPlayer.setPlaybackRate(1);
      isCatchingUp = false;
      state.set({ isCatchingUp, playbackRate: 1 });
      return of(false);
    }
    return $switchCatchUpMode.pipe(switchMap((isCatchUpEnabled) => {
      return fromPlayerEvent(rxPlayer, "playerStateChange").pipe(startWith(rxPlayer.getPlayerState()), distinctUntilChanged(), map((playerState) => {
        return playerState === "LOADED" || playerState === "PLAYING" || playerState === "PAUSED" || playerState === "BUFFERING" || playerState === "SEEKING";
      }), switchMap((canCatchUp) => {
        if (!rxPlayer.isLive()) {
          state.set({ isCatchUpEnabled: false });
          return stopCatchingUp();
        }
        state.set({ isCatchUpEnabled });
        if (!isCatchUpEnabled || !canCatchUp) {
          return stopCatchingUp();
        }
        return interval(200).pipe(startWith(0), map(() => [rxPlayer.getMaximumPosition(), rxPlayer.getPosition()]), switchMap(([maximumPosition, position]) => {
          const liveGap = maximumPosition - position;
          if (liveGap >= CATCH_UP_SEEKING_STEP) {
            rxPlayer.seekTo(maximumPosition - LIVE_GAP_GOAL_WHEN_CATCHING_UP);
            return stopCatchingUp();
          }
          if (isCatchingUp) {
            if (liveGap <= LIVE_GAP_GOAL_WHEN_CATCHING_UP) {
              return stopCatchingUp();
            }
          } else if (liveGap < CATCH_UP_CHANGE_RATE_STEP) {
            return stopCatchingUp();
          }
          const factor = (liveGap - LIVE_GAP_GOAL_WHEN_CATCHING_UP) / 4;
          const rate = Math.round(Math.min(MAX_RATE, 1.1 + factor) * 10) / 10;
          if (rate <= 1) {
            return stopCatchingUp();
          }
          if (!isCatchingUp) {
            isCatchingUp = true;
            state.set({ isCatchingUp: true });
          }
          state.set({ playbackRate: rate });
          const currentPlaybackRate = rxPlayer.getPlaybackRate();
          if (rate !== currentPlaybackRate) {
            rxPlayer.setPlaybackRate(rate);
          }
          return of(true);
        }));
      }));
    }));
  }

  // src/experimental/tools/VideoThumbnailLoader/index.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // src/experimental/tools/VideoThumbnailLoader/thumbnail_loader.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_log();
  init_object_assign();

  // src/experimental/tools/VideoThumbnailLoader/create_request.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();

  // src/experimental/tools/VideoThumbnailLoader/get_complete_segment_id.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function getCompleteSegmentId(contentInfo, segment) {
    const { manifest, period, adaptation, representation } = contentInfo;
    return manifest.id + period.id + adaptation.id + representation.id.toString() + segment.id;
  }

  // src/experimental/tools/VideoThumbnailLoader/create_request.ts
  var requests = /* @__PURE__ */ new Map();
  function createRequest(segmentFetcher, contentInfos, segment) {
    const completeSegmentId = getCompleteSegmentId(contentInfos, segment);
    const lastRequest = requests.get(completeSegmentId);
    if (lastRequest !== void 0) {
      return lastRequest;
    }
    const _request = {
      cancel() {
        subscription.unsubscribe();
        this.isComplete = true;
      },
      isComplete: false
    };
    const subscription = segmentFetcher({
      manifest: contentInfos.manifest,
      period: contentInfos.period,
      adaptation: contentInfos.adaptation,
      representation: contentInfos.representation,
      segment
    }).pipe(filter((evt) => evt.type === "chunk" || evt.type === "chunk-complete"), take(1), catchError((err) => {
      _request.error = err;
      if (_request.onError !== void 0) {
        _request.onError(err);
      }
      _request.isComplete = true;
      return EMPTY;
    })).subscribe((evt) => {
      if (evt.type === "chunk-complete") {
        if (_request.onComplete !== void 0) {
          _request.onComplete();
          _request.isComplete = true;
        }
      } else {
        const parsed = evt.parse();
        _request.data = parsed;
        if (_request.onData !== void 0) {
          _request.onData(parsed);
        }
      }
    });
    requests.set(completeSegmentId, _request);
    return _request;
  }
  function freeRequest(segmentId) {
    const request2 = requests.get(segmentId);
    if (request2 !== void 0) {
      request2.cancel();
      requests.delete(segmentId);
    }
  }

  // src/experimental/tools/VideoThumbnailLoader/get_content_infos.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_is_null_or_undefined();
  function getContentInfos(time, manifest) {
    var _a2, _b2;
    const period = manifest.getPeriodForTime(time);
    if (period === void 0 || period.adaptations.video === void 0 || period.adaptations.video.length === 0) {
      return null;
    }
    for (const videoAdaptation of period.adaptations.video) {
      const representation = (_b2 = (_a2 = videoAdaptation.trickModeTracks) == null ? void 0 : _a2[0].representations) == null ? void 0 : _b2[0];
      if (!isNullOrUndefined(representation)) {
        return {
          manifest,
          period,
          adaptation: videoAdaptation,
          representation
        };
      }
    }
    return null;
  }

  // src/experimental/tools/VideoThumbnailLoader/get_initialized_source_buffer.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();

  // src/experimental/tools/VideoThumbnailLoader/prepare_source_buffer.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  init_implementations();
  function prepareSourceBuffer(elt, codec) {
    return openMediaSource(elt).pipe(map((mediaSource) => new audio_video_default("video", codec, mediaSource)));
  }

  // src/experimental/tools/VideoThumbnailLoader/get_initialized_source_buffer.ts
  var mediaSourceSubscription;
  var sourceBufferContent;
  var sourceBuffer$ = new ReplaySubject();
  function hasAlreadyPushedInitData(contentInfos) {
    var _a2;
    if (sourceBufferContent === void 0) {
      return false;
    }
    const initSegment = contentInfos.representation.index.getInitSegment();
    const currentInitSegmentId = (_a2 = sourceBufferContent.representation.index.getInitSegment()) == null ? void 0 : _a2.id;
    return currentInitSegmentId === (initSegment == null ? void 0 : initSegment.id) && contentInfos.representation.id === sourceBufferContent.representation.id && contentInfos.adaptation.id === sourceBufferContent.adaptation.id && contentInfos.period.id === sourceBufferContent.period.id && contentInfos.manifest.id === sourceBufferContent.manifest.id;
  }
  function loadAndPushInitData(contentInfos, initSegment, sourceBuffer, segmentFetcher) {
    const segmentInfos = {
      manifest: contentInfos.manifest,
      period: contentInfos.period,
      adaptation: contentInfos.adaptation,
      representation: contentInfos.representation,
      segment: initSegment
    };
    return segmentFetcher(segmentInfos).pipe(mergeMap((evt) => {
      if (evt.type !== "chunk") {
        return EMPTY;
      }
      const parsed = evt.parse();
      if (parsed.segmentType !== "init") {
        return EMPTY;
      }
      const { initializationData } = parsed;
      const initSegmentData = initializationData instanceof ArrayBuffer ? new Uint8Array(initializationData) : initializationData;
      return sourceBuffer.pushChunk({
        data: {
          initSegment: initSegmentData,
          chunk: null,
          appendWindow: [void 0, void 0],
          timestampOffset: 0,
          codec: contentInfos.representation.getMimeTypeString()
        },
        inventoryInfos: null
      });
    }));
  }
  function getInitializedSourceBuffer$(contentInfos, element, segmentFetcher) {
    if (hasAlreadyPushedInitData(contentInfos)) {
      return sourceBuffer$;
    }
    const { representation } = contentInfos;
    const mediaSourceError$ = new Subject();
    if (mediaSourceSubscription === void 0) {
      mediaSourceSubscription = prepareSourceBuffer(element, representation.getMimeTypeString()).subscribe({
        next: (sourceBuffer) => sourceBuffer$.next(sourceBuffer),
        error: (err) => {
          mediaSourceError$.next(new Error("VideoThumbnailLoaderError: Error when creating media source or source buffer: " + err.toString()));
        }
      });
    }
    return merge(sourceBuffer$, mediaSourceError$.pipe(map((err) => {
      throw err;
    }))).pipe(mergeMap((sourceBuffer) => {
      const initSegment = representation.index.getInitSegment();
      if (initSegment === null) {
        return of(sourceBuffer);
      }
      return loadAndPushInitData(contentInfos, initSegment, sourceBuffer, segmentFetcher).pipe(map(() => sourceBuffer));
    }), tap(() => {
      sourceBufferContent = contentInfos;
    }));
  }
  function disposeMediaSource() {
    sourceBufferContent = void 0;
    if (mediaSourceSubscription !== void 0) {
      mediaSourceSubscription.unsubscribe();
    }
    mediaSourceSubscription = void 0;
    sourceBuffer$ = new ReplaySubject();
  }

  // src/experimental/tools/VideoThumbnailLoader/load_segments.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  function loadSegments(segments, segmentFetcher, contentInfos) {
    return combineLatest(segments.map((segment) => {
      return new Observable((obs) => {
        const completeSegmentId = getCompleteSegmentId(contentInfos, segment);
        const request2 = createRequest(segmentFetcher, contentInfos, segment);
        if (request2.error !== void 0) {
          freeRequest(completeSegmentId);
          obs.error(request2.error);
          return;
        }
        request2.onError = (err) => {
          freeRequest(completeSegmentId);
          obs.error(err);
        };
        if (request2.data !== void 0) {
          obs.next({ data: request2.data, segment });
        }
        if (request2.isComplete) {
          obs.complete();
          return;
        }
        request2.onData = (data) => {
          obs.next({ data, segment });
        };
        request2.onComplete = () => {
          obs.complete();
        };
      });
    }));
  }

  // src/experimental/tools/VideoThumbnailLoader/push_data.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function pushData(inventoryInfos, parsed, videoSourceBuffer) {
    const { chunkData, appendWindow } = parsed;
    const segmentData = chunkData instanceof ArrayBuffer ? new Uint8Array(chunkData) : chunkData;
    return videoSourceBuffer.pushChunk({
      data: {
        chunk: segmentData,
        timestampOffset: 0,
        appendWindow,
        initSegment: null,
        codec: inventoryInfos.representation.getMimeTypeString()
      },
      inventoryInfos
    });
  }

  // src/experimental/tools/VideoThumbnailLoader/remove_buffer_around_time.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_esm5();
  function removeBufferAroundTime$(videoElement, sourceBuffer, time, margin = 10 * 60) {
    if (videoElement.buffered.length === 0) {
      return of(null);
    }
    const bufferRemovals$ = [];
    if (time - margin > 0) {
      bufferRemovals$.push(sourceBuffer.removeBuffer(0, time - margin));
    }
    if (time + margin < videoElement.duration) {
      bufferRemovals$.push(sourceBuffer.removeBuffer(time + margin, videoElement.duration));
    }
    return combineLatest(bufferRemovals$);
  }

  // src/experimental/tools/VideoThumbnailLoader/video_thumbnail_loader_error.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var VideoThumbnailLoaderError = class extends Error {
    constructor(code, message) {
      super();
      Object.setPrototypeOf(this, VideoThumbnailLoaderError.prototype);
      this.name = "VideoThumbnailLoaderError";
      this.code = code;
      this.message = message;
    }
  };

  // src/experimental/tools/VideoThumbnailLoader/features/dash.ts
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  init_dash2();
  function addDashFeature(loaders2) {
    const transports = dash_default({ lowLatencyMode: false });
    loaders2.dash = transports;
  }

  // src/experimental/tools/VideoThumbnailLoader/thumbnail_loader.ts
  var MIN_NEEDED_DATA_AFTER_TIME = 2;
  var loaders = {};
  var VideoThumbnailLoader = class {
    constructor(videoElement, player) {
      this._videoElement = videoElement;
      this._player = player;
    }
    static addLoader(loaderFunc) {
      loaderFunc(loaders);
    }
    setTime(time) {
      if (this._currentTask !== void 0) {
        if (time === this._currentTask.time) {
          return this._currentTask.promise;
        }
      }
      const manifest = this._player.getManifest();
      if (manifest === null) {
        return Promise.reject(new VideoThumbnailLoaderError("NO_MANIFEST", "No manifest available."));
      }
      const contentInfos = getContentInfos(time, manifest);
      if (contentInfos === null) {
        return Promise.reject(new VideoThumbnailLoaderError("NO_TRACK", "Couldn't find track for this time."));
      }
      const segments = contentInfos.representation.index.getSegments(time, MIN_NEEDED_DATA_AFTER_TIME);
      if (segments.length === 0) {
        return Promise.reject(new VideoThumbnailLoaderError("NO_THUMBNAIL", "Couldn't find thumbnail for the given time."));
      }
      for (let j = 0; j < segments.length; j++) {
        const { time: stime, duration, timescale } = segments[j];
        const start = stime / timescale;
        const end = start + duration / timescale;
        for (let i = 0; i < this._videoElement.buffered.length; i++) {
          if (this._videoElement.buffered.start(i) - 1e-3 <= start && this._videoElement.buffered.end(i) + 1e-3 >= end) {
            segments.splice(j, 1);
            j--;
            break;
          }
        }
      }
      if (segments.length === 0) {
        this._videoElement.currentTime = time;
        log_default.debug("VTL: Thumbnails already loaded.", time);
        return Promise.resolve(time);
      }
      log_default.debug("VTL: Found thumbnail for time", time, segments);
      if (this._currentTask !== void 0) {
        this._nextTaskSegmentsCompleteIds = segments.map((segment) => getCompleteSegmentId(contentInfos, segment));
        this._currentTask.stop();
      }
      return this._startTimeSettingTask(contentInfos, segments, time);
    }
    dispose() {
      if (this._currentTask !== void 0) {
        this._currentTask.stop();
      }
      disposeMediaSource();
    }
    _startTimeSettingTask(contentInfos, segments, time) {
      const loader = loaders[contentInfos.manifest.transport];
      if (loader === void 0) {
        const error = new VideoThumbnailLoaderError("NO_LOADER", "VideoThumbnailLoaderError: No imported loader for this transport type: " + contentInfos.manifest.transport);
        return Promise.reject(error);
      }
      const killTask$ = new Subject();
      const abortError$ = killTask$.pipe(map(() => {
        throw new VideoThumbnailLoaderError("ABORTED", "VideoThumbnailLoaderError: Aborted job.");
      }));
      const segmentFetcher = createSegmentFetcher("video", loader.video, {}, {
        baseDelay: 0,
        maxDelay: 0,
        maxRetryOffline: 0,
        maxRetryRegular: 0
      });
      const taskPromise = lastValueFrom(race(abortError$, getInitializedSourceBuffer$(contentInfos, this._videoElement, segmentFetcher).pipe(mergeMap((videoSourceBuffer) => {
        const bufferCleaning$ = removeBufferAroundTime$(this._videoElement, videoSourceBuffer, time);
        log_default.debug("VTL: Removing buffer around time.", time);
        const segmentsLoading$ = loadSegments(segments, segmentFetcher, contentInfos);
        return merge(bufferCleaning$.pipe(ignoreElements()), segmentsLoading$).pipe(mergeMap((arr) => {
          return combineLatest(arr.map(({ segment, data }) => {
            if (data.segmentType === "init") {
              throw new Error("Unexpected initialization segment parsed.");
            }
            let start;
            let end;
            if (data.chunkInfos !== null) {
              start = data.chunkInfos.time;
              end = data.chunkInfos.duration;
            } else {
              start = segment.time / segment.timescale;
            }
            if (end === void 0) {
              end = start + segment.duration / segment.timescale;
            }
            const inventoryInfos = object_assign_default({
              chunkSize: data.chunkSize,
              segment,
              start,
              end
            }, contentInfos);
            return pushData(inventoryInfos, data, videoSourceBuffer).pipe(tap(() => {
              freeRequest(getCompleteSegmentId(inventoryInfos, segment));
              log_default.debug("VTL: Appended segment.");
            }));
          }));
        }), map(() => {
          this._videoElement.currentTime = time;
          return time;
        }));
      }), catchError((err) => {
        var _a2;
        let message = "Unknown error.";
        if (err instanceof Error) {
          message = (_a2 = err.message) != null ? _a2 : err.toString();
        }
        throw new VideoThumbnailLoaderError("LOADING_ERROR", message);
      }))).pipe(take(1), finalize(() => {
        segments.forEach((segment) => {
          const completeSegmentId = getCompleteSegmentId(contentInfos, segment);
          if (this._nextTaskSegmentsCompleteIds === void 0 || !this._nextTaskSegmentsCompleteIds.some((id) => completeSegmentId === id)) {
            freeRequest(completeSegmentId);
          }
        });
        this._nextTaskSegmentsCompleteIds = void 0;
        this._currentTask = void 0;
        killTask$.complete();
      })));
      this._currentTask = {
        contentInfos,
        time,
        stop: () => killTask$.next(),
        promise: taskPromise
      };
      return taskPromise;
    }
  };

  // src/experimental/tools/VideoThumbnailLoader/index.ts
  var VideoThumbnailLoader_default = VideoThumbnailLoader;

  // demo/full/scripts/modules/player/index.js
  VideoThumbnailLoader_default.addLoader(addDashFeature);
  var PLAYER = ({ $destroy, state }, initOpts) => {
    const { textTrackElement } = initOpts;
    const player = new src_default(initOpts);
    window.RxPlayer = src_default;
    window.player = window.rxPlayer = player;
    state.set({
      audioBitrate: void 0,
      audioBitrateAuto: true,
      autoPlayBlocked: false,
      availableAudioBitrates: [],
      availableLanguages: [],
      availableSubtitles: [],
      availableVideoBitrates: [],
      availableVideoTracks: [],
      bufferGap: void 0,
      bufferedData: null,
      cannotLoadMetadata: false,
      currentTime: void 0,
      duration: void 0,
      error: null,
      hasCurrentContent: false,
      hasEnded: false,
      images: [],
      isBuffering: false,
      isCatchUpEnabled: false,
      isCatchingUp: false,
      isContentLoaded: false,
      isLive: false,
      isLoading: false,
      isPaused: false,
      isReloading: false,
      isSeeking: false,
      isStopped: true,
      language: void 0,
      liveGap: void 0,
      loadedVideo: null,
      lowLatencyMode: false,
      maximumPosition: void 0,
      minimumPosition: void 0,
      playbackRate: player.getPlaybackRate(),
      subtitle: void 0,
      videoBitrate: void 0,
      videoBitrateAuto: true,
      videoTrackId: void 0,
      volume: player.getVolume(),
      wallClockDiff: void 0,
      videoTrackHasTrickMode: false,
      videoThumbnailsData: null
    });
    linkPlayerEventsToState(player, state, $destroy);
    const $switchCatchUpMode = new Subject();
    $handleCatchUpMode($switchCatchUpMode, player, state).pipe(takeUntil($destroy)).subscribe();
    $destroy.subscribe(() => player.dispose());
    function dettachVideoThumbnailLoader() {
      const { videoThumbnailsData } = state.get();
      if (videoThumbnailsData !== null) {
        videoThumbnailsData.videoThumbnailLoader.dispose();
        state.set({ videoThumbnailsData: null });
      }
    }
    return {
      ATTACH_VIDEO_THUMBNAIL_LOADER: () => {
        const prevVideoThumbnailsData = state.get().videoThumbnailsData;
        if (prevVideoThumbnailsData !== null) {
          prevVideoThumbnailsData.videoThumbnailLoader.dispose();
        }
        const thumbnailVideoElement = document.createElement("video");
        const videoThumbnailLoader = new VideoThumbnailLoader_default(thumbnailVideoElement, player);
        state.set({
          videoThumbnailsData: {
            videoThumbnailLoader,
            videoElement: thumbnailVideoElement
          }
        });
      },
      SET_VOLUME: (volume) => {
        player.setVolume(volume);
      },
      LOAD: (arg) => {
        dettachVideoThumbnailLoader();
        player.loadVideo(Object.assign({
          textTrackElement,
          transportOptions: { checkMediaSegmentIntegrity: true }
        }, arg));
        state.set({
          loadedVideo: arg,
          lowLatencyMode: arg.lowLatencyMode === true
        });
      },
      PLAY: () => {
        player.play();
        const { isStopped, hasEnded } = state.get();
        if (!isStopped && !hasEnded) {
          state.set({ isPaused: false });
        }
      },
      PAUSE: () => {
        player.pause();
        const { isStopped, hasEnded } = state.get();
        if (!isStopped && !hasEnded) {
          state.set({ isPaused: true });
        }
      },
      STOP: () => {
        dettachVideoThumbnailLoader();
        player.stop();
      },
      SEEK: (position) => {
        player.seekTo({ position });
      },
      MUTE: () => {
        player.mute();
      },
      UNMUTE: () => {
        player.unMute();
      },
      SET_AUDIO_BITRATE: (bitrate) => {
        player.setAudioBitrate(bitrate || -1);
        state.set({ audioBitrateAuto: !bitrate });
      },
      SET_VIDEO_BITRATE: (bitrate) => {
        player.setVideoBitrate(bitrate || -1);
        state.set({ videoBitrateAuto: !bitrate });
      },
      SET_AUDIO_TRACK: (track) => {
        player.setAudioTrack(track.id);
      },
      SET_VIDEO_TRACK: (track) => {
        player.setVideoTrack(track.id);
      },
      DISABLE_VIDEO_TRACK: () => {
        player.disableVideoTrack();
      },
      SET_SUBTITLES_TRACK: (track) => {
        player.setTextTrack(track.id);
      },
      DISABLE_SUBTITLES_TRACK: () => {
        player.disableTextTrack();
      },
      SET_PLAYBACK_RATE: (rate) => {
        player.setPlaybackRate(rate);
        state.set({ playbackRate: rate });
      },
      ENABLE_LIVE_CATCH_UP() {
        $switchCatchUpMode.next(true);
      },
      DISABLE_LIVE_CATCH_UP() {
        $switchCatchUpMode.next(false);
      }
    };
  };
  var player_default = PLAYER;

  // demo/full/scripts/controllers/ControlBar.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react15 = __toESM(require_react());

  // demo/full/scripts/lib/withModulesState.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react = __toESM(require_react());
  var withModulesState = (modulesState) => (Comp) => {
    const modulesProps = Object.keys(modulesState);
    const modulesSubscriptions = {};
    return class extends import_react.default.Component {
      constructor(...args) {
        super(...args);
        this.state = {};
        modulesProps.forEach((moduleProp) => {
          if (!this.props[moduleProp]) {
            return;
          }
          const translations = modulesState[modulesProps];
          const module = this.props[moduleProp];
          const wantedProps = Object.keys(modulesState[moduleProp]);
          wantedProps.forEach((state) => {
            this.state[translations[state]] = module.get(state);
          });
        });
      }
      componentDidMount() {
        modulesProps.forEach((moduleProp) => {
          if (!this.props[moduleProp]) {
            return;
          }
          modulesSubscriptions[moduleProp] = [];
          const translations = modulesState[modulesProps];
          const module = this.props[moduleProp];
          const wantedProps = Object.keys(modulesState[moduleProp]);
          wantedProps.forEach((state) => {
            const sub = module.$get(state).subscribe((val) => this.setState({
              [translations[state]]: val
            }));
            modulesSubscriptions[moduleProp].push(sub);
          });
        });
      }
      UNSAFE_componentWillReceiveProps(nextProps) {
        modulesProps.forEach((moduleProp) => {
          if (!nextProps.hasOwnProperty(moduleProp) || nextProps[moduleProp] !== this.props[moduleProp]) {
            if (modulesSubscriptions[moduleProp]) {
              modulesSubscriptions[moduleProp].forEach((sub) => sub.unsubscribe());
              delete modulesSubscriptions[moduleProp];
            }
          }
          if (nextProps.hasOwnProperty(moduleProp) && !modulesSubscriptions[moduleProp]) {
            modulesSubscriptions[moduleProp] = [];
            const translations = modulesState[modulesProps];
            const module = nextProps[moduleProp];
            const wantedProps = Object.keys(modulesState[moduleProp]);
            wantedProps.forEach((state) => {
              const sub = module.$get(state).subscribe((val) => this.setState({
                [translations[state]]: val
              }));
              modulesSubscriptions[moduleProp].push(sub);
            });
          }
        });
      }
      componentWillUnmount() {
        Object.keys(modulesSubscriptions).forEach((moduleProp) => {
          modulesSubscriptions[moduleProp].forEach((sub) => sub.unsubscribe());
          delete modulesSubscriptions[moduleProp];
        });
      }
      render() {
        const newProps = Object.assign({}, this.props, this.state);
        return /* @__PURE__ */ import_react.default.createElement(Comp, __spreadValues({}, newProps));
      }
    };
  };
  var withModulesState_default = withModulesState;

  // demo/full/scripts/components/Button.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react2 = __toESM(require_react());
  function Button({
    ariaLabel,
    className = "",
    onClick,
    value,
    disabled,
    title
  }) {
    if (disabled) {
      return /* @__PURE__ */ import_react2.default.createElement("button", {
        "aria-label": ariaLabel,
        disabled: true,
        className: className + " disabled",
        title
      }, value);
    }
    return /* @__PURE__ */ import_react2.default.createElement("button", {
      "aria-label": ariaLabel,
      className,
      onClick,
      title
    }, value);
  }
  var Button_default = import_react2.default.memo(Button);

  // demo/full/scripts/components/PositionInfos.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react3 = __toESM(require_react());

  // demo/full/scripts/lib/time.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var toMinutes = (timeInSeconds) => {
    const toInt = parseInt(timeInSeconds);
    if (!toInt) {
      return "00:00";
    }
    if (toInt < 60) {
      const str = String(toInt);
      return "00:" + str.padStart(2, "0");
    }
    const numberOfMinutes = parseInt(toInt / 60);
    const numberOfSecondsRemaining = toInt % 60;
    return String(numberOfMinutes).padStart(2, "0") + ":" + String(numberOfSecondsRemaining).padStart(2, "0");
  };
  var toHours = (timeInSeconds) => {
    const toInt = parseInt(timeInSeconds);
    if (!toInt) {
      return "00:00";
    }
    if (toInt < 60) {
      const str = String(toInt);
      return "00:" + str.padStart(2, "0");
    }
    const numberOfMinutes = parseInt(toInt / 60);
    const numberOfSecondsRemaining = toInt % 60;
    if (numberOfMinutes < 60) {
      return String(numberOfMinutes).padStart(2, "0") + ":" + String(numberOfSecondsRemaining).padStart(2, "0");
    }
    const numberOfHours = parseInt(numberOfMinutes / 60);
    const numberOfMinutesRemaining = numberOfMinutes % 60;
    return String(numberOfHours).padStart(2, "0") + ":" + String(numberOfMinutesRemaining).padStart(2, "0") + ":" + String(numberOfSecondsRemaining).padStart(2, "0");
  };

  // demo/full/scripts/components/PositionInfos.jsx
  function PositionInfos({
    className = "",
    position = 0,
    duration = 0
  }) {
    const convertTime = duration >= 60 * 60 ? toHours : toMinutes;
    return /* @__PURE__ */ import_react3.default.createElement("div", {
      className: "position-infos " + className
    }, /* @__PURE__ */ import_react3.default.createElement("span", {
      className: "current-position"
    }, convertTime(position)), /* @__PURE__ */ import_react3.default.createElement("span", {
      className: "separator"
    }, " / "), /* @__PURE__ */ import_react3.default.createElement("span", {
      className: "duration"
    }, convertTime(duration)));
  }
  var PositionInfos_default = import_react3.default.memo(PositionInfos);

  // demo/full/scripts/components/LivePosition.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react4 = __toESM(require_react());
  function LivePosition({
    className = ""
  }) {
    return /* @__PURE__ */ import_react4.default.createElement("div", {
      className: "position-infos live " + className
    }, "Live");
  }
  var LivePosition_default = import_react4.default.memo(LivePosition);

  // demo/full/scripts/components/StickToLiveEdgeButton.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react5 = __toESM(require_react());
  function StickToLiveEdgeButton({
    isStickingToTheLiveEdge,
    changeStickToLiveEdge
  }) {
    return /* @__PURE__ */ import_react5.default.createElement("button", {
      className: "running" + (isStickingToTheLiveEdge ? " clicked" : ""),
      "aria-label": "Stay close to the live edge",
      title: "Stick to the live edge",
      onClick: () => changeStickToLiveEdge(!isStickingToTheLiveEdge)
    }, /* @__PURE__ */ import_react5.default.createElement("svg", {
      version: "1.1",
      viewBox: "0 0 21.803 21.803"
    }, /* @__PURE__ */ import_react5.default.createElement("path", {
      d: "m18.374 16.605l-4.076-2.101-1.107-1.773-0.757-4.503 2.219 1.092-0.375 1.494c-0.13 0.519 0.185 1.041 0.699 1.17 0.077 0.021 0.157 0.03 0.235 0.03 0.432-2e-3 0.823-0.293 0.935-0.729l0.565-2.25c0.11-0.439-0.103-0.897-0.511-1.101 0 0-5.303-2.603-5.328-2.612-0.406-0.188-0.868-0.267-1.342-0.198-0.625 0.088-1.158 0.407-1.528 0.86-0.029 0.027-2.565 3.15-2.565 3.15l-1.95 0.525c-0.514 0.141-0.818 0.668-0.679 1.184 0.116 0.43 0.505 0.713 0.93 0.713 0.083 0 0.168-0.011 0.252-0.033l2.252-0.606c0.196-0.055 0.37-0.167 0.498-0.324l1.009-1.247 0.725 4.026-1.27 1.01c-0.379 0.304-0.541 0.802-0.411 1.269l1.469 5.271c0.148 0.532 0.633 0.881 1.16 0.881 0.107 0 0.216-0.015 0.324-0.045 0.641-0.178 1.016-0.842 0.837-1.482l-1.254-4.502 1.948-1.498 1.151 1.791c0.115 0.186 0.277 0.334 0.471 0.436l4.371 2.25c0.177 0.092 0.363 0.135 0.552 0.135 0.438 0 0.856-0.238 1.072-0.653 0.303-0.6 0.07-1.325-0.521-1.63z"
    }), /* @__PURE__ */ import_react5.default.createElement("circle", {
      cx: "8.602",
      cy: "2.568",
      r: "2.568"
    })));
  }
  var StickToLiveEdgeButton_default = import_react5.default.memo(StickToLiveEdgeButton);

  // demo/full/scripts/controllers/PlayPauseButton.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react6 = __toESM(require_react());
  function PlayPauseButton({
    cannotLoadMetadata,
    className = "",
    player,
    isPaused,
    isContentLoaded,
    hasEnded
  }) {
    const disabled = !isContentLoaded && !cannotLoadMetadata;
    const displayPause = !isPaused && isContentLoaded && !hasEnded;
    const completeClassName = "play-pause-button " + className + (disabled ? " disabled" : "");
    const play2 = () => player.dispatch("PLAY");
    const pause = () => {
      player.dispatch("DISABLE_LIVE_CATCH_UP");
      player.dispatch("PAUSE");
    };
    return /* @__PURE__ */ import_react6.default.createElement(Button_default, {
      ariaLabel: "Pause/Resume the content",
      className: completeClassName,
      disabled,
      onClick: displayPause ? pause : play2,
      value: String.fromCharCode(displayPause ? 61516 : 61515)
    });
  }
  var PlayPauseButton_default = import_react6.default.memo(withModulesState_default({
    player: {
      cannotLoadMetadata: "cannotLoadMetadata",
      isPaused: "isPaused",
      isContentLoaded: "isContentLoaded",
      hasEnded: "hasEnded",
      stopAtEnd: "stopAtEnd"
    }
  })(PlayPauseButton));

  // demo/full/scripts/controllers/FullScreenButton.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react7 = __toESM(require_react());
  function addFullscreenListener(listener) {
    document.addEventListener("webkitfullscreenchange", listener, false);
    document.addEventListener("mozfullscreenchange", listener, false);
    document.addEventListener("fullscreenchange", listener, false);
    document.addEventListener("MSFullscreenChange", listener, false);
  }
  function removeFullscreenListener(listener) {
    document.removeEventListener("webkitfullscreenchange", listener, false);
    document.removeEventListener("mozfullscreenchange", listener, false);
    document.removeEventListener("fullscreenchange", listener, false);
    document.removeEventListener("MSFullscreenChange", listener, false);
  }
  function isFullscreen2() {
    return !!(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement);
  }
  function requestFullscreen2(elt) {
    if (!isFullscreen2()) {
      if (elt.requestFullscreen) {
        elt.requestFullscreen();
      } else if (elt.msRequestFullscreen) {
        elt.msRequestFullscreen();
      } else if (elt.mozRequestFullScreen) {
        elt.mozRequestFullScreen();
      } else if (elt.webkitRequestFullscreen) {
        elt.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      }
    }
  }
  function exitFullscreen2() {
    if (isFullscreen2()) {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      }
    }
  }
  function FullscreenButton({
    videoElement,
    hasCurrentContent,
    className
  }) {
    const isInitiallyFullscreen = (0, import_react7.useMemo)(() => isFullscreen2(), []);
    const [
      isCurrentlyFullScreen,
      setFullscreenValue
    ] = (0, import_react7.useState)(isInitiallyFullscreen);
    (0, import_react7.useEffect)(() => {
      const fullscreenListener = () => {
        const isInFullscreen = isFullscreen2();
        if (!isInFullscreen) {
          videoElement.classList.remove("fullscreen");
        }
        setFullscreenValue(isInFullscreen);
      };
      addFullscreenListener(fullscreenListener);
      return () => {
        removeFullscreenListener(fullscreenListener);
      };
    }, [videoElement]);
    const setFullscreen = (0, import_react7.useCallback)(() => {
      requestFullscreen2(videoElement);
      videoElement.classList.add("fullscreen");
    }, [isCurrentlyFullScreen, videoElement]);
    return /* @__PURE__ */ import_react7.default.createElement(Button_default, {
      ariaLabel: "Go/Quit fullscreen",
      className: "fullscreen-button " + className,
      onClick: isCurrentlyFullScreen ? exitFullscreen2 : setFullscreen,
      disabled: !hasCurrentContent,
      value: String.fromCharCode(isCurrentlyFullScreen ? 61542 : 61541)
    });
  }
  var FullScreenButton_default = import_react7.default.memo(withModulesState_default({
    player: {
      hasCurrentContent: "hasCurrentContent"
    }
  })(FullscreenButton));

  // demo/full/scripts/controllers/ProgressBar.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react12 = __toESM(require_react());

  // demo/full/scripts/components/ImageThumbnail.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react8 = __toESM(require_react());
  function ImageThumbnail({
    image,
    xPosition
  }) {
    const wrapperEl = (0, import_react8.useRef)(null);
    const [imageUrl, setImageUrl] = (0, import_react8.useState)("");
    (0, import_react8.useEffect)(() => {
      const blob = new Blob([image], { type: "image/jpeg" });
      const url = URL.createObjectURL(blob);
      setImageUrl(url);
      return () => {
        URL.revokeObjectURL(url);
      };
    }, [image]);
    (0, import_react8.useEffect)(() => {
      if (isNaN(+xPosition) || wrapperEl.current === null) {
        return null;
      }
      wrapperEl.current.style.transform = `translate(${xPosition}px, -136px)`;
    }, [xPosition]);
    return /* @__PURE__ */ import_react8.default.createElement("div", {
      className: "thumbnail-wrapper",
      ref: wrapperEl
    }, /* @__PURE__ */ import_react8.default.createElement("img", {
      className: "thumbnail",
      src: imageUrl
    }));
  }
  var ImageThumbnail_default = import_react8.default.memo(ImageThumbnail);

  // demo/full/scripts/components/ProgressBar.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react9 = __toESM(require_react());
  function ProgressBar({
    seek,
    position,
    bufferGap,
    minimumPosition,
    maximumPosition,
    onMouseOut,
    onMouseMove
  }) {
    let element;
    const duration = Math.max(maximumPosition - minimumPosition, 0);
    const getMousePosition = (event) => {
      const rect = element.getBoundingClientRect();
      const point0 = rect.left;
      const clickPosPx = Math.max(event.clientX - point0, 0);
      const endPointPx = Math.max(rect.right - point0, 0);
      if (!endPointPx) {
        return 0;
      }
      return clickPosPx / endPointPx * duration + minimumPosition;
    };
    const bufferGapHotFix = isFinite(bufferGap) ? bufferGap : 0;
    const relativePosition = Math.max(position - minimumPosition, 0);
    const percentBuffered = Math.min((bufferGapHotFix + relativePosition) / duration, 1) * 100;
    const percentPosition = Math.min(relativePosition / duration, 1) * 100;
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "progress-bar-wrapper",
      ref: (el) => element = el,
      onClick: (event) => seek(getMousePosition(event)),
      onMouseOut,
      onMouseMove: (evt) => onMouseMove(getMousePosition(evt), evt)
    }, /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "progress-bar-current",
      style: {
        "width": percentPosition + "%"
      }
    }), /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "progress-bar-buffered",
      style: {
        "width": percentBuffered + "%"
      }
    }));
  }
  var ProgressBar_default = import_react9.default.memo(ProgressBar);

  // demo/full/scripts/components/ToolTip.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react10 = __toESM(require_react());
  function ToolTip({
    className,
    offset,
    text,
    xPosition
  }) {
    const wrapperEl = (0, import_react10.useRef)(null);
    (0, import_react10.useEffect)(() => {
      if (isNaN(+xPosition) || !wrapperEl.current) {
        return null;
      }
      const rect = wrapperEl.current.getBoundingClientRect();
      const width = rect.width;
      const height = rect.height;
      const toSlideY = -height - 11;
      const toSlideX = xPosition - offset - width / 2;
      wrapperEl.current.style.transform = `translate(${toSlideX}px, ${toSlideY}px)`;
    });
    return /* @__PURE__ */ import_react10.default.createElement("div", {
      className: "tooltip-wrapper",
      ref: wrapperEl
    }, /* @__PURE__ */ import_react10.default.createElement("pre", {
      className: "tooltip " + className
    }, text));
  }
  var ToolTip_default = import_react10.default.memo(ToolTip);

  // demo/full/scripts/components/VideoThumbnail.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react11 = __toESM(require_react());
  var VideoThumbnail = class extends import_react11.default.Component {
    constructor(...args) {
      super(...args);
      this._isMounted = true;
      this._loadThumbnailTimeout = null;
      this._spinnerTimeout = null;
      this.positionIsCorrected = false;
      this.state = {
        style: {},
        divSpinnerStyle: {
          "backgroundColor": "gray",
          "position": "absolute",
          "width": "100%",
          "height": "100%",
          "opacity": "50%",
          "display": "flex",
          "justifyContent": "center",
          "alignItems": "center"
        },
        spinnerStyle: {
          "width": "50%",
          "margin": "auto"
        },
        displaySpinner: true
      };
      this.lastSetTime = void 0;
      if (this.props.videoThumbnailsData === null) {
        this.props.player.dispatch("ATTACH_VIDEO_THUMBNAIL_LOADER");
      }
      this.element = import_react11.default.createRef();
    }
    correctImagePosition() {
      if (this.positionIsCorrected) {
        return;
      }
      const { xPosition } = this.props;
      if (isNaN(+xPosition) || this.element.current === null) {
        return null;
      }
      const style = {
        transform: `translate(${xPosition}px, -136px)`
      };
      this.positionIsCorrected = true;
      this.setState({ style });
    }
    startSpinnerTimeoutIfNotAlreadyStarted() {
      if (this._spinnerTimeout !== null) {
        return;
      }
      this._spinnerTimeout = setTimeout(() => {
        this._spinnerTimeout = null;
        if (this.state.displaySpinner !== true) {
          this.setState({ displaySpinner: true });
        }
      }, 150);
    }
    hideSpinner() {
      if (this._spinnerTimeout !== null) {
        clearTimeout(this._spinnerTimeout);
        this._spinnerTimeout = null;
      }
      if (this.state.displaySpinner !== false) {
        this.setState({ displaySpinner: false });
      }
    }
    UNSAFE_componentWillReceiveProps() {
      this.positionIsCorrected = false;
    }
    componentDidMount() {
      this._placeVideoThumbnail();
    }
    componentDidUpdate() {
      this._placeVideoThumbnail();
    }
    _placeVideoThumbnail() {
      if (this.props.videoThumbnailsData !== null && this.element.current !== null) {
        this.element.current.appendChild(this.props.videoThumbnailsData.videoElement);
      }
      this.correctImagePosition();
    }
    componentWillUnmount() {
      this.hideSpinner();
      this._isMounted = false;
    }
    render() {
      const { style, divSpinnerStyle, spinnerStyle } = this.state;
      const thumbnailsData = this.props.videoThumbnailsData;
      const { time } = this.props;
      const roundedTime = Math.round(time);
      if (thumbnailsData !== null && this.lastSetTime !== roundedTime) {
        this.startSpinnerTimeoutIfNotAlreadyStarted();
        if (this._loadThumbnailTimeout !== null) {
          clearTimeout(this._loadThumbnailTimeout);
        }
        this._loadThumbnailTimeout = setTimeout(() => {
          this._loadThumbnailTimeout = null;
          thumbnailsData.videoThumbnailLoader.setTime(roundedTime).finally(() => {
            if (time !== this.props.time || !this._isMounted) {
              return;
            }
            this.hideSpinner();
          });
        }, 40);
      }
      return /* @__PURE__ */ import_react11.default.createElement("div", {
        className: "thumbnail-wrapper",
        style,
        ref: this.element
      }, this.state.displaySpinner ? /* @__PURE__ */ import_react11.default.createElement("div", {
        style: divSpinnerStyle
      }, /* @__PURE__ */ import_react11.default.createElement("img", {
        src: "./assets/spinner.gif",
        style: spinnerStyle
      })) : null);
    }
  };
  var VideoThumbnail_default = import_react11.default.memo(withModulesState_default({
    player: {
      videoThumbnailsData: "videoThumbnailsData"
    }
  })(VideoThumbnail));

  // demo/full/scripts/controllers/ProgressBar.jsx
  var Progressbar = class extends import_react12.default.Component {
    constructor(...args) {
      super(...args);
      this.thumbnailsElement = [];
      this.subscription = null;
      this.state = {
        timeIndicatorVisible: false,
        timeIndicatorPosition: 0,
        timeIndicatorText: "",
        thumbnailIsVisible: false,
        tipPosition: 0,
        image: null,
        imageTime: null
      };
    }
    showTimeIndicator(wallClockTime, clientX, isLive) {
      let hours;
      let minutes;
      let seconds;
      if (isLive) {
        const date = new Date(wallClockTime * 1e3);
        hours = date.getHours();
        minutes = date.getMinutes();
        seconds = date.getSeconds();
      } else {
        hours = Math.floor(wallClockTime / 3600);
        minutes = Math.floor((wallClockTime - hours * 3600) / 60);
        seconds = Math.floor(wallClockTime - (minutes * 60 + hours * 3600));
      }
      const currentReadableTime = hours.toString().padStart(2, "0") + ":" + minutes.toString().padStart(2, "0") + ":" + seconds.toString().padStart(2, "0");
      this.setState({
        timeIndicatorVisible: true,
        timeIndicatorPosition: clientX,
        timeIndicatorText: currentReadableTime
      });
    }
    hideTimeIndicator() {
      this.setState({
        timeIndicatorVisible: false,
        timeIndicatorPosition: 0,
        timeIndicatorText: ""
      });
    }
    showVideoTumbnail(ts, clientX) {
      const timestampToMs = ts;
      this.setState({
        thumbnailIsVisible: true,
        tipPosition: clientX,
        imageTime: timestampToMs
      });
    }
    showImageThumbnail(ts, clientX) {
      const { images } = this.props;
      if (!images || !images.length) {
        return;
      }
      const timestampToMs = ts * 1e3;
      const imageIndex = images.findIndex((i) => i && i.ts > timestampToMs);
      const image = imageIndex === -1 ? images[images.length - 1] : images[imageIndex - 1];
      if (!image) {
        return;
      }
      this.setState({
        thumbnailIsVisible: true,
        tipPosition: clientX,
        image: image.data
      });
    }
    showThumbnail(ts, clientX, enableVideoThumbnails) {
      if (enableVideoThumbnails) {
        this.showVideoTumbnail(ts, clientX);
      } else {
        this.showImageThumbnail(ts, clientX);
      }
    }
    hideTumbnail() {
      this.setState({
        thumbnailIsVisible: false,
        tipPosition: 0,
        imageTime: null,
        image: null
      });
    }
    render() {
      const {
        thumbnailIsVisible,
        tipPosition,
        image,
        timeIndicatorVisible,
        timeIndicatorPosition,
        timeIndicatorText,
        imageTime
      } = this.state;
      const {
        currentTime,
        minimumPosition,
        maximumPosition,
        isContentLoaded,
        isLive,
        bufferGap,
        player,
        enableVideoThumbnails
      } = this.props;
      const seek = (position) => player.dispatch("SEEK", position);
      const hideToolTips = () => {
        this.hideTimeIndicator();
        this.hideTumbnail();
      };
      const onMouseMove = (position, event) => {
        const wallClockDiff = player.get("wallClockDiff");
        const wallClockTime = position + wallClockDiff;
        this.showTimeIndicator(wallClockTime, event.clientX, isLive);
        this.showThumbnail(position, event.clientX, enableVideoThumbnails);
      };
      const toolTipOffset = this.wrapperElement ? this.wrapperElement.getBoundingClientRect().left : 0;
      if (!isContentLoaded) {
        return /* @__PURE__ */ import_react12.default.createElement("div", {
          className: "progress-bar-parent",
          ref: (el) => this.wrapperElement = el
        }, /* @__PURE__ */ import_react12.default.createElement("div", {
          className: "progress-bar-wrapper"
        }));
      }
      const xThumbnailPosition = tipPosition - toolTipOffset;
      let thumbnailElement = null;
      if (thumbnailIsVisible) {
        thumbnailElement = enableVideoThumbnails ? /* @__PURE__ */ import_react12.default.createElement(VideoThumbnail_default, {
          xPosition: xThumbnailPosition,
          time: imageTime,
          player
        }) : /* @__PURE__ */ import_react12.default.createElement(ImageThumbnail_default, {
          image,
          xPosition: xThumbnailPosition
        });
      }
      return /* @__PURE__ */ import_react12.default.createElement("div", {
        className: "progress-bar-parent",
        ref: (el) => this.wrapperElement = el
      }, timeIndicatorVisible ? /* @__PURE__ */ import_react12.default.createElement(ToolTip_default, {
        className: "progress-tip",
        text: timeIndicatorText,
        xPosition: timeIndicatorPosition,
        offset: toolTipOffset
      }) : null, thumbnailElement, /* @__PURE__ */ import_react12.default.createElement(ProgressBar_default, {
        seek,
        onMouseOut: hideToolTips,
        onMouseMove,
        position: currentTime,
        minimumPosition,
        maximumPosition,
        bufferGap
      }));
    }
  };
  var ProgressBar_default2 = import_react12.default.memo(withModulesState_default({
    player: {
      bufferGap: "bufferGap",
      currentTime: "currentTime",
      images: "images",
      isContentLoaded: "isContentLoaded",
      isLive: "isLive",
      minimumPosition: "minimumPosition",
      maximumPosition: "maximumPosition"
    }
  })(Progressbar));

  // demo/full/scripts/controllers/VolumeButton.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react13 = __toESM(require_react());
  function VolumeButton({
    className = "",
    player,
    volume
  }) {
    let volumeLevelClass;
    let charCode;
    if (volume === 0) {
      volumeLevelClass = "muted";
      charCode = 61478;
    } else if (volume <= 0.5) {
      volumeLevelClass = "low";
      charCode = 61479;
    } else {
      volumeLevelClass = "high";
      charCode = 61480;
    }
    return /* @__PURE__ */ import_react13.default.createElement(Button_default, {
      ariaLabel: "Mute/Unmute audio",
      className: `volume-button ${className} ${volumeLevelClass}`,
      onClick: volume === 0 ? () => player.dispatch("UNMUTE") : () => player.dispatch("MUTE"),
      value: String.fromCharCode(charCode)
    });
  }
  var VolumeButton_default = import_react13.default.memo(withModulesState_default({
    player: {
      volume: "volume"
    }
  })(VolumeButton));

  // demo/full/scripts/controllers/VolumeBar.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react14 = __toESM(require_react());
  function VolumeBar({
    player,
    volume
  }) {
    let element;
    const getMouseVolume = (event) => {
      const rect = element.getBoundingClientRect();
      const point0 = rect.left;
      const clickPosPx = Math.max(event.clientX - point0, 0);
      const endPointPx = Math.max(rect.right - point0, 0);
      if (!endPointPx) {
        return 0;
      }
      return Math.min(clickPosPx / endPointPx, 1);
    };
    return /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "volume-bar-wrapper",
      ref: (el) => element = el,
      onClick: (evt) => player.dispatch("SET_VOLUME", getMouseVolume(evt))
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "volume-bar-current",
      style: { "width": volume * 100 + "%" }
    }));
  }
  var VolumeBar_default = import_react14.default.memo(withModulesState_default({
    player: {
      volume: "volume"
    }
  })(VolumeBar));

  // demo/full/scripts/controllers/ControlBar.jsx
  function ControlBar({
    currentTime,
    duration,
    isCatchUpEnabled,
    isCatchingUp,
    isContentLoaded,
    isLive,
    isPaused,
    isStopped,
    liveGap,
    lowLatencyMode,
    enableVideoThumbnails,
    maximumPosition,
    playbackRate,
    player,
    stopVideo,
    toggleSettings,
    videoElement
  }) {
    const changeStickToLiveEdge = (0, import_react15.useCallback)((shouldStick) => {
      if (shouldStick) {
        player.dispatch("ENABLE_LIVE_CATCH_UP");
      } else {
        player.dispatch("DISABLE_LIVE_CATCH_UP");
      }
    }, [player]);
    let isCloseToLive = void 0;
    if (isLive && lowLatencyMode != null && liveGap != null) {
      isCloseToLive = lowLatencyMode ? liveGap < 7 : liveGap < 18;
    }
    const positionElement = (0, import_react15.useMemo)(() => {
      if (!isContentLoaded) {
        return null;
      } else if (isLive) {
        return /* @__PURE__ */ import_react15.default.createElement(LivePosition_default, null);
      } else {
        return /* @__PURE__ */ import_react15.default.createElement(PositionInfos_default, {
          position: currentTime,
          duration
        });
      }
    }, [isContentLoaded, isLive, currentTime, duration]);
    const isAtLiveEdge = isLive && isCloseToLive && !isCatchingUp;
    return /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "controls-bar-container"
    }, /* @__PURE__ */ import_react15.default.createElement(ProgressBar_default2, {
      player,
      enableVideoThumbnails,
      onSeek: () => changeStickToLiveEdge(false)
    }), /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "controls-bar"
    }, /* @__PURE__ */ import_react15.default.createElement(PlayPauseButton_default, {
      className: "control-button",
      player
    }), /* @__PURE__ */ import_react15.default.createElement(Button_default, {
      className: "control-button",
      ariaLabel: "Stop playback",
      onClick: stopVideo,
      value: String.fromCharCode(61517),
      disabled: isStopped
    }), isContentLoaded && isLive && lowLatencyMode ? /* @__PURE__ */ import_react15.default.createElement(StickToLiveEdgeButton_default, {
      isStickingToTheLiveEdge: isCatchUpEnabled,
      changeStickToLiveEdge: () => changeStickToLiveEdge(!isCatchUpEnabled)
    }) : null, positionElement, isLive && isContentLoaded ? /* @__PURE__ */ import_react15.default.createElement(Button_default, {
      ariaLabel: isAtLiveEdge ? void 0 : "Go back to live",
      className: "dot" + (isAtLiveEdge ? " live" : ""),
      onClick: () => {
        if (!isAtLiveEdge) {
          player.dispatch("SEEK", maximumPosition - (lowLatencyMode ? 4 : 10));
        }
      }
    }) : null, /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "controls-right-side"
    }, !isPaused && isCatchingUp && playbackRate > 1 ? /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "catch-up"
    }, "Catch-up playback rate: " + playbackRate) : null, /* @__PURE__ */ import_react15.default.createElement(Button_default, {
      ariaLabel: "Display/Hide controls",
      disabled: !isContentLoaded,
      className: "control-button",
      onClick: toggleSettings,
      value: String.fromCharCode(61459)
    }), /* @__PURE__ */ import_react15.default.createElement("div", {
      className: "volume"
    }, /* @__PURE__ */ import_react15.default.createElement(VolumeButton_default, {
      className: "control-button",
      player
    }), /* @__PURE__ */ import_react15.default.createElement(VolumeBar_default, {
      className: "control-button",
      player
    })), /* @__PURE__ */ import_react15.default.createElement(FullScreenButton_default, {
      className: "control-button",
      player,
      videoElement
    }))));
  }
  var ControlBar_default = import_react15.default.memo(withModulesState_default({
    player: {
      currentTime: "currentTime",
      duration: "duration",
      isCatchUpEnabled: "isCatchUpEnabled",
      isCatchingUp: "isCatchingUp",
      isContentLoaded: "isContentLoaded",
      isLive: "isLive",
      isPaused: "isPaused",
      isStopped: "isStopped",
      liveGap: "liveGap",
      lowLatencyMode: "lowLatencyMode",
      maximumPosition: "maximumPosition",
      playbackRate: "playbackRate"
    }
  })(ControlBar));

  // demo/full/scripts/controllers/ContentList.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react22 = __toESM(require_react());

  // demo/full/scripts/lib/localStorage.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var { localStorage } = window;
  var hasLocalStorage = !!localStorage;
  if (!hasLocalStorage) {
    console.warn("`localStorage` is not available. You will not be able to store content information.");
  }
  var JS_LOCAL_STORAGE = [];
  function getLocalStorageContents() {
    if (!hasLocalStorage) {
      return JS_LOCAL_STORAGE;
    }
    const localStorageContents = [];
    const localContentItems = localStorage.getItem("rxPlayerLocalContents");
    if (localContentItems) {
      try {
        localStorageContents.push(...JSON.parse(localContentItems));
      } catch (err) {
        console.warn("Demo: Can't parse local storage content.");
      }
    }
    return localStorageContents;
  }
  function saveLocalStorageContents(localStorageContents) {
    if (!hasLocalStorage) {
      JS_LOCAL_STORAGE = localStorageContents;
      return;
    }
    localStorage.setItem("rxPlayerLocalContents", JSON.stringify(localStorageContents));
  }
  function storeContent(content) {
    const localStorageContents = getLocalStorageContents();
    let id = content.id;
    let index;
    if (content.id != null) {
      index = localStorageContents.findIndex((e) => e.id === id);
    } else {
      const lastContentID = localStorageContents.reduce((acc, val) => {
        const contentId = val.id || 0;
        return Math.max(acc, contentId);
      }, 0);
      id = lastContentID + 1;
      index = -1;
    }
    const localContent = {
      drmInfos: content.drmInfos,
      fallbackKeyError: content.fallbackKeyError,
      fallbackLicenseRequest: content.fallbackLicenseRequest,
      id,
      localContent: true,
      lowLatency: content.lowLatency,
      name: content.name,
      transport: content.transport,
      url: content.url
    };
    if (index > -1) {
      localStorageContents.splice(index, 1, localContent);
    } else {
      localStorageContents.push(localContent);
    }
    saveLocalStorageContents(localStorageContents);
    return localContent;
  }
  function removeStoredContent(id) {
    const localStorageContents = getLocalStorageContents();
    const idx = localStorageContents.findIndex((e) => e.id === id);
    if (idx < 0) {
      return false;
    }
    localStorageContents.splice(idx, 1);
    saveLocalStorageContents(localStorageContents);
    return true;
  }

  // demo/full/scripts/lib/parseDRMConfigurations.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // demo/full/scripts/lib/bytes.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function leUtf16ToStr(bytes) {
    let str = "";
    for (let i = 0; i < bytes.length; i += 2) {
      str += String.fromCharCode((bytes[i + 1] << 8) + bytes[i]);
    }
    return str;
  }
  function strToUtf82(str) {
    let utf8Str;
    const pcStr = encodeURIComponent(str);
    if (typeof window.unescape === "function") {
      utf8Str = unescape(pcStr);
    } else {
      const isHexChar = /[0-9a-fA-F]/;
      const pcStrLen = pcStr.length;
      utf8Str = "";
      for (let i = 0; i < pcStr.length; i++) {
        let wasPercentEncoded = false;
        if (pcStr[i] === "%") {
          if (i <= pcStrLen - 6 && pcStr[i + 1] === "u" && isHexChar.test(pcStr[i + 2]) && isHexChar.test(pcStr[i + 3]) && isHexChar.test(pcStr[i + 4]) && isHexChar.test(pcStr[i + 5])) {
            const charCode = parseInt(pcStr.substring(i + 1, i + 6), 16);
            utf8Str += String.fromCharCode(charCode);
            wasPercentEncoded = true;
            i += 5;
          } else if (i <= pcStrLen - 3 && isHexChar.test(pcStr[i + 1]) && isHexChar.test(pcStr[i + 2])) {
            const charCode = parseInt(pcStr.substring(i + 1, i + 3), 16);
            utf8Str += String.fromCharCode(charCode);
            wasPercentEncoded = true;
            i += 2;
          }
        }
        if (!wasPercentEncoded) {
          utf8Str += pcStr[i];
        }
      }
    }
    const res = new Uint8Array(utf8Str.length);
    for (let i = 0; i < utf8Str.length; i++) {
      res[i] = utf8Str.charCodeAt(i) & 255;
    }
    return res;
  }
  function stringFromCharCodes2(args) {
    const max = 16e3;
    let ret = "";
    for (let i = 0; i < args.length; i += max) {
      const subArray = args.subarray(i, i + max);
      ret += String.fromCharCode.apply(null, subArray);
    }
    return ret;
  }
  function intToHex2(num, size) {
    const toStr = num.toString(16);
    return toStr.length >= size ? toStr : new Array(size - toStr.length + 1).join("0") + toStr;
  }
  function utf8ToStr2(data) {
    let uint8 = data;
    if (uint8[0] === 239 && uint8[1] === 187 && uint8[2] === 191) {
      uint8 = uint8.subarray(3);
    }
    const utf8Str = stringFromCharCodes2(uint8);
    let escaped;
    if (typeof window.escape !== "function") {
      escaped = escape(utf8Str);
    } else {
      const nonEscapedChar = /[A-Za-z0-9*_+-./]/;
      escaped = "";
      for (let i = 0; i < utf8Str.length; i++) {
        if (nonEscapedChar.test(utf8Str[i])) {
          escaped += utf8Str[i];
        } else {
          const charCode = utf8Str.charCodeAt(i);
          escaped += charCode >= 256 ? "%u" + intToHex2(charCode, 4) : "%" + intToHex2(charCode, 2);
        }
      }
    }
    return decodeURIComponent(escaped);
  }

  // demo/full/scripts/lib/parseDRMConfigurations.js
  function parseDRMConfigurations(drmConfigurations) {
    return Promise.all(drmConfigurations.map((drmConfig) => {
      const {
        drm,
        fallbackKeyError,
        fallbackLicenseRequest,
        licenseServerUrl,
        serverCertificateUrl
      } = drmConfig;
      if (!licenseServerUrl) {
        return;
      }
      const type = drm.toLowerCase();
      const keySystem = {
        type,
        getLicense: generateGetLicense(licenseServerUrl, type, !!fallbackLicenseRequest),
        fallbackOn: {
          keyInternalError: !!fallbackKeyError,
          keyOutputRestricted: !!fallbackKeyError
        }
      };
      if (!serverCertificateUrl) {
        return keySystem;
      }
      return getServerCertificate(serverCertificateUrl).then((serverCertificate) => {
        keySystem.serverCertificate = serverCertificate;
        return keySystem;
      });
    })).then((keySystems) => {
      return keySystems.filter((ks) => ks);
    });
  }
  function getServerCertificate(url) {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = (evt) => {
        if (xhr.status >= 200 && xhr.status < 300) {
          const serverCertificate = evt.target.response;
          resolve(serverCertificate);
        } else {
          reject();
        }
      };
      xhr.onerror = (err) => {
        reject(err);
      };
      xhr.send();
    });
  }
  function formatPlayreadyChallenge(challenge) {
    const str = leUtf16ToStr(challenge);
    const match = /<Challenge encoding="base64encoded">(.*)<\/Challenge>/.exec(str);
    const xml = match ? atob(match[1]) : utf8ToStr2(challenge);
    return xml;
  }
  function generateGetLicense(licenseServerUrl, drmType, fallbackOnLastTry) {
    const isPlayready = drmType.indexOf("playready") !== -1;
    return (rawChallenge) => {
      const challenge = isPlayready ? formatPlayreadyChallenge(rawChallenge) : rawChallenge;
      const xhr = new XMLHttpRequest();
      xhr.open("POST", licenseServerUrl, true);
      return new Promise((resolve, reject) => {
        xhr.onerror = () => {
          const error = new Error("getLicense's request failed on an error");
          error.fallbackOnLastTry = fallbackOnLastTry;
          reject(error);
        };
        xhr.onload = (evt) => {
          if (xhr.status >= 200 && xhr.status < 300) {
            const license = evt.target.response;
            resolve(license);
          } else {
            const error = new Error(`getLicense's request finished with a ${xhr.status} HTTP error`);
            error.noRetry = fallbackOnLastTry;
            error.fallbackOnLastTry = fallbackOnLastTry;
            reject(error);
          }
        };
        if (isPlayready) {
          xhr.setRequestHeader("content-type", "text/xml; charset=utf-8");
        } else {
          xhr.responseType = "arraybuffer";
        }
        xhr.send(challenge);
      }).then((license) => isPlayready && typeof license === "string" ? strToUtf82(license) : license);
    };
  }

  // demo/full/scripts/lib/url_hash.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function parseHashInURL(hashStr) {
    if (hashStr.length <= 1) {
      return null;
    }
    const parsed = {};
    const separatorChar = hashStr[1];
    let hashOffset = 2;
    const hashLen = hashStr.length;
    while (hashOffset + 1 <= hashLen) {
      const unparsedStr = hashStr.substring(hashOffset);
      const nextSeparator = unparsedStr.indexOf(separatorChar);
      const nextUnderscore = unparsedStr.indexOf("_");
      if (nextUnderscore <= 0 || nextSeparator >= 0 && nextUnderscore > nextSeparator) {
        const fieldLength = nextSeparator >= 0 ? nextSeparator : unparsedStr.length;
        const fieldName = unparsedStr.substring(0, fieldLength);
        hashOffset += fieldLength;
        parsed[fieldName] = true;
      } else {
        const fieldName = unparsedStr.substring(0, nextUnderscore);
        hashOffset += nextUnderscore + 1;
        const splitted = unparsedStr.substring(nextUnderscore + 1).split("=");
        if (!splitted.length) {
          return null;
        }
        const dataLength = splitted[0];
        const dataLengthLen = splitted[0].length + 1;
        hashOffset += dataLengthLen;
        const lenNb = parseInt(dataLength, 36);
        if (isNaN(lenNb)) {
          return null;
        }
        const dataStart = hashOffset;
        hashOffset += lenNb;
        const data = hashStr.substring(dataStart, hashOffset);
        parsed[fieldName] = data;
      }
      hashOffset += 1;
    }
    return parsed;
  }
  function generateLinkForCustomContent({
    chosenDRMType,
    customKeySystem,
    fallbackKeyError,
    fallbackLicenseRequest,
    licenseServerUrl,
    lowLatency,
    manifestURL,
    serverCertificateUrl,
    transport
  }) {
    let urlString = "";
    let transportString = "";
    let licenseServerUrlString = "";
    let serverCertificateUrlString = "";
    let drmTypeString = "";
    let customKeySystemString = "";
    if (manifestURL) {
      urlString = "!manifest_" + manifestURL.length.toString(36) + "=" + manifestURL;
    }
    if (transport) {
      transportString = "!tech_" + transport.length.toString(36) + "=" + transport;
    }
    if (chosenDRMType) {
      drmTypeString = "!drm_" + chosenDRMType.length.toString(36) + "=" + chosenDRMType;
    }
    if (customKeySystem) {
      customKeySystemString = "!customKeySystem_" + customKeySystem.length.toString(36) + "=" + customKeySystem;
    }
    if (licenseServerUrl) {
      licenseServerUrlString = "!licenseServ_" + licenseServerUrl.length.toString(36) + "=" + licenseServerUrl;
    }
    if (serverCertificateUrl) {
      serverCertificateUrlString = "!certServ_" + serverCertificateUrl.length.toString(36) + "=" + serverCertificateUrl;
    }
    if (!transportString) {
      return null;
    }
    return location.protocol + "//" + location.hostname + (location.port ? ":" + location.port : "") + location.pathname + (location.search ? location.search : "") + "#" + (lowLatency ? "!lowLatency" : "") + (fallbackKeyError ? "!fallbackKeyError" : "") + (fallbackLicenseRequest ? "!fallbackLicenseRequest" : "") + transportString + urlString + drmTypeString + customKeySystemString + licenseServerUrlString + serverCertificateUrlString;
  }

  // demo/full/scripts/components/CheckBox.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react16 = __toESM(require_react());
  function Checkbox({ ariaLabel, name, checked, onChange, children, className }) {
    return /* @__PURE__ */ import_react16.default.createElement("div", {
      className
    }, /* @__PURE__ */ import_react16.default.createElement("label", {
      className: "input switch"
    }, /* @__PURE__ */ import_react16.default.createElement("input", {
      type: "checkbox",
      "aria-label": ariaLabel,
      name,
      id: name,
      checked,
      onChange
    }), /* @__PURE__ */ import_react16.default.createElement("span", {
      className: "slider round"
    })), /* @__PURE__ */ import_react16.default.createElement("label", {
      htmlFor: name
    }, children));
  }
  var CheckBox_default = Checkbox;

  // demo/full/scripts/components/FocusedInput.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react17 = __toESM(require_react());
  function FocusedInput({
    ariaLabel,
    className = "",
    onChange,
    value = "",
    placeholder = ""
  }) {
    const inputEl = (0, import_react17.useRef)(null);
    (0, import_react17.useEffect)(() => {
      if (inputEl.current != null) {
        inputEl.current.focus();
      }
    }, []);
    return /* @__PURE__ */ import_react17.default.createElement("input", {
      ref: inputEl,
      className: "input " + className,
      "aria-label": ariaLabel,
      type: "text",
      placeholder,
      onChange,
      value
    });
  }
  var FocusedInput_default = import_react17.default.memo(FocusedInput);

  // demo/full/scripts/components/Input.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react18 = __toESM(require_react());
  function Input({
    ariaLabel,
    className = "",
    onChange,
    value = "",
    placeholder = ""
  }) {
    return /* @__PURE__ */ import_react18.default.createElement("input", {
      "aria-label": ariaLabel,
      className: "input " + className,
      type: "text",
      placeholder,
      onChange,
      value
    });
  }
  var Input_default = import_react18.default.memo(Input);

  // demo/full/scripts/components/Select.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react19 = __toESM(require_react());
  function Select({
    ariaLabel,
    children,
    className = "",
    name,
    onChange,
    selected,
    options = [],
    disabled
  }) {
    function onSelectChange(evt) {
      const index = +evt.target.value;
      const valueObj = options[index];
      const value = typeof valueObj === "object" ? valueObj.name : valueObj;
      onChange({ index, value });
    }
    let selectedIndex = typeof selected.index === "number" ? selected.index : void 0;
    const optionsEl = options.map((val, index) => {
      let optName;
      let optDisabled = false;
      if (typeof val === "object") {
        optName = val.name;
        optDisabled = val.disabled;
      } else {
        optName = val;
      }
      if (selectedIndex === void 0 && selected.value === optName) {
        selectedIndex = index;
      }
      return /* @__PURE__ */ import_react19.default.createElement("option", {
        key: index,
        value: index,
        disabled: optDisabled
      }, optName);
    });
    selectedIndex = selectedIndex || 0;
    const selectEl = disabled ? /* @__PURE__ */ import_react19.default.createElement("select", {
      "aria-label": ariaLabel,
      name,
      value: selectedIndex,
      disabled: "disabled",
      onChange: onSelectChange
    }, optionsEl) : /* @__PURE__ */ import_react19.default.createElement("select", {
      name,
      "aria-label": ariaLabel,
      value: selectedIndex,
      onChange: onSelectChange
    }, optionsEl);
    if (children) {
      return /* @__PURE__ */ import_react19.default.createElement("section", {
        className: "select " + className
      }, /* @__PURE__ */ import_react19.default.createElement("label", {
        htmlFor: name
      }, children), selectEl);
    }
    return /* @__PURE__ */ import_react19.default.createElement("section", {
      className: "select " + className
    }, selectEl);
  }
  var Select_default = import_react19.default.memo(Select);

  // demo/full/scripts/contents.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // demo/full/scripts/metaplaylist_url.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var MetaPlaylistDASHSmooth = {
    "type": "MPL",
    "version": "0.1",
    "dynamic": false,
    "contents": [
      {
        "url": "https://www.bok.net/dash/tears_of_steel/cleartext/stream.mpd",
        "startTime": 0,
        "endTime": 733.3,
        "transport": "dash"
      },
      {
        "url": "https://amssamples.streaming.mediaservices.windows.net/683f7e47-bd83-4427-b0a3-26a6c4547782/BigBuckBunny.ism/manifest",
        "startTime": 733.3,
        "endTime": 1368,
        "transport": "smooth"
      }
    ]
  };
  var MetaPlaylistDASHSmoothBlob = new Blob([JSON.stringify(MetaPlaylistDASHSmooth)], { type: "application/json" });
  var metaplaylist_url_default = URL.createObjectURL(MetaPlaylistDASHSmoothBlob);

  // demo/full/scripts/contents.js
  var contents_default = [
    {
      "name": "Tears of Steel (clear)",
      "url": "https://www.bok.net/dash/tears_of_steel/cleartext/stream.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "BBC - presentationTimeOffset on audio and video",
      "url": "http://rdmedia.bbc.co.uk/dash/ondemand/testcard/1/client_manifest-pto_both-events.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "DASH-IF - Trickmode",
      "url": "https://dash.akamaized.net/dash264/TestCases/9b/qualcomm/1/MultiRate.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "DASH-IF - Multi-Subtitles",
      "url": "https://livesim.dashif.org/dash/vod/testpic_2s/multi_subs.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "BBC - Testcard Audio-only",
      "url": "http://rdmedia.bbc.co.uk/dash/ondemand/testcard/1/client_manifest-audio.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "DASH-IF - Audio-only",
      "url": "https://dash.akamaized.net/dash264/TestCases/3a/fraunhofer/aac-lc_stereo_without_video/Sintel/sintel_audio_only_aaclc_stereo_sidx.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "DASH IF - SegmentTemplate",
      "url": "https://livesim.dashif.org/livesim/testpic_2s/Manifest.mpd",
      "transport": "dash",
      "live": true
    },
    {
      "name": "DASH IF - SegmentTimeline",
      "url": "https://livesim.dashif.org/livesim/segtimeline_1/testpic_2s/Manifest.mpd",
      "transport": "dash",
      "live": true
    },
    {
      "name": "Envivio - DASH",
      "url": "http://dash.edgesuite.net/envivio/EnvivioDash3/manifest.mpd",
      "transport": "dash"
    },
    {
      "name": "Unified Streaming - Timeline - A-Team",
      "url": "https://demo.unified-streaming.com/video/ateam/ateam.ism/ateam.mpd",
      "transport": "dash"
    },
    {
      "name": "Super SpeedWay",
      "url": "https://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism/Manifest",
      "transport": "smooth"
    },
    {
      "name": "Big Buck Bunny",
      "url": "https://amssamples.streaming.mediaservices.windows.net/683f7e47-bd83-4427-b0a3-26a6c4547782/BigBuckBunny.ism/manifest",
      "transport": "smooth"
    },
    {
      "name": "Smooth Ingest",
      "url": "https://b028.wpc.azureedge.net/80B028/Samples/a38e6323-95e9-4f1f-9b38-75eba91704e4/5f2ce531-d508-49fb-8152-647eba422aec.ism/manifest",
      "transport": "smooth",
      "live": true
    },
    {
      "name": "Taxi 3 SoundTrack (Audio-Only)",
      "url": "https://playready.directtaps.net/smoothstreaming/ISMAAACLC/Taxi3_AACLC.ism/Manifest",
      "transport": "smooth"
    },
    {
      "name": "Multi-Period (5 Periods of 2 min)",
      "url": "https://download.tsi.telecom-paristech.fr/gpac/DASH_CONFORMANCE/TelecomParisTech/mp4-live-periods/mp4-live-periods-mpd.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "Big Buck Bunny WEBM",
      "url": "https://upload.wikimedia.org/wikipedia/commons/transcoded/8/88/Big_Buck_Bunny_alt.webm/Big_Buck_Bunny_alt.webm.360p.webm",
      "transport": "directfile",
      "live": false
    },
    {
      "name": "Big Buck Bunny MP4",
      "url": "http://download.blender.org/peach/bigbuckbunny_movies/BigBuckBunny_320x180.mp4",
      "transport": "directfile",
      "live": false
    },
    {
      "name": "Wikipedia test OGG (AUDIO ONLY)",
      "url": "https://upload.wikimedia.org/wikipedia/commons/f/f2/Median_test.ogg",
      "transport": "directfile",
      "live": false
    },
    {
      "name": "Google - Sintel webm only",
      "url": "https://storage.googleapis.com/shaka-demo-assets/sintel-webm-only/dash.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "Multi Video Tracks",
      "url": "https://utils.ssl.cdn.cra.cz/dash/1/manifest.mpd",
      "transport": "dash",
      "live": false
    },
    {
      "name": "Mix of DASH and Smooth VOD Contents",
      "url": metaplaylist_url_default,
      "transport": "metaplaylist"
    }
  ];

  // demo/full/scripts/components/GenerateLinkURL.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react20 = __toESM(require_react());
  function GeneratedLinkURL({
    url
  }) {
    if (url === void 0 || url === null || url === "") {
      return /* @__PURE__ */ import_react20.default.createElement("span", null, "URL: ", /* @__PURE__ */ import_react20.default.createElement("a", {
        className: "generated-url-link none"
      }, "Not a valid content!"));
    }
    return /* @__PURE__ */ import_react20.default.createElement("span", null, "URL: ", /* @__PURE__ */ import_react20.default.createElement("a", {
      className: "generated-url-link",
      href: url
    }, url));
  }
  var GenerateLinkURL_default = import_react20.default.memo(GeneratedLinkURL);

  // demo/full/scripts/components/GenerateLinkButton.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react21 = __toESM(require_react());
  function GenerateLinkButton({ enabled, onClick }) {
    return /* @__PURE__ */ import_react21.default.createElement("button", {
      "aria-label": "Generate link for the current custom button",
      className: "link" + (enabled ? " enabled" : ""),
      onClick
    }, /* @__PURE__ */ import_react21.default.createElement("svg", {
      "aria-hidden": "true",
      focusable: "false",
      role: "img",
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 512 512"
    }, /* @__PURE__ */ import_react21.default.createElement("path", {
      fill: "currentColor",
      d: "M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z"
    })));
  }
  var GenerateLinkButton_default = import_react21.default.memo(GenerateLinkButton);

  // demo/full/scripts/controllers/ContentList.jsx
  var MediaKeys_ = window.MediaKeys || window.MozMediaKeys || window.WebKitMediaKeys || window.MSMediaKeys || null;
  var HAS_EME_APIs = typeof navigator.requestMediaKeySystemAccess === "function" || MediaKeys_ != null && MediaKeys_.prototype && typeof MediaKeys_.isTypeSupported === "function" || typeof HTMLVideoElement.prototype.webkitGenerateKeyRequest === "function";
  var IS_HTTPS = window.location.protocol.startsWith("https");
  var CUSTOM_DRM_NAME = "Other";
  var TRANSPORT_TYPES = ["DASH", "Smooth", "DirectFile", "MetaPlaylist"];
  var DRM_TYPES = ["Widevine", "Playready", "Clearkey", CUSTOM_DRM_NAME];
  var DISABLE_ENCRYPTED_CONTENT = !HAS_EME_APIs && !IS_HTTPS;
  var URL_DENOMINATIONS = {
    DASH: "URL to the MPD",
    Smooth: "URL to the Manifest",
    DirectFile: "URL to the content"
  };
  function formatContent(content) {
    let displayName = content.name;
    let isDisabled = false;
    let isLocalContent = false;
    if (IS_HTTPS) {
      if (!content.localContent && content.url.startsWith("http:")) {
        displayName = "[HTTP only] " + displayName;
        isDisabled = true;
      }
    } else if (!HAS_EME_APIs && content.drmInfos && content.drmInfos.length) {
      displayName = "[HTTPS only] " + displayName;
      isDisabled = true;
    }
    if (content.live) {
      displayName += " (live)";
    }
    if (content.localContent) {
      displayName = (hasLocalStorage ? "[Stored] " : "[Saved] ") + displayName;
      isLocalContent = true;
    }
    return {
      contentName: content.name,
      displayName,
      drmInfos: content.drmInfos,
      fallbackKeyError: !!content.fallbackKeyError,
      fallbackLicenseRequest: !!content.fallbackLicenseRequest,
      id: content.id,
      isDisabled,
      isLocalContent,
      isLowLatency: !!content.lowLatency,
      supplementaryImageTracks: content.supplementaryImageTracks,
      supplementaryTextTracks: content.supplementaryTextTracks,
      transport: content.transport,
      url: content.url
    };
  }
  function constructContentList() {
    const localStorageContents = getLocalStorageContents();
    const reversedStoredContents = localStorageContents.slice().reverse();
    const storedAndRegularContents = reversedStoredContents.concat(contents_default);
    return TRANSPORT_TYPES.reduce((acc, tech) => {
      const customLinkContent = {
        url: "",
        contentName: "",
        transport: tech,
        drmInfos: [],
        displayName: "Custom link",
        isLocalContent: false,
        isDisabled: false,
        isLowLatency: false
      };
      acc[tech] = [customLinkContent].concat(storedAndRegularContents.filter(({ transport }) => transport === tech.toLowerCase()).map(formatContent));
      return acc;
    }, {});
  }
  function generateLinkForContent(content, {
    transportType,
    fallbackKeyError,
    fallbackLicenseRequest
  }) {
    if (content == null) {
      return null;
    }
    const licenseServerUrl = content.drmInfos && content.drmInfos[0] && content.drmInfos[0].licenseServerUrl;
    const serverCertificateUrl = content.drmInfos && content.drmInfos[0] && content.drmInfos[0].serverCertificateUrl;
    return generateLinkForCustomContent({
      chosenDRMType: content.drmInfos && content.drmInfos[0] && content.drmInfos[0].drm,
      customKeySystem: content.drmInfos && content.drmInfos[0] && content.drmInfos[0].customKeySystem,
      fallbackKeyError,
      fallbackLicenseRequest,
      manifestURL: content.url,
      licenseServerUrl,
      lowLatency: !!content.isLowLatency,
      serverCertificateUrl,
      transport: transportType
    });
  }
  function getCheckBoxValue(checkBoxElt) {
    return checkBoxElt.type === "checkbox" ? !!checkBoxElt.checked : !!checkBoxElt.value;
  }
  function getIndexOfFirstEnabledContent(contentList) {
    let contentChoiceIndex = 1;
    if (contentList.length <= 0) {
      throw new Error("No content for the transport: ", TRANSPORT_TYPES[0]);
    }
    while (contentChoiceIndex < contentList.length && contentList[contentChoiceIndex].isDisabled) {
      contentChoiceIndex++;
    }
    if (contentChoiceIndex >= contentList.length) {
      return 0;
    }
    return contentChoiceIndex;
  }
  function getKeySystemsOption(drmInfos, {
    fallbackKeyError,
    fallbackLicenseRequest
  }) {
    const wantedDRMs = drmInfos.map((drmInfo) => ({
      drm: drmInfo.drm === CUSTOM_DRM_NAME ? drmInfo.customKeySystem : drmInfo.drm,
      licenseServerUrl: drmInfo.licenseServerUrl,
      serverCertificateUrl: drmInfo.serverCertificateUrl,
      fallbackKeyError,
      fallbackLicenseRequest
    })).filter((drmInfo) => drmInfo.drm !== void 0);
    return parseDRMConfigurations(wantedDRMs);
  }
  var ContentList = class extends import_react22.default.Component {
    constructor(...args) {
      super(...args);
      const contentsPerType = constructContentList();
      const transportType = TRANSPORT_TYPES[0];
      this.state = {
        contentChoiceIndex: 0,
        contentNameField: "",
        contentsPerType,
        chosenDRMType: DRM_TYPES[0],
        customKeySystem: "",
        currentManifestURL: "",
        displayGeneratedLink: false,
        displayDRMSettings: false,
        fallbackKeyError: false,
        fallbackLicenseRequest: false,
        isSavingOrUpdating: false,
        licenseServerUrl: "",
        lowLatencyChecked: false,
        serverCertificateUrl: "",
        transportType
      };
    }
    componentDidMount() {
      const parsedHash = parseHashInURL(location.hash);
      if (parsedHash !== null) {
        const { tech } = parsedHash;
        if (TRANSPORT_TYPES.includes(tech)) {
          const {
            fallbackKeyError,
            fallbackLicenseRequest,
            lowLatency
          } = parsedHash;
          const newState = {
            contentChoiceIndex: 0,
            contentNameField: "",
            contentList: this.state.contentsPerType[tech],
            currentManifestURL: parsedHash.manifest,
            fallbackKeyError: !!fallbackKeyError,
            fallbackLicenseRequest: !!fallbackLicenseRequest,
            lowLatencyChecked: tech === "DASH" && !!lowLatency,
            transportType: tech
          };
          const chosenDRMType = DRM_TYPES.includes(parsedHash.drm) ? parsedHash.drm : void 0;
          if (chosenDRMType !== void 0) {
            newState.displayDRMSettings = true;
            newState.chosenDRMType = chosenDRMType;
            newState.customKeySystem = parsedHash.customKeySystem || "";
            newState.licenseServerUrl = parsedHash.licenseServ || "";
            newState.serverCertificateUrl = parsedHash.certServ || "";
          }
          this.setState(newState);
          return;
        }
      }
      const contentList = this.state.contentsPerType[this.state.transportType];
      const firstEnabledContentIndex = getIndexOfFirstEnabledContent(contentList);
      const content = contentList[firstEnabledContentIndex];
      this.changeSelectedContent(firstEnabledContentIndex, content);
    }
    loadContent(content) {
      const { loadVideo, stopVideo } = this.props;
      if (content == null) {
        stopVideo();
        return;
      }
      const {
        url,
        transport,
        fallbackKeyError,
        fallbackLicenseRequest,
        supplementaryImageTracks,
        supplementaryTextTracks,
        isLowLatency,
        drmInfos = []
      } = content;
      getKeySystemsOption(drmInfos, {
        fallbackKeyError,
        fallbackLicenseRequest
      }).then((keySystems) => {
        loadVideo({
          url,
          transport,
          supplementaryImageTracks,
          supplementaryTextTracks,
          textTrackMode: "html",
          lowLatencyMode: isLowLatency,
          keySystems
        });
      });
    }
    loadUrl(url, drmInfos) {
      const { loadVideo } = this.props;
      const {
        lowLatencyChecked,
        fallbackKeyError,
        fallbackLicenseRequest
      } = this.state;
      getKeySystemsOption(drmInfos, {
        fallbackKeyError,
        fallbackLicenseRequest
      }).then((keySystems) => {
        loadVideo({
          url,
          transport: this.state.transportType.toLowerCase(),
          textTrackMode: "html",
          keySystems,
          lowLatencyMode: lowLatencyChecked
        });
      });
    }
    changeTransportType(transportType) {
      this.setState({
        contentChoiceIndex: 0,
        contentNameField: "",
        chosenDRMType: DRM_TYPES[0],
        customKeySystem: "",
        currentManifestURL: "",
        displayDRMSettings: false,
        displayGeneratedLink: false,
        fallbackLicenseRequest: false,
        fallbackKeyError: false,
        isSavingOrUpdating: false,
        licenseServerUrl: "",
        lowLatencyChecked: false,
        serverCertificateUrl: "",
        transportType
      });
    }
    changeSelectedContent(index, content) {
      let currentManifestURL = "";
      let contentNameField = "";
      let customKeySystem = "";
      let licenseServerUrl = "";
      let serverCertificateUrl = "";
      const hasDRMSettings = content.drmInfos != null && content.drmInfos.length > 0;
      let drm = null;
      currentManifestURL = content.url;
      contentNameField = content.contentName;
      const fallbackKeyError = !!content.fallbackKeyError;
      const fallbackLicenseRequest = !!content.fallbackLicenseRequest;
      const isLowLatency = !!content.isLowLatency;
      if (hasDRMSettings) {
        drm = content.drmInfos[0].drm;
        customKeySystem = content.drmInfos[0].customKeySystem || "";
        licenseServerUrl = content.drmInfos[0].licenseServerUrl;
        serverCertificateUrl = content.drmInfos[0].serverCertificateUrl;
      }
      this.setState({
        contentChoiceIndex: index,
        contentNameField,
        chosenDRMType: drm != null ? drm : DRM_TYPES[0],
        customKeySystem,
        currentManifestURL,
        displayDRMSettings: hasDRMSettings,
        displayGeneratedLink: false,
        fallbackLicenseRequest,
        fallbackKeyError,
        isSavingOrUpdating: false,
        lowLatencyChecked: isLowLatency,
        licenseServerUrl,
        serverCertificateUrl
      });
    }
    render() {
      const { showOptions, onOptionToggle } = this.props;
      const {
        contentChoiceIndex,
        contentNameField,
        contentsPerType,
        chosenDRMType,
        customKeySystem,
        currentManifestURL,
        displayGeneratedLink,
        displayDRMSettings,
        fallbackKeyError,
        fallbackLicenseRequest,
        isSavingOrUpdating,
        licenseServerUrl,
        lowLatencyChecked,
        serverCertificateUrl,
        transportType
      } = this.state;
      const isCustomContent = contentChoiceIndex === 0;
      const isCustomDRM = chosenDRMType === CUSTOM_DRM_NAME;
      const contentsToSelect = contentsPerType[transportType];
      const chosenContent = contentsToSelect[contentChoiceIndex];
      let generatedLink = null;
      if (displayGeneratedLink) {
        generatedLink = contentChoiceIndex === 0 || isSavingOrUpdating ? generateLinkForCustomContent({
          chosenDRMType: displayDRMSettings ? chosenDRMType : void 0,
          customKeySystem: displayDRMSettings ? customKeySystem : void 0,
          fallbackKeyError,
          fallbackLicenseRequest,
          manifestURL: currentManifestURL,
          licenseServerUrl: displayDRMSettings ? licenseServerUrl : void 0,
          lowLatency: lowLatencyChecked,
          serverCertificateUrl: displayDRMSettings ? serverCertificateUrl : void 0,
          transport: transportType
        }) : generateLinkForContent(chosenContent, this.state);
      }
      const hasURL = currentManifestURL !== "";
      const isLocalContent = !!(chosenContent && chosenContent.isLocalContent);
      const onTransportChange = ({ value }) => {
        this.changeTransportType(value);
        const contents = contentsPerType[value];
        const firstEnabledContentIndex = getIndexOfFirstEnabledContent(contents);
        this.changeSelectedContent(firstEnabledContentIndex, contents[firstEnabledContentIndex]);
      };
      const onContentChoiceChange = ({ index }) => {
        const content = contentsToSelect[index];
        this.changeSelectedContent(index, content);
      };
      const onClickLoad = () => {
        if (contentChoiceIndex === 0) {
          const drmInfos = [{
            licenseServerUrl,
            serverCertificateUrl,
            drm: chosenDRMType,
            customKeySystem
          }];
          this.loadUrl(currentManifestURL, drmInfos);
        } else {
          this.loadContent(contentsToSelect[contentChoiceIndex]);
        }
      };
      const saveCurrentContent = () => {
        const contentToSave = {
          name: contentNameField,
          url: currentManifestURL,
          fallbackLicenseRequest,
          fallbackKeyError,
          lowLatency: lowLatencyChecked,
          transport: transportType.toLowerCase(),
          drmInfos: displayDRMSettings ? [{
            drm: chosenDRMType,
            customKeySystem,
            licenseServerUrl,
            serverCertificateUrl
          }] : void 0,
          id: chosenContent.id
        };
        const storedContent = storeContent(contentToSave);
        const contentList = constructContentList();
        this.setState({
          contentsPerType: contentList,
          isSavingOrUpdating: false
        });
        const contents = contentList[transportType];
        const firstEnabledContentIndex = contents.findIndex((c) => c.id === storedContent.id);
        if (firstEnabledContentIndex < 0) {
          console.warn("Stored content not found in local storage.");
          this.changeSelectedContent(0, contents[0]);
        } else {
          this.changeSelectedContent(firstEnabledContentIndex, contents[firstEnabledContentIndex]);
        }
      };
      const onClickSaveOrUpdate = () => this.setState({ isSavingOrUpdating: true });
      const onClickErase = () => {
        const content = contentsToSelect[contentChoiceIndex];
        if (content) {
          const hasRemoved = removeStoredContent(content.id);
          if (hasRemoved) {
            const contentList = constructContentList();
            this.setState({ contentsPerType: contentList });
            const contents = contentList[transportType];
            if (contentChoiceIndex >= contentList.length) {
              this.changeSelectedContent(0, contents[0]);
            } else {
              this.changeSelectedContent(contentChoiceIndex, contents[contentChoiceIndex]);
            }
          }
        }
      };
      const onNameInput = (evt) => this.setState({ contentNameField: evt.target.value });
      const onManifestInput = (evt) => this.setState({ currentManifestURL: evt.target.value });
      const onCustomKeySystemInput = (evt) => this.setState({ customKeySystem: evt.target.value });
      const onLicenseServerInput = (evt) => this.setState({ licenseServerUrl: evt.target.value });
      const onServerCertificateInput = (evt) => this.setState({ serverCertificateUrl: evt.target.value });
      const onChangeDisplayDRMSettings = (evt) => {
        const value = getCheckBoxValue(evt.target);
        if (value) {
          this.setState({ displayDRMSettings: true });
          return;
        }
        this.setState({
          displayDRMSettings: false,
          licenseServerUrl: "",
          serverCertificateUrl: ""
        });
      };
      const onLowLatencyClick = (evt) => {
        this.setState({ lowLatencyChecked: getCheckBoxValue(evt.target) });
      };
      const onDRMTypeClick = (type) => {
        if (chosenDRMType === type) {
          return;
        }
        this.setState({
          chosenDRMType: type,
          customKeySystem: ""
        });
      };
      const onCancel = () => {
        this.setState({ isSavingOrUpdating: false });
        this.changeSelectedContent(contentChoiceIndex, chosenContent);
      };
      const generateDRMButtons = () => {
        return DRM_TYPES.map((type) => /* @__PURE__ */ import_react22.default.createElement("span", {
          key: type
        }, /* @__PURE__ */ import_react22.default.createElement(Button_default, {
          className: "choice-input-button drm-button" + (chosenDRMType === type ? " selected" : ""),
          onClick: () => onDRMTypeClick(type),
          value: type
        })));
      };
      const onClickGenerateLink = () => {
        this.setState({ displayGeneratedLink: !displayGeneratedLink });
      };
      const onChangeFallbackLicenseRequest = (evt) => {
        this.setState({ fallbackLicenseRequest: getCheckBoxValue(evt.target) });
      };
      const onChangeFallbackKeyError = (evt) => {
        this.setState({ fallbackKeyError: getCheckBoxValue(evt.target) });
      };
      const selectValues = contentsToSelect.map((c) => {
        return {
          name: c.displayName,
          disabled: c.isDisabled
        };
      });
      return /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "choice-inputs-wrapper"
      }, /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "generated-url" + (displayGeneratedLink ? " enabled" : "")
      }, displayGeneratedLink ? /* @__PURE__ */ import_react22.default.createElement(GenerateLinkURL_default, {
        url: generatedLink
      }) : null), /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "content-inputs"
      }, /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "content-inputs-selects"
      }, /* @__PURE__ */ import_react22.default.createElement(Select_default, {
        className: "choice-input transport-type-choice white-select",
        ariaLabel: "Select a transport",
        onChange: onTransportChange,
        options: TRANSPORT_TYPES,
        selected: { value: transportType }
      }), /* @__PURE__ */ import_react22.default.createElement(Select_default, {
        className: "choice-input content-choice white-select",
        ariaLabel: "Select a content",
        onChange: onContentChoiceChange,
        options: selectValues,
        selected: { index: contentChoiceIndex }
      })), /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "content-inputs-middle"
      }, isCustomContent || isLocalContent ? [
        /* @__PURE__ */ import_react22.default.createElement(Button_default, {
          key: 0,
          className: "choice-input-button content-button enter-name-button" + (!hasURL ? " disabled" : ""),
          ariaLabel: "Save or update custom content",
          onClick: onClickSaveOrUpdate,
          disabled: !hasURL || isSavingOrUpdating,
          value: isLocalContent ? isSavingOrUpdating ? "Updating..." : "Update content" : isSavingOrUpdating ? "Saving..." : "Store content"
        }),
        /* @__PURE__ */ import_react22.default.createElement(GenerateLinkButton_default, {
          key: 1,
          enabled: displayGeneratedLink,
          onClick: onClickGenerateLink
        })
      ] : null, isLocalContent ? /* @__PURE__ */ import_react22.default.createElement(Button_default, {
        className: "choice-input-button erase-button",
        ariaLabel: "Remove custom content from saved contents",
        onClick: onClickErase,
        value: String.fromCharCode(61944)
      }) : null), /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "choice-input-button-wrapper"
      }, /* @__PURE__ */ import_react22.default.createElement(CheckBox_default, {
        className: "show-options",
        ariaLabel: "Show player options",
        checked: showOptions,
        onChange: onOptionToggle,
        name: "showOptions"
      }, "Show Options"), /* @__PURE__ */ import_react22.default.createElement(Button_default, {
        className: "choice-input-button load-button",
        ariaLabel: "Load the selected content now",
        onClick: onClickLoad,
        value: String.fromCharCode(61764)
      }))), isCustomContent || isLocalContent && isSavingOrUpdating ? /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "custom-input-wrapper"
      }, isSavingOrUpdating ? /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "update-control"
      }, /* @__PURE__ */ import_react22.default.createElement(FocusedInput_default, {
        className: "text-input need-to-fill",
        ariaLabel: "Name of the custom content to save",
        onChange: onNameInput,
        value: contentNameField,
        placeholder: "Content name"
      }), /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "update-control-buttons"
      }, /* @__PURE__ */ import_react22.default.createElement(Button_default, {
        className: "choice-input-button content-button save-button",
        ariaLabel: "Save/Update custom content",
        onClick: saveCurrentContent,
        disabled: !contentNameField || !currentManifestURL,
        value: isLocalContent ? "Update" : "Save"
      }), /* @__PURE__ */ import_react22.default.createElement(Button_default, {
        ariaLabel: "Cancel current modifications for the custom content",
        className: "choice-input-button content-button cancel-button",
        onClick: onCancel,
        value: "Cancel"
      }))) : null, /* @__PURE__ */ import_react22.default.createElement(Input_default, {
        ariaLabel: "Enter here the Manifest's URL",
        className: "text-input",
        onChange: onManifestInput,
        value: currentManifestURL,
        placeholder: (URL_DENOMINATIONS[transportType] || `URL to the ${transportType} content`) + (IS_HTTPS ? " (HTTPS only if mixed contents disabled)" : "")
      }), /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "player-box player-box-load"
      }, /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "encryption-checkbox custom-checkbox" + (DISABLE_ENCRYPTED_CONTENT ? " disabled" : "")
      }, (DISABLE_ENCRYPTED_CONTENT ? "[HTTPS only] " : "") + "Encrypted content", /* @__PURE__ */ import_react22.default.createElement("label", {
        className: "switch"
      }, /* @__PURE__ */ import_react22.default.createElement("input", {
        "aria-label": "Enable for an encrypted content",
        disabled: DISABLE_ENCRYPTED_CONTENT,
        name: "displayDRMSettingsTextInput",
        type: "checkbox",
        checked: displayDRMSettings,
        onChange: onChangeDisplayDRMSettings
      }), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "slider round"
      }))), displayDRMSettings ? /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "drm-settings"
      }, /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "drm-choice"
      }, generateDRMButtons()), isCustomDRM ? /* @__PURE__ */ import_react22.default.createElement("div", null, /* @__PURE__ */ import_react22.default.createElement(Input_default, {
        ariaLabel: 'Key system reverse domain name (e.g. "org.w3.clearkey")',
        className: "choice-input text-input",
        onChange: onCustomKeySystemInput,
        value: customKeySystem,
        placeholder: "Key system (reverse domain name)"
      })) : null, /* @__PURE__ */ import_react22.default.createElement("div", null, /* @__PURE__ */ import_react22.default.createElement(Input_default, {
        ariaLabel: "URL for the license server",
        className: "choice-input text-input",
        onChange: onLicenseServerInput,
        value: licenseServerUrl,
        placeholder: "License URL Server"
      })), /* @__PURE__ */ import_react22.default.createElement(Input_default, {
        ariaLabel: "URL for the server certificate (optional)",
        className: "choice-input text-input",
        onChange: onServerCertificateInput,
        value: serverCertificateUrl,
        placeholder: "Server certificate URL (optional)"
      }), /* @__PURE__ */ import_react22.default.createElement("div", null, /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "custom-checkbox fallback-checkbox"
      }, /* @__PURE__ */ import_react22.default.createElement("span", null, "Fallback if a key is refused ", /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "checkbox-indication"
      }, "(for content with multiple keys)")), /* @__PURE__ */ import_react22.default.createElement("label", {
        className: "input switch fallback-switch"
      }, /* @__PURE__ */ import_react22.default.createElement("input", {
        type: "checkbox",
        checked: fallbackKeyError,
        onChange: onChangeFallbackKeyError
      }), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "slider round"
      })))), /* @__PURE__ */ import_react22.default.createElement("div", null, /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "custom-checkbox fallback-checkbox"
      }, /* @__PURE__ */ import_react22.default.createElement("span", null, "Fallback if the license request fails ", /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "checkbox-indication"
      }, "(for content with multiple keys)")), /* @__PURE__ */ import_react22.default.createElement("label", {
        className: "input switch fallback-switch"
      }, /* @__PURE__ */ import_react22.default.createElement("input", {
        type: "checkbox",
        checked: fallbackLicenseRequest,
        onChange: onChangeFallbackLicenseRequest
      }), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "slider round"
      }))))) : null), transportType === "DASH" ? /* @__PURE__ */ import_react22.default.createElement("div", {
        className: "player-box player-box-load button-low-latency"
      }, /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "low-latency-checkbox custom-checkbox"
      }, "Low-Latency content", /* @__PURE__ */ import_react22.default.createElement("label", {
        className: "input switch"
      }, /* @__PURE__ */ import_react22.default.createElement("input", {
        "aria-label": "Enable for a low-latency content",
        type: "checkbox",
        checked: lowLatencyChecked,
        onChange: onLowLatencyClick
      }), /* @__PURE__ */ import_react22.default.createElement("span", {
        className: "slider round"
      })))) : null) : null);
    }
  };
  var ContentList_default = ContentList;

  // demo/full/scripts/controllers/Settings.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react30 = __toESM(require_react());

  // demo/full/scripts/lib/getCheckboxValue.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function getCheckBoxValue2(checkBoxElt) {
    return checkBoxElt.type === "checkbox" ? !!checkBoxElt.checked : !!checkBoxElt.value;
  }
  var getCheckboxValue_default = getCheckBoxValue2;

  // demo/full/scripts/components/Options/Option.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react23 = __toESM(require_react());
  function Option({ title, children }) {
    return /* @__PURE__ */ import_react23.default.createElement("div", {
      className: "optionWrapper"
    }, /* @__PURE__ */ import_react23.default.createElement("h4", {
      className: "optionTitle"
    }, title), /* @__PURE__ */ import_react23.default.createElement("hr", {
      className: "spacer"
    }), /* @__PURE__ */ import_react23.default.createElement("ul", {
      className: "loadVideooptions"
    }, children));
  }
  var Option_default = import_react23.default.memo(Option);

  // demo/full/scripts/components/Options/Playback.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react24 = __toESM(require_react());
  function TrackSwitch({
    onAutoPlayClick,
    autoPlay: autoPlay2,
    onManualBrSwitchingModeChange,
    manualBrSwitchingMode,
    stopAtEnd,
    onStopAtEndClick
  }) {
    return /* @__PURE__ */ import_react24.default.createElement(import_react24.Fragment, null, /* @__PURE__ */ import_react24.default.createElement("li", null, /* @__PURE__ */ import_react24.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
      name: "autoPlay",
      ariaLabel: "Auto play option",
      checked: autoPlay2,
      onChange: onAutoPlayClick
    }, "Auto Play")), /* @__PURE__ */ import_react24.default.createElement("li", {
      className: "featureWrapperWithSelectMode"
    }, /* @__PURE__ */ import_react24.default.createElement(Select_default, {
      className: "playerOptionInput",
      name: "manualBitrateSwitchingMode",
      onChange: ({ value }) => onManualBrSwitchingModeChange(value),
      selected: { value: manualBrSwitchingMode },
      options: ["seamless", "direct"]
    }, "Manual bitrate switching mode")), /* @__PURE__ */ import_react24.default.createElement("li", null, /* @__PURE__ */ import_react24.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
      name: "stopAtEnd",
      ariaLabel: "Stop at end option",
      checked: stopAtEnd,
      onChange: onStopAtEndClick
    }, "Stop At End")));
  }
  var Playback_default = import_react24.default.memo(TrackSwitch);

  // demo/full/scripts/components/Options/AudioAdaptiveSettings.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react25 = __toESM(require_react());

  // demo/full/scripts/lib/defaultOptionsValues.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var defaultOptionsValues = {
    autoPlay: true,
    manualBrSwitchingMode: "direct",
    initialVideoBr: 0,
    initialAudioBr: 0,
    minVideoBr: 0,
    minAudioBr: 0,
    maxVideoBr: Infinity,
    maxAudioBr: Infinity,
    limitVideoWidth: false,
    throttleVideoBitrateWhenHidden: false,
    stopAtEnd: false,
    segmentRetry: 4,
    manifestRetry: 4,
    offlineRetry: Infinity,
    enableFastSwitching: true,
    audioTrackSwitchingMode: "reload",
    onCodecSwitch: "continue",
    wantedBufferAhead: 30,
    maxVideoBufferSize: Infinity,
    maxBufferAhead: Infinity,
    maxBufferBehind: Infinity
  };
  var defaultOptionsValues_default = defaultOptionsValues;

  // demo/full/scripts/components/Options/AudioAdaptiveSettings.jsx
  function AudioAdaptiveSettings({
    initialAudioBr,
    minAudioBr,
    maxAudioBr,
    onInitialAudioBrInput,
    onMinAudioBrInput,
    onMaxAudioBrInput
  }) {
    const [isMinAudioBrLimited, setMinAudioBrLimit] = (0, import_react25.useState)(minAudioBr !== 0);
    const [isMaxAudioBrLimited, setMaxAudioBrLimit] = (0, import_react25.useState)(maxAudioBr !== Infinity);
    const onChangeLimitMinAudioBr = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setMinAudioBrLimit(false);
        onMinAudioBrInput(0);
      } else {
        setMinAudioBrLimit(true);
        onMinAudioBrInput(defaultOptionsValues_default.minAudioBr);
      }
    };
    const onChangeLimitMaxAudioBr = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setMaxAudioBrLimit(false);
        onMaxAudioBrInput(Infinity);
      } else {
        setMaxAudioBrLimit(true);
        onMaxAudioBrInput(defaultOptionsValues_default.maxAudioBr);
      }
    };
    return /* @__PURE__ */ import_react25.default.createElement(import_react25.Fragment, null, /* @__PURE__ */ import_react25.default.createElement("li", null, /* @__PURE__ */ import_react25.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react25.default.createElement("label", {
      htmlFor: "initialAudioBitrate"
    }, "Initial Audio Bitrate"), /* @__PURE__ */ import_react25.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react25.default.createElement("input", {
      type: "number",
      name: "initialAudioBitrate",
      id: "initialAudioBitrate",
      "aria-label": "Initial audio bitrate option",
      placeholder: "Number",
      onChange: (evt) => onInitialAudioBrInput(evt.target.value),
      value: initialAudioBr,
      className: "optionInput"
    }), /* @__PURE__ */ import_react25.default.createElement(Button_default, {
      className: parseFloat(initialAudioBr) === defaultOptionsValues_default.initialAudioBr ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        onInitialAudioBrInput(defaultOptionsValues_default.initialAudioBr);
      },
      value: String.fromCharCode(61473)
    })))), /* @__PURE__ */ import_react25.default.createElement("li", null, /* @__PURE__ */ import_react25.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react25.default.createElement("label", {
      htmlFor: "minAudioBitrate"
    }, "Min Audio Bitrate"), /* @__PURE__ */ import_react25.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react25.default.createElement("input", {
      type: "number",
      name: "minAudioBitrate",
      id: "minAudioBitrate",
      "aria-label": "Min audio bitrate option",
      placeholder: "Number",
      onChange: (evt) => onMinAudioBrInput(evt.target.value),
      value: minAudioBr,
      disabled: isMinAudioBrLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react25.default.createElement(Button_default, {
      className: parseFloat(minAudioBr) === defaultOptionsValues_default.minAudioBr ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setMinAudioBrLimit(defaultOptionsValues_default.minAudioBr !== 0);
        onMinAudioBrInput(defaultOptionsValues_default.minAudioBr);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react25.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Min video bitrate limit",
      name: "minAudioBitrateLimit",
      checked: isMinAudioBrLimited === false,
      onChange: onChangeLimitMinAudioBr
    }, "Do not limit")), /* @__PURE__ */ import_react25.default.createElement("li", null, /* @__PURE__ */ import_react25.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react25.default.createElement("label", {
      htmlFor: "maxAudioBitrate"
    }, "Max Audio Bitrate"), /* @__PURE__ */ import_react25.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react25.default.createElement("input", {
      type: "text",
      name: "maxAudioBitrate",
      id: "maxAudioBitrate",
      "aria-label": "Max audio bitrate",
      placeholder: "Number",
      onChange: (evt) => onMaxAudioBrInput(evt.target.value),
      value: String(maxAudioBr),
      disabled: isMaxAudioBrLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react25.default.createElement(Button_default, {
      className: parseFloat(maxAudioBr) === defaultOptionsValues_default.maxAudioBr ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setMaxAudioBrLimit(defaultOptionsValues_default.maxAudioBr !== Infinity);
        onMaxAudioBrInput(defaultOptionsValues_default.maxAudioBr);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react25.default.createElement("div", null, /* @__PURE__ */ import_react25.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Max audio bitrate limit",
      name: "maxAudioBitrateLimit",
      checked: isMaxAudioBrLimited === false,
      onChange: onChangeLimitMaxAudioBr
    }, "Do not limit"))));
  }
  var AudioAdaptiveSettings_default = import_react25.default.memo(AudioAdaptiveSettings);

  // demo/full/scripts/components/Options/VideoAdaptiveSettings.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react26 = __toESM(require_react());
  function VideoAdaptiveSettings({
    initialVideoBr,
    minVideoBr,
    maxVideoBr,
    onInitialVideoBrInput,
    onMinVideoBrInput,
    onMaxVideoBrInput,
    limitVideoWidth,
    throttleVideoBitrateWhenHidden,
    onLimitVideoWidthClick,
    onThrottleVideoBitrateWhenHiddenClick
  }) {
    const [isMinVideoBrLimited, setMinVideoBrLimit] = (0, import_react26.useState)(minVideoBr !== 0);
    const [isMaxVideoBrLimited, setMaxVideoBrLimit] = (0, import_react26.useState)(maxVideoBr !== Infinity);
    const onChangeLimitMinVideoBr = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setMinVideoBrLimit(false);
        onMinVideoBrInput(0);
      } else {
        setMinVideoBrLimit(true);
        onMinVideoBrInput(defaultOptionsValues_default.minVideoBr);
      }
    };
    const onChangeLimitMaxVideoBr = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setMaxVideoBrLimit(false);
        onMaxVideoBrInput(Infinity);
      } else {
        setMaxVideoBrLimit(true);
        onMaxVideoBrInput(defaultOptionsValues_default.maxVideoBr);
      }
    };
    return /* @__PURE__ */ import_react26.default.createElement(import_react26.Fragment, null, /* @__PURE__ */ import_react26.default.createElement("li", null, /* @__PURE__ */ import_react26.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react26.default.createElement("label", {
      htmlFor: "initialVideoBitrate"
    }, "Initial Video Bitrate"), /* @__PURE__ */ import_react26.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react26.default.createElement("input", {
      type: "number",
      name: "initialVideoBitrate",
      id: "initialVideoBitrate",
      "aria-label": "Initial video bitrate option",
      placeholder: "Number",
      onChange: (evt) => onInitialVideoBrInput(evt.target.value),
      value: initialVideoBr,
      className: "optionInput"
    }), /* @__PURE__ */ import_react26.default.createElement(Button_default, {
      className: parseFloat(initialVideoBr) === defaultOptionsValues_default.initialVideoBr ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        onInitialVideoBrInput(defaultOptionsValues_default.initialVideoBr);
      },
      value: String.fromCharCode(61473)
    })))), /* @__PURE__ */ import_react26.default.createElement("li", null, /* @__PURE__ */ import_react26.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react26.default.createElement("label", {
      htmlFor: "minVideoBitrate"
    }, "Min Video Bitrate"), /* @__PURE__ */ import_react26.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react26.default.createElement("input", {
      type: "number",
      name: "minVideoBitrate",
      id: "minVideoBitrate",
      "aria-label": "Min video bitrate option",
      placeholder: "Number",
      onChange: (evt) => onMinVideoBrInput(evt.target.value),
      value: minVideoBr,
      disabled: isMinVideoBrLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react26.default.createElement(Button_default, {
      className: parseInt(minVideoBr) === defaultOptionsValues_default.minVideoBr ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setMinVideoBrLimit(defaultOptionsValues_default.minVideoBr !== 0);
        onMinVideoBrInput(defaultOptionsValues_default.minVideoBr);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react26.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Min video bitrate limit",
      name: "minVideoBitrateLimit",
      checked: isMinVideoBrLimited === false,
      onChange: onChangeLimitMinVideoBr
    }, "Do not limit")), /* @__PURE__ */ import_react26.default.createElement("li", null, /* @__PURE__ */ import_react26.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react26.default.createElement("label", {
      htmlFor: "maxVideoBitrate"
    }, "Max Video Bitrate"), /* @__PURE__ */ import_react26.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react26.default.createElement("input", {
      type: "text",
      name: "maxVideoBitrate",
      id: "maxVideoBitrate",
      "aria-label": "Max video bitrate option",
      placeholder: "Number",
      onChange: (evt) => onMaxVideoBrInput(evt.target.value),
      value: maxVideoBr,
      disabled: isMaxVideoBrLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react26.default.createElement(Button_default, {
      className: parseFloat(maxVideoBr) === defaultOptionsValues_default.maxVideoBr ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setMaxVideoBrLimit(defaultOptionsValues_default.maxVideoBr !== Infinity);
        onMaxVideoBrInput(defaultOptionsValues_default.maxVideoBr);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react26.default.createElement("div", null, /* @__PURE__ */ import_react26.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      "aria-label": "Max video bitrate limit",
      name: "maxVideoBitrateLimit",
      checked: isMaxVideoBrLimited === false,
      onChange: onChangeLimitMaxVideoBr
    }, "Do not limit"))), /* @__PURE__ */ import_react26.default.createElement("li", null, /* @__PURE__ */ import_react26.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
      name: "limitVideoWidth",
      id: "limitVideoWidth",
      ariaLabel: "Limit video width option",
      checked: limitVideoWidth,
      onChange: onLimitVideoWidthClick
    }, "Limit Video Width")), /* @__PURE__ */ import_react26.default.createElement("li", null, /* @__PURE__ */ import_react26.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
      name: "throttleVideoBitrateWhenHidden",
      ariaLabel: "Throttle video bitrate when hidden option",
      checked: throttleVideoBitrateWhenHidden,
      onChange: onThrottleVideoBitrateWhenHiddenClick
    }, "Throttle Video Bitrate When Hidden")));
  }
  var VideoAdaptiveSettings_default = import_react26.default.memo(VideoAdaptiveSettings);

  // demo/full/scripts/components/Options/NetworkConfig.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react27 = __toESM(require_react());
  function NetworkConfig({
    segmentRetry,
    manifestRetry,
    offlineRetry,
    onSegmentRetryInput,
    onManifestRetryInput,
    onOfflineRetryInput
  }) {
    const [isSegmentRetryLimited, setSegmentRetryLimit] = (0, import_react27.useState)(segmentRetry !== Infinity);
    const [isManifestRetryLimited, setManifestRetryLimit] = (0, import_react27.useState)(manifestRetry !== Infinity);
    const [isOfflineRetryLimited, setOfflineRetryLimit] = (0, import_react27.useState)(offlineRetry !== Infinity);
    const onChangeLimitSegmentRetry = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setSegmentRetryLimit(false);
        onSegmentRetryInput("Infinity");
      } else {
        setSegmentRetryLimit(true);
        onSegmentRetryInput(defaultOptionsValues_default.segmentRetry);
      }
    };
    const onChangeLimitManifestRetry = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setManifestRetryLimit(false);
        onManifestRetryInput(Infinity);
      } else {
        setManifestRetryLimit(true);
        onManifestRetryInput(defaultOptionsValues_default.manifestRetry);
      }
    };
    const onChangeLimitOfflineRetry = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setOfflineRetryLimit(false);
        onOfflineRetryInput(Infinity);
      } else {
        setOfflineRetryLimit(true);
        onOfflineRetryInput(defaultOptionsValues_default.offlineRetry);
      }
    };
    return /* @__PURE__ */ import_react27.default.createElement(import_react27.Fragment, null, /* @__PURE__ */ import_react27.default.createElement("li", null, /* @__PURE__ */ import_react27.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react27.default.createElement("label", {
      htmlFor: "segmentRetry"
    }, "Segment Retry"), /* @__PURE__ */ import_react27.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react27.default.createElement("input", {
      type: "text",
      name: "segmentRetry",
      id: "segmentRetry",
      "aria-label": "Segment retry option",
      placeholder: "Number",
      onChange: (evt) => onSegmentRetryInput(evt.target.value),
      value: segmentRetry,
      disabled: isSegmentRetryLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react27.default.createElement(Button_default, {
      className: parseFloat(segmentRetry) === defaultOptionsValues_default.segmentRetry ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setSegmentRetryLimit(defaultOptionsValues_default.segmentRetry !== Infinity);
        onSegmentRetryInput(defaultOptionsValues_default.segmentRetry);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react27.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Segment retry limit option",
      name: "segmentRetryLimit",
      checked: isSegmentRetryLimited === false,
      onChange: onChangeLimitSegmentRetry
    }, "Do not limit")), /* @__PURE__ */ import_react27.default.createElement("li", null, /* @__PURE__ */ import_react27.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react27.default.createElement("label", {
      htmlFor: "manifestRetry"
    }, "Manifest Retry"), /* @__PURE__ */ import_react27.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react27.default.createElement("input", {
      type: "text",
      name: "manifestRetry",
      id: "segmentRetry",
      "aria-label": "Manifest retry",
      placeholder: "Number",
      onChange: (evt) => onManifestRetryInput(evt.target.value),
      value: manifestRetry,
      disabled: isManifestRetryLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react27.default.createElement(Button_default, {
      className: parseFloat(manifestRetry) === defaultOptionsValues_default.manifestRetry ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setManifestRetryLimit(defaultOptionsValues_default.manifestRetry !== Infinity);
        onManifestRetryInput(defaultOptionsValues_default.manifestRetry);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react27.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Manifest retry limit option",
      name: "manifestRetryLimit",
      checked: isManifestRetryLimited === false,
      onChange: onChangeLimitManifestRetry
    }, "Do not limit")), /* @__PURE__ */ import_react27.default.createElement("li", null, /* @__PURE__ */ import_react27.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react27.default.createElement("label", {
      htmlFor: "offlineRetry"
    }, "Offline Retry"), /* @__PURE__ */ import_react27.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react27.default.createElement("input", {
      type: "text",
      "aria-label": "Offline retry option",
      name: "offlineRetry",
      id: "offlineRetry",
      placeholder: "Number",
      className: "optionInput",
      onChange: (evt) => onOfflineRetryInput(evt.target.value),
      value: offlineRetry,
      disabled: isOfflineRetryLimited === false
    }), /* @__PURE__ */ import_react27.default.createElement(Button_default, {
      className: parseFloat(offlineRetry) === defaultOptionsValues_default.offlineRetry ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setOfflineRetryLimit(defaultOptionsValues_default.offlineRetry !== Infinity);
        onOfflineRetryInput(defaultOptionsValues_default.offlineRetry);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react27.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Offline retry limit option",
      name: "offlineRetryLimit",
      id: "offlineRetryLimit",
      checked: isOfflineRetryLimited === false,
      onChange: onChangeLimitOfflineRetry
    }, "Do not limit")));
  }
  var NetworkConfig_default = import_react27.default.memo(NetworkConfig);

  // demo/full/scripts/components/Options/TrackSwitch.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react28 = __toESM(require_react());
  function NetworkConfig2({
    enableFastSwitching,
    audioTrackSwitchingMode,
    onCodecSwitch,
    onEnableFastSwitchingClick,
    onAudioTrackSwitchingModeChange,
    onCodecSwitchChange
  }) {
    return /* @__PURE__ */ import_react28.default.createElement(import_react28.Fragment, null, /* @__PURE__ */ import_react28.default.createElement("li", null, /* @__PURE__ */ import_react28.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox playerOptionsCheckBoxTitle",
      ariaLabel: "Fast switching option",
      name: "fastSwitching",
      id: "fastSwitching",
      checked: enableFastSwitching,
      onChange: onEnableFastSwitchingClick
    }, "Fast Switching")), /* @__PURE__ */ import_react28.default.createElement("li", {
      className: "featureWrapperWithSelectMode"
    }, /* @__PURE__ */ import_react28.default.createElement(Select_default, {
      className: "playerOptionInput",
      name: "audioTrackSwitchingMode",
      onChange: ({ value }) => onAudioTrackSwitchingModeChange(value),
      selected: { value: audioTrackSwitchingMode },
      options: ["seamless", "direct", "reload"]
    }, "Audio track switching mode")), /* @__PURE__ */ import_react28.default.createElement("li", {
      className: "featureWrapperWithSelectMode"
    }, /* @__PURE__ */ import_react28.default.createElement(Select_default, {
      className: "playerOptionInput",
      name: "onCodecSwitch",
      onChange: ({ value }) => onCodecSwitchChange(value),
      selected: { value: onCodecSwitch },
      options: ["continue", "reload"]
    }, "On Codec Switch")));
  }
  var TrackSwitch_default = import_react28.default.memo(NetworkConfig2);

  // demo/full/scripts/components/Options/BufferOptions.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react29 = __toESM(require_react());
  function BufferOptions({
    wantedBufferAhead,
    maxVideoBufferSize,
    maxBufferAhead,
    maxBufferBehind,
    onWantedBufferAheadInput,
    onMaxVideoBufferSizeInput,
    onMaxBufferAheadInput,
    onMaxBufferBehindInput
  }) {
    const [isMaxBufferAHeadLimited, setMaxBufferAHeadLimit] = (0, import_react29.useState)(maxBufferAhead !== Infinity);
    const [isMaxBufferBehindLimited, setMaxBufferBehindLimit] = (0, import_react29.useState)(maxBufferBehind !== Infinity);
    const [isMaxVideoBufferSizeLimited, setMaxVideoBufferSizeLimit] = (0, import_react29.useState)(maxVideoBufferSize !== Infinity);
    const onChangeLimitMaxBufferAHead = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setMaxBufferAHeadLimit(false);
        onMaxBufferAheadInput(Infinity);
      } else {
        setMaxBufferAHeadLimit(true);
        onMaxBufferAheadInput(defaultOptionsValues_default.maxBufferAhead);
      }
    };
    const onChangeLimitMaxBufferBehind = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setMaxBufferBehindLimit(false);
        onMaxBufferBehindInput(Infinity);
      } else {
        setMaxBufferBehindLimit(true);
        onMaxBufferAheadInput(defaultOptionsValues_default.maxBufferBehind);
      }
    };
    const onChangeLimitMaxVideoBufferSize = (evt) => {
      const isNotLimited = getCheckboxValue_default(evt.target);
      if (isNotLimited) {
        setMaxVideoBufferSizeLimit(false);
        onMaxVideoBufferSizeInput(Infinity);
      } else {
        setMaxVideoBufferSizeLimit(true);
        onMaxVideoBufferSizeInput(defaultOptionsValues_default.maxVideoBufferSize);
      }
    };
    return /* @__PURE__ */ import_react29.default.createElement(import_react29.Fragment, null, /* @__PURE__ */ import_react29.default.createElement("li", null, /* @__PURE__ */ import_react29.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react29.default.createElement("label", {
      htmlFor: "wantedBufferAhead"
    }, "Wanted Buffer Ahead"), /* @__PURE__ */ import_react29.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react29.default.createElement("input", {
      type: "text",
      step: "10",
      "aria-label": "Wanted buffer a head option",
      name: "wantedBufferAhead",
      id: "wantedBufferAhead",
      placeholder: "Number",
      onChange: (evt) => onWantedBufferAheadInput(evt.target.value),
      value: wantedBufferAhead,
      className: "optionInput"
    }), /* @__PURE__ */ import_react29.default.createElement(Button_default, {
      className: parseFloat(wantedBufferAhead) === defaultOptionsValues_default.wantedBufferAhead ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        onWantedBufferAheadInput(defaultOptionsValues_default.wantedBufferAhead);
      },
      value: String.fromCharCode(61473)
    })))), /* @__PURE__ */ import_react29.default.createElement("li", null, /* @__PURE__ */ import_react29.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react29.default.createElement("label", {
      htmlFor: "maxVideoBufferSize"
    }, " Max Video Buffer Size"), /* @__PURE__ */ import_react29.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react29.default.createElement("input", {
      type: "text",
      step: "10",
      "aria-label": "maxVideoBufferSize option",
      name: "maxVideoBufferSize",
      id: "maxVideoBufferSize",
      placeholder: "Number",
      onChange: (evt) => onMaxVideoBufferSizeInput(evt.target.value),
      value: maxVideoBufferSize,
      disabled: isMaxVideoBufferSizeLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react29.default.createElement(Button_default, {
      className: parseFloat(maxVideoBufferSize) === defaultOptionsValues_default.maxVideoBufferSize ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setMaxVideoBufferSizeLimit(defaultOptionsValues_default.maxVideoBufferSize !== Infinity);
        onMaxVideoBufferSizeInput(defaultOptionsValues_default.maxVideoBufferSize);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react29.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Do not limit maxVideoBufferSize option",
      name: "maxVideoBufferSizeLimit",
      checked: isMaxVideoBufferSizeLimited === false,
      onChange: onChangeLimitMaxVideoBufferSize
    }, "Do not limit")), /* @__PURE__ */ import_react29.default.createElement("li", null, /* @__PURE__ */ import_react29.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react29.default.createElement("label", {
      htmlFor: "maxBufferAhead"
    }, "Max Buffer Ahead"), /* @__PURE__ */ import_react29.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react29.default.createElement("input", {
      type: "text",
      "aria-label": "Max buffer a head option",
      name: "maxBufferAhead",
      id: "maxBufferAhead",
      placeholder: "Number",
      onChange: (evt) => onMaxBufferAheadInput(evt.target.value),
      value: maxBufferAhead,
      disabled: isMaxBufferAHeadLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react29.default.createElement(Button_default, {
      className: parseFloat(maxBufferAhead) === defaultOptionsValues_default.maxBufferAhead ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setMaxBufferAHeadLimit(defaultOptionsValues_default.maxBufferAhead !== Infinity);
        onMaxBufferAheadInput(defaultOptionsValues_default.maxBufferAhead);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react29.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Do not limit max buffer a head option",
      name: "maxBufferAheadLimit",
      checked: isMaxBufferAHeadLimited === false,
      onChange: onChangeLimitMaxBufferAHead
    }, "Do not limit")), /* @__PURE__ */ import_react29.default.createElement("li", null, /* @__PURE__ */ import_react29.default.createElement("div", {
      className: "playerOptionInput"
    }, /* @__PURE__ */ import_react29.default.createElement("label", {
      htmlFor: "maxBufferBehind"
    }, "Max Buffer Behind"), /* @__PURE__ */ import_react29.default.createElement("span", {
      className: "wrapperInputWithResetBtn"
    }, /* @__PURE__ */ import_react29.default.createElement("input", {
      type: "text",
      "aria-label": "Max buffer behind option",
      name: "maxBufferBehind",
      id: "maxBufferBehind",
      placeholder: "Number",
      onChange: (evt) => onMaxBufferBehindInput(evt.target.value),
      value: maxBufferBehind,
      disabled: isMaxBufferBehindLimited === false,
      className: "optionInput"
    }), /* @__PURE__ */ import_react29.default.createElement(Button_default, {
      className: parseFloat(maxBufferBehind) === defaultOptionsValues_default.maxBufferBehind ? "resetBtn disabledResetBtn" : "resetBtn",
      ariaLabel: "Reset option to default value",
      title: "Reset option to default value",
      onClick: () => {
        setMaxBufferBehindLimit(defaultOptionsValues_default.maxBufferBehind !== Infinity);
        onMaxBufferBehindInput(defaultOptionsValues_default.maxBufferBehind);
      },
      value: String.fromCharCode(61473)
    }))), /* @__PURE__ */ import_react29.default.createElement(CheckBox_default, {
      className: "playerOptionsCheckBox",
      ariaLabel: "Do not limit max buffer behind option",
      name: "maxBufferBehindLimit",
      checked: isMaxBufferBehindLimited === false,
      onChange: onChangeLimitMaxBufferBehind
    }, "Do not limit")));
  }
  var BufferOptions_default = import_react29.default.memo(BufferOptions);

  // demo/full/scripts/controllers/Settings.jsx
  var Settings = class extends import_react30.default.Component {
    constructor(...args) {
      super(...args);
      __publicField(this, "onAutoPlayClick", (evt) => this.setState({ autoPlay: getCheckboxValue_default(evt.target) }));
      __publicField(this, "onManualBrSwitchingModeChange", (value) => this.setState({ manualBrSwitchingMode: value }));
      __publicField(this, "onInitialVideoBrInput", (value) => this.setState({ initialVideoBr: value }));
      __publicField(this, "onInitialAudioBrInput", (value) => this.setState({ initialAudioBr: value }));
      __publicField(this, "onMinVideoBrInput", (value) => this.setState({ minVideoBr: value }));
      __publicField(this, "onMinAudioBrInput", (value) => this.setState({ minAudioBr: value }));
      __publicField(this, "onMaxVideoBrInput", (value) => this.setState({ maxVideoBr: value }));
      __publicField(this, "onMaxAudioBrInput", (value) => this.setState({ maxAudioBr: value }));
      __publicField(this, "onLimitVideoWidthClick", (evt) => this.setState({ limitVideoWidth: getCheckboxValue_default(evt.target) }));
      __publicField(this, "onThrottleVideoBitrateWhenHiddenClick", (evt) => this.setState({
        throttleVideoBitrateWhenHidden: getCheckboxValue_default(evt.target)
      }));
      __publicField(this, "onStopAtEndClick", (evt) => this.setState({ stopAtEnd: getCheckboxValue_default(evt.target) }));
      __publicField(this, "onSegmentRetryInput", (value) => this.setState({ segmentRetry: value }));
      __publicField(this, "onManifestRetryInput", (value) => this.setState({ manifestRetry: value }));
      __publicField(this, "onOfflineRetryInput", (value) => this.setState({ offlineRetry: value }));
      __publicField(this, "onEnableFastSwitchingClick", (evt) => this.setState({ enableFastSwitching: getCheckboxValue_default(evt.target) }));
      __publicField(this, "onAudioTrackSwitchingModeChange", (value) => this.setState({ audioTrackSwitchingMode: value }));
      __publicField(this, "onCodecSwitchChange", (value) => this.setState({ onCodecSwitch: value }));
      __publicField(this, "onWantedBufferAheadInput", (value) => this.setState({ wantedBufferAhead: value }));
      __publicField(this, "onMaxVideoBufferSizeInput", (value) => this.setState({ maxVideoBufferSize: value }));
      __publicField(this, "onMaxBufferBehindInput", (value) => this.setState({ maxBufferBehind: value }));
      __publicField(this, "onMaxBufferAheadInput", (value) => this.setState({ maxBufferAhead: value }));
      this.state = __spreadValues({}, defaultOptionsValues_default);
    }
    getOptions() {
      const {
        initialVideoBr,
        initialAudioBr,
        minVideoBr,
        minAudioBr,
        maxVideoBr,
        maxAudioBr,
        wantedBufferAhead,
        maxVideoBufferSize,
        maxBufferAhead,
        maxBufferBehind,
        limitVideoWidth,
        throttleVideoBitrateWhenHidden,
        stopAtEnd,
        autoPlay: autoPlay2,
        audioTrackSwitchingMode,
        manualBrSwitchingMode,
        onCodecSwitch,
        enableFastSwitching,
        segmentRetry,
        manifestRetry,
        offlineRetry
      } = this.state;
      return {
        initOpts: {
          initialVideoBitrate: parseFloat(initialVideoBr),
          initialAudioBitrate: parseFloat(initialAudioBr),
          minVideoBitrate: parseFloat(minVideoBr),
          minAudioBitrate: parseFloat(minAudioBr),
          maxVideoBitrate: parseFloat(maxVideoBr),
          maxAudioBitrate: parseFloat(maxAudioBr),
          wantedBufferAhead: parseFloat(wantedBufferAhead),
          maxVideoBufferSize: parseFloat(maxVideoBufferSize),
          maxBufferAhead: parseFloat(maxBufferAhead),
          maxBufferBehind: parseFloat(maxBufferBehind),
          limitVideoWidth,
          throttleVideoBitrateWhenHidden,
          stopAtEnd
        },
        loadVideoOpts: {
          autoPlay: autoPlay2,
          audioTrackSwitchingMode,
          manualBitrateSwitchingMode: manualBrSwitchingMode,
          onCodecSwitch,
          enableFastSwitching,
          networkConfig: {
            segmentRetry: parseFloat(segmentRetry),
            manifestRetry: parseFloat(manifestRetry),
            offlineRetry: parseFloat(offlineRetry)
          }
        }
      };
    }
    render() {
      const {
        autoPlay: autoPlay2,
        manualBrSwitchingMode,
        initialVideoBr,
        initialAudioBr,
        minVideoBr,
        minAudioBr,
        maxVideoBr,
        maxAudioBr,
        limitVideoWidth,
        throttleVideoBitrateWhenHidden,
        stopAtEnd,
        segmentRetry,
        manifestRetry,
        offlineRetry,
        enableFastSwitching,
        audioTrackSwitchingMode,
        onCodecSwitch,
        wantedBufferAhead,
        maxVideoBufferSize,
        maxBufferAhead,
        maxBufferBehind
      } = this.state;
      const initialSettings = {
        initialVideoBr,
        initialAudioBr,
        minAudioBr,
        minVideoBr,
        maxVideoBr,
        maxAudioBr,
        limitVideoWidth,
        throttleVideoBitrateWhenHidden,
        onInitialVideoBrInput: this.onInitialVideoBrInput,
        onInitialAudioBrInput: this.onInitialAudioBrInput,
        onMinAudioBrInput: this.onMinAudioBrInput,
        onMinVideoBrInput: this.onMinVideoBrInput,
        onMaxAudioBrInput: this.onMaxAudioBrInput,
        onMaxVideoBrInput: this.onMaxVideoBrInput,
        onLimitVideoWidthClick: this.onLimitVideoWidthClick,
        onThrottleVideoBitrateWhenHiddenClick: this.onThrottleVideoBitrateWhenHiddenClick
      };
      const networkConfig = {
        segmentRetry,
        manifestRetry,
        offlineRetry,
        onSegmentRetryInput: this.onSegmentRetryInput,
        onManifestRetryInput: this.onManifestRetryInput,
        onOfflineRetryInput: this.onOfflineRetryInput
      };
      const trackSwitchModeConfig = {
        enableFastSwitching,
        audioTrackSwitchingMode,
        onCodecSwitch,
        onEnableFastSwitchingClick: this.onEnableFastSwitchingClick,
        onAudioTrackSwitchingModeChange: this.onAudioTrackSwitchingModeChange,
        onCodecSwitchChange: this.onCodecSwitchChange
      };
      if (!this.props.showOptions) {
        return null;
      }
      return /* @__PURE__ */ import_react30.default.createElement("div", {
        className: "settingsWrapper"
      }, /* @__PURE__ */ import_react30.default.createElement("div", {
        style: { display: "flex" }
      }, /* @__PURE__ */ import_react30.default.createElement(Option_default, {
        title: "Playback"
      }, /* @__PURE__ */ import_react30.default.createElement(Playback_default, {
        autoPlay: autoPlay2,
        manualBrSwitchingMode,
        onAutoPlayClick: this.onAutoPlayClick,
        onManualBrSwitchingModeChange: this.onManualBrSwitchingModeChange,
        stopAtEnd,
        onStopAtEndClick: this.onStopAtEndClick
      })), /* @__PURE__ */ import_react30.default.createElement(Option_default, {
        title: "Video adaptive settings"
      }, /* @__PURE__ */ import_react30.default.createElement(VideoAdaptiveSettings_default, __spreadValues({}, initialSettings))), /* @__PURE__ */ import_react30.default.createElement(Option_default, {
        title: "Audio adaptive settings"
      }, /* @__PURE__ */ import_react30.default.createElement(AudioAdaptiveSettings_default, __spreadValues({}, initialSettings)))), /* @__PURE__ */ import_react30.default.createElement("div", {
        style: { display: "flex" }
      }, /* @__PURE__ */ import_react30.default.createElement(Option_default, {
        title: "Network Config"
      }, /* @__PURE__ */ import_react30.default.createElement(NetworkConfig_default, __spreadValues({}, networkConfig))), /* @__PURE__ */ import_react30.default.createElement(Option_default, {
        title: "Track Switch Mode"
      }, /* @__PURE__ */ import_react30.default.createElement(TrackSwitch_default, __spreadValues({}, trackSwitchModeConfig))), /* @__PURE__ */ import_react30.default.createElement(Option_default, {
        title: "Buffer Options"
      }, /* @__PURE__ */ import_react30.default.createElement(BufferOptions_default, {
        wantedBufferAhead,
        maxVideoBufferSize,
        maxBufferAhead,
        maxBufferBehind,
        onWantedBufferAheadInput: this.onWantedBufferAheadInput,
        onMaxBufferAheadInput: this.onMaxBufferAheadInput,
        onMaxBufferBehindInput: this.onMaxBufferBehindInput,
        onMaxVideoBufferSizeInput: this.onMaxVideoBufferSizeInput
      }))));
    }
  };
  var Settings_default = Settings;

  // demo/full/scripts/controllers/ErrorDisplayer.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react31 = __toESM(require_react());
  var PlayerError = ({ error }) => {
    const message = error && error.message ? error.message : error;
    return /* @__PURE__ */ import_react31.default.createElement("span", {
      className: "fatal-error"
    }, /* @__PURE__ */ import_react31.default.createElement("span", {
      className: "error-icon icon"
    }, String.fromCharCode(61553)), /* @__PURE__ */ import_react31.default.createElement("span", {
      className: "error-intro"
    }, "The Player encountered a fatal Error:"), /* @__PURE__ */ import_react31.default.createElement("span", {
      className: "error-message"
    }, message));
  };
  var ErrorDisplayer = ({ error }) => {
    return /* @__PURE__ */ import_react31.default.createElement("div", {
      className: "player-error"
    }, error ? /* @__PURE__ */ import_react31.default.createElement(PlayerError, {
      error
    }) : null);
  };
  var ErrorDisplayer_default = import_react31.default.memo(withModulesState_default({
    player: {
      error: "error"
    }
  })(ErrorDisplayer));

  // demo/full/scripts/controllers/LogDisplayer.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react32 = __toESM(require_react());
  init_esm5();
  var LogElement = ({ text, date }) => /* @__PURE__ */ import_react32.default.createElement("div", {
    className: "player-log-item"
  }, date.toISOString() + " - " + text);
  var LogDisplayer = class extends import_react32.default.Component {
    constructor(...args) {
      super(...args);
      this.state = { logs: [] };
      this._logs = [];
      this.hasScrolledToBottom = true;
    }
    addLog(text) {
      this._logs = [...this._logs, {
        text,
        date: new Date()
      }];
      this.setState({ logs: this._logs.slice() });
    }
    resetLogs() {
      this._logs = [];
      this.setState({ logs: [] });
    }
    componentDidMount() {
      this.destructionSubject = new Subject();
      const { player } = this.props;
      player.$get("videoBitrateAuto").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe((vbAuto) => {
        const text = "Video Bitrate selection changed to " + (vbAuto ? "automatic" : "manual");
        this.addLog(text);
      });
      player.$get("audioBitrateAuto").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe((abAuto) => {
        const text = "Audio Bitrate selection changed to " + (abAuto ? "automatic" : "manual");
        this.addLog(text);
      });
      player.$get("videoBitrate").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe((vb) => {
        const text = "Video Bitrate changed to " + vb;
        this.addLog(text);
      });
      player.$get("audioBitrate").pipe(takeUntil(this.destructionSubject), skip(1)).subscribe((ab) => {
        const text = "Audio Bitrate changed to " + ab;
        this.addLog(text);
      });
      player.$get("error").pipe(skip(1), takeUntil(this.destructionSubject), filter((x) => x)).subscribe((error) => {
        const message = error.message ? error.message : error;
        const text = "The player encountered a fatal Error: " + message;
        this.addLog(text);
      });
      player.$get("isLoading").pipe(skip(1), takeUntil(this.destructionSubject), filter((x) => x)).subscribe(() => {
        const text = "A new content is Loading.";
        this.addLog(text);
      });
      player.$get("hasCurrentContent").pipe(skip(1), takeUntil(this.destructionSubject), filter((x) => x)).subscribe(() => {
        const text = "The new content has been loaded.";
        this.addLog(text);
      });
      player.$get("isStopped").pipe(skip(1), takeUntil(this.destructionSubject), filter((x) => x)).subscribe(() => {
        const text = "The current content is stopped";
        this.addLog(text);
      });
      player.$get("hasEnded").pipe(skip(1), takeUntil(this.destructionSubject), filter((x) => x)).subscribe(() => {
        const text = "The current content has ended";
        this.addLog(text);
      });
      player.$get("isBuffering").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe((ib) => {
        const text = ib ? "The current content is buffering" : "The current content is not buffering anymore";
        this.addLog(text);
      });
      player.$get("isSeeking").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe((ib) => {
        const text = ib ? "The current content is seeking" : "The current content is not seeking anymore";
        this.addLog(text);
      });
      player.$get("availableLanguages").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe(() => {
        const text = "The audio track list has changed";
        this.addLog(text);
      });
      player.$get("availableSubtitles").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe(() => {
        const text = "The text track list has changed";
        this.addLog(text);
      });
      player.$get("availableVideoTracks").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe(() => {
        const text = "The video track list has changed";
        this.addLog(text);
      });
      player.$get("availableAudioBitrates").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe(() => {
        const text = "The audio bitrate list has changed";
        this.addLog(text);
      });
      player.$get("availableVideoBitrates").pipe(skip(1), takeUntil(this.destructionSubject)).subscribe(() => {
        const text = "The video bitrate list has changed";
        this.addLog(text);
      });
      this.scrollToBottom();
      const onScroll = () => {
        if (this.element.scrollHeight - this.element.offsetHeight === this.element.scrollTop) {
          this.hasScrolledToBottom = true;
        } else {
          this.hasScrolledToBottom = false;
        }
      };
      this.element.addEventListener("scroll", onScroll, { passive: true });
      this.destructionSubject.subscribe(() => this.element.removeEventListener("scroll", onScroll));
    }
    scrollToBottom() {
      if (this.hasScrolledToBottom) {
        this.element.scrollTop = this.element.scrollHeight;
      }
    }
    componentDidUpdate() {
      this.scrollToBottom();
    }
    componentWillUnmount() {
      this.destructionSubject.next();
      this.destructionSubject.complete();
    }
    render() {
      const { logs } = this.state;
      const logTexts = logs.map(({ text, date }, i) => /* @__PURE__ */ import_react32.default.createElement(LogElement, {
        key: i,
        text,
        date
      }));
      const clearLogs = () => this.resetLogs();
      return /* @__PURE__ */ import_react32.default.createElement("div", {
        className: "player-logs-wrapper"
      }, /* @__PURE__ */ import_react32.default.createElement("div", {
        className: "player-logs-wrapper-title"
      }, "Logs"), /* @__PURE__ */ import_react32.default.createElement("div", {
        className: "player-logs",
        ref: (el) => this.element = el
      }, /* @__PURE__ */ import_react32.default.createElement(Button_default, {
        ariaLabel: "Clear all logs",
        className: "player-logs-wrapper-trash",
        onClick: clearLogs,
        value: String.fromCharCode(61534)
      }), logTexts));
    }
  };
  var LogDisplayer_default = import_react32.default.memo(LogDisplayer);

  // demo/full/scripts/controllers/charts/index.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react36 = __toESM(require_react());

  // demo/full/scripts/modules/ChartData.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var ChartData_default = ({ state }, { maxSize }) => {
    const data = [];
    state.set({ data: data.slice() });
    return {
      ADD_DATA: (val) => {
        if (data.length >= maxSize) {
          data.splice(0, data.length + 1 - maxSize);
        }
        data.push({
          date: performance.now(),
          value: val
        });
        state.set({ data: data.slice() });
      },
      REMOVE_DATA: (number = 1) => {
        data.splice(0, number);
        state.set({ data: data.slice() });
      }
    };
  };

  // demo/full/scripts/controllers/charts/BufferContent.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react34 = __toESM(require_react());

  // demo/full/scripts/components/BufferContentGraph.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react33 = __toESM(require_react());

  // demo/full/scripts/lib/capitalizeFirstLetter.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  // demo/full/scripts/lib/shuffleArray.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function shuffleArray(arr) {
    const clonedArr = arr.slice();
    let currentIndex = arr.length;
    while (currentIndex !== 0) {
      const randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      const temporaryValue = clonedArr[currentIndex];
      clonedArr[currentIndex] = clonedArr[randomIndex];
      clonedArr[randomIndex] = temporaryValue;
    }
    return clonedArr;
  }

  // demo/full/scripts/components/BufferContentGraph.jsx
  var CANVAS_WIDTH = 1e3;
  var CANVAS_HEIGHT = 1;
  var COLORS = [
    "#2ab7ca",
    "#fed766",
    "#4dd248",
    "#a22c28",
    "#556b2f",
    "#add8e6",
    "#90ee90",
    "#444444",
    "#40bfc1",
    "#57557e",
    "#fbe555"
  ];
  var COLOR_CURRENT_POSITION = "#FF2323";
  function clearCanvas(canvasContext) {
    canvasContext.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
  }
  function paintCurrentPosition(position, minimumPosition, maximumPosition, canvasCtx) {
    if (typeof position === "number" && position >= minimumPosition && position < maximumPosition) {
      const lengthCanvas = maximumPosition - minimumPosition;
      canvasCtx.fillStyle = COLOR_CURRENT_POSITION;
      canvasCtx.fillRect(Math.ceil((position - minimumPosition) / lengthCanvas * CANVAS_WIDTH) - 1, 0, 2, CANVAS_HEIGHT);
    }
  }
  function scaleSegments(bufferedData, minimumPosition, maximumPosition) {
    const scaledSegments = [];
    const wholeDuration = maximumPosition - minimumPosition;
    for (let i = 0; i < bufferedData.length; i++) {
      const bufferedInfos = bufferedData[i];
      const start = bufferedInfos.bufferedStart === void 0 ? bufferedInfos.start : bufferedInfos.bufferedStart;
      const end = bufferedInfos.bufferedEnd === void 0 ? bufferedInfos.end : bufferedInfos.bufferedEnd;
      if (end > minimumPosition && start < maximumPosition) {
        const startPoint = Math.max(start - minimumPosition, 0);
        const endPoint = Math.min(end - minimumPosition, maximumPosition);
        const scaledStart = startPoint / wholeDuration;
        const scaledEnd = endPoint / wholeDuration;
        scaledSegments.push({
          scaledStart,
          scaledEnd,
          bufferedInfos
        });
      }
    }
    return scaledSegments;
  }
  function BufferContentGraph({
    currentTime,
    data,
    maximumPosition,
    minimumPosition,
    seek,
    type
  }) {
    const [randomColors] = (0, import_react33.useState)(shuffleArray(COLORS));
    const [tipVisible, setTipVisible] = (0, import_react33.useState)(false);
    const [tipPosition, setTipPosition] = (0, import_react33.useState)(0);
    const [tipText, setTipText] = (0, import_react33.useState)("");
    const canvasEl = (0, import_react33.useRef)(null);
    const representationsEncountered = (0, import_react33.useRef)([]);
    const duration = Math.max(maximumPosition - minimumPosition, 0);
    function paintSegment(scaledSegment, canvasCtx) {
      const representation = scaledSegment.bufferedInfos.infos.representation;
      let indexOfRepr = representationsEncountered.current.indexOf(representation);
      if (indexOfRepr < 0) {
        representationsEncountered.current.push(representation);
        indexOfRepr = representationsEncountered.current.length - 1;
      }
      const colorIndex = indexOfRepr % COLORS.length;
      const color = randomColors[colorIndex];
      const startX = scaledSegment.scaledStart * CANVAS_WIDTH;
      const endX = scaledSegment.scaledEnd * CANVAS_WIDTH;
      canvasCtx.fillStyle = color;
      canvasCtx.fillRect(Math.ceil(startX), 0, Math.ceil(endX - startX), CANVAS_HEIGHT);
    }
    const currentSegmentsScaled = (0, import_react33.useMemo)(() => {
      return scaleSegments(data, minimumPosition, maximumPosition);
    }, [data, minimumPosition, maximumPosition]);
    (0, import_react33.useEffect)(() => {
      if (canvasEl === null || canvasEl === void 0) {
        return;
      }
      const ctx = canvasEl.current.getContext("2d");
      if (ctx === null) {
        return;
      }
      canvasEl.current.width = CANVAS_WIDTH;
      canvasEl.current.height = CANVAS_HEIGHT;
      clearCanvas(ctx);
      if (minimumPosition === void 0 || maximumPosition === void 0 || minimumPosition >= maximumPosition) {
        return;
      }
      for (let i = 0; i < currentSegmentsScaled.length; i++) {
        paintSegment(currentSegmentsScaled[i], ctx);
      }
      paintCurrentPosition(currentTime, minimumPosition, maximumPosition, ctx);
    }, [minimumPosition, maximumPosition, data]);
    const getMousePositionInPercentage = (event) => {
      if (canvasEl === null || canvasEl === void 0) {
        return;
      }
      const rect = canvasEl.current.getBoundingClientRect();
      const point0 = rect.left;
      const clickPosPx = Math.max(event.clientX - point0, 0);
      const endPointPx = Math.max(rect.right - point0, 0);
      if (!endPointPx) {
        return 0;
      }
      return clickPosPx / endPointPx;
    };
    const getMousePosition = (event) => {
      const mousePercent = getMousePositionInPercentage(event);
      return mousePercent === void 0 ? void 0 : mousePercent * duration + minimumPosition;
    };
    const toolTipOffset = canvasEl !== null && canvasEl.current !== null ? canvasEl.current.getBoundingClientRect().left : 0;
    const onMouseMove = (event) => {
      const mousePercent = getMousePositionInPercentage(event);
      for (let i = 0; i < currentSegmentsScaled.length; i++) {
        const scaledSegment = currentSegmentsScaled[i];
        if (mousePercent >= scaledSegment.scaledStart && mousePercent < scaledSegment.scaledEnd) {
          const { start, end } = scaledSegment.bufferedInfos;
          const {
            adaptation,
            representation
          } = scaledSegment.bufferedInfos.infos;
          setTipVisible(true);
          setTipPosition(event.clientX);
          let newTipText = "";
          switch (adaptation.type) {
            case "video":
              newTipText += `width: ${representation.width}
height: ${representation.height}
codec: ${representation.codec}
bitrate: ${representation.bitrate}
`;
              break;
            case "audio":
              newTipText += `language: ${adaptation.language}
audioDescription: ${!!adaptation.isAudioDescription}
codec: ${representation.codec}
bitrate: ${representation.bitrate}
`;
              break;
            case "text":
              newTipText += `language: ${adaptation.language}
closedCaption: ${!!adaptation.isClosedCaption}
`;
              break;
          }
          newTipText += `segment: [${start.toFixed(1)}, ${end.toFixed(1)}]`;
          setTipText(newTipText);
          return;
        }
      }
      hideTip();
    };
    const hideTip = () => {
      setTipVisible(false);
      setTipPosition(0);
      setTipText("");
    };
    return /* @__PURE__ */ import_react33.default.createElement("div", {
      className: "container-buffer-graph"
    }, /* @__PURE__ */ import_react33.default.createElement("div", {
      className: "buffer-graph-title"
    }, `${capitalizeFirstLetter(type)} Buffer`), /* @__PURE__ */ import_react33.default.createElement("div", {
      className: "canvas-buffer-graph-container",
      onMouseLeave: hideTip,
      onMouseMove
    }, tipVisible ? /* @__PURE__ */ import_react33.default.createElement(ToolTip_default, {
      className: "buffer-content-tip",
      text: tipText,
      xPosition: tipPosition,
      offset: toolTipOffset
    }) : null, /* @__PURE__ */ import_react33.default.createElement("canvas", {
      onClick: (event) => seek(getMousePosition(event)),
      height: String(CANVAS_HEIGHT),
      width: String(CANVAS_WIDTH),
      className: "canvas-buffer-graph",
      ref: canvasEl
    })));
  }

  // demo/full/scripts/controllers/charts/BufferContent.jsx
  function BufferContentChart({
    player,
    bufferedData,
    currentTime,
    maximumPosition,
    minimumPosition
  }) {
    if (bufferedData === null || Object.keys(bufferedData).length === 0) {
      return /* @__PURE__ */ import_react34.default.createElement("div", {
        className: "buffer-content-no-content"
      }, " No content yet ");
    }
    const seek = (position) => {
      player.dispatch("SEEK", position);
    };
    const subCharts = Object.keys(bufferedData).filter((type) => bufferedData[type] !== null).map((type) => {
      return /* @__PURE__ */ import_react34.default.createElement(BufferContentGraph, {
        key: type,
        type,
        currentTime,
        minimumPosition,
        maximumPosition,
        data: bufferedData[type],
        seek
      });
    });
    if (subCharts.length === 0) {
      return /* @__PURE__ */ import_react34.default.createElement("div", {
        className: "buffer-content-no-content"
      }, " No content yet ");
    }
    return /* @__PURE__ */ import_react34.default.createElement("div", {
      className: "buffer-content-graphs-parent"
    }, subCharts);
  }
  var BufferContent_default = import_react34.default.memo(withModulesState_default({
    player: {
      bufferedData: "bufferedData",
      currentTime: "currentTime",
      minimumPosition: "minimumPosition",
      maximumPosition: "maximumPosition"
    }
  })(BufferContentChart));

  // demo/full/scripts/controllers/charts/BufferSize.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react35 = __toESM(require_react());
  var HEIGHT_MARGIN_BOTTOM = 5;
  var HEIGHT_MARGIN_TOP = 20;
  var DRAWABLE_HEIGHT = 400;
  var DRAWABLE_WIDTH = 960;
  var TIME_SAMPLES_MS = 3e4;
  var CANVAS_WIDTH2 = DRAWABLE_WIDTH;
  var CANVAS_HEIGHT2 = DRAWABLE_HEIGHT + HEIGHT_MARGIN_TOP + HEIGHT_MARGIN_BOTTOM;
  var MINIMUM_MAX_BUFFER_SIZE = 20;
  var NUMBER_GRID_LINES_HEIGHT = 10;
  function BufferSizeChart({ module }) {
    const canvasEl = (0, import_react35.useRef)(null);
    let canvasCtx;
    let currentMaxSize = MINIMUM_MAX_BUFFER_SIZE;
    (0, import_react35.useEffect)(() => {
      if (!canvasEl.current) {
        return;
      }
      canvasCtx = canvasEl.current.getContext("2d");
    }, []);
    (0, import_react35.useEffect)(() => {
      const subscription = module.$get("data").subscribe((data) => {
        if (data.length > 0) {
          const lastDate = data.length === 0 ? null : data[data.length - 1].date;
          const minimumTime = lastDate - TIME_SAMPLES_MS;
          let i;
          for (i = data.length - 1; i >= 1; i--) {
            if (data[i].date <= minimumTime) {
              break;
            }
          }
          const consideredData = data.slice(i);
          onNewData(consideredData);
        } else {
          onNewData([]);
        }
      });
      return function cleanUpSubscription() {
        subscription.unsubscribe();
      };
    }, [module]);
    return /* @__PURE__ */ import_react35.default.createElement("div", {
      className: "canvas-buffer-size-container"
    }, /* @__PURE__ */ import_react35.default.createElement("canvas", {
      className: "canvas-buffer-size",
      ref: canvasEl,
      width: CANVAS_WIDTH2,
      height: CANVAS_HEIGHT2
    }));
    function onNewData(data) {
      clearAndResizeCanvas(canvasCtx);
      if (data.length === 0) {
        return;
      }
      currentMaxSize = getNewMaxBufferSize();
      const minDate = data[0].date;
      const gridHeight = DRAWABLE_HEIGHT / currentMaxSize;
      const gridWidth = DRAWABLE_WIDTH / TIME_SAMPLES_MS;
      drawData();
      drawGrid();
      function getNewMaxBufferSize() {
        const maxPoint = Math.max(...data.map((d) => d.value || 0));
        if (maxPoint >= currentMaxSize) {
          return maxPoint + 5;
        } else if (maxPoint < currentMaxSize - 5) {
          return Math.max(maxPoint + 5, MINIMUM_MAX_BUFFER_SIZE);
        }
        return currentMaxSize;
      }
      function drawGrid() {
        canvasCtx.beginPath();
        canvasCtx.strokeStyle = "lightgrey";
        canvasCtx.lineWidth = 1;
        const stepHeight = DRAWABLE_HEIGHT / NUMBER_GRID_LINES_HEIGHT;
        const stepVal = currentMaxSize / NUMBER_GRID_LINES_HEIGHT;
        for (let i = 0; i <= NUMBER_GRID_LINES_HEIGHT; i++) {
          const height = stepHeight * i + HEIGHT_MARGIN_TOP;
          canvasCtx.moveTo(0, height);
          canvasCtx.font = "14px Arial";
          const currStepVal = (stepVal * (NUMBER_GRID_LINES_HEIGHT - i)).toFixed(1);
          canvasCtx.fillText(`${currStepVal} s`, 0, height - 5);
          canvasCtx.lineTo(CANVAS_WIDTH2, height);
        }
        canvasCtx.stroke();
      }
      function drawData() {
        canvasCtx.beginPath();
        canvasCtx.strokeStyle = "rgb(200, 100, 200)";
        canvasCtx.lineWidth = 2;
        canvasCtx.moveTo(0, bufferValueToY(data[0].value));
        for (let i = 1; i < data.length; i++) {
          canvasCtx.lineTo(dateToX(data[i].date), bufferValueToY(data[i].value));
        }
        canvasCtx.stroke();
      }
      function bufferValueToY(bufferVal) {
        return HEIGHT_MARGIN_TOP + (currentMaxSize - bufferVal) * gridHeight;
      }
      function dateToX(date) {
        return (date - minDate) * gridWidth;
      }
    }
  }
  function clearAndResizeCanvas(canvasContext) {
    const canvasElt = canvasContext.canvas;
    canvasElt.width = CANVAS_WIDTH2;
    canvasElt.height = CANVAS_HEIGHT2;
    canvasContext.clearRect(0, 0, canvasElt.width, canvasElt.height);
  }
  var BufferSize_default = import_react35.default.memo(BufferSizeChart);

  // demo/full/scripts/controllers/charts/index.jsx
  var BUFFER_GAP_REFRESH_TIME = 500;
  var MAX_BUFFER_SIZE_LENGTH = 2e3;
  function ChartsManager({ player }) {
    const [
      displayBufferContentChart,
      updateDisplayBufferContentChart
    ] = (0, import_react36.useState)(false);
    const [
      displayBufferSizeChart,
      updateDisplayBufferSizeChart
    ] = (0, import_react36.useState)(false);
    const [
      bufferSizeChart,
      updateBufferSizeChart
    ] = (0, import_react36.useState)(null);
    (0, import_react36.useEffect)(() => {
      if (!player) {
        return;
      }
      const newChartModule = createModule(ChartData_default, { maxSize: MAX_BUFFER_SIZE_LENGTH });
      newChartModule.dispatch("ADD_DATA", player.get("bufferGap"));
      const interval2 = setInterval(() => {
        newChartModule.dispatch("ADD_DATA", player.get("bufferGap"));
      }, BUFFER_GAP_REFRESH_TIME);
      updateBufferSizeChart(newChartModule);
      return () => {
        clearInterval(interval2);
        newChartModule.destroy();
        updateBufferSizeChart(null);
      };
    }, [player]);
    const onBufferContentCheckBoxChange = (e) => {
      const target = e.target;
      const value = target.type === "checkbox" ? target.checked : target.value;
      updateDisplayBufferContentChart(value);
    };
    const onBufferSizeCheckBoxChange = (e) => {
      const target = e.target;
      const value = target.type === "checkbox" ? target.checked : target.value;
      updateDisplayBufferSizeChart(value);
    };
    return /* @__PURE__ */ import_react36.default.createElement("div", {
      className: "player-charts"
    }, /* @__PURE__ */ import_react36.default.createElement("div", {
      className: "player-box"
    }, /* @__PURE__ */ import_react36.default.createElement("div", {
      className: "chart-checkbox"
    }, "Buffer content chart", /* @__PURE__ */ import_react36.default.createElement("label", {
      className: "switch"
    }, /* @__PURE__ */ import_react36.default.createElement("input", {
      name: "displayBufferContentChart",
      type: "checkbox",
      "aria-label": "Display/Hide chart about the buffer's content",
      checked: displayBufferContentChart,
      onChange: onBufferContentCheckBoxChange
    }), /* @__PURE__ */ import_react36.default.createElement("span", {
      className: "slider round"
    }))), displayBufferContentChart && player ? /* @__PURE__ */ import_react36.default.createElement(BufferContent_default, {
      player
    }) : null), /* @__PURE__ */ import_react36.default.createElement("div", {
      className: "player-box"
    }, /* @__PURE__ */ import_react36.default.createElement("div", {
      className: "chart-checkbox"
    }, "Buffer size chart", /* @__PURE__ */ import_react36.default.createElement("label", {
      className: "switch"
    }, /* @__PURE__ */ import_react36.default.createElement("input", {
      "aria-label": "Display/Hide chart about the buffer's size",
      name: "displayBufferSizeChart",
      type: "checkbox",
      checked: displayBufferSizeChart,
      onChange: onBufferSizeCheckBoxChange
    }), /* @__PURE__ */ import_react36.default.createElement("span", {
      className: "slider round"
    }))), displayBufferSizeChart && bufferSizeChart !== null ? /* @__PURE__ */ import_react36.default.createElement(BufferSize_default, {
      module: bufferSizeChart
    }) : null));
  }
  var charts_default = import_react36.default.memo(ChartsManager);

  // demo/full/scripts/controllers/PlayerKnobsSettings.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react44 = __toESM(require_react());

  // demo/full/scripts/controllers/knobs/AudioBitrate.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react38 = __toESM(require_react());

  // demo/full/scripts/components/Knob.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react37 = __toESM(require_react());
  function Knob({
    ariaLabel,
    className = "",
    name = "",
    onChange,
    options = [],
    selected,
    disabled
  }) {
    return /* @__PURE__ */ import_react37.default.createElement("div", {
      className: `knob ${className}`
    }, /* @__PURE__ */ import_react37.default.createElement("span", {
      className: "knob-name"
    }, name), /* @__PURE__ */ import_react37.default.createElement(Select_default, {
      ariaLabel,
      className: "knob-value",
      onChange,
      options,
      selected,
      disabled
    }));
  }
  var Knob_default = import_react37.default.memo(Knob);

  // demo/full/scripts/controllers/knobs/AudioBitrate.jsx
  var AudioBitrateKnobBase = ({
    player,
    className,
    audioBitrateAuto,
    audioBitrate,
    availableAudioBitrates = []
  }) => {
    let options = [];
    let selectedIndex;
    if (!availableAudioBitrates.length) {
      options = ["Not available"];
      selectedIndex = 0;
    } else if (availableAudioBitrates.length > 1) {
      const autoValue = audioBitrateAuto ? `auto (${audioBitrate})` : "auto";
      options = [autoValue, ...availableAudioBitrates];
      selectedIndex = audioBitrateAuto ? 0 : availableAudioBitrates.indexOf(audioBitrate) + 1 || 0;
    } else {
      options = availableAudioBitrates;
      selectedIndex = 0;
    }
    const onAudioBitrateChange = ({ index }) => {
      if (index > 0) {
        const bitrate = availableAudioBitrates[index - 1];
        player.dispatch("SET_AUDIO_BITRATE", bitrate);
      } else {
        player.dispatch("SET_AUDIO_BITRATE");
      }
    };
    return /* @__PURE__ */ import_react38.default.createElement(Knob_default, {
      name: "Audio Bitrate",
      ariaLabel: "Update the audio bitrate",
      className,
      disabled: options.length < 2,
      onChange: onAudioBitrateChange,
      options,
      selected: { index: selectedIndex }
    });
  };
  var AudioBitrate_default = import_react38.default.memo(withModulesState_default({
    player: {
      audioBitrateAuto: "audioBitrateAuto",
      audioBitrate: "audioBitrate",
      availableAudioBitrates: "availableAudioBitrates"
    }
  })(AudioBitrateKnobBase));

  // demo/full/scripts/controllers/knobs/VideoBitrate.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react39 = __toESM(require_react());
  var VideoBitrateKnobBase = ({
    player,
    className,
    videoBitrateAuto,
    videoBitrate,
    availableVideoBitrates = []
  }) => {
    let options = [];
    let selectedIndex;
    if (!availableVideoBitrates.length) {
      options = ["Not available"];
      selectedIndex = 0;
    } else if (availableVideoBitrates.length > 1) {
      const autoValue = videoBitrateAuto ? `auto (${videoBitrate})` : "auto";
      options = [autoValue, ...availableVideoBitrates];
      selectedIndex = videoBitrateAuto ? 0 : availableVideoBitrates.indexOf(videoBitrate) + 1 || 0;
    } else {
      options = availableVideoBitrates;
      selectedIndex = 0;
    }
    const onVideoBitrateChange = ({ index }) => {
      if (index > 0) {
        const bitrate = availableVideoBitrates[index - 1];
        player.dispatch("SET_VIDEO_BITRATE", bitrate);
      } else {
        player.dispatch("SET_VIDEO_BITRATE");
      }
    };
    return /* @__PURE__ */ import_react39.default.createElement(Knob_default, {
      name: "Video Bitrate",
      ariaLabel: "Update the video bitrate",
      className,
      disabled: availableVideoBitrates.length < 2,
      onChange: onVideoBitrateChange,
      options,
      selected: { index: selectedIndex }
    });
  };
  var VideoBitrate_default = import_react39.default.memo(withModulesState_default({
    player: {
      videoBitrateAuto: "videoBitrateAuto",
      videoBitrate: "videoBitrate",
      availableVideoBitrates: "availableVideoBitrates"
    }
  })(VideoBitrateKnobBase));

  // demo/full/scripts/controllers/knobs/AudioTrack.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react40 = __toESM(require_react());

  // demo/full/scripts/lib/translateLanguageCode.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();

  // demo/full/assets/languages.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var languages_default2 = {
    aaa: "Ghotuo",
    aab: "Alumu-Tesu",
    aac: "Ari",
    aad: "Amal",
    aae: "Arb\xEBresh\xEB Albanian",
    aaf: "Aranadan",
    aag: "Ambrak",
    aah: "Abu' Arapesh",
    aai: "Arifama-Miniafia",
    aak: "Ankave",
    aal: "Afade",
    aan: "Anamb\xE9",
    aao: "Algerian Saharan Arabic",
    aap: "Par\xE1 Ar\xE1ra",
    aaq: "Eastern Abnaki",
    aar: "Afar",
    aas: "Aas\xE1x",
    aat: "Arvanitika Albanian",
    aau: "Abau",
    aaw: "Solong",
    aax: "Mandobo Atas",
    aaz: "Amarasi",
    aba: "Ab\xE9",
    abb: "Bankon",
    abc: "Ambala Ayta",
    abd: "Manide",
    abe: "Western Abnaki",
    abf: "Abai Sungai",
    abg: "Abaga",
    abh: "Tajiki Arabic",
    abi: "Abidji",
    abj: "Aka-Bea",
    abk: "Abkhazian",
    abl: "Lampung Nyo",
    abm: "Abanyom",
    abn: "Abua",
    abo: "Abon",
    abp: "Abellen Ayta",
    abq: "Abaza",
    abr: "Abron",
    abs: "Ambonese Malay",
    abt: "Ambulas",
    abu: "Abure",
    abv: "Baharna Arabic",
    abw: "Pal",
    abx: "Inabaknon",
    aby: "Aneme Wake",
    abz: "Abui",
    aca: "Achagua",
    acb: "\xC1nc\xE1",
    acd: "Gikyode",
    ace: "Achinese",
    acf: "Saint Lucian Creole French",
    ach: "Acoli",
    aci: "Aka-Cari",
    ack: "Aka-Kora",
    acl: "Akar-Bale",
    acm: "Mesopotamian Arabic",
    acn: "Achang",
    acp: "Eastern Acipa",
    acq: "Ta'izzi-Adeni Arabic",
    acr: "Achi",
    acs: "Acro\xE1",
    act: "Achterhoeks",
    acu: "Achuar-Shiwiar",
    acv: "Achumawi",
    acw: "Hijazi Arabic",
    acx: "Omani Arabic",
    acy: "Cypriot Arabic",
    acz: "Acheron",
    ada: "Adangme",
    adb: "Adabe",
    add: "Dzodinka",
    ade: "Adele",
    adf: "Dhofari Arabic",
    adg: "Andegerebinha",
    adh: "Adhola",
    adi: "Adi",
    adj: "Adioukrou",
    adl: "Galo",
    adn: "Adang",
    ado: "Abu",
    adq: "Adangbe",
    adr: "Adonara",
    ads: "Adamorobe Sign Language",
    adt: "Adnyamathanha",
    adu: "Aduge",
    adw: "Amundava",
    adx: "Amdo Tibetan",
    ady: "Adyghe",
    adz: "Adzera",
    aea: "Areba",
    aeb: "Tunisian Arabic",
    aec: "Saidi Arabic",
    aed: "Argentine Sign Language",
    aee: "Northeast Pashai",
    aek: "Haeke",
    ael: "Ambele",
    aem: "Arem",
    aen: "Armenian Sign Language",
    aeq: "Aer",
    aer: "Eastern Arrernte",
    aes: "Alsea",
    aeu: "Akeu",
    aew: "Ambakich",
    aey: "Amele",
    aez: "Aeka",
    afb: "Gulf Arabic",
    afd: "Andai",
    afe: "Putukwam",
    afg: "Afghan Sign Language",
    afh: "Afrihili",
    afi: "Akrukay",
    afk: "Nanubae",
    afn: "Defaka",
    afo: "Eloyi",
    afp: "Tapei",
    afr: "Afrikaans",
    afs: "Afro-Seminole Creole",
    aft: "Afitti",
    afu: "Awutu",
    afz: "Obokuitai",
    aga: "Aguano",
    agb: "Legbo",
    agc: "Agatu",
    agd: "Agarabi",
    age: "Angal",
    agf: "Arguni",
    agg: "Angor",
    agh: "Ngelima",
    agi: "Agariya",
    agj: "Argobba",
    agk: "Isarog Agta",
    agl: "Fembe",
    agm: "Angaataha",
    agn: "Agutaynen",
    ago: "Tainae",
    agq: "Aghem",
    agr: "Aguaruna",
    ags: "Esimbi",
    agt: "Central Cagayan Agta",
    agu: "Aguacateco",
    agv: "Remontado Dumagat",
    agw: "Kahua",
    agx: "Aghul",
    agy: "Southern Alta",
    agz: "Mt. Iriga Agta",
    aha: "Ahanta",
    ahb: "Axamb",
    ahg: "Qimant",
    ahh: "Aghu",
    ahi: "Tiagbamrin Aizi",
    ahk: "Akha",
    ahl: "Igo",
    ahm: "Mobumrin Aizi",
    ahn: "\xC0h\xE0n",
    aho: "Ahom",
    ahp: "Aproumu Aizi",
    ahr: "Ahirani",
    ahs: "Ashe",
    aht: "Ahtena",
    aia: "Arosi",
    aib: "Ainu (China)",
    aic: "Ainbai",
    aid: "Alngith",
    aie: "Amara",
    aif: "Agi",
    aig: "Antigua and Barbuda Creole English",
    aih: "Ai-Cham",
    aii: "Assyrian Neo-Aramaic",
    aij: "Lishanid Noshan",
    aik: "Ake",
    ail: "Aimele",
    aim: "Aimol",
    ain: "Ainu (Japan)",
    aio: "Aiton",
    aip: "Burumakok",
    aiq: "Aimaq",
    air: "Airoran",
    ais: "Nataoran Amis",
    ait: "Arikem",
    aiw: "Aari",
    aix: "Aighon",
    aiy: "Ali",
    aja: "Aja (Sudan)",
    ajg: "Aja (Benin)",
    aji: "Aji\xEB",
    ajn: "Andajin",
    ajp: "South Levantine Arabic",
    ajt: "Judeo-Tunisian Arabic",
    aju: "Judeo-Moroccan Arabic",
    ajw: "Ajawa",
    ajz: "Amri Karbi",
    aka: "Akan",
    akb: "Batak Angkola",
    akc: "Mpur",
    akd: "Ukpet-Ehom",
    ake: "Akawaio",
    akf: "Akpa",
    akg: "Anakalangu",
    akh: "Angal Heneng",
    aki: "Aiome",
    akj: "Aka-Jeru",
    akk: "Akkadian",
    akl: "Aklanon",
    akm: "Aka-Bo",
    ako: "Akurio",
    akp: "Siwu",
    akq: "Ak",
    akr: "Araki",
    aks: "Akaselem",
    akt: "Akolet",
    aku: "Akum",
    akv: "Akhvakh",
    akw: "Akwa",
    akx: "Aka-Kede",
    aky: "Aka-Kol",
    akz: "Alabama",
    ala: "Alago",
    alc: "Qawasqar",
    ald: "Alladian",
    ale: "Aleut",
    alf: "Alege",
    alh: "Alawa",
    ali: "Amaimon",
    alj: "Alangan",
    alk: "Alak",
    all: "Allar",
    alm: "Amblong",
    aln: "Gheg Albanian",
    alo: "Larike-Wakasihu",
    alp: "Alune",
    alq: "Algonquin",
    alr: "Alutor",
    als: "Tosk Albanian",
    alt: "Southern Altai",
    alu: "'Are'are",
    alw: "Alaba-K\u2019abeena",
    alx: "Amol",
    aly: "Alyawarr",
    alz: "Alur",
    ama: "Amanay\xE9",
    amb: "Ambo",
    amc: "Amahuaca",
    ame: "Yanesha'",
    amf: "Hamer-Banna",
    amg: "Amurdak",
    amh: "Amharic",
    ami: "Amis",
    amj: "Amdang",
    amk: "Ambai",
    aml: "War-Jaintia",
    amm: "Ama (Papua New Guinea)",
    amn: "Amanab",
    amo: "Amo",
    amp: "Alamblak",
    amq: "Amahai",
    amr: "Amarakaeri",
    ams: "Southern Amami-Oshima",
    amt: "Amto",
    amu: "Guerrero Amuzgo",
    amv: "Ambelau",
    amw: "Western Neo-Aramaic",
    amx: "Anmatyerre",
    amy: "Ami",
    amz: "Atampaya",
    ana: "Andaqui",
    anb: "Andoa",
    anc: "Ngas",
    and: "Ansus",
    ane: "X\xE2r\xE2c\xF9\xF9",
    anf: "Animere",
    ang: "Old English (ca. 450-1100)",
    anh: "Nend",
    ani: "Andi",
    anj: "Anor",
    ank: "Goemai",
    anl: "Anu-Hkongso Chin",
    anm: "Anal",
    ann: "Obolo",
    ano: "Andoque",
    anp: "Angika",
    anq: "Jarawa (India)",
    anr: "Andh",
    ans: "Anserma",
    ant: "Antakarinya",
    anu: "Anuak",
    anv: "Denya",
    anw: "Anaang",
    anx: "Andra-Hus",
    any: "Anyin",
    anz: "Anem",
    aoa: "Angolar",
    aob: "Abom",
    aoc: "Pemon",
    aod: "Andarum",
    aoe: "Angal Enen",
    aof: "Bragat",
    aog: "Angoram",
    aoh: "Arma",
    aoi: "Anindilyakwa",
    aoj: "Mufian",
    aok: "Arh\xF6",
    aol: "Alor",
    aom: "\xD6mie",
    aon: "Bumbita Arapesh",
    aor: "Aore",
    aos: "Taikat",
    aot: "Atong (India)",
    aou: "A'ou",
    aox: "Atorada",
    aoz: "Uab Meto",
    apb: "Sa'a",
    apc: "North Levantine Arabic",
    apd: "Sudanese Arabic",
    ape: "Bukiyip",
    apf: "Pahanan Agta",
    apg: "Ampanang",
    aph: "Athpariya",
    api: "Apiak\xE1",
    apj: "Jicarilla Apache",
    apk: "Kiowa Apache",
    apl: "Lipan Apache",
    apm: "Mescalero-Chiricahua Apache",
    apn: "Apinay\xE9",
    apo: "Ambul",
    app: "Apma",
    apq: "A-Pucikwar",
    apr: "Arop-Lokep",
    aps: "Arop-Sissano",
    apt: "Apatani",
    apu: "Apurin\xE3",
    apv: "Alapmunte",
    apw: "Western Apache",
    apx: "Aputai",
    apy: "Apala\xED",
    apz: "Safeyoka",
    aqc: "Archi",
    aqd: "Ampari Dogon",
    aqg: "Arigidi",
    aqm: "Atohwaim",
    aqn: "Northern Alta",
    aqp: "Atakapa",
    aqr: "Arh\xE2",
    aqt: "Angait\xE9",
    aqz: "Akuntsu",
    ara: "Arabic",
    arb: "Standard Arabic",
    arc: "Official Aramaic (700-300 BCE)",
    ard: "Arabana",
    are: "Western Arrarnta",
    arg: "Aragonese",
    arh: "Arhuaco",
    ari: "Arikara",
    arj: "Arapaso",
    ark: "Arikap\xFA",
    arl: "Arabela",
    arn: "Mapudungun",
    aro: "Araona",
    arp: "Arapaho",
    arq: "Algerian Arabic",
    arr: "Karo (Brazil)",
    ars: "Najdi Arabic",
    aru: "Aru\xE1 (Amazonas State)",
    arv: "Arbore",
    arw: "Arawak",
    arx: "Aru\xE1 (Rodonia State)",
    ary: "Moroccan Arabic",
    arz: "Egyptian Arabic",
    asa: "Asu (Tanzania)",
    asb: "Assiniboine",
    asc: "Casuarina Coast Asmat",
    asd: "Asas",
    ase: "American Sign Language",
    asf: "Australian Sign Language",
    asg: "Cishingini",
    ash: "Abishira",
    asi: "Buruwai",
    asj: "Sari",
    ask: "Ashkun",
    asl: "Asilulu",
    asm: "Assamese",
    asn: "Xing\xFA Asurin\xED",
    aso: "Dano",
    asp: "Algerian Sign Language",
    asq: "Austrian Sign Language",
    asr: "Asuri",
    ass: "Ipulo",
    ast: "Asturian",
    asu: "Tocantins Asurini",
    asv: "Asoa",
    asw: "Australian Aborigines Sign Language",
    asx: "Muratayak",
    asy: "Yaosakor Asmat",
    asz: "As",
    ata: "Pele-Ata",
    atb: "Zaiwa",
    atc: "Atsahuaca",
    atd: "Ata Manobo",
    ate: "Atemble",
    atg: "Ivbie North-Okpela-Arhe",
    ati: "Atti\xE9",
    atj: "Atikamekw",
    atk: "Ati",
    atl: "Mt. Iraya Agta",
    atm: "Ata",
    atn: "Ashtiani",
    ato: "Atong (Cameroon)",
    atp: "Pudtol Atta",
    atq: "Aralle-Tabulahan",
    atr: "Waimiri-Atroari",
    ats: "Gros Ventre",
    att: "Pamplona Atta",
    atu: "Reel",
    atv: "Northern Altai",
    atw: "Atsugewi",
    atx: "Arutani",
    aty: "Aneityum",
    atz: "Arta",
    aua: "Asumboa",
    aub: "Alugu",
    auc: "Waorani",
    aud: "Anuta",
    aug: "Aguna",
    auh: "Aushi",
    aui: "Anuki",
    auj: "Awjilah",
    auk: "Heyo",
    aul: "Aulua",
    aum: "Asu (Nigeria)",
    aun: "Molmo One",
    auo: "Auyokawa",
    aup: "Makayam",
    auq: "Anus",
    aur: "Aruek",
    aut: "Austral",
    auu: "Auye",
    auw: "Awyi",
    aux: "Aur\xE1",
    auy: "Awiyaana",
    auz: "Uzbeki Arabic",
    ava: "Avaric",
    avb: "Avau",
    avd: "Alviri-Vidari",
    ave: "Avestan",
    avi: "Avikam",
    avk: "Kotava",
    avl: "Eastern Egyptian Bedawi Arabic",
    avm: "Angkamuthi",
    avn: "Avatime",
    avo: "Agavotaguerra",
    avs: "Aushiri",
    avt: "Au",
    avu: "Avokaya",
    avv: "Av\xE1-Canoeiro",
    awa: "Awadhi",
    awb: "Awa (Papua New Guinea)",
    awc: "Cicipu",
    awe: "Awet\xED",
    awg: "Anguthimri",
    awh: "Awbono",
    awi: "Aekyom",
    awk: "Awabakal",
    awm: "Arawum",
    awn: "Awngi",
    awo: "Awak",
    awr: "Awera",
    aws: "South Awyu",
    awt: "Arawet\xE9",
    awu: "Central Awyu",
    awv: "Jair Awyu",
    aww: "Awun",
    awx: "Awara",
    awy: "Edera Awyu",
    axb: "Abipon",
    axe: "Ayerrerenge",
    axg: "Mato Grosso Ar\xE1ra",
    axk: "Yaka (Central African Republic)",
    axl: "Lower Southern Aranda",
    axm: "Middle Armenian",
    axx: "X\xE2r\xE2gur\xE8",
    aya: "Awar",
    ayb: "Ayizo Gbe",
    ayc: "Southern Aymara",
    ayd: "Ayabadhu",
    aye: "Ayere",
    ayg: "Ginyanga",
    ayh: "Hadrami Arabic",
    ayi: "Leyigha",
    ayk: "Akuku",
    ayl: "Libyan Arabic",
    aym: "Aymara",
    ayn: "Sanaani Arabic",
    ayo: "Ayoreo",
    ayp: "North Mesopotamian Arabic",
    ayq: "Ayi (Papua New Guinea)",
    ayr: "Central Aymara",
    ays: "Sorsogon Ayta",
    ayt: "Magbukun Ayta",
    ayu: "Ayu",
    ayy: "Tayabas Ayta",
    ayz: "Mai Brat",
    aza: "Azha",
    azb: "South Azerbaijani",
    azd: "Eastern Durango Nahuatl",
    aze: "Azerbaijani",
    azg: "San Pedro Amuzgos Amuzgo",
    azj: "North Azerbaijani",
    azm: "Ipalapa Amuzgo",
    azn: "Western Durango Nahuatl",
    azo: "Awing",
    azt: "Faire Atta",
    azz: "Highland Puebla Nahuatl",
    baa: "Babatana",
    bab: "Bainouk-Gunyu\xF1o",
    bac: "Badui",
    bae: "Bar\xE9",
    baf: "Nubaca",
    bag: "Tuki",
    bah: "Bahamas Creole English",
    baj: "Barakai",
    bak: "Bashkir",
    bal: "Baluchi",
    bam: "Bambara",
    ban: "Balinese",
    bao: "Waimaha",
    bap: "Bantawa",
    bar: "Bavarian",
    bas: "Basa (Cameroon)",
    bau: "Bada (Nigeria)",
    bav: "Vengo",
    baw: "Bambili-Bambui",
    bax: "Bamun",
    bay: "Batuley",
    bba: "Baatonum",
    bbb: "Barai",
    bbc: "Batak Toba",
    bbd: "Bau",
    bbe: "Bangba",
    bbf: "Baibai",
    bbg: "Barama",
    bbh: "Bugan",
    bbi: "Barombi",
    bbj: "Ghom\xE1l\xE1'",
    bbk: "Babanki",
    bbl: "Bats",
    bbm: "Babango",
    bbn: "Uneapa",
    bbo: "Northern Bobo Madar\xE9",
    bbp: "West Central Banda",
    bbq: "Bamali",
    bbr: "Girawa",
    bbs: "Bakpinka",
    bbt: "Mburku",
    bbu: "Kulung (Nigeria)",
    bbv: "Karnai",
    bbw: "Baba",
    bbx: "Bubia",
    bby: "Befang",
    bbz: "Babalia Creole Arabic",
    bca: "Central Bai",
    bcb: "Bainouk-Samik",
    bcc: "Southern Balochi",
    bcd: "North Babar",
    bce: "Bamenyam",
    bcf: "Bamu",
    bcg: "Baga Pokur",
    bch: "Bariai",
    bci: "Baoul\xE9",
    bcj: "Bardi",
    bck: "Bunaba",
    bcl: "Central Bikol",
    bcm: "Bannoni",
    bcn: "Bali (Nigeria)",
    bco: "Kaluli",
    bcp: "Bali (Democratic Republic of Congo)",
    bcq: "Bench",
    bcr: "Babine",
    bcs: "Kohumono",
    bct: "Bendi",
    bcu: "Awad Bing",
    bcv: "Shoo-Minda-Nye",
    bcw: "Bana",
    bcy: "Bacama",
    bcz: "Bainouk-Gunyaamolo",
    bda: "Bayot",
    bdb: "Basap",
    bdc: "Ember\xE1-Baud\xF3",
    bdd: "Bunama",
    bde: "Bade",
    bdf: "Biage",
    bdg: "Bonggi",
    bdh: "Baka (Sudan)",
    bdi: "Burun",
    bdj: "Bai",
    bdk: "Budukh",
    bdl: "Indonesian Bajau",
    bdm: "Buduma",
    bdn: "Baldemu",
    bdo: "Morom",
    bdp: "Bende",
    bdq: "Bahnar",
    bdr: "West Coast Bajau",
    bds: "Burunge",
    bdt: "Bokoto",
    bdu: "Oroko",
    bdv: "Bodo Parja",
    bdw: "Baham",
    bdx: "Budong-Budong",
    bdy: "Bandjalang",
    bdz: "Badeshi",
    bea: "Beaver",
    beb: "Bebele",
    bec: "Iceve-Maci",
    bed: "Bedoanas",
    bee: "Byangsi",
    bef: "Benabena",
    beg: "Belait",
    beh: "Biali",
    bei: "Bekati'",
    bej: "Beja",
    bek: "Bebeli",
    bel: "Belarusian",
    bem: "Bemba (Zambia)",
    ben: "Bengali",
    beo: "Beami",
    bep: "Besoa",
    beq: "Beembe",
    bes: "Besme",
    bet: "Guiberoua B\xE9te",
    beu: "Blagar",
    bev: "Daloa B\xE9t\xE9",
    bew: "Betawi",
    bex: "Jur Modo",
    bey: "Beli (Papua New Guinea)",
    bez: "Bena (Tanzania)",
    bfa: "Bari",
    bfb: "Pauri Bareli",
    bfc: "Panyi Bai",
    bfd: "Bafut",
    bfe: "Betaf",
    bff: "Bofi",
    bfg: "Busang Kayan",
    bfh: "Blafe",
    bfi: "British Sign Language",
    bfj: "Bafanji",
    bfk: "Ban Khor Sign Language",
    bfl: "Banda-Nd\xE9l\xE9",
    bfm: "Mmen",
    bfn: "Bunak",
    bfo: "Malba Birifor",
    bfp: "Beba",
    bfq: "Badaga",
    bfr: "Bazigar",
    bfs: "Southern Bai",
    bft: "Balti",
    bfu: "Gahri",
    bfw: "Bondo",
    bfx: "Bantayanon",
    bfy: "Bagheli",
    bfz: "Mahasu Pahari",
    bga: "Gwamhi-Wuri",
    bgb: "Bobongko",
    bgc: "Haryanvi",
    bgd: "Rathwi Bareli",
    bge: "Bauria",
    bgf: "Bangandu",
    bgg: "Bugun",
    bgi: "Giangan",
    bgj: "Bangolan",
    bgk: "Bit",
    bgl: "Bo (Laos)",
    bgn: "Western Balochi",
    bgo: "Baga Koga",
    bgp: "Eastern Balochi",
    bgq: "Bagri",
    bgr: "Bawm Chin",
    bgs: "Tagabawa",
    bgt: "Bughotu",
    bgu: "Mbongno",
    bgv: "Warkay-Bipim",
    bgw: "Bhatri",
    bgx: "Balkan Gagauz Turkish",
    bgy: "Benggoi",
    bgz: "Banggai",
    bha: "Bharia",
    bhb: "Bhili",
    bhc: "Biga",
    bhd: "Bhadrawahi",
    bhe: "Bhaya",
    bhf: "Odiai",
    bhg: "Binandere",
    bhh: "Bukharic",
    bhi: "Bhilali",
    bhj: "Bahing",
    bhl: "Bimin",
    bhm: "Bathari",
    bhn: "Bohtan Neo-Aramaic",
    bho: "Bhojpuri",
    bhp: "Bima",
    bhq: "Tukang Besi South",
    bhr: "Bara Malagasy",
    bhs: "Buwal",
    bht: "Bhattiyali",
    bhu: "Bhunjia",
    bhv: "Bahau",
    bhw: "Biak",
    bhx: "Bhalay",
    bhy: "Bhele",
    bhz: "Bada (Indonesia)",
    bia: "Badimaya",
    bib: "Bissa",
    bic: "Bikaru",
    bid: "Bidiyo",
    bie: "Bepour",
    bif: "Biafada",
    big: "Biangai",
    bij: "Vaghat-Ya-Bijim-Legeri",
    bik: "Bikol",
    bil: "Bile",
    bim: "Bimoba",
    bin: "Bini",
    bio: "Nai",
    bip: "Bila",
    biq: "Bipi",
    bir: "Bisorio",
    bis: "Bislama",
    bit: "Berinomo",
    biu: "Biete",
    biv: "Southern Birifor",
    biw: "Kol (Cameroon)",
    bix: "Bijori",
    biy: "Birhor",
    biz: "Baloi",
    bja: "Budza",
    bjb: "Banggarla",
    bjc: "Bariji",
    bje: "Biao-Jiao Mien",
    bjf: "Barzani Jewish Neo-Aramaic",
    bjg: "Bidyogo",
    bjh: "Bahinemo",
    bji: "Burji",
    bjj: "Kanauji",
    bjk: "Barok",
    bjl: "Bulu (Papua New Guinea)",
    bjm: "Bajelani",
    bjn: "Banjar",
    bjo: "Mid-Southern Banda",
    bjp: "Fanamaket",
    bjr: "Binumarien",
    bjs: "Bajan",
    bjt: "Balanta-Ganja",
    bju: "Busuu",
    bjv: "Bedjond",
    bjw: "Bakw\xE9",
    bjx: "Banao Itneg",
    bjy: "Bayali",
    bjz: "Baruga",
    bka: "Kyak",
    bkc: "Baka (Cameroon)",
    bkd: "Binukid",
    bkf: "Beeke",
    bkg: "Buraka",
    bkh: "Bakoko",
    bki: "Baki",
    bkj: "Pande",
    bkk: "Brokskat",
    bkl: "Berik",
    bkm: "Kom (Cameroon)",
    bkn: "Bukitan",
    bko: "Kwa'",
    bkp: "Boko (Democratic Republic of Congo)",
    bkq: "Bakair\xED",
    bkr: "Bakumpai",
    bks: "Northern Sorsoganon",
    bkt: "Boloki",
    bku: "Buhid",
    bkv: "Bekwarra",
    bkw: "Bekwel",
    bkx: "Baikeno",
    bky: "Bokyi",
    bkz: "Bungku",
    bla: "Siksika",
    blb: "Bilua",
    blc: "Bella Coola",
    bld: "Bolango",
    ble: "Balanta-Kentohe",
    blf: "Buol",
    blg: "Balau",
    blh: "Kuwaa",
    bli: "Bolia",
    blj: "Bolongan",
    blk: "Pa'o Karen",
    bll: "Biloxi",
    blm: "Beli (Sudan)",
    bln: "Southern Catanduanes Bikol",
    blo: "Anii",
    blp: "Blablanga",
    blq: "Baluan-Pam",
    blr: "Blang",
    bls: "Balaesang",
    blt: "Tai Dam",
    blv: "Kibala",
    blw: "Balangao",
    blx: "Mag-Indi Ayta",
    bly: "Notre",
    blz: "Balantak",
    bma: "Lame",
    bmb: "Bembe",
    bmc: "Biem",
    bmd: "Baga Manduri",
    bme: "Limassa",
    bmf: "Bom-Kim",
    bmg: "Bamwe",
    bmh: "Kein",
    bmi: "Bagirmi",
    bmj: "Bote-Majhi",
    bmk: "Ghayavi",
    bml: "Bomboli",
    bmm: "Northern Betsimisaraka Malagasy",
    bmn: "Bina (Papua New Guinea)",
    bmo: "Bambalang",
    bmp: "Bulgebi",
    bmq: "Bomu",
    bmr: "Muinane",
    bms: "Bilma Kanuri",
    bmt: "Biao Mon",
    bmu: "Somba-Siawari",
    bmv: "Bum",
    bmw: "Bomwali",
    bmx: "Baimak",
    bmz: "Baramu",
    bna: "Bonerate",
    bnb: "Bookan",
    bnc: "Bontok",
    bnd: "Banda (Indonesia)",
    bne: "Bintauna",
    bnf: "Masiwang",
    bng: "Benga",
    bni: "Bangi",
    bnj: "Eastern Tawbuid",
    bnk: "Bierebo",
    bnl: "Boon",
    bnm: "Batanga",
    bnn: "Bunun",
    bno: "Bantoanon",
    bnp: "Bola",
    bnq: "Bantik",
    bnr: "Butmas-Tur",
    bns: "Bundeli",
    bnu: "Bentong",
    bnv: "Bonerif",
    bnw: "Bisis",
    bnx: "Bangubangu",
    bny: "Bintulu",
    bnz: "Beezen",
    boa: "Bora",
    bob: "Aweer",
    bod: "Tibetan",
    boe: "Mundabli",
    bof: "Bolon",
    bog: "Bamako Sign Language",
    boh: "Boma",
    boi: "Barbare\xF1o",
    boj: "Anjam",
    bok: "Bonjo",
    bol: "Bole",
    bom: "Berom",
    bon: "Bine",
    boo: "Tiemac\xE8w\xE8 Bozo",
    bop: "Bonkiman",
    boq: "Bogaya",
    bor: "Bor\xF4ro",
    bos: "Bosnian",
    bot: "Bongo",
    bou: "Bondei",
    bov: "Tuwuli",
    bow: "Rema",
    box: "Buamu",
    boy: "Bodo (Central African Republic)",
    boz: "Ti\xE9yaxo Bozo",
    bpa: "Daakaka",
    bpb: "Barbacoas",
    bpd: "Banda-Banda",
    bpg: "Bonggo",
    bph: "Botlikh",
    bpi: "Bagupi",
    bpj: "Binji",
    bpk: "Orowe",
    bpl: "Broome Pearling Lugger Pidgin",
    bpm: "Biyom",
    bpn: "Dzao Min",
    bpo: "Anasi",
    bpp: "Kaure",
    bpq: "Banda Malay",
    bpr: "Koronadal Blaan",
    bps: "Sarangani Blaan",
    bpt: "Barrow Point",
    bpu: "Bongu",
    bpv: "Bian Marind",
    bpw: "Bo (Papua New Guinea)",
    bpx: "Palya Bareli",
    bpy: "Bishnupriya",
    bpz: "Bilba",
    bqa: "Tchumbuli",
    bqb: "Bagusa",
    bqc: "Boko (Benin)",
    bqd: "Bung",
    bqf: "Baga Kaloum",
    bqg: "Bago-Kusuntu",
    bqh: "Baima",
    bqi: "Bakhtiari",
    bqj: "Bandial",
    bqk: "Banda-Mbr\xE8s",
    bql: "Bilakura",
    bqm: "Wumboko",
    bqn: "Bulgarian Sign Language",
    bqo: "Balo",
    bqp: "Busa",
    bqq: "Biritai",
    bqr: "Burusu",
    bqs: "Bosngun",
    bqt: "Bamukumbit",
    bqu: "Boguru",
    bqv: "Koro Wachi",
    bqw: "Buru (Nigeria)",
    bqx: "Baangi",
    bqy: "Bengkala Sign Language",
    bqz: "Bakaka",
    bra: "Braj",
    brb: "Lave",
    brc: "Berbice Creole Dutch",
    brd: "Baraamu",
    bre: "Breton",
    brf: "Bera",
    brg: "Baure",
    brh: "Brahui",
    bri: "Mokpwe",
    brj: "Bieria",
    brk: "Birked",
    brl: "Birwa",
    brm: "Barambu",
    brn: "Boruca",
    bro: "Brokkat",
    brp: "Barapasi",
    brq: "Breri",
    brr: "Birao",
    brs: "Baras",
    brt: "Bitare",
    bru: "Eastern Bru",
    brv: "Western Bru",
    brw: "Bellari",
    brx: "Bodo (India)",
    bry: "Burui",
    brz: "Bilbil",
    bsa: "Abinomn",
    bsb: "Brunei Bisaya",
    bsc: "Bassari",
    bse: "Wushi",
    bsf: "Bauchi",
    bsg: "Bashkardi",
    bsh: "Kati",
    bsi: "Bassossi",
    bsj: "Bangwinji",
    bsk: "Burushaski",
    bsl: "Basa-Gumna",
    bsm: "Busami",
    bsn: "Barasana-Eduria",
    bso: "Buso",
    bsp: "Baga Sitemu",
    bsq: "Bassa",
    bsr: "Bassa-Kontagora",
    bss: "Akoose",
    bst: "Basketo",
    bsu: "Bahonsuai",
    bsv: "Baga Soban\xE9",
    bsw: "Baiso",
    bsx: "Yangkam",
    bsy: "Sabah Bisaya",
    bta: "Bata",
    btc: "Bati (Cameroon)",
    btd: "Batak Dairi",
    bte: "Gamo-Ningi",
    btf: "Birgit",
    btg: "Gagnoa B\xE9t\xE9",
    bth: "Biatah Bidayuh",
    bti: "Burate",
    btj: "Bacanese Malay",
    btm: "Batak Mandailing",
    btn: "Ratagnon",
    bto: "Rinconada Bikol",
    btp: "Budibud",
    btq: "Batek",
    btr: "Baetora",
    bts: "Batak Simalungun",
    btt: "Bete-Bendi",
    btu: "Batu",
    btv: "Bateri",
    btw: "Butuanon",
    btx: "Batak Karo",
    bty: "Bobot",
    btz: "Batak Alas-Kluet",
    bua: "Buriat",
    bub: "Bua",
    buc: "Bushi",
    bud: "Ntcham",
    bue: "Beothuk",
    buf: "Bushoong",
    bug: "Buginese",
    buh: "Younuo Bunu",
    bui: "Bongili",
    buj: "Basa-Gurmana",
    buk: "Bugawac",
    bul: "Bulgarian",
    bum: "Bulu (Cameroon)",
    bun: "Sherbro",
    buo: "Terei",
    bup: "Busoa",
    buq: "Brem",
    bus: "Bokobaru",
    but: "Bungain",
    buu: "Budu",
    buv: "Bun",
    buw: "Bubi",
    bux: "Boghom",
    buy: "Bullom So",
    buz: "Bukwen",
    bva: "Barein",
    bvb: "Bube",
    bvc: "Baelelea",
    bvd: "Baeggu",
    bve: "Berau Malay",
    bvf: "Boor",
    bvg: "Bonkeng",
    bvh: "Bure",
    bvi: "Belanda Viri",
    bvj: "Baan",
    bvk: "Bukat",
    bvl: "Bolivian Sign Language",
    bvm: "Bamunka",
    bvn: "Buna",
    bvo: "Bolgo",
    bvp: "Bumang",
    bvq: "Birri",
    bvr: "Burarra",
    bvt: "Bati (Indonesia)",
    bvu: "Bukit Malay",
    bvv: "Baniva",
    bvw: "Boga",
    bvx: "Dibole",
    bvy: "Baybayanon",
    bvz: "Bauzi",
    bwa: "Bwatoo",
    bwb: "Namosi-Naitasiri-Serua",
    bwc: "Bwile",
    bwd: "Bwaidoka",
    bwe: "Bwe Karen",
    bwf: "Boselewa",
    bwg: "Barwe",
    bwh: "Bishuo",
    bwi: "Baniwa",
    bwj: "L\xE1\xE1 L\xE1\xE1 Bwamu",
    bwk: "Bauwaki",
    bwl: "Bwela",
    bwm: "Biwat",
    bwn: "Wunai Bunu",
    bwo: "Boro (Ethiopia)",
    bwp: "Mandobo Bawah",
    bwq: "Southern Bobo Madar\xE9",
    bwr: "Bura-Pabir",
    bws: "Bomboma",
    bwt: "Bafaw-Balong",
    bwu: "Buli (Ghana)",
    bww: "Bwa",
    bwx: "Bu-Nao Bunu",
    bwy: "Cwi Bwamu",
    bwz: "Bwisi",
    bxa: "Tairaha",
    bxb: "Belanda Bor",
    bxc: "Molengue",
    bxd: "Pela",
    bxe: "Birale",
    bxf: "Bilur",
    bxg: "Bangala",
    bxh: "Buhutu",
    bxi: "Pirlatapa",
    bxj: "Bayungu",
    bxk: "Bukusu",
    bxl: "Jalkunan",
    bxm: "Mongolia Buriat",
    bxn: "Burduna",
    bxo: "Barikanchi",
    bxp: "Bebil",
    bxq: "Beele",
    bxr: "Russia Buriat",
    bxs: "Busam",
    bxu: "China Buriat",
    bxv: "Berakou",
    bxw: "Bankagooma",
    bxz: "Binahari",
    bya: "Batak",
    byb: "Bikya",
    byc: "Ubaghara",
    byd: "Benyadu'",
    bye: "Pouye",
    byf: "Bete",
    byg: "Baygo",
    byh: "Bhujel",
    byi: "Buyu",
    byj: "Bina (Nigeria)",
    byk: "Biao",
    byl: "Bayono",
    bym: "Bidyara",
    byn: "Bilin",
    byo: "Biyo",
    byp: "Bumaji",
    byq: "Basay",
    byr: "Baruya",
    bys: "Burak",
    byt: "Berti",
    byv: "Medumba",
    byw: "Belhariya",
    byx: "Qaqet",
    byz: "Banaro",
    bza: "Bandi",
    bzb: "Andio",
    bzc: "Southern Betsimisaraka Malagasy",
    bzd: "Bribri",
    bze: "Jenaama Bozo",
    bzf: "Boikin",
    bzg: "Babuza",
    bzh: "Mapos Buang",
    bzi: "Bisu",
    bzj: "Belize Kriol English",
    bzk: "Nicaragua Creole English",
    bzl: "Boano (Sulawesi)",
    bzm: "Bolondo",
    bzn: "Boano (Maluku)",
    bzo: "Bozaba",
    bzp: "Kemberano",
    bzq: "Buli (Indonesia)",
    bzr: "Biri",
    bzs: "Brazilian Sign Language",
    bzt: "Brithenig",
    bzu: "Burmeso",
    bzv: "Naami",
    bzw: "Basa (Nigeria)",
    bzx: "K\u025Bl\u025Bngaxo Bozo",
    bzy: "Obanliku",
    bzz: "Evant",
    caa: "Chort\xED",
    cab: "Garifuna",
    cac: "Chuj",
    cad: "Caddo",
    cae: "Lehar",
    caf: "Southern Carrier",
    cag: "Nivacl\xE9",
    cah: "Cahuarano",
    caj: "Chan\xE9",
    cak: "Kaqchikel",
    cal: "Carolinian",
    cam: "Cemuh\xEE",
    can: "Chambri",
    cao: "Ch\xE1cobo",
    cap: "Chipaya",
    caq: "Car Nicobarese",
    car: "Galibi Carib",
    cas: "Tsiman\xE9",
    cat: "Catalan",
    cav: "Cavine\xF1a",
    caw: "Callawalla",
    cax: "Chiquitano",
    cay: "Cayuga",
    caz: "Canichana",
    cbb: "Cabiyar\xED",
    cbc: "Carapana",
    cbd: "Carijona",
    cbg: "Chimila",
    cbi: "Chachi",
    cbj: "Ede Cabe",
    cbk: "Chavacano",
    cbl: "Bualkhaw Chin",
    cbn: "Nyahkur",
    cbo: "Izora",
    cbq: "Tsucuba",
    cbr: "Cashibo-Cacataibo",
    cbs: "Cashinahua",
    cbt: "Chayahuita",
    cbu: "Candoshi-Shapra",
    cbv: "Cacua",
    cbw: "Kinabalian",
    cby: "Carabayo",
    cca: "Cauca",
    ccc: "Chamicuro",
    ccd: "Cafundo Creole",
    cce: "Chopi",
    ccg: "Samba Daka",
    cch: "Atsam",
    ccj: "Kasanga",
    ccl: "Cutchi-Swahili",
    ccm: "Malaccan Creole Malay",
    cco: "Comaltepec Chinantec",
    ccp: "Chakma",
    ccr: "Cacaopera",
    cda: "Choni",
    cde: "Chenchu",
    cdf: "Chiru",
    cdg: "Chamari",
    cdh: "Chambeali",
    cdi: "Chodri",
    cdj: "Churahi",
    cdm: "Chepang",
    cdn: "Chaudangsi",
    cdo: "Min Dong Chinese",
    cdr: "Cinda-Regi-Tiyal",
    cds: "Chadian Sign Language",
    cdy: "Chadong",
    cdz: "Koda",
    cea: "Lower Chehalis",
    ceb: "Cebuano",
    ceg: "Chamacoco",
    cek: "Eastern Khumi Chin",
    cen: "Cen",
    ces: "Czech",
    cet: "Cent\xFA\xFAm",
    cfa: "Dijim-Bwilim",
    cfd: "Cara",
    cfg: "Como Karim",
    cfm: "Falam Chin",
    cga: "Changriwa",
    cgc: "Kagayanen",
    cgg: "Chiga",
    cgk: "Chocangacakha",
    cha: "Chamorro",
    chb: "Chibcha",
    chc: "Catawba",
    chd: "Highland Oaxaca Chontal",
    che: "Chechen",
    chf: "Tabasco Chontal",
    chg: "Chagatai",
    chh: "Chinook",
    chj: "Ojitl\xE1n Chinantec",
    chk: "Chuukese",
    chl: "Cahuilla",
    chm: "Mari (Russia)",
    chn: "Chinook jargon",
    cho: "Choctaw",
    chp: "Chipewyan",
    chq: "Quiotepec Chinantec",
    chr: "Cherokee",
    cht: "Chol\xF3n",
    chu: "Church Slavic",
    chv: "Chuvash",
    chw: "Chuwabu",
    chx: "Chantyal",
    chy: "Cheyenne",
    chz: "Ozumac\xEDn Chinantec",
    cia: "Cia-Cia",
    cib: "Ci Gbe",
    cic: "Chickasaw",
    cid: "Chimariko",
    cie: "Cineni",
    cih: "Chinali",
    cik: "Chitkuli Kinnauri",
    cim: "Cimbrian",
    cin: "Cinta Larga",
    cip: "Chiapanec",
    cir: "Tiri",
    ciw: "Chippewa",
    ciy: "Chaima",
    cja: "Western Cham",
    cje: "Chru",
    cjh: "Upper Chehalis",
    cji: "Chamalal",
    cjk: "Chokwe",
    cjm: "Eastern Cham",
    cjn: "Chenapian",
    cjo: "Ash\xE9ninka Pajonal",
    cjp: "Cab\xE9car",
    cjs: "Shor",
    cjv: "Chuave",
    cjy: "Jinyu Chinese",
    ckb: "Central Kurdish",
    ckh: "Chak",
    ckl: "Cibak",
    ckn: "Kaang Chin",
    cko: "Anufo",
    ckq: "Kajakse",
    ckr: "Kairak",
    cks: "Tayo",
    ckt: "Chukot",
    cku: "Koasati",
    ckv: "Kavalan",
    ckx: "Caka",
    cky: "Cakfem-Mushere",
    ckz: "Cakchiquel-Quich\xE9 Mixed Language",
    cla: "Ron",
    clc: "Chilcotin",
    cld: "Chaldean Neo-Aramaic",
    cle: "Lealao Chinantec",
    clh: "Chilisso",
    cli: "Chakali",
    clj: "Laitu Chin",
    clk: "Idu-Mishmi",
    cll: "Chala",
    clm: "Clallam",
    clo: "Lowland Oaxaca Chontal",
    clt: "Lautu Chin",
    clu: "Caluyanun",
    clw: "Chulym",
    cly: "Eastern Highland Chatino",
    cma: "Maa",
    cme: "Cerma",
    cmg: "Classical Mongolian",
    cmi: "Ember\xE1-Cham\xED",
    cml: "Campalagian",
    cmm: "Michigamea",
    cmn: "Mandarin Chinese",
    cmo: "Central Mnong",
    cmr: "Mro-Khimi Chin",
    cms: "Messapic",
    cmt: "Camtho",
    cna: "Changthang",
    cnb: "Chinbon Chin",
    cnc: "C\xF4\xF4ng",
    cng: "Northern Qiang",
    cnh: "Hakha Chin",
    cni: "Ash\xE1ninka",
    cnk: "Khumi Chin",
    cnl: "Lalana Chinantec",
    cno: "Con",
    cns: "Central Asmat",
    cnt: "Tepetotutla Chinantec",
    cnu: "Chenoua",
    cnw: "Ngawn Chin",
    cnx: "Middle Cornish",
    coa: "Cocos Islands Malay",
    cob: "Chicomuceltec",
    coc: "Cocopa",
    cod: "Cocama-Cocamilla",
    coe: "Koreguaje",
    cof: "Colorado",
    cog: "Chong",
    coh: "Chonyi-Dzihana-Kauma",
    coj: "Cochimi",
    cok: "Santa Teresa Cora",
    col: "Columbia-Wenatchi",
    com: "Comanche",
    con: "Cof\xE1n",
    coo: "Comox",
    cop: "Coptic",
    coq: "Coquille",
    cor: "Cornish",
    cos: "Corsican",
    cot: "Caquinte",
    cou: "Wamey",
    cov: "Cao Miao",
    cow: "Cowlitz",
    cox: "Nanti",
    coz: "Chochotec",
    cpa: "Palantla Chinantec",
    cpb: "Ucayali-Yur\xFAa Ash\xE9ninka",
    cpc: "Ajy\xEDninka Apurucayali",
    cpg: "Cappadocian Greek",
    cpi: "Chinese Pidgin English",
    cpn: "Cherepon",
    cpo: "Kpeego",
    cps: "Capiznon",
    cpu: "Pichis Ash\xE9ninka",
    cpx: "Pu-Xian Chinese",
    cpy: "South Ucayali Ash\xE9ninka",
    cqd: "Chuanqiandian Cluster Miao",
    cra: "Chara",
    crb: "Island Carib",
    crc: "Lonwolwol",
    crd: "Coeur d'Alene",
    cre: "Cree",
    crf: "Caramanta",
    crg: "Michif",
    crh: "Crimean Tatar",
    cri: "S\xE3otomense",
    crj: "Southern East Cree",
    crk: "Plains Cree",
    crl: "Northern East Cree",
    crm: "Moose Cree",
    crn: "El Nayar Cora",
    cro: "Crow",
    crq: "Iyo'wujwa Chorote",
    crr: "Carolina Algonquian",
    crs: "Seselwa Creole French",
    crt: "Iyojwa'ja Chorote",
    crv: "Chaura",
    crw: "Chrau",
    crx: "Carrier",
    cry: "Cori",
    crz: "Cruze\xF1o",
    csa: "Chiltepec Chinantec",
    csb: "Kashubian",
    csc: "Catalan Sign Language",
    csd: "Chiangmai Sign Language",
    cse: "Czech Sign Language",
    csf: "Cuba Sign Language",
    csg: "Chilean Sign Language",
    csh: "Asho Chin",
    csi: "Coast Miwok",
    csj: "Songlai Chin",
    csk: "Jola-Kasa",
    csl: "Chinese Sign Language",
    csm: "Central Sierra Miwok",
    csn: "Colombian Sign Language",
    cso: "Sochiapam Chinantec",
    csq: "Croatia Sign Language",
    csr: "Costa Rican Sign Language",
    css: "Southern Ohlone",
    cst: "Northern Ohlone",
    csv: "Sumtu Chin",
    csw: "Swampy Cree",
    csy: "Siyin Chin",
    csz: "Coos",
    cta: "Tataltepec Chatino",
    ctc: "Chetco",
    ctd: "Tedim Chin",
    cte: "Tepinapa Chinantec",
    ctg: "Chittagonian",
    cth: "Thaiphum Chin",
    ctl: "Tlacoatzintepec Chinantec",
    ctm: "Chitimacha",
    ctn: "Chhintange",
    cto: "Ember\xE1-Cat\xEDo",
    ctp: "Western Highland Chatino",
    cts: "Northern Catanduanes Bikol",
    ctt: "Wayanad Chetti",
    ctu: "Chol",
    ctz: "Zacatepec Chatino",
    cua: "Cua",
    cub: "Cubeo",
    cuc: "Usila Chinantec",
    cug: "Chungmboko",
    cuh: "Chuka",
    cui: "Cuiba",
    cuj: "Mashco Piro",
    cuk: "San Blas Kuna",
    cul: "Culina",
    cuo: "Cumanagoto",
    cup: "Cupe\xF1o",
    cuq: "Cun",
    cur: "Chhulung",
    cut: "Teutila Cuicatec",
    cuu: "Tai Ya",
    cuv: "Cuvok",
    cuw: "Chukwa",
    cux: "Tepeuxila Cuicatec",
    cvg: "Chug",
    cvn: "Valle Nacional Chinantec",
    cwa: "Kabwa",
    cwb: "Maindo",
    cwd: "Woods Cree",
    cwe: "Kwere",
    cwg: "Chewong",
    cwt: "Kuwaataay",
    cya: "Nopala Chatino",
    cyb: "Cayubaba",
    cym: "Welsh",
    cyo: "Cuyonon",
    czh: "Huizhou Chinese",
    czk: "Knaanic",
    czn: "Zenzontepec Chatino",
    czo: "Min Zhong Chinese",
    czt: "Zotung Chin",
    daa: "Dangal\xE9at",
    dac: "Dambi",
    dad: "Marik",
    dae: "Duupa",
    dag: "Dagbani",
    dah: "Gwahatike",
    dai: "Day",
    daj: "Dar Fur Daju",
    dak: "Dakota",
    dal: "Dahalo",
    dam: "Damakawa",
    dan: "Danish",
    dao: "Daai Chin",
    daq: "Dandami Maria",
    dar: "Dargwa",
    das: "Daho-Doo",
    dau: "Dar Sila Daju",
    dav: "Taita",
    daw: "Davawenyo",
    dax: "Dayi",
    daz: "Dao",
    dba: "Bangime",
    dbb: "Deno",
    dbd: "Dadiya",
    dbe: "Dabe",
    dbf: "Edopi",
    dbg: "Dogul Dom Dogon",
    dbi: "Doka",
    dbj: "Ida'an",
    dbl: "Dyirbal",
    dbm: "Duguri",
    dbn: "Duriankere",
    dbo: "Dulbu",
    dbp: "Duwai",
    dbq: "Daba",
    dbr: "Dabarre",
    dbt: "Ben Tey Dogon",
    dbu: "Bondum Dom Dogon",
    dbv: "Dungu",
    dbw: "Bankan Tey Dogon",
    dby: "Dibiyaso",
    dcc: "Deccan",
    dcr: "Negerhollands",
    dda: "Dadi Dadi",
    ddd: "Dongotono",
    dde: "Doondo",
    ddg: "Fataluku",
    ddi: "West Goodenough",
    ddj: "Jaru",
    ddn: "Dendi (Benin)",
    ddo: "Dido",
    ddr: "Dhudhuroa",
    dds: "Donno So Dogon",
    ddw: "Dawera-Daweloor",
    dec: "Dagik",
    ded: "Dedua",
    dee: "Dewoin",
    def: "Dezfuli",
    deg: "Degema",
    deh: "Dehwari",
    dei: "Demisa",
    dek: "Dek",
    del: "Delaware",
    dem: "Dem",
    den: "Slave (Athapascan)",
    dep: "Pidgin Delaware",
    deq: "Dendi (Central African Republic)",
    der: "Deori",
    des: "Desano",
    deu: "German",
    dev: "Domung",
    dez: "Dengese",
    dga: "Southern Dagaare",
    dgb: "Bunoge Dogon",
    dgc: "Casiguran Dumagat Agta",
    dgd: "Dagaari Dioula",
    dge: "Degenan",
    dgg: "Doga",
    dgh: "Dghwede",
    dgi: "Northern Dagara",
    dgk: "Dagba",
    dgl: "Andaandi",
    dgn: "Dagoman",
    dgo: "Dogri (individual language)",
    dgr: "Dogrib",
    dgs: "Dogoso",
    dgt: "Ndra'ngith",
    dgu: "Degaru",
    dgw: "Daungwurrung",
    dgx: "Doghoro",
    dgz: "Daga",
    dhd: "Dhundari",
    dhg: "Dhangu-Djangu",
    dhi: "Dhimal",
    dhl: "Dhalandji",
    dhm: "Zemba",
    dhn: "Dhanki",
    dho: "Dhodia",
    dhr: "Dhargari",
    dhs: "Dhaiso",
    dhu: "Dhurga",
    dhv: "Dehu",
    dhw: "Dhanwar (Nepal)",
    dhx: "Dhungaloo",
    dia: "Dia",
    dib: "South Central Dinka",
    dic: "Lakota Dida",
    did: "Didinga",
    dif: "Dieri",
    dig: "Digo",
    dih: "Kumiai",
    dii: "Dimbong",
    dij: "Dai",
    dik: "Southwestern Dinka",
    dil: "Dilling",
    dim: "Dime",
    din: "Dinka",
    dio: "Dibo",
    dip: "Northeastern Dinka",
    diq: "Dimli (individual language)",
    dir: "Dirim",
    dis: "Dimasa",
    dit: "Dirari",
    diu: "Diriku",
    div: "Dhivehi",
    diw: "Northwestern Dinka",
    dix: "Dixon Reef",
    diy: "Diuwe",
    diz: "Ding",
    dja: "Djadjawurrung",
    djb: "Djinba",
    djc: "Dar Daju Daju",
    djd: "Djamindjung",
    dje: "Zarma",
    djf: "Djangun",
    dji: "Djinang",
    djj: "Djeebbana",
    djk: "Eastern Maroon Creole",
    djm: "Jamsay Dogon",
    djn: "Djauan",
    djo: "Jangkang",
    djr: "Djambarrpuyngu",
    dju: "Kapriman",
    djw: "Djawi",
    dka: "Dakpakha",
    dkk: "Dakka",
    dkr: "Kuijau",
    dks: "Southeastern Dinka",
    dkx: "Mazagway",
    dlg: "Dolgan",
    dlk: "Dahalik",
    dlm: "Dalmatian",
    dln: "Darlong",
    dma: "Duma",
    dmb: "Mombo Dogon",
    dmc: "Gavak",
    dmd: "Madhi Madhi",
    dme: "Dugwor",
    dmg: "Upper Kinabatangan",
    dmk: "Domaaki",
    dml: "Dameli",
    dmm: "Dama",
    dmo: "Kemedzung",
    dmr: "East Damar",
    dms: "Dampelas",
    dmu: "Dubu",
    dmv: "Dumpas",
    dmw: "Mudburra",
    dmx: "Dema",
    dmy: "Demta",
    dna: "Upper Grand Valley Dani",
    dnd: "Daonda",
    dne: "Ndendeule",
    dng: "Dungan",
    dni: "Lower Grand Valley Dani",
    dnj: "Dan",
    dnk: "Dengka",
    dnn: "Dz\xF9\xF9ngoo",
    dnr: "Danaru",
    dnt: "Mid Grand Valley Dani",
    dnu: "Danau",
    dnv: "Danu",
    dnw: "Western Dani",
    dny: "Den\xED",
    doa: "Dom",
    dob: "Dobu",
    doc: "Northern Dong",
    doe: "Doe",
    dof: "Domu",
    doh: "Dong",
    doi: "Dogri (macrolanguage)",
    dok: "Dondo",
    dol: "Doso",
    don: "Toura (Papua New Guinea)",
    doo: "Dongo",
    dop: "Lukpa",
    doq: "Dominican Sign Language",
    dor: "Dori'o",
    dos: "Dogos\xE9",
    dot: "Dass",
    dov: "Dombe",
    dow: "Doyayo",
    dox: "Bussa",
    doy: "Dompo",
    doz: "Dorze",
    dpp: "Papar",
    drb: "Dair",
    drc: "Minderico",
    drd: "Darmiya",
    dre: "Dolpo",
    drg: "Rungus",
    dri: "C'Lela",
    drl: "Paakantyi",
    drn: "West Damar",
    dro: "Daro-Matu Melanau",
    drq: "Dura",
    drr: "Dororo",
    drs: "Gedeo",
    drt: "Drents",
    dru: "Rukai",
    dry: "Darai",
    dsb: "Lower Sorbian",
    dse: "Dutch Sign Language",
    dsh: "Daasanach",
    dsi: "Disa",
    dsl: "Danish Sign Language",
    dsn: "Dusner",
    dso: "Desiya",
    dsq: "Tadaksahak",
    dta: "Daur",
    dtb: "Labuk-Kinabatangan Kadazan",
    dtd: "Ditidaht",
    dth: "Adithinngithigh",
    dti: "Ana Tinga Dogon",
    dtk: "Tene Kan Dogon",
    dtm: "Tomo Kan Dogon",
    dtn: "Daats\u02BCi\u0301in",
    dto: "Tommo So Dogon",
    dtp: "Kadazan Dusun",
    dtr: "Lotud",
    dts: "Toro So Dogon",
    dtt: "Toro Tegu Dogon",
    dtu: "Tebul Ure Dogon",
    dty: "Dotyali",
    dua: "Duala",
    dub: "Dubli",
    duc: "Duna",
    dud: "Hun-Saare",
    due: "Umiray Dumaget Agta",
    duf: "Dumbea",
    dug: "Duruma",
    duh: "Dungra Bhil",
    dui: "Dumun",
    duk: "Uyajitaya",
    dul: "Alabat Island Agta",
    dum: "Middle Dutch (ca. 1050-1350)",
    dun: "Dusun Deyah",
    duo: "Dupaninan Agta",
    dup: "Duano",
    duq: "Dusun Malang",
    dur: "Dii",
    dus: "Dumi",
    duu: "Drung",
    duv: "Duvle",
    duw: "Dusun Witu",
    dux: "Duungooma",
    duy: "Dicamay Agta",
    duz: "Duli-Gey",
    dva: "Duau",
    dwa: "Diri",
    dwr: "Dawro",
    dws: "Dutton World Speedwords",
    dwu: "Dhuwal",
    dww: "Dawawa",
    dwy: "Dhuwaya",
    dya: "Dyan",
    dyb: "Dyaberdyaber",
    dyd: "Dyugun",
    dyg: "Villa Viciosa Agta",
    dyi: "Djimini Senoufo",
    dym: "Yanda Dom Dogon",
    dyn: "Dyangadi",
    dyo: "Jola-Fonyi",
    dyu: "Dyula",
    dyy: "Dyaabugay",
    dza: "Tunzu",
    dze: "Djiwarli",
    dzg: "Dazaga",
    dzl: "Dzalakha",
    dzn: "Dzando",
    dzo: "Dzongkha",
    eaa: "Karenggapa",
    ebg: "Ebughu",
    ebk: "Eastern Bontok",
    ebo: "Teke-Ebo",
    ebr: "Ebri\xE9",
    ebu: "Embu",
    ecr: "Eteocretan",
    ecs: "Ecuadorian Sign Language",
    ecy: "Eteocypriot",
    eee: "E",
    efa: "Efai",
    efe: "Efe",
    efi: "Efik",
    ega: "Ega",
    egl: "Emilian",
    ego: "Eggon",
    egy: "Egyptian (Ancient)",
    ehu: "Ehueun",
    eip: "Eipomek",
    eit: "Eitiep",
    eiv: "Askopan",
    eja: "Ejamat",
    eka: "Ekajuk",
    ekc: "Eastern Karnic",
    eke: "Ekit",
    ekg: "Ekari",
    eki: "Eki",
    ekk: "Standard Estonian",
    ekl: "Kol (Bangladesh)",
    ekm: "Elip",
    eko: "Koti",
    ekp: "Ekpeye",
    ekr: "Yace",
    eky: "Eastern Kayah",
    ele: "Elepi",
    elh: "El Hugeirat",
    eli: "Nding",
    elk: "Elkei",
    ell: "Modern Greek (1453-)",
    elm: "Eleme",
    elo: "El Molo",
    elu: "Elu",
    elx: "Elamite",
    ema: "Emai-Iuleha-Ora",
    emb: "Embaloh",
    eme: "Emerillon",
    emg: "Eastern Meohang",
    emi: "Mussau-Emira",
    emk: "Eastern Maninkakan",
    emm: "Mamulique",
    emn: "Eman",
    emp: "Northern Ember\xE1",
    ems: "Pacific Gulf Yupik",
    emu: "Eastern Muria",
    emw: "Emplawas",
    emx: "Erromintxela",
    emy: "Epigraphic Mayan",
    ena: "Apali",
    enb: "Markweeta",
    enc: "En",
    end: "Ende",
    enf: "Forest Enets",
    eng: "English",
    enh: "Tundra Enets",
    enl: "Enlhet",
    enm: "Middle English (1100-1500)",
    enn: "Engenni",
    eno: "Enggano",
    enq: "Enga",
    enr: "Emumu",
    enu: "Enu",
    env: "Enwan (Edu State)",
    enw: "Enwan (Akwa Ibom State)",
    enx: "Enxet",
    eot: "Beti (C\xF4te d'Ivoire)",
    epi: "Epie",
    epo: "Esperanto",
    era: "Eravallan",
    erg: "Sie",
    erh: "Eruwa",
    eri: "Ogea",
    erk: "South Efate",
    ero: "Horpa",
    err: "Erre",
    ers: "Ersu",
    ert: "Eritai",
    erw: "Erokwanas",
    ese: "Ese Ejja",
    esg: "Aheri Gondi",
    esh: "Eshtehardi",
    esi: "North Alaskan Inupiatun",
    esk: "Northwest Alaska Inupiatun",
    esl: "Egypt Sign Language",
    esm: "Esuma",
    esn: "Salvadoran Sign Language",
    eso: "Estonian Sign Language",
    esq: "Esselen",
    ess: "Central Siberian Yupik",
    est: "Estonian",
    esu: "Central Yupik",
    esy: "Eskayan",
    etb: "Etebi",
    etc: "Etchemin",
    eth: "Ethiopian Sign Language",
    etn: "Eton (Vanuatu)",
    eto: "Eton (Cameroon)",
    etr: "Edolo",
    ets: "Yekhee",
    ett: "Etruscan",
    etu: "Ejagham",
    etx: "Eten",
    etz: "Semimi",
    eus: "Basque",
    eve: "Even",
    evh: "Uvbie",
    evn: "Evenki",
    ewe: "Ewe",
    ewo: "Ewondo",
    ext: "Extremaduran",
    eya: "Eyak",
    eyo: "Keiyo",
    eza: "Ezaa",
    eze: "Uzekwe",
    faa: "Fasu",
    fab: "Fa d'Ambu",
    fad: "Wagi",
    faf: "Fagani",
    fag: "Finongan",
    fah: "Baissa Fali",
    fai: "Faiwol",
    faj: "Faita",
    fak: "Fang (Cameroon)",
    fal: "South Fali",
    fam: "Fam",
    fan: "Fang (Equatorial Guinea)",
    fao: "Faroese",
    fap: "Palor",
    far: "Fataleka",
    fas: "Persian",
    fat: "Fanti",
    fau: "Fayu",
    fax: "Fala",
    fay: "Southwestern Fars",
    faz: "Northwestern Fars",
    fbl: "West Albay Bikol",
    fcs: "Quebec Sign Language",
    fer: "Feroge",
    ffi: "Foia Foia",
    ffm: "Maasina Fulfulde",
    fgr: "Fongoro",
    fia: "Nobiin",
    fie: "Fyer",
    fij: "Fijian",
    fil: "Filipino",
    fin: "Finnish",
    fip: "Fipa",
    fir: "Firan",
    fit: "Tornedalen Finnish",
    fiw: "Fiwaga",
    fkk: "Kirya-Konz\u0259l",
    fkv: "Kven Finnish",
    fla: "Kalispel-Pend d'Oreille",
    flh: "Foau",
    fli: "Fali",
    fll: "North Fali",
    fln: "Flinders Island",
    flr: "Fuliiru",
    fly: "Flaaitaal",
    fmp: "Fe'fe'",
    fmu: "Far Western Muria",
    fnb: "Fanbak",
    fng: "Fanagalo",
    fni: "Fania",
    fod: "Foodo",
    foi: "Foi",
    fom: "Foma",
    fon: "Fon",
    for: "Fore",
    fos: "Siraya",
    fpe: "Fernando Po Creole English",
    fqs: "Fas",
    fra: "French",
    frc: "Cajun French",
    frd: "Fordata",
    frk: "Frankish",
    frm: "Middle French (ca. 1400-1600)",
    fro: "Old French (842-ca. 1400)",
    frp: "Arpitan",
    frq: "Forak",
    frr: "Northern Frisian",
    frs: "Eastern Frisian",
    frt: "Fortsenal",
    fry: "Western Frisian",
    fse: "Finnish Sign Language",
    fsl: "French Sign Language",
    fss: "Finland-Swedish Sign Language",
    fub: "Adamawa Fulfulde",
    fuc: "Pulaar",
    fud: "East Futuna",
    fue: "Borgu Fulfulde",
    fuf: "Pular",
    fuh: "Western Niger Fulfulde",
    fui: "Bagirmi Fulfulde",
    fuj: "Ko",
    ful: "Fulah",
    fum: "Fum",
    fun: "Fulni\xF4",
    fuq: "Central-Eastern Niger Fulfulde",
    fur: "Friulian",
    fut: "Futuna-Aniwa",
    fuu: "Furu",
    fuv: "Nigerian Fulfulde",
    fuy: "Fuyug",
    fvr: "Fur",
    fwa: "Fw\xE2i",
    fwe: "Fwe",
    gaa: "Ga",
    gab: "Gabri",
    gac: "Mixed Great Andamanese",
    gad: "Gaddang",
    gae: "Guarequena",
    gaf: "Gende",
    gag: "Gagauz",
    gah: "Alekano",
    gai: "Borei",
    gaj: "Gadsup",
    gak: "Gamkonora",
    gal: "Galolen",
    gam: "Kandawo",
    gan: "Gan Chinese",
    gao: "Gants",
    gap: "Gal",
    gaq: "Gata'",
    gar: "Galeya",
    gas: "Adiwasi Garasia",
    gat: "Kenati",
    gau: "Mudhili Gadaba",
    gaw: "Nobonob",
    gax: "Borana-Arsi-Guji Oromo",
    gay: "Gayo",
    gaz: "West Central Oromo",
    gba: "Gbaya (Central African Republic)",
    gbb: "Kaytetye",
    gbd: "Karadjeri",
    gbe: "Niksek",
    gbf: "Gaikundi",
    gbg: "Gbanziri",
    gbh: "Defi Gbe",
    gbi: "Galela",
    gbj: "Bodo Gadaba",
    gbk: "Gaddi",
    gbl: "Gamit",
    gbm: "Garhwali",
    gbn: "Mo'da",
    gbo: "Northern Grebo",
    gbp: "Gbaya-Bossangoa",
    gbq: "Gbaya-Bozoum",
    gbr: "Gbagyi",
    gbs: "Gbesi Gbe",
    gbu: "Gagadu",
    gbv: "Gbanu",
    gbw: "Gabi-Gabi",
    gbx: "Eastern Xwla Gbe",
    gby: "Gbari",
    gbz: "Zoroastrian Dari",
    gcc: "Mali",
    gcd: "Ganggalida",
    gce: "Galice",
    gcf: "Guadeloupean Creole French",
    gcl: "Grenadian Creole English",
    gcn: "Gaina",
    gcr: "Guianese Creole French",
    gct: "Colonia Tovar German",
    gda: "Gade Lohar",
    gdb: "Pottangi Ollar Gadaba",
    gdc: "Gugu Badhun",
    gdd: "Gedaged",
    gde: "Gude",
    gdf: "Guduf-Gava",
    gdg: "Ga'dang",
    gdh: "Gadjerawang",
    gdi: "Gundi",
    gdj: "Gurdjar",
    gdk: "Gadang",
    gdl: "Dirasha",
    gdm: "Laal",
    gdn: "Umanakaina",
    gdo: "Ghodoberi",
    gdq: "Mehri",
    gdr: "Wipi",
    gds: "Ghandruk Sign Language",
    gdt: "Kungardutyi",
    gdu: "Gudu",
    gdx: "Godwari",
    gea: "Geruma",
    geb: "Kire",
    gec: "Gboloo Grebo",
    ged: "Gade",
    geg: "Gengle",
    geh: "Hutterite German",
    gei: "Gebe",
    gej: "Gen",
    gek: "Ywom",
    gel: "ut-Ma'in",
    geq: "Geme",
    ges: "Geser-Gorom",
    gev: "Eviya",
    gew: "Gera",
    gex: "Garre",
    gey: "Enya",
    gez: "Geez",
    gfk: "Patpatar",
    gft: "Gafat",
    gga: "Gao",
    ggb: "Gbii",
    ggd: "Gugadj",
    gge: "Guragone",
    ggg: "Gurgula",
    ggk: "Kungarakany",
    ggl: "Ganglau",
    ggt: "Gitua",
    ggu: "Gagu",
    ggw: "Gogodala",
    gha: "Ghadam\xE8s",
    ghc: "Hiberno-Scottish Gaelic",
    ghe: "Southern Ghale",
    ghh: "Northern Ghale",
    ghk: "Geko Karen",
    ghl: "Ghulfan",
    ghn: "Ghanongga",
    gho: "Ghomara",
    ghr: "Ghera",
    ghs: "Guhu-Samane",
    ght: "Kuke",
    gia: "Kitja",
    gib: "Gibanawa",
    gic: "Gail",
    gid: "Gidar",
    gie: "Ga\u0253ogbo",
    gig: "Goaria",
    gih: "Githabul",
    gil: "Gilbertese",
    gim: "Gimi (Eastern Highlands)",
    gin: "Hinukh",
    gip: "Gimi (West New Britain)",
    giq: "Green Gelao",
    gir: "Red Gelao",
    gis: "North Giziga",
    git: "Gitxsan",
    giu: "Mulao",
    giw: "White Gelao",
    gix: "Gilima",
    giy: "Giyug",
    giz: "South Giziga",
    gji: "Geji",
    gjk: "Kachi Koli",
    gjm: "Gunditjmara",
    gjn: "Gonja",
    gjr: "Gurindji Kriol",
    gju: "Gujari",
    gka: "Guya",
    gke: "Ndai",
    gkn: "Gokana",
    gko: "Kok-Nar",
    gkp: "Guinea Kpelle",
    gku: "\u01C2Ungkue",
    gla: "Scottish Gaelic",
    glc: "Bon Gula",
    gld: "Nanai",
    gle: "Irish",
    glg: "Galician",
    glh: "Northwest Pashai",
    gli: "Guliguli",
    glj: "Gula Iro",
    glk: "Gilaki",
    gll: "Garlali",
    glo: "Galambu",
    glr: "Glaro-Twabo",
    glu: "Gula (Chad)",
    glv: "Manx",
    glw: "Glavda",
    gly: "Gule",
    gma: "Gambera",
    gmb: "Gula'alaa",
    gmd: "M\xE1ghd\xEC",
    gmg: "Mag\u0268yi",
    gmh: "Middle High German (ca. 1050-1500)",
    gml: "Middle Low German",
    gmm: "Gbaya-Mbodomo",
    gmn: "Gimnime",
    gmu: "Gumalu",
    gmv: "Gamo",
    gmx: "Magoma",
    gmy: "Mycenaean Greek",
    gmz: "Mgbolizhia",
    gna: "Kaansa",
    gnb: "Gangte",
    gnc: "Guanche",
    gnd: "Zulgo-Gemzek",
    gne: "Ganang",
    gng: "Ngangam",
    gnh: "Lere",
    gni: "Gooniyandi",
    gnk: "//Gana",
    gnl: "Gangulu",
    gnm: "Ginuman",
    gnn: "Gumatj",
    gno: "Northern Gondi",
    gnq: "Gana",
    gnr: "Gureng Gureng",
    gnt: "Guntai",
    gnu: "Gnau",
    gnw: "Western Bolivian Guaran\xED",
    gnz: "Ganzi",
    goa: "Guro",
    gob: "Playero",
    goc: "Gorakor",
    god: "Godi\xE9",
    goe: "Gongduk",
    gof: "Gofa",
    gog: "Gogo",
    goh: "Old High German (ca. 750-1050)",
    goi: "Gobasi",
    goj: "Gowlan",
    gok: "Gowli",
    gol: "Gola",
    gom: "Goan Konkani",
    gon: "Gondi",
    goo: "Gone Dau",
    gop: "Yeretuar",
    goq: "Gorap",
    gor: "Gorontalo",
    gos: "Gronings",
    got: "Gothic",
    gou: "Gavar",
    gow: "Gorowa",
    gox: "Gobu",
    goy: "Goundo",
    goz: "Gozarkhani",
    gpa: "Gupa-Abawa",
    gpe: "Ghanaian Pidgin English",
    gpn: "Taiap",
    gqa: "Ga'anda",
    gqi: "Guiqiong",
    gqn: "Guana (Brazil)",
    gqr: "Gor",
    gqu: "Qau",
    gra: "Rajput Garasia",
    grb: "Grebo",
    grc: "Ancient Greek (to 1453)",
    grd: "Guruntum-Mbaaru",
    grg: "Madi",
    grh: "Gbiri-Niragu",
    gri: "Ghari",
    grj: "Southern Grebo",
    grm: "Kota Marudu Talantang",
    grn: "Guarani",
    gro: "Groma",
    grq: "Gorovu",
    grr: "Taznatit",
    grs: "Gresi",
    grt: "Garo",
    gru: "Kistane",
    grv: "Central Grebo",
    grw: "Gweda",
    grx: "Guriaso",
    gry: "Barclayville Grebo",
    grz: "Guramalum",
    gse: "Ghanaian Sign Language",
    gsg: "German Sign Language",
    gsl: "Gusilay",
    gsm: "Guatemalan Sign Language",
    gsn: "Nema",
    gso: "Southwest Gbaya",
    gsp: "Wasembo",
    gss: "Greek Sign Language",
    gsw: "Swiss German",
    gta: "Guat\xF3",
    gtu: "Aghu-Tharnggala",
    gua: "Shiki",
    gub: "Guajaj\xE1ra",
    guc: "Wayuu",
    gud: "Yocobou\xE9 Dida",
    gue: "Gurinji",
    guf: "Gupapuyngu",
    gug: "Paraguayan Guaran\xED",
    guh: "Guahibo",
    gui: "Eastern Bolivian Guaran\xED",
    guj: "Gujarati",
    guk: "Gumuz",
    gul: "Sea Island Creole English",
    gum: "Guambiano",
    gun: "Mby\xE1 Guaran\xED",
    guo: "Guayabero",
    gup: "Gunwinggu",
    guq: "Ach\xE9",
    gur: "Farefare",
    gus: "Guinean Sign Language",
    gut: "Mal\xE9ku Ja\xEDka",
    guu: "Yanomam\xF6",
    guw: "Gun",
    gux: "Gourmanch\xE9ma",
    guz: "Gusii",
    gva: "Guana (Paraguay)",
    gvc: "Guanano",
    gve: "Duwet",
    gvf: "Golin",
    gvj: "Guaj\xE1",
    gvl: "Gulay",
    gvm: "Gurmana",
    gvn: "Kuku-Yalanji",
    gvo: "Gavi\xE3o Do Jiparan\xE1",
    gvp: "Par\xE1 Gavi\xE3o",
    gvr: "Gurung",
    gvs: "Gumawana",
    gvy: "Guyani",
    gwa: "Mbato",
    gwb: "Gwa",
    gwc: "Kalami",
    gwd: "Gawwada",
    gwe: "Gweno",
    gwf: "Gowro",
    gwg: "Moo",
    gwi: "Gwich\u02BCin",
    gwj: "/Gwi",
    gwm: "Awngthim",
    gwn: "Gwandara",
    gwr: "Gwere",
    gwt: "Gawar-Bati",
    gwu: "Guwamu",
    gww: "Kwini",
    gwx: "Gua",
    gxx: "W\xE8 Southern",
    gya: "Northwest Gbaya",
    gyb: "Garus",
    gyd: "Kayardild",
    gye: "Gyem",
    gyf: "Gungabula",
    gyg: "Gbayi",
    gyi: "Gyele",
    gyl: "Gayil",
    gym: "Ng\xE4bere",
    gyn: "Guyanese Creole English",
    gyr: "Guarayu",
    gyy: "Gunya",
    gza: "Ganza",
    gzi: "Gazi",
    gzn: "Gane",
    haa: "Han",
    hab: "Hanoi Sign Language",
    hac: "Gurani",
    had: "Hatam",
    hae: "Eastern Oromo",
    haf: "Haiphong Sign Language",
    hag: "Hanga",
    hah: "Hahon",
    hai: "Haida",
    haj: "Hajong",
    hak: "Hakka Chinese",
    hal: "Halang",
    ham: "Hewa",
    han: "Hangaza",
    hao: "Hak\xF6",
    hap: "Hupla",
    haq: "Ha",
    har: "Harari",
    has: "Haisla",
    hat: "Haitian",
    hau: "Hausa",
    hav: "Havu",
    haw: "Hawaiian",
    hax: "Southern Haida",
    hay: "Haya",
    haz: "Hazaragi",
    hba: "Hamba",
    hbb: "Huba",
    hbn: "Heiban",
    hbo: "Ancient Hebrew",
    hbs: "Serbo-Croatian",
    hbu: "Habu",
    hca: "Andaman Creole Hindi",
    hch: "Huichol",
    hdn: "Northern Haida",
    hds: "Honduras Sign Language",
    hdy: "Hadiyya",
    hea: "Northern Qiandong Miao",
    heb: "Hebrew",
    hed: "Herd\xE9",
    heg: "Helong",
    heh: "Hehe",
    hei: "Heiltsuk",
    hem: "Hemba",
    her: "Herero",
    hgm: "Hai//om",
    hgw: "Haigwai",
    hhi: "Hoia Hoia",
    hhr: "Kerak",
    hhy: "Hoyahoya",
    hia: "Lamang",
    hib: "Hibito",
    hid: "Hidatsa",
    hif: "Fiji Hindi",
    hig: "Kamwe",
    hih: "Pamosu",
    hii: "Hinduri",
    hij: "Hijuk",
    hik: "Seit-Kaitetu",
    hil: "Hiligaynon",
    hin: "Hindi",
    hio: "Tsoa",
    hir: "Himarim\xE3",
    hit: "Hittite",
    hiw: "Hiw",
    hix: "Hixkary\xE1na",
    hji: "Haji",
    hka: "Kahe",
    hke: "Hunde",
    hkk: "Hunjara-Kaina Ke",
    hks: "Hong Kong Sign Language",
    hla: "Halia",
    hlb: "Halbi",
    hld: "Halang Doan",
    hle: "Hlersu",
    hlt: "Matu Chin",
    hlu: "Hieroglyphic Luwian",
    hma: "Southern Mashan Hmong",
    hmb: "Humburi Senni Songhay",
    hmc: "Central Huishui Hmong",
    hmd: "Large Flowery Miao",
    hme: "Eastern Huishui Hmong",
    hmf: "Hmong Don",
    hmg: "Southwestern Guiyang Hmong",
    hmh: "Southwestern Huishui Hmong",
    hmi: "Northern Huishui Hmong",
    hmj: "Ge",
    hmk: "Maek",
    hml: "Luopohe Hmong",
    hmm: "Central Mashan Hmong",
    hmn: "Hmong",
    hmo: "Hiri Motu",
    hmp: "Northern Mashan Hmong",
    hmq: "Eastern Qiandong Miao",
    hmr: "Hmar",
    hms: "Southern Qiandong Miao",
    hmt: "Hamtai",
    hmu: "Hamap",
    hmv: "Hmong D\xF4",
    hmw: "Western Mashan Hmong",
    hmy: "Southern Guiyang Hmong",
    hmz: "Hmong Shua",
    hna: "Mina (Cameroon)",
    hnd: "Southern Hindko",
    hne: "Chhattisgarhi",
    hnh: "//Ani",
    hni: "Hani",
    hnj: "Hmong Njua",
    hnn: "Hanunoo",
    hno: "Northern Hindko",
    hns: "Caribbean Hindustani",
    hnu: "Hung",
    hoa: "Hoava",
    hob: "Mari (Madang Province)",
    hoc: "Ho",
    hod: "Holma",
    hoe: "Horom",
    hoh: "Hoby\xF3t",
    hoi: "Holikachuk",
    hoj: "Hadothi",
    hol: "Holu",
    hom: "Homa",
    hoo: "Holoholo",
    hop: "Hopi",
    hor: "Horo",
    hos: "Ho Chi Minh City Sign Language",
    hot: "Hote",
    hov: "Hovongan",
    how: "Honi",
    hoy: "Holiya",
    hoz: "Hozo",
    hpo: "Hpon",
    hps: "Hawai'i Sign Language (HSL)",
    hra: "Hrangkhol",
    hrc: "Niwer Mil",
    hre: "Hre",
    hrk: "Haruku",
    hrm: "Horned Miao",
    hro: "Haroi",
    hrp: "Nhirrpi",
    hrt: "H\xE9rtevin",
    hru: "Hruso",
    hrv: "Croatian",
    hrw: "Warwar Feni",
    hrx: "Hunsrik",
    hrz: "Harzani",
    hsb: "Upper Sorbian",
    hsh: "Hungarian Sign Language",
    hsl: "Hausa Sign Language",
    hsn: "Xiang Chinese",
    hss: "Harsusi",
    hti: "Hoti",
    hto: "Minica Huitoto",
    hts: "Hadza",
    htu: "Hitu",
    htx: "Middle Hittite",
    hub: "Huambisa",
    huc: "Err:510",
    hud: "Huaulu",
    hue: "San Francisco Del Mar Huave",
    huf: "Humene",
    hug: "Huachipaeri",
    huh: "Huilliche",
    hui: "Huli",
    huj: "Northern Guiyang Hmong",
    huk: "Hulung",
    hul: "Hula",
    hum: "Hungana",
    hun: "Hungarian",
    huo: "Hu",
    hup: "Hupa",
    huq: "Tsat",
    hur: "Halkomelem",
    hus: "Huastec",
    hut: "Humla",
    huu: "Murui Huitoto",
    huv: "San Mateo Del Mar Huave",
    huw: "Hukumina",
    hux: "N\xFCpode Huitoto",
    huy: "Hulaul\xE1",
    huz: "Hunzib",
    hvc: "Haitian Vodoun Culture Language",
    hve: "San Dionisio Del Mar Huave",
    hvk: "Haveke",
    hvn: "Sabu",
    hvv: "Santa Mar\xEDa Del Mar Huave",
    hwa: "Wan\xE9",
    hwc: "Hawai'i Creole English",
    hwo: "Hwana",
    hya: "Hya",
    hye: "Armenian",
    iai: "Iaai",
    ian: "Iatmul",
    iar: "Purari",
    iba: "Iban",
    ibb: "Ibibio",
    ibd: "Iwaidja",
    ibe: "Akpes",
    ibg: "Ibanag",
    ibh: "Bih",
    ibl: "Ibaloi",
    ibm: "Agoi",
    ibn: "Ibino",
    ibo: "Igbo",
    ibr: "Ibuoro",
    ibu: "Ibu",
    iby: "Ibani",
    ica: "Ede Ica",
    ich: "Etkywan",
    icl: "Icelandic Sign Language",
    icr: "Islander Creole English",
    ida: "Idakho-Isukha-Tiriki",
    idb: "Indo-Portuguese",
    idc: "Idon",
    idd: "Ede Idaca",
    ide: "Idere",
    idi: "Idi",
    ido: "Ido",
    idr: "Indri",
    ids: "Idesa",
    idt: "Idat\xE9",
    idu: "Idoma",
    ifa: "Amganad Ifugao",
    ifb: "Batad Ifugao",
    ife: "If\xE8",
    iff: "Ifo",
    ifk: "Tuwali Ifugao",
    ifm: "Teke-Fuumu",
    ifu: "Mayoyao Ifugao",
    ify: "Keley-I Kallahan",
    igb: "Ebira",
    ige: "Igede",
    igg: "Igana",
    igl: "Igala",
    igm: "Kanggape",
    ign: "Ignaciano",
    igo: "Isebe",
    igs: "Interglossa",
    igw: "Igwe",
    ihb: "Iha Based Pidgin",
    ihi: "Ihievbe",
    ihp: "Iha",
    ihw: "Bidhawal",
    iii: "Sichuan Yi",
    iin: "Thiin",
    ijc: "Izon",
    ije: "Biseni",
    ijj: "Ede Ije",
    ijn: "Kalabari",
    ijs: "Southeast Ijo",
    ike: "Eastern Canadian Inuktitut",
    iki: "Iko",
    ikk: "Ika",
    ikl: "Ikulu",
    iko: "Olulumo-Ikom",
    ikp: "Ikpeshi",
    ikr: "Ikaranggal",
    iks: "Inuit Sign Language",
    ikt: "Inuinnaqtun",
    iku: "Inuktitut",
    ikv: "Iku-Gora-Ankwa",
    ikw: "Ikwere",
    ikx: "Ik",
    ikz: "Ikizu",
    ila: "Ile Ape",
    ilb: "Ila",
    ile: "Interlingue",
    ilg: "Garig-Ilgar",
    ili: "Ili Turki",
    ilk: "Ilongot",
    ilm: "Iranun (Malaysia)",
    ilo: "Iloko",
    ilp: "Iranun (Philippines)",
    ils: "International Sign",
    ilu: "Ili'uun",
    ilv: "Ilue",
    ima: "Mala Malasar",
    imi: "Anamgura",
    iml: "Miluk",
    imn: "Imonda",
    imo: "Imbongu",
    imr: "Imroing",
    ims: "Marsian",
    imy: "Milyan",
    ina: "Interlingua (International Auxiliary Language Association)",
    inb: "Inga",
    ind: "Indonesian",
    ing: "Degexit'an",
    inh: "Ingush",
    inj: "Jungle Inga",
    inl: "Indonesian Sign Language",
    inm: "Minaean",
    inn: "Isinai",
    ino: "Inoke-Yate",
    inp: "I\xF1apari",
    ins: "Indian Sign Language",
    int: "Intha",
    inz: "Inese\xF1o",
    ior: "Inor",
    iou: "Tuma-Irumu",
    iow: "Iowa-Oto",
    ipi: "Ipili",
    ipk: "Inupiaq",
    ipo: "Ipiko",
    iqu: "Iquito",
    iqw: "Ikwo",
    ire: "Iresim",
    irh: "Irarutu",
    iri: "Irigwe",
    irk: "Iraqw",
    irn: "Ir\xE1ntxe",
    irr: "Ir",
    iru: "Irula",
    irx: "Kamberau",
    iry: "Iraya",
    isa: "Isabi",
    isc: "Isconahua",
    isd: "Isnag",
    ise: "Italian Sign Language",
    isg: "Irish Sign Language",
    ish: "Esan",
    isi: "Nkem-Nkum",
    isk: "Ishkashimi",
    isl: "Icelandic",
    ism: "Masimasi",
    isn: "Isanzu",
    iso: "Isoko",
    isr: "Israeli Sign Language",
    ist: "Istriot",
    isu: "Isu (Menchum Division)",
    ita: "Italian",
    itb: "Binongan Itneg",
    itd: "Southern Tidung",
    ite: "Itene",
    iti: "Inlaod Itneg",
    itk: "Judeo-Italian",
    itl: "Itelmen",
    itm: "Itu Mbon Uzo",
    ito: "Itonama",
    itr: "Iteri",
    its: "Isekiri",
    itt: "Maeng Itneg",
    itv: "Itawit",
    itw: "Ito",
    itx: "Itik",
    ity: "Moyadan Itneg",
    itz: "Itz\xE1",
    ium: "Iu Mien",
    ivb: "Ibatan",
    ivv: "Ivatan",
    iwk: "I-Wak",
    iwm: "Iwam",
    iwo: "Iwur",
    iws: "Sepik Iwam",
    ixc: "Ixcatec",
    ixl: "Ixil",
    iya: "Iyayu",
    iyo: "Mesaka",
    iyx: "Yaka (Congo)",
    izh: "Ingrian",
    izr: "Izere",
    izz: "Izii",
    jaa: "Jamamad\xED",
    jab: "Hyam",
    jac: "Popti'",
    jad: "Jahanka",
    jae: "Yabem",
    jaf: "Jara",
    jah: "Jah Hut",
    jaj: "Zazao",
    jak: "Jakun",
    jal: "Yalahatan",
    jam: "Jamaican Creole English",
    jan: "Jandai",
    jao: "Yanyuwa",
    jaq: "Yaqay",
    jas: "New Caledonian Javanese",
    jat: "Jakati",
    jau: "Yaur",
    jav: "Javanese",
    jax: "Jambi Malay",
    jay: "Yan-nhangu",
    jaz: "Jawe",
    jbe: "Judeo-Berber",
    jbi: "Badjiri",
    jbj: "Arandai",
    jbk: "Barikewa",
    jbn: "Nafusi",
    jbo: "Lojban",
    jbr: "Jofotek-Bromnya",
    jbt: "Jabut\xED",
    jbu: "Jukun Takum",
    jbw: "Yawijibaya",
    jcs: "Jamaican Country Sign Language",
    jct: "Krymchak",
    jda: "Jad",
    jdg: "Jadgali",
    jdt: "Judeo-Tat",
    jeb: "Jebero",
    jee: "Jerung",
    jeh: "Jeh",
    jei: "Yei",
    jek: "Jeri Kuo",
    jel: "Yelmek",
    jen: "Dza",
    jer: "Jere",
    jet: "Manem",
    jeu: "Jonkor Bourmataguil",
    jgb: "Ngbee",
    jge: "Judeo-Georgian",
    jgk: "Gwak",
    jgo: "Ngomba",
    jhi: "Jehai",
    jhs: "Jhankot Sign Language",
    jia: "Jina",
    jib: "Jibu",
    jic: "Tol",
    jid: "Bu",
    jie: "Jilbe",
    jig: "Djingili",
    jih: "sTodsde",
    jii: "Jiiddu",
    jil: "Jilim",
    jim: "Jimi (Cameroon)",
    jio: "Jiamao",
    jiq: "Guanyinqiao",
    jit: "Jita",
    jiu: "Youle Jinuo",
    jiv: "Shuar",
    jiy: "Buyuan Jinuo",
    jje: "Jejueo",
    jjr: "Bankal",
    jka: "Kaera",
    jkm: "Mobwa Karen",
    jko: "Kubo",
    jkp: "Paku Karen",
    jkr: "Koro (India)",
    jku: "Labir",
    jle: "Ngile",
    jls: "Jamaican Sign Language",
    jma: "Dima",
    jmb: "Zumbun",
    jmc: "Machame",
    jmd: "Yamdena",
    jmi: "Jimi (Nigeria)",
    jml: "Jumli",
    jmn: "Makuri Naga",
    jmr: "Kamara",
    jms: "Mashi (Nigeria)",
    jmw: "Mouwase",
    jmx: "Western Juxtlahuaca Mixtec",
    jna: "Jangshung",
    jnd: "Jandavra",
    jng: "Yangman",
    jni: "Janji",
    jnj: "Yemsa",
    jnl: "Rawat",
    jns: "Jaunsari",
    job: "Joba",
    jod: "Wojenaka",
    jog: "Jogi",
    jor: "Jor\xE1",
    jos: "Jordanian Sign Language",
    jow: "Jowulu",
    jpa: "Jewish Palestinian Aramaic",
    jpn: "Japanese",
    jpr: "Judeo-Persian",
    jqr: "Jaqaru",
    jra: "Jarai",
    jrb: "Judeo-Arabic",
    jrr: "Jiru",
    jrt: "Jorto",
    jru: "Japrer\xEDa",
    jsl: "Japanese Sign Language",
    jua: "J\xFAma",
    jub: "Wannu",
    juc: "Jurchen",
    jud: "Worodougou",
    juh: "H\xF5ne",
    jui: "Ngadjuri",
    juk: "Wapan",
    jul: "Jirel",
    jum: "Jumjum",
    jun: "Juang",
    juo: "Jiba",
    jup: "Hupd\xEB",
    jur: "Jur\xFAna",
    jus: "Jumla Sign Language",
    jut: "Jutish",
    juu: "Ju",
    juw: "W\xE3pha",
    juy: "Juray",
    jvd: "Javindo",
    jvn: "Caribbean Javanese",
    jwi: "Jwira-Pepesa",
    jya: "Jiarong",
    jye: "Judeo-Yemeni Arabic",
    jyy: "Jaya",
    kaa: "Kara-Kalpak",
    kab: "Kabyle",
    kac: "Kachin",
    kad: "Adara",
    kae: "Ketangalan",
    kaf: "Katso",
    kag: "Kajaman",
    kah: "Kara (Central African Republic)",
    kai: "Karekare",
    kaj: "Jju",
    kak: "Kalanguya",
    kal: "Kalaallisut",
    kam: "Kamba (Kenya)",
    kan: "Kannada",
    kao: "Xaasongaxango",
    kap: "Bezhta",
    kaq: "Capanahua",
    kas: "Kashmiri",
    kat: "Georgian",
    kau: "Kanuri",
    kav: "Katuk\xEDna",
    kaw: "Kawi",
    kax: "Kao",
    kay: "Kamayur\xE1",
    kaz: "Kazakh",
    kba: "Kalarko",
    kbb: "Kaxui\xE2na",
    kbc: "Kadiw\xE9u",
    kbd: "Kabardian",
    kbe: "Kanju",
    kbg: "Khamba",
    kbh: "Cams\xE1",
    kbi: "Kaptiau",
    kbj: "Kari",
    kbk: "Grass Koiari",
    kbl: "Kanembu",
    kbm: "Iwal",
    kbn: "Kare (Central African Republic)",
    kbo: "Keliko",
    kbp: "Kabiy\xE8",
    kbq: "Kamano",
    kbr: "Kafa",
    kbs: "Kande",
    kbt: "Abadi",
    kbu: "Kabutra",
    kbv: "Dera (Indonesia)",
    kbw: "Kaiep",
    kbx: "Ap Ma",
    kby: "Manga Kanuri",
    kbz: "Duhwa",
    kca: "Khanty",
    kcb: "Kawacha",
    kcc: "Lubila",
    kcd: "Ngk\xE2lmpw Kanum",
    kce: "Kaivi",
    kcf: "Ukaan",
    kcg: "Tyap",
    kch: "Vono",
    kci: "Kamantan",
    kcj: "Kobiana",
    kck: "Kalanga",
    kcl: "Kela (Papua New Guinea)",
    kcm: "Gula (Central African Republic)",
    kcn: "Nubi",
    kco: "Kinalakna",
    kcp: "Kanga",
    kcq: "Kamo",
    kcr: "Katla",
    kcs: "Koenoem",
    kct: "Kaian",
    kcu: "Kami (Tanzania)",
    kcv: "Kete",
    kcw: "Kabwari",
    kcx: "Kachama-Ganjule",
    kcy: "Korandje",
    kcz: "Konongo",
    kda: "Worimi",
    kdc: "Kutu",
    kdd: "Yankunytjatjara",
    kde: "Makonde",
    kdf: "Mamusi",
    kdg: "Seba",
    kdh: "Tem",
    kdi: "Kumam",
    kdj: "Karamojong",
    kdk: "Num\xE8\xE8",
    kdl: "Tsikimba",
    kdm: "Kagoma",
    kdn: "Kunda",
    kdp: "Kaningdon-Nindem",
    kdq: "Koch",
    kdr: "Karaim",
    kdt: "Kuy",
    kdu: "Kadaru",
    kdw: "Koneraw",
    kdx: "Kam",
    kdy: "Keder",
    kdz: "Kwaja",
    kea: "Kabuverdianu",
    keb: "K\xE9l\xE9",
    kec: "Keiga",
    ked: "Kerewe",
    kee: "Eastern Keres",
    kef: "Kpessi",
    keg: "Tese",
    keh: "Keak",
    kei: "Kei",
    kej: "Kadar",
    kek: "Kekch\xED",
    kel: "Kela (Democratic Republic of Congo)",
    kem: "Kemak",
    ken: "Kenyang",
    keo: "Kakwa",
    kep: "Kaikadi",
    keq: "Kamar",
    ker: "Kera",
    kes: "Kugbo",
    ket: "Ket",
    keu: "Akebu",
    kev: "Kanikkaran",
    kew: "West Kewa",
    kex: "Kukna",
    key: "Kupia",
    kez: "Kukele",
    kfa: "Kodava",
    kfb: "Northwestern Kolami",
    kfc: "Konda-Dora",
    kfd: "Korra Koraga",
    kfe: "Kota (India)",
    kff: "Koya",
    kfg: "Kudiya",
    kfh: "Kurichiya",
    kfi: "Kannada Kurumba",
    kfj: "Kemiehua",
    kfk: "Kinnauri",
    kfl: "Kung",
    kfm: "Khunsari",
    kfn: "Kuk",
    kfo: "Koro (C\xF4te d'Ivoire)",
    kfp: "Korwa",
    kfq: "Korku",
    kfr: "Kachhi",
    kfs: "Bilaspuri",
    kft: "Kanjari",
    kfu: "Katkari",
    kfv: "Kurmukar",
    kfw: "Kharam Naga",
    kfx: "Kullu Pahari",
    kfy: "Kumaoni",
    kfz: "Koromf\xE9",
    kga: "Koyaga",
    kgb: "Kawe",
    kge: "Komering",
    kgf: "Kube",
    kgg: "Kusunda",
    kgi: "Selangor Sign Language",
    kgj: "Gamale Kham",
    kgk: "Kaiw\xE1",
    kgl: "Kunggari",
    kgm: "Karip\xFAna",
    kgn: "Karingani",
    kgo: "Krongo",
    kgp: "Kaingang",
    kgq: "Kamoro",
    kgr: "Abun",
    kgs: "Kumbainggar",
    kgt: "Somyev",
    kgu: "Kobol",
    kgv: "Karas",
    kgw: "Karon Dori",
    kgx: "Kamaru",
    kgy: "Kyerung",
    kha: "Khasi",
    khb: "L\xFC",
    khc: "Tukang Besi North",
    khd: "B\xE4di Kanum",
    khe: "Korowai",
    khf: "Khuen",
    khg: "Khams Tibetan",
    khh: "Kehu",
    khj: "Kuturmi",
    khk: "Halh Mongolian",
    khl: "Lusi",
    khm: "Central Khmer",
    khn: "Khandesi",
    kho: "Khotanese",
    khp: "Kapori",
    khq: "Koyra Chiini Songhay",
    khr: "Kharia",
    khs: "Kasua",
    kht: "Khamti",
    khu: "Nkhumbi",
    khv: "Khvarshi",
    khw: "Khowar",
    khx: "Kanu",
    khy: "Kele (Democratic Republic of Congo)",
    khz: "Keapara",
    kia: "Kim",
    kib: "Koalib",
    kic: "Kickapoo",
    kid: "Koshin",
    kie: "Kibet",
    kif: "Eastern Parbate Kham",
    kig: "Kimaama",
    kih: "Kilmeri",
    kii: "Kitsai",
    kij: "Kilivila",
    kik: "Kikuyu",
    kil: "Kariya",
    kim: "Karagas",
    kin: "Kinyarwanda",
    kio: "Kiowa",
    kip: "Sheshi Kham",
    kiq: "Kosadle",
    kir: "Kirghiz",
    kis: "Kis",
    kit: "Agob",
    kiu: "Kirmanjki (individual language)",
    kiv: "Kimbu",
    kiw: "Northeast Kiwai",
    kix: "Khiamniungan Naga",
    kiy: "Kirikiri",
    kiz: "Kisi",
    kja: "Mlap",
    kjb: "Q'anjob'al",
    kjc: "Coastal Konjo",
    kjd: "Southern Kiwai",
    kje: "Kisar",
    kjf: "Khalaj",
    kjg: "Khmu",
    kjh: "Khakas",
    kji: "Zabana",
    kjj: "Khinalugh",
    kjk: "Highland Konjo",
    kjl: "Western Parbate Kham",
    kjm: "Kh\xE1ng",
    kjn: "Kunjen",
    kjo: "Harijan Kinnauri",
    kjp: "Pwo Eastern Karen",
    kjq: "Western Keres",
    kjr: "Kurudu",
    kjs: "East Kewa",
    kjt: "Phrae Pwo Karen",
    kju: "Kashaya",
    kjv: "Kaikavian Literary Language",
    kjx: "Ramopa",
    kjy: "Erave",
    kjz: "Bumthangkha",
    kka: "Kakanda",
    kkb: "Kwerisa",
    kkc: "Odoodee",
    kkd: "Kinuku",
    kke: "Kakabe",
    kkf: "Kalaktang Monpa",
    kkg: "Mabaka Valley Kalinga",
    kkh: "Kh\xFCn",
    kki: "Kagulu",
    kkj: "Kako",
    kkk: "Kokota",
    kkl: "Kosarek Yale",
    kkm: "Kiong",
    kkn: "Kon Keu",
    kko: "Karko",
    kkp: "Gugubera",
    kkq: "Kaiku",
    kkr: "Kir-Balar",
    kks: "Giiwo",
    kkt: "Koi",
    kku: "Tumi",
    kkv: "Kangean",
    kkw: "Teke-Kukuya",
    kkx: "Kohin",
    kky: "Guguyimidjir",
    kkz: "Kaska",
    kla: "Klamath-Modoc",
    klb: "Kiliwa",
    klc: "Kolbila",
    kld: "Gamilaraay",
    kle: "Kulung (Nepal)",
    klf: "Kendeje",
    klg: "Tagakaulo",
    klh: "Weliki",
    kli: "Kalumpang",
    klj: "Turkic Khalaj",
    klk: "Kono (Nigeria)",
    kll: "Kagan Kalagan",
    klm: "Migum",
    kln: "Kalenjin",
    klo: "Kapya",
    klp: "Kamasa",
    klq: "Rumu",
    klr: "Khaling",
    kls: "Kalasha",
    klt: "Nukna",
    klu: "Klao",
    klv: "Maskelynes",
    klw: "Tado",
    klx: "Koluwawa",
    kly: "Kalao",
    klz: "Kabola",
    kma: "Konni",
    kmb: "Kimbundu",
    kmc: "Southern Dong",
    kmd: "Majukayang Kalinga",
    kme: "Bakole",
    kmf: "Kare (Papua New Guinea)",
    kmg: "K\xE2te",
    kmh: "Kalam",
    kmi: "Kami (Nigeria)",
    kmj: "Kumarbhag Paharia",
    kmk: "Limos Kalinga",
    kml: "Tanudan Kalinga",
    kmm: "Kom (India)",
    kmn: "Awtuw",
    kmo: "Kwoma",
    kmp: "Gimme",
    kmq: "Kwama",
    kmr: "Northern Kurdish",
    kms: "Kamasau",
    kmt: "Kemtuik",
    kmu: "Kanite",
    kmv: "Karip\xFAna Creole French",
    kmw: "Komo (Democratic Republic of Congo)",
    kmx: "Waboda",
    kmy: "Koma",
    kmz: "Khorasani Turkish",
    kna: "Dera (Nigeria)",
    knb: "Lubuagan Kalinga",
    knc: "Central Kanuri",
    knd: "Konda",
    kne: "Kankanaey",
    knf: "Mankanya",
    kng: "Koongo",
    kni: "Kanufi",
    knj: "Western Kanjobal",
    knk: "Kuranko",
    knl: "Keninjal",
    knm: "Kanamar\xED",
    knn: "Konkani (individual language)",
    kno: "Kono (Sierra Leone)",
    knp: "Kwanja",
    knq: "Kintaq",
    knr: "Kaningra",
    kns: "Kensiu",
    knt: "Panoan Katuk\xEDna",
    knu: "Kono (Guinea)",
    knv: "Tabo",
    knw: "Kung-Ekoka",
    knx: "Kendayan",
    kny: "Kanyok",
    knz: "Kalams\xE9",
    koa: "Konomala",
    koc: "Kpati",
    kod: "Kodi",
    koe: "Kacipo-Balesi",
    kof: "Kubi",
    kog: "Cogui",
    koh: "Koyo",
    koi: "Komi-Permyak",
    kok: "Konkani (macrolanguage)",
    kol: "Kol (Papua New Guinea)",
    kom: "Komi",
    kon: "Kongo",
    koo: "Konzo",
    kop: "Waube",
    koq: "Kota (Gabon)",
    kor: "Korean",
    kos: "Kosraean",
    kot: "Lagwan",
    kou: "Koke",
    kov: "Kudu-Camo",
    kow: "Kugama",
    koy: "Koyukon",
    koz: "Korak",
    kpa: "Kutto",
    kpb: "Mullu Kurumba",
    kpc: "Curripaco",
    kpd: "Koba",
    kpe: "Kpelle",
    kpf: "Komba",
    kpg: "Kapingamarangi",
    kph: "Kplang",
    kpi: "Kofei",
    kpj: "Karaj\xE1",
    kpk: "Kpan",
    kpl: "Kpala",
    kpm: "Koho",
    kpn: "Kepkiriw\xE1t",
    kpo: "Ikposo",
    kpq: "Korupun-Sela",
    kpr: "Korafe-Yegha",
    kps: "Tehit",
    kpt: "Karata",
    kpu: "Kafoa",
    kpv: "Komi-Zyrian",
    kpw: "Kobon",
    kpx: "Mountain Koiali",
    kpy: "Koryak",
    kpz: "Kupsabiny",
    kqa: "Mum",
    kqb: "Kovai",
    kqc: "Doromu-Koki",
    kqd: "Koy Sanjaq Surat",
    kqe: "Kalagan",
    kqf: "Kakabai",
    kqg: "Khe",
    kqh: "Kisankasa",
    kqi: "Koitabu",
    kqj: "Koromira",
    kqk: "Kotafon Gbe",
    kql: "Kyenele",
    kqm: "Khisa",
    kqn: "Kaonde",
    kqo: "Eastern Krahn",
    kqp: "Kimr\xE9",
    kqq: "Krenak",
    kqr: "Kimaragang",
    kqs: "Northern Kissi",
    kqt: "Klias River Kadazan",
    kqu: "Seroa",
    kqv: "Okolod",
    kqw: "Kandas",
    kqx: "Mser",
    kqy: "Koorete",
    kqz: "Korana",
    kra: "Kumhali",
    krb: "Karkin",
    krc: "Karachay-Balkar",
    krd: "Kairui-Midiki",
    kre: "Panar\xE1",
    krf: "Koro (Vanuatu)",
    krh: "Kurama",
    kri: "Krio",
    krj: "Kinaray-A",
    krk: "Kerek",
    krl: "Karelian",
    krn: "Sapo",
    krp: "Korop",
    krr: "Krung",
    krs: "Gbaya (Sudan)",
    krt: "Tumari Kanuri",
    kru: "Kurukh",
    krv: "Kavet",
    krw: "Western Krahn",
    krx: "Karon",
    kry: "Kryts",
    krz: "Sota Kanum",
    ksa: "Shuwa-Zamani",
    ksb: "Shambala",
    ksc: "Southern Kalinga",
    ksd: "Kuanua",
    kse: "Kuni",
    ksf: "Bafia",
    ksg: "Kusaghe",
    ksh: "K\xF6lsch",
    ksi: "Krisa",
    ksj: "Uare",
    ksk: "Kansa",
    ksl: "Kumalu",
    ksm: "Kumba",
    ksn: "Kasiguranin",
    kso: "Kofa",
    ksp: "Kaba",
    ksq: "Kwaami",
    ksr: "Borong",
    kss: "Southern Kisi",
    kst: "Winy\xE9",
    ksu: "Khamyang",
    ksv: "Kusu",
    ksw: "S'gaw Karen",
    ksx: "Kedang",
    ksy: "Kharia Thar",
    ksz: "Kodaku",
    kta: "Katua",
    ktb: "Kambaata",
    ktc: "Kholok",
    ktd: "Kokata",
    kte: "Nubri",
    ktf: "Kwami",
    ktg: "Kalkutung",
    kth: "Karanga",
    kti: "North Muyu",
    ktj: "Plapo Krumen",
    ktk: "Kaniet",
    ktl: "Koroshi",
    ktm: "Kurti",
    ktn: "Kariti\xE2na",
    kto: "Kuot",
    ktp: "Kaduo",
    ktq: "Katabaga",
    kts: "South Muyu",
    ktt: "Ketum",
    ktu: "Kituba (Democratic Republic of Congo)",
    ktv: "Eastern Katu",
    ktw: "Kato",
    ktx: "Kaxarar\xED",
    kty: "Kango (Bas-U\xE9l\xE9 District)",
    ktz: "Ju/'hoan",
    kua: "Kuanyama",
    kub: "Kutep",
    kuc: "Kwinsu",
    kud: "'Auhelawa",
    kue: "Kuman (Papua New Guinea)",
    kuf: "Western Katu",
    kug: "Kupa",
    kuh: "Kushi",
    kui: "Kuik\xFAro-Kalap\xE1lo",
    kuj: "Kuria",
    kuk: "Kepo'",
    kul: "Kulere",
    kum: "Kumyk",
    kun: "Kunama",
    kuo: "Kumukio",
    kup: "Kunimaipa",
    kuq: "Karipuna",
    kur: "Kurdish",
    kus: "Kusaal",
    kut: "Kutenai",
    kuu: "Upper Kuskokwim",
    kuv: "Kur",
    kuw: "Kpagua",
    kux: "Kukatja",
    kuy: "Kuuku-Ya'u",
    kuz: "Kunza",
    kva: "Bagvalal",
    kvb: "Kubu",
    kvc: "Kove",
    kvd: "Kui (Indonesia)",
    kve: "Kalabakan",
    kvf: "Kabalai",
    kvg: "Kuni-Boazi",
    kvh: "Komodo",
    kvi: "Kwang",
    kvj: "Psikye",
    kvk: "Korean Sign Language",
    kvl: "Kayaw",
    kvm: "Kendem",
    kvn: "Border Kuna",
    kvo: "Dobel",
    kvp: "Kompane",
    kvq: "Geba Karen",
    kvr: "Kerinci",
    kvt: "Lahta Karen",
    kvu: "Yinbaw Karen",
    kvv: "Kola",
    kvw: "Wersing",
    kvx: "Parkari Koli",
    kvy: "Yintale Karen",
    kvz: "Tsakwambo",
    kwa: "D\xE2w",
    kwb: "Kwa",
    kwc: "Likwala",
    kwd: "Kwaio",
    kwe: "Kwerba",
    kwf: "Kwara'ae",
    kwg: "Sara Kaba Deme",
    kwh: "Kowiai",
    kwi: "Awa-Cuaiquer",
    kwj: "Kwanga",
    kwk: "Kwakiutl",
    kwl: "Kofyar",
    kwm: "Kwambi",
    kwn: "Kwangali",
    kwo: "Kwomtari",
    kwp: "Kodia",
    kwr: "Kwer",
    kws: "Kwese",
    kwt: "Kwesten",
    kwu: "Kwakum",
    kwv: "Sara Kaba N\xE1\xE0",
    kww: "Kwinti",
    kwx: "Khirwar",
    kwy: "San Salvador Kongo",
    kwz: "Kwadi",
    kxa: "Kairiru",
    kxb: "Krobu",
    kxc: "Konso",
    kxd: "Brunei",
    kxf: "Manumanaw Karen",
    kxh: "Karo (Ethiopia)",
    kxi: "Keningau Murut",
    kxj: "Kulfa",
    kxk: "Zayein Karen",
    kxl: "Nepali Kurux",
    kxm: "Northern Khmer",
    kxn: "Kanowit-Tanjong Melanau",
    kxo: "Kano\xE9",
    kxp: "Wadiyara Koli",
    kxq: "Sm\xE4rky Kanum",
    kxr: "Koro (Papua New Guinea)",
    kxs: "Kangjia",
    kxt: "Koiwat",
    kxu: "Kui (India)",
    kxv: "Kuvi",
    kxw: "Konai",
    kxx: "Likuba",
    kxy: "Kayong",
    kxz: "Kerewo",
    kya: "Kwaya",
    kyb: "Butbut Kalinga",
    kyc: "Kyaka",
    kyd: "Karey",
    kye: "Krache",
    kyf: "Kouya",
    kyg: "Keyagana",
    kyh: "Karok",
    kyi: "Kiput",
    kyj: "Karao",
    kyk: "Kamayo",
    kyl: "Kalapuya",
    kym: "Kpatili",
    kyn: "Northern Binukidnon",
    kyo: "Kelon",
    kyp: "Kang",
    kyq: "Kenga",
    kyr: "Kuru\xE1ya",
    kys: "Baram Kayan",
    kyt: "Kayagar",
    kyu: "Western Kayah",
    kyv: "Kayort",
    kyw: "Kudmali",
    kyx: "Rapoisi",
    kyy: "Kambaira",
    kyz: "Kayab\xED",
    kza: "Western Karaboro",
    kzb: "Kaibobo",
    kzc: "Bondoukou Kulango",
    kzd: "Kadai",
    kze: "Kosena",
    kzf: "Da'a Kaili",
    kzg: "Kikai",
    kzi: "Kelabit",
    kzk: "Kazukuru",
    kzl: "Kayeli",
    kzm: "Kais",
    kzn: "Kokola",
    kzo: "Kaningi",
    kzp: "Kaidipang",
    kzq: "Kaike",
    kzr: "Karang",
    kzs: "Sugut Dusun",
    kzu: "Kayupulau",
    kzv: "Komyandaret",
    kzw: "Karir\xED-Xoc\xF3",
    kzx: "Kamarian",
    kzy: "Kango (Tshopo District)",
    kzz: "Kalabra",
    laa: "Southern Subanen",
    lab: "Linear A",
    lac: "Lacandon",
    lad: "Ladino",
    lae: "Pattani",
    laf: "Lafofa",
    lag: "Langi",
    lah: "Lahnda",
    lai: "Lambya",
    laj: "Lango (Uganda)",
    lak: "Laka (Nigeria)",
    lal: "Lalia",
    lam: "Lamba",
    lan: "Laru",
    lao: "Lao",
    lap: "Laka (Chad)",
    laq: "Qabiao",
    lar: "Larteh",
    las: "Lama (Togo)",
    lat: "Latin",
    lau: "Laba",
    lav: "Latvian",
    law: "Lauje",
    lax: "Tiwa",
    lay: "Lama Bai",
    laz: "Aribwatsa",
    lba: "Lui",
    lbb: "Label",
    lbc: "Lakkia",
    lbe: "Lak",
    lbf: "Tinani",
    lbg: "Laopang",
    lbi: "La'bi",
    lbj: "Ladakhi",
    lbk: "Central Bontok",
    lbl: "Libon Bikol",
    lbm: "Lodhi",
    lbn: "Lamet",
    lbo: "Laven",
    lbq: "Wampar",
    lbr: "Lohorung",
    lbs: "Libyan Sign Language",
    lbt: "Lachi",
    lbu: "Labu",
    lbv: "Lavatbura-Lamusong",
    lbw: "Tolaki",
    lbx: "Lawangan",
    lby: "Lamu-Lamu",
    lbz: "Lardil",
    lcc: "Legenyem",
    lcd: "Lola",
    lce: "Loncong",
    lcf: "Lubu",
    lch: "Luchazi",
    lcl: "Lisela",
    lcm: "Tungag",
    lcp: "Western Lawa",
    lcq: "Luhu",
    lcs: "Lisabata-Nuniali",
    lda: "Kla-Dan",
    ldb: "Du\u0303ya",
    ldd: "Luri",
    ldg: "Lenyima",
    ldh: "Lamja-Dengsa-Tola",
    ldi: "Laari",
    ldj: "Lemoro",
    ldk: "Leelau",
    ldl: "Kaan",
    ldm: "Landoma",
    ldn: "L\xE1adan",
    ldo: "Loo",
    ldp: "Tso",
    ldq: "Lufu",
    lea: "Lega-Shabunda",
    leb: "Lala-Bisa",
    lec: "Leco",
    led: "Lendu",
    lee: "Ly\xE9l\xE9",
    lef: "Lelemi",
    leh: "Lenje",
    lei: "Lemio",
    lej: "Lengola",
    lek: "Leipon",
    lel: "Lele (Democratic Republic of Congo)",
    lem: "Nomaande",
    len: "Lenca",
    leo: "Leti (Cameroon)",
    lep: "Lepcha",
    leq: "Lembena",
    ler: "Lenkau",
    les: "Lese",
    let: "Lesing-Gelimi",
    leu: "Kara (Papua New Guinea)",
    lev: "Lamma",
    lew: "Ledo Kaili",
    lex: "Luang",
    ley: "Lemolang",
    lez: "Lezghian",
    lfa: "Lefa",
    lfn: "Lingua Franca Nova",
    lga: "Lungga",
    lgb: "Laghu",
    lgg: "Lugbara",
    lgh: "Laghuu",
    lgi: "Lengilu",
    lgk: "Lingarak",
    lgl: "Wala",
    lgm: "Lega-Mwenga",
    lgn: "T'apo",
    lgq: "Logba",
    lgr: "Lengo",
    lgt: "Pahi",
    lgu: "Longgu",
    lgz: "Ligenza",
    lha: "Laha (Viet Nam)",
    lhh: "Laha (Indonesia)",
    lhi: "Lahu Shi",
    lhl: "Lahul Lohar",
    lhm: "Lhomi",
    lhn: "Lahanan",
    lhp: "Lhokpu",
    lhs: "Mlahs\xF6",
    lht: "Lo-Toga",
    lhu: "Lahu",
    lia: "West-Central Limba",
    lib: "Likum",
    lic: "Hlai",
    lid: "Nyindrou",
    lie: "Likila",
    lif: "Limbu",
    lig: "Ligbi",
    lih: "Lihir",
    lij: "Ligurian",
    lik: "Lika",
    lil: "Lillooet",
    lim: "Limburgan",
    lin: "Lingala",
    lio: "Liki",
    lip: "Sekpele",
    liq: "Libido",
    lir: "Liberian English",
    lis: "Lisu",
    lit: "Lithuanian",
    liu: "Logorik",
    liv: "Liv",
    liw: "Col",
    lix: "Liabuku",
    liy: "Banda-Bambari",
    liz: "Libinza",
    lja: "Golpa",
    lje: "Rampi",
    lji: "Laiyolo",
    ljl: "Li'o",
    ljp: "Lampung Api",
    ljw: "Yirandali",
    ljx: "Yuru",
    lka: "Lakalei",
    lkb: "Kabras",
    lkc: "Kucong",
    lkd: "Lakond\xEA",
    lke: "Kenyi",
    lkh: "Lakha",
    lki: "Laki",
    lkj: "Remun",
    lkl: "Laeko-Libuat",
    lkm: "Kalaamaya",
    lkn: "Lakon",
    lko: "Khayo",
    lkr: "P\xE4ri",
    lks: "Kisa",
    lkt: "Lakota",
    lku: "Kungkari",
    lky: "Lokoya",
    lla: "Lala-Roba",
    llb: "Lolo",
    llc: "Lele (Guinea)",
    lld: "Ladin",
    lle: "Lele (Papua New Guinea)",
    llf: "Hermit",
    llg: "Lole",
    llh: "Lamu",
    lli: "Teke-Laali",
    llj: "Ladji Ladji",
    llk: "Lelak",
    lll: "Lilau",
    llm: "Lasalimu",
    lln: "Lele (Chad)",
    llo: "Khlor",
    llp: "North Efate",
    llq: "Lolak",
    lls: "Lithuanian Sign Language",
    llu: "Lau",
    llx: "Lauan",
    lma: "East Limba",
    lmb: "Merei",
    lmc: "Limilngan",
    lmd: "Lumun",
    lme: "P\xE9v\xE9",
    lmf: "South Lembata",
    lmg: "Lamogai",
    lmh: "Lambichhong",
    lmi: "Lombi",
    lmj: "West Lembata",
    lmk: "Lamkang",
    lml: "Hano",
    lmn: "Lambadi",
    lmo: "Lombard",
    lmp: "Limbum",
    lmq: "Lamatuka",
    lmr: "Lamalera",
    lmu: "Lamenu",
    lmv: "Lomaiviti",
    lmw: "Lake Miwok",
    lmx: "Laimbue",
    lmy: "Lamboya",
    lmz: "Lumbee",
    lna: "Langbashe",
    lnb: "Mbalanhu",
    lnd: "Lundayeh",
    lng: "Langobardic",
    lnh: "Lanoh",
    lni: "Daantanai'",
    lnj: "Leningitij",
    lnl: "South Central Banda",
    lnm: "Langam",
    lnn: "Lorediakarkar",
    lno: "Lango (Sudan)",
    lns: "Lamnso'",
    lnu: "Longuda",
    lnw: "Lanima",
    lnz: "Lonzo",
    loa: "Loloda",
    lob: "Lobi",
    loc: "Inonhan",
    loe: "Saluan",
    lof: "Logol",
    log: "Logo",
    loh: "Narim",
    loi: "Loma (C\xF4te d'Ivoire)",
    loj: "Lou",
    lok: "Loko",
    lol: "Mongo",
    lom: "Loma (Liberia)",
    lon: "Malawi Lomwe",
    loo: "Lombo",
    lop: "Lopa",
    loq: "Lobala",
    lor: "T\xE9\xE9n",
    los: "Loniu",
    lot: "Otuho",
    lou: "Louisiana Creole",
    lov: "Lopi",
    low: "Tampias Lobu",
    lox: "Loun",
    loy: "Loke",
    loz: "Lozi",
    lpa: "Lelepa",
    lpe: "Lepki",
    lpn: "Long Phuri Naga",
    lpo: "Lipo",
    lpx: "Lopit",
    lra: "Rara Bakati'",
    lrc: "Northern Luri",
    lre: "Laurentian",
    lrg: "Laragia",
    lri: "Marachi",
    lrk: "Loarki",
    lrl: "Lari",
    lrm: "Marama",
    lrn: "Lorang",
    lro: "Laro",
    lrr: "Southern Yamphu",
    lrt: "Larantuka Malay",
    lrv: "Larevat",
    lrz: "Lemerig",
    lsa: "Lasgerdi",
    lsd: "Lishana Deni",
    lse: "Lusengo",
    lsg: "Lyons Sign Language",
    lsh: "Lish",
    lsi: "Lashi",
    lsl: "Latvian Sign Language",
    lsm: "Saamia",
    lso: "Laos Sign Language",
    lsp: "Panamanian Sign Language",
    lsr: "Aruop",
    lss: "Lasi",
    lst: "Trinidad and Tobago Sign Language",
    lsy: "Mauritian Sign Language",
    ltc: "Late Middle Chinese",
    ltg: "Latgalian",
    lth: "Thur",
    lti: "Leti (Indonesia)",
    ltn: "Latund\xEA",
    lto: "Tsotso",
    lts: "Tachoni",
    ltu: "Latu",
    ltz: "Luxembourgish",
    lua: "Luba-Lulua",
    lub: "Luba-Katanga",
    luc: "Aringa",
    lud: "Ludian",
    lue: "Luvale",
    luf: "Laua",
    lug: "Ganda",
    lui: "Luiseno",
    luj: "Luna",
    luk: "Lunanakha",
    lul: "Olu'bo",
    lum: "Luimbi",
    lun: "Lunda",
    luo: "Luo (Kenya and Tanzania)",
    lup: "Lumbu",
    luq: "Lucumi",
    lur: "Laura",
    lus: "Lushai",
    lut: "Lushootseed",
    luu: "Lumba-Yakkha",
    luv: "Luwati",
    luw: "Luo (Cameroon)",
    luy: "Luyia",
    luz: "Southern Luri",
    lva: "Maku'a",
    lvk: "Lavukaleve",
    lvs: "Standard Latvian",
    lvu: "Levuka",
    lwa: "Lwalu",
    lwe: "Lewo Eleng",
    lwg: "Wanga",
    lwh: "White Lachi",
    lwl: "Eastern Lawa",
    lwm: "Laomian",
    lwo: "Luwo",
    lwt: "Lewotobi",
    lwu: "Lawu",
    lww: "Lewo",
    lya: "Layakha",
    lyg: "Lyngngam",
    lyn: "Luyana",
    lzh: "Literary Chinese",
    lzl: "Litzlitz",
    lzn: "Leinong Naga",
    lzz: "Laz",
    maa: "San Jer\xF3nimo Tec\xF3atl Mazatec",
    mab: "Yutanduchi Mixtec",
    mad: "Madurese",
    mae: "Bo-Rukul",
    maf: "Mafa",
    mag: "Magahi",
    mah: "Marshallese",
    mai: "Maithili",
    maj: "Jalapa De D\xEDaz Mazatec",
    mak: "Makasar",
    mal: "Malayalam",
    mam: "Mam",
    man: "Mandingo",
    maq: "Chiquihuitl\xE1n Mazatec",
    mar: "Marathi",
    mas: "Masai",
    mat: "San Francisco Matlatzinca",
    mau: "Huautla Mazatec",
    mav: "Sater\xE9-Maw\xE9",
    maw: "Mampruli",
    max: "North Moluccan Malay",
    maz: "Central Mazahua",
    mba: "Higaonon",
    mbb: "Western Bukidnon Manobo",
    mbc: "Macushi",
    mbd: "Dibabawon Manobo",
    mbe: "Molale",
    mbf: "Baba Malay",
    mbh: "Mangseng",
    mbi: "Ilianen Manobo",
    mbj: "Nad\xEBb",
    mbk: "Malol",
    mbl: "Maxakal\xED",
    mbm: "Ombamba",
    mbn: "Macagu\xE1n",
    mbo: "Mbo (Cameroon)",
    mbp: "Malayo",
    mbq: "Maisin",
    mbr: "Nukak Mak\xFA",
    mbs: "Sarangani Manobo",
    mbt: "Matigsalug Manobo",
    mbu: "Mbula-Bwazza",
    mbv: "Mbulungish",
    mbw: "Maring",
    mbx: "Mari (East Sepik Province)",
    mby: "Memoni",
    mbz: "Amoltepec Mixtec",
    mca: "Maca",
    mcb: "Machiguenga",
    mcc: "Bitur",
    mcd: "Sharanahua",
    mce: "Itundujia Mixtec",
    mcf: "Mats\xE9s",
    mcg: "Mapoyo",
    mch: "Maquiritari",
    mci: "Mese",
    mcj: "Mvanip",
    mck: "Mbunda",
    mcl: "Macaguaje",
    mcm: "Malaccan Creole Portuguese",
    mcn: "Masana",
    mco: "Coatl\xE1n Mixe",
    mcp: "Makaa",
    mcq: "Ese",
    mcr: "Menya",
    mcs: "Mambai",
    mct: "Mengisa",
    mcu: "Cameroon Mambila",
    mcv: "Minanibai",
    mcw: "Mawa (Chad)",
    mcx: "Mpiemo",
    mcy: "South Watut",
    mcz: "Mawan",
    mda: "Mada (Nigeria)",
    mdb: "Morigi",
    mdc: "Male (Papua New Guinea)",
    mdd: "Mbum",
    mde: "Maba (Chad)",
    mdf: "Moksha",
    mdg: "Massalat",
    mdh: "Maguindanaon",
    mdi: "Mamvu",
    mdj: "Mangbetu",
    mdk: "Mangbutu",
    mdl: "Maltese Sign Language",
    mdm: "Mayogo",
    mdn: "Mbati",
    mdp: "Mbala",
    mdq: "Mbole",
    mdr: "Mandar",
    mds: "Maria (Papua New Guinea)",
    mdt: "Mbere",
    mdu: "Mboko",
    mdv: "Santa Luc\xEDa Monteverde Mixtec",
    mdw: "Mbosi",
    mdx: "Dizin",
    mdy: "Male (Ethiopia)",
    mdz: "Suru\xED Do Par\xE1",
    mea: "Menka",
    meb: "Ikobi",
    mec: "Mara",
    med: "Melpa",
    mee: "Mengen",
    mef: "Megam",
    meh: "Southwestern Tlaxiaco Mixtec",
    mei: "Midob",
    mej: "Meyah",
    mek: "Mekeo",
    mel: "Central Melanau",
    mem: "Mangala",
    men: "Mende (Sierra Leone)",
    meo: "Kedah Malay",
    mep: "Miriwung",
    meq: "Merey",
    mer: "Meru",
    mes: "Masmaje",
    met: "Mato",
    meu: "Motu",
    mev: "Mano",
    mew: "Maaka",
    mey: "Hassaniyya",
    mez: "Menominee",
    mfa: "Pattani Malay",
    mfb: "Bangka",
    mfc: "Mba",
    mfd: "Mendankwe-Nkwen",
    mfe: "Morisyen",
    mff: "Naki",
    mfg: "Mogofin",
    mfh: "Matal",
    mfi: "Wandala",
    mfj: "Mefele",
    mfk: "North Mofu",
    mfl: "Putai",
    mfm: "Marghi South",
    mfn: "Cross River Mbembe",
    mfo: "Mbe",
    mfp: "Makassar Malay",
    mfq: "Moba",
    mfr: "Marithiel",
    mfs: "Mexican Sign Language",
    mft: "Mokerang",
    mfu: "Mbwela",
    mfv: "Mandjak",
    mfw: "Mulaha",
    mfx: "Melo",
    mfy: "Mayo",
    mfz: "Mabaan",
    mga: "Middle Irish (900-1200)",
    mgb: "Mararit",
    mgc: "Morokodo",
    mgd: "Moru",
    mge: "Mango",
    mgf: "Maklew",
    mgg: "Mpumpong",
    mgh: "Makhuwa-Meetto",
    mgi: "Lijili",
    mgj: "Abureni",
    mgk: "Mawes",
    mgl: "Maleu-Kilenge",
    mgm: "Mambae",
    mgn: "Mbangi",
    mgo: "Meta'",
    mgp: "Eastern Magar",
    mgq: "Malila",
    mgr: "Mambwe-Lungu",
    mgs: "Manda (Tanzania)",
    mgt: "Mongol",
    mgu: "Mailu",
    mgv: "Matengo",
    mgw: "Matumbi",
    mgy: "Mbunga",
    mgz: "Mbugwe",
    mha: "Manda (India)",
    mhb: "Mahongwe",
    mhc: "Mocho",
    mhd: "Mbugu",
    mhe: "Besisi",
    mhf: "Mamaa",
    mhg: "Margu",
    mhi: "Ma'di",
    mhj: "Mogholi",
    mhk: "Mungaka",
    mhl: "Mauwake",
    mhm: "Makhuwa-Moniga",
    mhn: "M\xF3cheno",
    mho: "Mashi (Zambia)",
    mhp: "Balinese Malay",
    mhq: "Mandan",
    mhr: "Eastern Mari",
    mhs: "Buru (Indonesia)",
    mht: "Mandahuaca",
    mhu: "Digaro-Mishmi",
    mhw: "Mbukushu",
    mhx: "Maru",
    mhy: "Ma'anyan",
    mhz: "Mor (Mor Islands)",
    mia: "Miami",
    mib: "Atatl\xE1huca Mixtec",
    mic: "Mi'kmaq",
    mid: "Mandaic",
    mie: "Ocotepec Mixtec",
    mif: "Mofu-Gudur",
    mig: "San Miguel El Grande Mixtec",
    mih: "Chayuco Mixtec",
    mii: "Chigmecatitl\xE1n Mixtec",
    mij: "Abar",
    mik: "Mikasuki",
    mil: "Pe\xF1oles Mixtec",
    mim: "Alacatlatzala Mixtec",
    min: "Minangkabau",
    mio: "Pinotepa Nacional Mixtec",
    mip: "Apasco-Apoala Mixtec",
    miq: "M\xEDskito",
    mir: "Isthmus Mixe",
    mis: "Uncoded languages",
    mit: "Southern Puebla Mixtec",
    miu: "Cacaloxtepec Mixtec",
    miw: "Akoye",
    mix: "Mixtepec Mixtec",
    miy: "Ayutla Mixtec",
    miz: "Coatzospan Mixtec",
    mjb: "Makalero",
    mjc: "San Juan Colorado Mixtec",
    mjd: "Northwest Maidu",
    mje: "Muskum",
    mjg: "Tu",
    mjh: "Mwera (Nyasa)",
    mji: "Kim Mun",
    mjj: "Mawak",
    mjk: "Matukar",
    mjl: "Mandeali",
    mjm: "Medebur",
    mjn: "Ma (Papua New Guinea)",
    mjo: "Malankuravan",
    mjp: "Malapandaram",
    mjq: "Malaryan",
    mjr: "Malavedan",
    mjs: "Miship",
    mjt: "Sauria Paharia",
    mju: "Manna-Dora",
    mjv: "Mannan",
    mjw: "Karbi",
    mjx: "Mahali",
    mjy: "Mahican",
    mjz: "Majhi",
    mka: "Mbre",
    mkb: "Mal Paharia",
    mkc: "Siliput",
    mkd: "Macedonian",
    mke: "Mawchi",
    mkf: "Miya",
    mkg: "Mak (China)",
    mki: "Dhatki",
    mkj: "Mokilese",
    mkk: "Byep",
    mkl: "Mokole",
    mkm: "Moklen",
    mkn: "Kupang Malay",
    mko: "Mingang Doso",
    mkp: "Moikodi",
    mkq: "Bay Miwok",
    mkr: "Malas",
    mks: "Silacayoapan Mixtec",
    mkt: "Vamale",
    mku: "Konyanka Maninka",
    mkv: "Mafea",
    mkw: "Kituba (Congo)",
    mkx: "Kinamiging Manobo",
    mky: "East Makian",
    mkz: "Makasae",
    mla: "Malo",
    mlb: "Mbule",
    mlc: "Cao Lan",
    mle: "Manambu",
    mlf: "Mal",
    mlg: "Malagasy",
    mlh: "Mape",
    mli: "Malimpung",
    mlj: "Miltu",
    mlk: "Ilwana",
    mll: "Malua Bay",
    mlm: "Mulam",
    mln: "Malango",
    mlo: "Mlomp",
    mlp: "Bargam",
    mlq: "Western Maninkakan",
    mlr: "Vame",
    mls: "Masalit",
    mlt: "Maltese",
    mlu: "To'abaita",
    mlv: "Motlav",
    mlw: "Moloko",
    mlx: "Malfaxal",
    mlz: "Malaynon",
    mma: "Mama",
    mmb: "Momina",
    mmc: "Michoac\xE1n Mazahua",
    mmd: "Maonan",
    mme: "Mae",
    mmf: "Mundat",
    mmg: "North Ambrym",
    mmh: "Mehin\xE1ku",
    mmi: "Musar",
    mmj: "Majhwar",
    mmk: "Mukha-Dora",
    mml: "Man Met",
    mmm: "Maii",
    mmn: "Mamanwa",
    mmo: "Mangga Buang",
    mmp: "Siawi",
    mmq: "Musak",
    mmr: "Western Xiangxi Miao",
    mmt: "Malalamai",
    mmu: "Mmaala",
    mmv: "Miriti",
    mmw: "Emae",
    mmx: "Madak",
    mmy: "Migaama",
    mmz: "Mabaale",
    mna: "Mbula",
    mnb: "Muna",
    mnc: "Manchu",
    mnd: "Mond\xE9",
    mne: "Naba",
    mnf: "Mundani",
    mng: "Eastern Mnong",
    mnh: "Mono (Democratic Republic of Congo)",
    mni: "Manipuri",
    mnj: "Munji",
    mnk: "Mandinka",
    mnl: "Tiale",
    mnm: "Mapena",
    mnn: "Southern Mnong",
    mnp: "Min Bei Chinese",
    mnq: "Minriq",
    mnr: "Mono (USA)",
    mns: "Mansi",
    mnu: "Mer",
    mnv: "Rennell-Bellona",
    mnw: "Mon",
    mnx: "Manikion",
    mny: "Manyawa",
    mnz: "Moni",
    moa: "Mwan",
    moc: "Mocov\xED",
    mod: "Mobilian",
    moe: "Montagnais",
    mog: "Mongondow",
    moh: "Mohawk",
    moi: "Mboi",
    moj: "Monzombo",
    mok: "Morori",
    mom: "Mangue",
    mon: "Mongolian",
    moo: "Monom",
    mop: "Mop\xE1n Maya",
    moq: "Mor (Bomberai Peninsula)",
    mor: "Moro",
    mos: "Mossi",
    mot: "Bar\xED",
    mou: "Mogum",
    mov: "Mohave",
    mow: "Moi (Congo)",
    mox: "Molima",
    moy: "Shekkacho",
    moz: "Mukulu",
    mpa: "Mpoto",
    mpb: "Mullukmulluk",
    mpc: "Mangarayi",
    mpd: "Machinere",
    mpe: "Majang",
    mpg: "Marba",
    mph: "Maung",
    mpi: "Mpade",
    mpj: "Martu Wangka",
    mpk: "Mbara (Chad)",
    mpl: "Middle Watut",
    mpm: "Yosond\xFAa Mixtec",
    mpn: "Mindiri",
    mpo: "Miu",
    mpp: "Migabac",
    mpq: "Mat\xEDs",
    mpr: "Vangunu",
    mps: "Dadibi",
    mpt: "Mian",
    mpu: "Makur\xE1p",
    mpv: "Mungkip",
    mpw: "Mapidian",
    mpx: "Misima-Panaeati",
    mpy: "Mapia",
    mpz: "Mpi",
    mqa: "Maba (Indonesia)",
    mqb: "Mbuko",
    mqc: "Mangole",
    mqe: "Matepi",
    mqf: "Momuna",
    mqg: "Kota Bangun Kutai Malay",
    mqh: "Tlazoyaltepec Mixtec",
    mqi: "Mariri",
    mqj: "Mamasa",
    mqk: "Rajah Kabunsuwan Manobo",
    mql: "Mbelime",
    mqm: "South Marquesan",
    mqn: "Moronene",
    mqo: "Modole",
    mqp: "Manipa",
    mqq: "Minokok",
    mqr: "Mander",
    mqs: "West Makian",
    mqt: "Mok",
    mqu: "Mandari",
    mqv: "Mosimo",
    mqw: "Murupi",
    mqx: "Mamuju",
    mqy: "Manggarai",
    mqz: "Pano",
    mra: "Mlabri",
    mrb: "Marino",
    mrc: "Maricopa",
    mrd: "Western Magar",
    mre: "Martha's Vineyard Sign Language",
    mrf: "Elseng",
    mrg: "Mising",
    mrh: "Mara Chin",
    mri: "Maori",
    mrj: "Western Mari",
    mrk: "Hmwaveke",
    mrl: "Mortlockese",
    mrm: "Merlav",
    mrn: "Cheke Holo",
    mro: "Mru",
    mrp: "Morouas",
    mrq: "North Marquesan",
    mrr: "Maria (India)",
    mrs: "Maragus",
    mrt: "Marghi Central",
    mru: "Mono (Cameroon)",
    mrv: "Mangareva",
    mrw: "Maranao",
    mrx: "Maremgi",
    mry: "Mandaya",
    mrz: "Marind",
    msa: "Malay (macrolanguage)",
    msb: "Masbatenyo",
    msc: "Sankaran Maninka",
    msd: "Yucatec Maya Sign Language",
    mse: "Musey",
    msf: "Mekwei",
    msg: "Moraid",
    msh: "Masikoro Malagasy",
    msi: "Sabah Malay",
    msj: "Ma (Democratic Republic of Congo)",
    msk: "Mansaka",
    msl: "Molof",
    msm: "Agusan Manobo",
    msn: "Vur\xEBs",
    mso: "Mombum",
    msp: "Maritsau\xE1",
    msq: "Caac",
    msr: "Mongolian Sign Language",
    mss: "West Masela",
    msu: "Musom",
    msv: "Maslam",
    msw: "Mansoanka",
    msx: "Moresada",
    msy: "Aruamu",
    msz: "Momare",
    mta: "Cotabato Manobo",
    mtb: "Anyin Morofo",
    mtc: "Munit",
    mtd: "Mualang",
    mte: "Mono (Solomon Islands)",
    mtf: "Murik (Papua New Guinea)",
    mtg: "Una",
    mth: "Munggui",
    mti: "Maiwa (Papua New Guinea)",
    mtj: "Moskona",
    mtk: "Mbe'",
    mtl: "Montol",
    mtm: "Mator",
    mtn: "Matagalpa",
    mto: "Totontepec Mixe",
    mtp: "Wich\xED Lhamt\xE9s Nocten",
    mtq: "Muong",
    mtr: "Mewari",
    mts: "Yora",
    mtt: "Mota",
    mtu: "Tututepec Mixtec",
    mtv: "Asaro'o",
    mtw: "Southern Binukidnon",
    mtx: "Tida\xE1 Mixtec",
    mty: "Nabi",
    mua: "Mundang",
    mub: "Mubi",
    muc: "Ajumbu",
    mud: "Mednyj Aleut",
    mue: "Media Lengua",
    mug: "Musgu",
    muh: "M\xFCnd\xFC",
    mui: "Musi",
    muj: "Mabire",
    muk: "Mugom",
    mul: "Multiple languages",
    mum: "Maiwala",
    muo: "Nyong",
    mup: "Malvi",
    muq: "Eastern Xiangxi Miao",
    mur: "Murle",
    mus: "Creek",
    mut: "Western Muria",
    muu: "Yaaku",
    muv: "Muthuvan",
    mux: "Bo-Ung",
    muy: "Muyang",
    muz: "Mursi",
    mva: "Manam",
    mvb: "Mattole",
    mvd: "Mamboru",
    mve: "Marwari (Pakistan)",
    mvf: "Peripheral Mongolian",
    mvg: "Yucua\xF1e Mixtec",
    mvh: "Mulgi",
    mvi: "Miyako",
    mvk: "Mekmek",
    mvl: "Mbara (Australia)",
    mvm: "Muya",
    mvn: "Minaveha",
    mvo: "Marovo",
    mvp: "Duri",
    mvq: "Moere",
    mvr: "Marau",
    mvs: "Massep",
    mvt: "Mpotovoro",
    mvu: "Marfa",
    mvv: "Tagal Murut",
    mvw: "Machinga",
    mvx: "Meoswar",
    mvy: "Indus Kohistani",
    mvz: "Mesqan",
    mwa: "Mwatebu",
    mwb: "Juwal",
    mwc: "Are",
    mwe: "Mwera (Chimwera)",
    mwf: "Murrinh-Patha",
    mwg: "Aiklep",
    mwh: "Mouk-Aria",
    mwi: "Labo",
    mwk: "Kita Maninkakan",
    mwl: "Mirandese",
    mwm: "Sar",
    mwn: "Nyamwanga",
    mwo: "Central Maewo",
    mwp: "Kala Lagaw Ya",
    mwq: "M\xFCn Chin",
    mwr: "Marwari",
    mws: "Mwimbi-Muthambi",
    mwt: "Moken",
    mwu: "Mittu",
    mwv: "Mentawai",
    mww: "Hmong Daw",
    mwx: "Mediak",
    mwy: "Mosiro",
    mwz: "Moingi",
    mxa: "Northwest Oaxaca Mixtec",
    mxb: "Tezoatl\xE1n Mixtec",
    mxc: "Manyika",
    mxd: "Modang",
    mxe: "Mele-Fila",
    mxf: "Malgbe",
    mxg: "Mbangala",
    mxh: "Mvuba",
    mxi: "Mozarabic",
    mxj: "Miju-Mishmi",
    mxk: "Monumbo",
    mxl: "Maxi Gbe",
    mxm: "Meramera",
    mxn: "Moi (Indonesia)",
    mxo: "Mbowe",
    mxp: "Tlahuitoltepec Mixe",
    mxq: "Juquila Mixe",
    mxr: "Murik (Malaysia)",
    mxs: "Huitepec Mixtec",
    mxt: "Jamiltepec Mixtec",
    mxu: "Mada (Cameroon)",
    mxv: "Metlat\xF3noc Mixtec",
    mxw: "Namo",
    mxx: "Mahou",
    mxy: "Southeastern Nochixtl\xE1n Mixtec",
    mxz: "Central Masela",
    mya: "Burmese",
    myb: "Mbay",
    myc: "Mayeka",
    myd: "Maramba",
    mye: "Myene",
    myf: "Bambassi",
    myg: "Manta",
    myh: "Makah",
    myi: "Mina (India)",
    myj: "Mangayat",
    myk: "Mamara Senoufo",
    myl: "Moma",
    mym: "Me'en",
    myo: "Anfillo",
    myp: "Pirah\xE3",
    myr: "Muniche",
    mys: "Mesmes",
    myu: "Munduruk\xFA",
    myv: "Erzya",
    myw: "Muyuw",
    myx: "Masaaba",
    myy: "Macuna",
    myz: "Classical Mandaic",
    mza: "Santa Mar\xEDa Zacatepec Mixtec",
    mzb: "Tumzabt",
    mzc: "Madagascar Sign Language",
    mzd: "Malimba",
    mze: "Morawa",
    mzg: "Monastic Sign Language",
    mzh: "Wich\xED Lhamt\xE9s G\xFCisnay",
    mzi: "Ixcatl\xE1n Mazatec",
    mzj: "Manya",
    mzk: "Nigeria Mambila",
    mzl: "Mazatl\xE1n Mixe",
    mzm: "Mumuye",
    mzn: "Mazanderani",
    mzo: "Matipuhy",
    mzp: "Movima",
    mzq: "Mori Atas",
    mzr: "Mar\xFAbo",
    mzs: "Macanese",
    mzt: "Mintil",
    mzu: "Inapang",
    mzv: "Manza",
    mzw: "Deg",
    mzx: "Mawayana",
    mzy: "Mozambican Sign Language",
    mzz: "Maiadomu",
    naa: "Namla",
    nab: "Southern Nambiku\xE1ra",
    nac: "Narak",
    nae: "Naka'ela",
    naf: "Nabak",
    nag: "Naga Pidgin",
    naj: "Nalu",
    nak: "Nakanai",
    nal: "Nalik",
    nam: "Ngan'gityemerri",
    nan: "Min Nan Chinese",
    nao: "Naaba",
    nap: "Neapolitan",
    naq: "Khoekhoe",
    nar: "Iguta",
    nas: "Naasioi",
    nat: "Ca\u0331hungwa\u0331rya\u0331",
    nau: "Nauru",
    nav: "Navajo",
    naw: "Nawuri",
    nax: "Nakwi",
    nay: "Narrinyeri",
    naz: "Coatepec Nahuatl",
    nba: "Nyemba",
    nbb: "Ndoe",
    nbc: "Chang Naga",
    nbd: "Ngbinda",
    nbe: "Konyak Naga",
    nbg: "Nagarchal",
    nbh: "Ngamo",
    nbi: "Mao Naga",
    nbj: "Ngarinman",
    nbk: "Nake",
    nbl: "South Ndebele",
    nbm: "Ngbaka Ma'bo",
    nbn: "Kuri",
    nbo: "Nkukoli",
    nbp: "Nnam",
    nbq: "Nggem",
    nbr: "Numana-Nunku-Gbantu-Numbu",
    nbs: "Namibian Sign Language",
    nbt: "Na",
    nbu: "Rongmei Naga",
    nbv: "Ngamambo",
    nbw: "Southern Ngbandi",
    nby: "Ningera",
    nca: "Iyo",
    ncb: "Central Nicobarese",
    ncc: "Ponam",
    ncd: "Nachering",
    nce: "Yale",
    ncf: "Notsi",
    ncg: "Nisga'a",
    nch: "Central Huasteca Nahuatl",
    nci: "Classical Nahuatl",
    ncj: "Northern Puebla Nahuatl",
    nck: "Nakara",
    ncl: "Michoac\xE1n Nahuatl",
    ncm: "Nambo",
    ncn: "Nauna",
    nco: "Sibe",
    ncp: "Ndaktup",
    ncq: "Northern Katang",
    ncr: "Ncane",
    ncs: "Nicaraguan Sign Language",
    nct: "Chothe Naga",
    ncu: "Chumburung",
    ncx: "Central Puebla Nahuatl",
    ncz: "Natchez",
    nda: "Ndasa",
    ndb: "Kenswei Nsei",
    ndc: "Ndau",
    ndd: "Nde-Nsele-Nta",
    nde: "North Ndebele",
    ndf: "Nadruvian",
    ndg: "Ndengereko",
    ndh: "Ndali",
    ndi: "Samba Leko",
    ndj: "Ndamba",
    ndk: "Ndaka",
    ndl: "Ndolo",
    ndm: "Ndam",
    ndn: "Ngundi",
    ndo: "Ndonga",
    ndp: "Ndo",
    ndq: "Ndombe",
    ndr: "Ndoola",
    nds: "Low German",
    ndt: "Ndunga",
    ndu: "Dugun",
    ndv: "Ndut",
    ndw: "Ndobo",
    ndx: "Nduga",
    ndy: "Lutos",
    ndz: "Ndogo",
    nea: "Eastern Ngad'a",
    neb: "Toura (C\xF4te d'Ivoire)",
    nec: "Nedebang",
    ned: "Nde-Gbite",
    nee: "N\xEAl\xEAmwa-Nixumwak",
    nef: "Nefamese",
    neg: "Negidal",
    neh: "Nyenkha",
    nei: "Neo-Hittite",
    nej: "Neko",
    nek: "Neku",
    nem: "Nemi",
    nen: "Nengone",
    neo: "N\xE1-Meo",
    nep: "Nepali (macrolanguage)",
    neq: "North Central Mixe",
    ner: "Yahadian",
    nes: "Bhoti Kinnauri",
    net: "Nete",
    neu: "Neo",
    nev: "Nyaheun",
    new: "Newari",
    nex: "Neme",
    ney: "Neyo",
    nez: "Nez Perce",
    nfa: "Dhao",
    nfd: "Ahwai",
    nfl: "Ayiwo",
    nfr: "Nafaanra",
    nfu: "Mfumte",
    nga: "Ngbaka",
    ngb: "Northern Ngbandi",
    ngc: "Ngombe (Democratic Republic of Congo)",
    ngd: "Ngando (Central African Republic)",
    nge: "Ngemba",
    ngg: "Ngbaka Manza",
    ngh: "N/u",
    ngi: "Ngizim",
    ngj: "Ngie",
    ngk: "Dalabon",
    ngl: "Lomwe",
    ngm: "Ngatik Men's Creole",
    ngn: "Ngwo",
    ngo: "Ngoni",
    ngp: "Ngulu",
    ngq: "Ngurimi",
    ngr: "Engdewu",
    ngs: "Gvoko",
    ngt: "Kriang",
    ngu: "Guerrero Nahuatl",
    ngv: "Nagumi",
    ngw: "Ngwaba",
    ngx: "Nggwahyi",
    ngy: "Tibea",
    ngz: "Ngungwel",
    nha: "Nhanda",
    nhb: "Beng",
    nhc: "Tabasco Nahuatl",
    nhd: "Chirip\xE1",
    nhe: "Eastern Huasteca Nahuatl",
    nhf: "Nhuwala",
    nhg: "Tetelcingo Nahuatl",
    nhh: "Nahari",
    nhi: "Zacatl\xE1n-Ahuacatl\xE1n-Tepetzintla Nahuatl",
    nhk: "Isthmus-Cosoleacaque Nahuatl",
    nhm: "Morelos Nahuatl",
    nhn: "Central Nahuatl",
    nho: "Takuu",
    nhp: "Isthmus-Pajapan Nahuatl",
    nhq: "Huaxcaleca Nahuatl",
    nhr: "Naro",
    nht: "Ometepec Nahuatl",
    nhu: "Noone",
    nhv: "Temascaltepec Nahuatl",
    nhw: "Western Huasteca Nahuatl",
    nhx: "Isthmus-Mecayapan Nahuatl",
    nhy: "Northern Oaxaca Nahuatl",
    nhz: "Santa Mar\xEDa La Alta Nahuatl",
    nia: "Nias",
    nib: "Nakame",
    nid: "Ngandi",
    nie: "Niellim",
    nif: "Nek",
    nig: "Ngalakan",
    nih: "Nyiha (Tanzania)",
    nii: "Nii",
    nij: "Ngaju",
    nik: "Southern Nicobarese",
    nil: "Nila",
    nim: "Nilamba",
    nin: "Ninzo",
    nio: "Nganasan",
    niq: "Nandi",
    nir: "Nimboran",
    nis: "Nimi",
    nit: "Southeastern Kolami",
    niu: "Niuean",
    niv: "Gilyak",
    niw: "Nimo",
    nix: "Hema",
    niy: "Ngiti",
    niz: "Ningil",
    nja: "Nzanyi",
    njb: "Nocte Naga",
    njd: "Ndonde Hamba",
    njh: "Lotha Naga",
    nji: "Gudanji",
    njj: "Njen",
    njl: "Njalgulgule",
    njm: "Angami Naga",
    njn: "Liangmai Naga",
    njo: "Ao Naga",
    njr: "Njerep",
    njs: "Nisa",
    njt: "Ndyuka-Trio Pidgin",
    nju: "Ngadjunmaya",
    njx: "Kunyi",
    njy: "Njyem",
    njz: "Nyishi",
    nka: "Nkoya",
    nkb: "Khoibu Naga",
    nkc: "Nkongho",
    nkd: "Koireng",
    nke: "Duke",
    nkf: "Inpui Naga",
    nkg: "Nekgini",
    nkh: "Khezha Naga",
    nki: "Thangal Naga",
    nkj: "Nakai",
    nkk: "Nokuku",
    nkm: "Namat",
    nkn: "Nkangala",
    nko: "Nkonya",
    nkp: "Niuatoputapu",
    nkq: "Nkami",
    nkr: "Nukuoro",
    nks: "North Asmat",
    nkt: "Nyika (Tanzania)",
    nku: "Bouna Kulango",
    nkv: "Nyika (Malawi and Zambia)",
    nkw: "Nkutu",
    nkx: "Nkoroo",
    nkz: "Nkari",
    nla: "Ngombale",
    nlc: "Nalca",
    nld: "Dutch",
    nle: "East Nyala",
    nlg: "Gela",
    nli: "Grangali",
    nlj: "Nyali",
    nlk: "Ninia Yali",
    nll: "Nihali",
    nlo: "Ngul",
    nlq: "Lao Naga",
    nlu: "Nchumbulu",
    nlv: "Orizaba Nahuatl",
    nlw: "Walangama",
    nlx: "Nahali",
    nly: "Nyamal",
    nlz: "Nal\xF6go",
    nma: "Maram Naga",
    nmb: "Big Nambas",
    nmc: "Ngam",
    nmd: "Ndumu",
    nme: "Mzieme Naga",
    nmf: "Tangkhul Naga (India)",
    nmg: "Kwasio",
    nmh: "Monsang Naga",
    nmi: "Nyam",
    nmj: "Ngombe (Central African Republic)",
    nmk: "Namakura",
    nml: "Ndemli",
    nmm: "Manangba",
    nmn: "!X\xF3\xF5",
    nmo: "Moyon Naga",
    nmp: "Nimanbur",
    nmq: "Nambya",
    nmr: "Nimbari",
    nms: "Letemboi",
    nmt: "Namonuito",
    nmu: "Northeast Maidu",
    nmv: "Ngamini",
    nmw: "Nimoa",
    nmx: "Nama (Papua New Guinea)",
    nmy: "Namuyi",
    nmz: "Nawdm",
    nna: "Nyangumarta",
    nnb: "Nande",
    nnc: "Nancere",
    nnd: "West Ambae",
    nne: "Ngandyera",
    nnf: "Ngaing",
    nng: "Maring Naga",
    nnh: "Ngiemboon",
    nni: "North Nuaulu",
    nnj: "Nyangatom",
    nnk: "Nankina",
    nnl: "Northern Rengma Naga",
    nnm: "Namia",
    nnn: "Ngete",
    nno: "Norwegian Nynorsk",
    nnp: "Wancho Naga",
    nnq: "Ngindo",
    nnr: "Narungga",
    nns: "Ningye",
    nnt: "Nanticoke",
    nnu: "Dwang",
    nnv: "Nugunu (Australia)",
    nnw: "Southern Nuni",
    nny: "Nyangga",
    nnz: "Nda'nda'",
    noa: "Woun Meu",
    nob: "Norwegian Bokm\xE5l",
    noc: "Nuk",
    nod: "Northern Thai",
    noe: "Nimadi",
    nof: "Nomane",
    nog: "Nogai",
    noh: "Nomu",
    noi: "Noiri",
    noj: "Nonuya",
    nok: "Nooksack",
    nol: "Nomlaki",
    nom: "Nocam\xE1n",
    non: "Old Norse",
    nop: "Numanggang",
    noq: "Ngongo",
    nor: "Norwegian",
    nos: "Eastern Nisu",
    not: "Nomatsiguenga",
    nou: "Ewage-Notu",
    nov: "Novial",
    now: "Nyambo",
    noy: "Noy",
    noz: "Nayi",
    npa: "Nar Phu",
    npb: "Nupbikha",
    npg: "Ponyo-Gongwang Naga",
    nph: "Phom Naga",
    npi: "Nepali (individual language)",
    npl: "Southeastern Puebla Nahuatl",
    npn: "Mondropolon",
    npo: "Pochuri Naga",
    nps: "Nipsan",
    npu: "Puimei Naga",
    npx: "Noipx",
    npy: "Napu",
    nqg: "Southern Nago",
    nqk: "Kura Ede Nago",
    nql: "Ngendelengo",
    nqm: "Ndom",
    nqn: "Nen",
    nqo: "N'Ko",
    nqq: "Kyan-Karyaw Naga",
    nqy: "Akyaung Ari Naga",
    nra: "Ngom",
    nrb: "Nara",
    nrc: "Noric",
    nre: "Southern Rengma Naga",
    nrf: "J\xE8rriais",
    nrg: "Narango",
    nri: "Chokri Naga",
    nrk: "Ngarla",
    nrl: "Ngarluma",
    nrm: "Narom",
    nrn: "Norn",
    nrp: "North Picene",
    nrr: "Norra",
    nrt: "Northern Kalapuya",
    nru: "Narua",
    nrx: "Ngurmbur",
    nrz: "Lala",
    nsa: "Sangtam Naga",
    nsc: "Nshi",
    nsd: "Southern Nisu",
    nse: "Nsenga",
    nsf: "Northwestern Nisu",
    nsg: "Ngasa",
    nsh: "Ngoshie",
    nsi: "Nigerian Sign Language",
    nsk: "Naskapi",
    nsl: "Norwegian Sign Language",
    nsm: "Sumi Naga",
    nsn: "Nehan",
    nso: "Pedi",
    nsp: "Nepalese Sign Language",
    nsq: "Northern Sierra Miwok",
    nsr: "Maritime Sign Language",
    nss: "Nali",
    nst: "Tase Naga",
    nsu: "Sierra Negra Nahuatl",
    nsv: "Southwestern Nisu",
    nsw: "Navut",
    nsx: "Nsongo",
    nsy: "Nasal",
    nsz: "Nisenan",
    ntd: "Northern Tidung",
    nte: "Nathembo",
    ntg: "Ngantangarra",
    nti: "Natioro",
    ntj: "Ngaanyatjarra",
    ntk: "Ikoma-Nata-Isenye",
    ntm: "Nateni",
    nto: "Ntomba",
    ntp: "Northern Tepehuan",
    ntr: "Delo",
    ntu: "Nat\xFCgu",
    ntw: "Nottoway",
    ntx: "Tangkhul Naga (Myanmar)",
    nty: "Mantsi",
    ntz: "Natanzi",
    nua: "Yuanga",
    nuc: "Nukuini",
    nud: "Ngala",
    nue: "Ngundu",
    nuf: "Nusu",
    nug: "Nungali",
    nuh: "Ndunda",
    nui: "Ngumbi",
    nuj: "Nyole",
    nuk: "Nuu-chah-nulth",
    nul: "Nusa Laut",
    num: "Niuafo'ou",
    nun: "Anong",
    nuo: "Ngu\xF4n",
    nup: "Nupe-Nupe-Tako",
    nuq: "Nukumanu",
    nur: "Nukuria",
    nus: "Nuer",
    nut: "Nung (Viet Nam)",
    nuu: "Ngbundu",
    nuv: "Northern Nuni",
    nuw: "Nguluwan",
    nux: "Mehek",
    nuy: "Nunggubuyu",
    nuz: "Tlamacazapa Nahuatl",
    nvh: "Nasarian",
    nvm: "Namiae",
    nvo: "Nyokon",
    nwa: "Nawathinehena",
    nwb: "Nyabwa",
    nwc: "Classical Newari",
    nwe: "Ngwe",
    nwg: "Ngayawung",
    nwi: "Southwest Tanna",
    nwm: "Nyamusa-Molo",
    nwo: "Nauo",
    nwr: "Nawaru",
    nwx: "Middle Newar",
    nwy: "Nottoway-Meherrin",
    nxa: "Nauete",
    nxd: "Ngando (Democratic Republic of Congo)",
    nxe: "Nage",
    nxg: "Ngad'a",
    nxi: "Nindi",
    nxk: "Koki Naga",
    nxl: "South Nuaulu",
    nxm: "Numidian",
    nxn: "Ngawun",
    nxo: "Ndambomo",
    nxq: "Naxi",
    nxr: "Ninggerum",
    nxu: "Narau",
    nxx: "Nafri",
    nya: "Nyanja",
    nyb: "Nyangbo",
    nyc: "Nyanga-li",
    nyd: "Nyore",
    nye: "Nyengo",
    nyf: "Giryama",
    nyg: "Nyindu",
    nyh: "Nyigina",
    nyi: "Ama (Sudan)",
    nyj: "Nyanga",
    nyk: "Nyaneka",
    nyl: "Nyeu",
    nym: "Nyamwezi",
    nyn: "Nyankole",
    nyo: "Nyoro",
    nyp: "Nyang'i",
    nyq: "Nayini",
    nyr: "Nyiha (Malawi)",
    nys: "Nyunga",
    nyt: "Nyawaygi",
    nyu: "Nyungwe",
    nyv: "Nyulnyul",
    nyw: "Nyaw",
    nyx: "Nganyaywana",
    nyy: "Nyakyusa-Ngonde",
    nza: "Tigon Mbembe",
    nzb: "Njebi",
    nzi: "Nzima",
    nzk: "Nzakara",
    nzm: "Zeme Naga",
    nzs: "New Zealand Sign Language",
    nzu: "Teke-Nzikou",
    nzy: "Nzakambay",
    nzz: "Nanga Dama Dogon",
    oaa: "Orok",
    oac: "Oroch",
    oar: "Old Aramaic (up to 700 BCE)",
    oav: "Old Avar",
    obi: "Obispe\xF1o",
    obk: "Southern Bontok",
    obl: "Oblo",
    obm: "Moabite",
    obo: "Obo Manobo",
    obr: "Old Burmese",
    obt: "Old Breton",
    obu: "Obulom",
    oca: "Ocaina",
    och: "Old Chinese",
    oci: "Occitan (post 1500)",
    oco: "Old Cornish",
    ocu: "Atzingo Matlatzinca",
    oda: "Odut",
    odk: "Od",
    odt: "Old Dutch",
    odu: "Odual",
    ofo: "Ofo",
    ofs: "Old Frisian",
    ofu: "Efutop",
    ogb: "Ogbia",
    ogc: "Ogbah",
    oge: "Old Georgian",
    ogg: "Ogbogolo",
    ogo: "Khana",
    ogu: "Ogbronuagum",
    oht: "Old Hittite",
    ohu: "Old Hungarian",
    oia: "Oirata",
    oin: "Inebu One",
    ojb: "Northwestern Ojibwa",
    ojc: "Central Ojibwa",
    ojg: "Eastern Ojibwa",
    oji: "Ojibwa",
    ojp: "Old Japanese",
    ojs: "Severn Ojibwa",
    ojv: "Ontong Java",
    ojw: "Western Ojibwa",
    oka: "Okanagan",
    okb: "Okobo",
    okd: "Okodia",
    oke: "Okpe (Southwestern Edo)",
    okg: "Koko Babangk",
    okh: "Koresh-e Rostam",
    oki: "Okiek",
    okj: "Oko-Juwoi",
    okk: "Kwamtim One",
    okl: "Old Kentish Sign Language",
    okm: "Middle Korean (10th-16th cent.)",
    okn: "Oki-No-Erabu",
    oko: "Old Korean (3rd-9th cent.)",
    okr: "Kirike",
    oks: "Oko-Eni-Osayen",
    oku: "Oku",
    okv: "Orokaiva",
    okx: "Okpe (Northwestern Edo)",
    ola: "Walungge",
    old: "Mochi",
    ole: "Olekha",
    olk: "Olkol",
    olm: "Oloma",
    olo: "Livvi",
    olr: "Olrat",
    olt: "Old Lithuanian",
    olu: "Kuvale",
    oma: "Omaha-Ponca",
    omb: "East Ambae",
    omc: "Mochica",
    omg: "Omagua",
    omi: "Omi",
    omk: "Omok",
    oml: "Ombo",
    omn: "Minoan",
    omo: "Utarmbung",
    omp: "Old Manipuri",
    omr: "Old Marathi",
    omt: "Omotik",
    omu: "Omurano",
    omw: "South Tairora",
    omx: "Old Mon",
    ona: "Ona",
    onb: "Lingao",
    one: "Oneida",
    ong: "Olo",
    oni: "Onin",
    onj: "Onjob",
    onk: "Kabore One",
    onn: "Onobasulu",
    ono: "Onondaga",
    onp: "Sartang",
    onr: "Northern One",
    ons: "Ono",
    ont: "Ontenu",
    onu: "Unua",
    onw: "Old Nubian",
    onx: "Onin Based Pidgin",
    ood: "Tohono O'odham",
    oog: "Ong",
    oon: "\xD6nge",
    oor: "Oorlams",
    oos: "Old Ossetic",
    opa: "Okpamheri",
    opk: "Kopkaka",
    opm: "Oksapmin",
    opo: "Opao",
    opt: "Opata",
    opy: "Ofay\xE9",
    ora: "Oroha",
    orc: "Orma",
    ore: "Orej\xF3n",
    org: "Oring",
    orh: "Oroqen",
    ori: "Oriya (macrolanguage)",
    orm: "Oromo",
    orn: "Orang Kanaq",
    oro: "Orokolo",
    orr: "Oruma",
    ors: "Orang Seletar",
    ort: "Adivasi Oriya",
    oru: "Ormuri",
    orv: "Old Russian",
    orw: "Oro Win",
    orx: "Oro",
    ory: "Odia",
    orz: "Ormu",
    osa: "Osage",
    osc: "Oscan",
    osi: "Osing",
    oso: "Ososo",
    osp: "Old Spanish",
    oss: "Ossetian",
    ost: "Osatu",
    osu: "Southern One",
    osx: "Old Saxon",
    ota: "Ottoman Turkish (1500-1928)",
    otb: "Old Tibetan",
    otd: "Ot Danum",
    ote: "Mezquital Otomi",
    oti: "Oti",
    otk: "Old Turkish",
    otl: "Tilapa Otomi",
    otm: "Eastern Highland Otomi",
    otn: "Tenango Otomi",
    otq: "Quer\xE9taro Otomi",
    otr: "Otoro",
    ots: "Estado de M\xE9xico Otomi",
    ott: "Temoaya Otomi",
    otu: "Otuke",
    otw: "Ottawa",
    otx: "Texcatepec Otomi",
    oty: "Old Tamil",
    otz: "Ixtenco Otomi",
    oua: "Tagargrent",
    oub: "Glio-Oubi",
    oue: "Oune",
    oui: "Old Uighur",
    oum: "Ouma",
    ovd: "Elfdalian",
    owi: "Owiniga",
    owl: "Old Welsh",
    oyb: "Oy",
    oyd: "Oyda",
    oym: "Wayampi",
    oyy: "Oya'oya",
    ozm: "Koonzime",
    pab: "Parec\xEDs",
    pac: "Pacoh",
    pad: "Paumar\xED",
    pae: "Pagibete",
    paf: "Paranaw\xE1t",
    pag: "Pangasinan",
    pah: "Tenharim",
    pai: "Pe",
    pak: "Parakan\xE3",
    pal: "Pahlavi",
    pam: "Pampanga",
    pan: "Panjabi",
    pao: "Northern Paiute",
    pap: "Papiamento",
    paq: "Parya",
    par: "Panamint",
    pas: "Papasena",
    pat: "Papitalai",
    pau: "Palauan",
    pav: "Paka\xE1snovos",
    paw: "Pawnee",
    pax: "Pankarar\xE9",
    pay: "Pech",
    paz: "Pankarar\xFA",
    pbb: "P\xE1ez",
    pbc: "Patamona",
    pbe: "Mezontla Popoloca",
    pbf: "Coyotepec Popoloca",
    pbg: "Paraujano",
    pbh: "E'\xF1apa Woromaipu",
    pbi: "Parkwa",
    pbl: "Mak (Nigeria)",
    pbn: "Kpasam",
    pbo: "Papel",
    pbp: "Badyara",
    pbr: "Pangwa",
    pbs: "Central Pame",
    pbt: "Southern Pashto",
    pbu: "Northern Pashto",
    pbv: "Pnar",
    pby: "Pyu (Papua New Guinea)",
    pca: "Santa In\xE9s Ahuatempan Popoloca",
    pcb: "Pear",
    pcc: "Bouyei",
    pcd: "Picard",
    pce: "Ruching Palaung",
    pcf: "Paliyan",
    pcg: "Paniya",
    pch: "Pardhan",
    pci: "Duruwa",
    pcj: "Parenga",
    pck: "Paite Chin",
    pcl: "Pardhi",
    pcm: "Nigerian Pidgin",
    pcn: "Piti",
    pcp: "Pacahuara",
    pcw: "Pyapun",
    pda: "Anam",
    pdc: "Pennsylvania German",
    pdi: "Pa Di",
    pdn: "Podena",
    pdo: "Padoe",
    pdt: "Plautdietsch",
    pdu: "Kayan",
    pea: "Peranakan Indonesian",
    peb: "Eastern Pomo",
    ped: "Mala (Papua New Guinea)",
    pee: "Taje",
    pef: "Northeastern Pomo",
    peg: "Pengo",
    peh: "Bonan",
    pei: "Chichimeca-Jonaz",
    pej: "Northern Pomo",
    pek: "Penchal",
    pel: "Pekal",
    pem: "Phende",
    peo: "Old Persian (ca. 600-400 B.C.)",
    pep: "Kunja",
    peq: "Southern Pomo",
    pes: "Iranian Persian",
    pev: "P\xE9mono",
    pex: "Petats",
    pey: "Petjo",
    pez: "Eastern Penan",
    pfa: "P\xE1\xE1fang",
    pfe: "Peere",
    pfl: "Pfaelzisch",
    pga: "Sudanese Creole Arabic",
    pgd: "G\u0101ndh\u0101r\u012B",
    pgg: "Pangwali",
    pgi: "Pagi",
    pgk: "Rerep",
    pgl: "Primitive Irish",
    pgn: "Paelignian",
    pgs: "Pangseng",
    pgu: "Pagu",
    pgz: "Papua New Guinean Sign Language",
    pha: "Pa-Hng",
    phd: "Phudagi",
    phg: "Phuong",
    phh: "Phukha",
    phk: "Phake",
    phl: "Phalura",
    phm: "Phimbi",
    phn: "Phoenician",
    pho: "Phunoi",
    phq: "Phana'",
    phr: "Pahari-Potwari",
    pht: "Phu Thai",
    phu: "Phuan",
    phv: "Pahlavani",
    phw: "Phangduwali",
    pia: "Pima Bajo",
    pib: "Yine",
    pic: "Pinji",
    pid: "Piaroa",
    pie: "Piro",
    pif: "Pingelapese",
    pig: "Pisabo",
    pih: "Pitcairn-Norfolk",
    pii: "Pini",
    pij: "Pijao",
    pil: "Yom",
    pim: "Powhatan",
    pin: "Piame",
    pio: "Piapoco",
    pip: "Pero",
    pir: "Piratapuyo",
    pis: "Pijin",
    pit: "Pitta Pitta",
    piu: "Pintupi-Luritja",
    piv: "Pileni",
    piw: "Pimbwe",
    pix: "Piu",
    piy: "Piya-Kwonci",
    piz: "Pije",
    pjt: "Pitjantjatjara",
    pka: "Ardham\u0101gadh\u012B Pr\u0101krit",
    pkb: "Pokomo",
    pkc: "Paekche",
    pkg: "Pak-Tong",
    pkh: "Pankhu",
    pkn: "Pakanha",
    pko: "P\xF6koot",
    pkp: "Pukapuka",
    pkr: "Attapady Kurumba",
    pks: "Pakistan Sign Language",
    pkt: "Maleng",
    pku: "Paku",
    pla: "Miani",
    plb: "Polonombauk",
    plc: "Central Palawano",
    pld: "Polari",
    ple: "Palu'e",
    plg: "Pilag\xE1",
    plh: "Paulohi",
    pli: "Pali",
    plj: "Polci",
    plk: "Kohistani Shina",
    pll: "Shwe Palaung",
    pln: "Palenquero",
    plo: "Oluta Popoluca",
    plp: "Palpa",
    plq: "Palaic",
    plr: "Palaka Senoufo",
    pls: "San Marcos Tlacoyalco Popoloca",
    plt: "Plateau Malagasy",
    plu: "Palik\xFAr",
    plv: "Southwest Palawano",
    plw: "Brooke's Point Palawano",
    ply: "Bolyu",
    plz: "Paluan",
    pma: "Paama",
    pmb: "Pambia",
    pmd: "Pallanganmiddang",
    pme: "Pwaamei",
    pmf: "Pamona",
    pmh: "M\u0101h\u0101r\u0101\u1E63\u1E6Dri Pr\u0101krit",
    pmi: "Northern Pumi",
    pmj: "Southern Pumi",
    pmk: "Pamlico",
    pml: "Lingua Franca",
    pmm: "Pomo",
    pmn: "Pam",
    pmo: "Pom",
    pmq: "Northern Pame",
    pmr: "Paynamar",
    pms: "Piemontese",
    pmt: "Tuamotuan",
    pmw: "Plains Miwok",
    pmx: "Poumei Naga",
    pmy: "Papuan Malay",
    pmz: "Southern Pame",
    pna: "Punan Bah-Biau",
    pnb: "Western Panjabi",
    pnc: "Pannei",
    pne: "Western Penan",
    png: "Pongu",
    pnh: "Penrhyn",
    pni: "Aoheng",
    pnj: "Pinjarup",
    pnk: "Paunaka",
    pnl: "Paleni",
    pnm: "Punan Batu 1",
    pnn: "Pinai-Hagahai",
    pno: "Panobo",
    pnp: "Pancana",
    pnq: "Pana (Burkina Faso)",
    pnr: "Panim",
    pns: "Ponosakan",
    pnt: "Pontic",
    pnu: "Jiongnai Bunu",
    pnv: "Pinigura",
    pnw: "Panytyima",
    pnx: "Phong-Kniang",
    pny: "Pinyin",
    pnz: "Pana (Central African Republic)",
    poc: "Poqomam",
    poe: "San Juan Atzingo Popoloca",
    pof: "Poke",
    pog: "Potigu\xE1ra",
    poh: "Poqomchi'",
    poi: "Highland Popoluca",
    pok: "Pokang\xE1",
    pol: "Polish",
    pom: "Southeastern Pomo",
    pon: "Pohnpeian",
    poo: "Central Pomo",
    pop: "Pwapw\xE2",
    poq: "Texistepec Popoluca",
    por: "Portuguese",
    pos: "Sayula Popoluca",
    pot: "Potawatomi",
    pov: "Upper Guinea Crioulo",
    pow: "San Felipe Otlaltepec Popoloca",
    pox: "Polabian",
    poy: "Pogolo",
    ppe: "Papi",
    ppi: "Paipai",
    ppk: "Uma",
    ppl: "Pipil",
    ppm: "Papuma",
    ppn: "Papapana",
    ppo: "Folopa",
    ppp: "Pelende",
    ppq: "Pei",
    pps: "San Lu\xEDs Temalacayuca Popoloca",
    ppt: "Pare",
    ppu: "Papora",
    pqa: "Pa'a",
    pqm: "Malecite-Passamaquoddy",
    prc: "Parachi",
    prd: "Parsi-Dari",
    pre: "Principense",
    prf: "Paranan",
    prg: "Prussian",
    prh: "Porohanon",
    pri: "Paic\xEE",
    prk: "Parauk",
    prl: "Peruvian Sign Language",
    prm: "Kibiri",
    prn: "Prasuni",
    pro: "Old Proven\xE7al (to 1500)",
    prp: "Parsi",
    prq: "Ash\xE9ninka Peren\xE9",
    prr: "Puri",
    prs: "Dari",
    prt: "Phai",
    pru: "Puragi",
    prw: "Parawen",
    prx: "Purik",
    prz: "Providencia Sign Language",
    psa: "Asue Awyu",
    psc: "Persian Sign Language",
    psd: "Plains Indian Sign Language",
    pse: "Central Malay",
    psg: "Penang Sign Language",
    psh: "Southwest Pashai",
    psi: "Southeast Pashai",
    psl: "Puerto Rican Sign Language",
    psm: "Pauserna",
    psn: "Panasuan",
    pso: "Polish Sign Language",
    psp: "Philippine Sign Language",
    psq: "Pasi",
    psr: "Portuguese Sign Language",
    pss: "Kaulong",
    pst: "Central Pashto",
    psu: "Sauraseni Pr\u0101krit",
    psw: "Port Sandwich",
    psy: "Piscataway",
    pta: "Pai Tavytera",
    pth: "Patax\xF3 H\xE3-Ha-H\xE3e",
    pti: "Pintiini",
    ptn: "Patani",
    pto: "Zo'\xE9",
    ptp: "Patep",
    ptq: "Pattapu",
    ptr: "Piamatsina",
    ptt: "Enrekang",
    ptu: "Bambam",
    ptv: "Port Vato",
    ptw: "Pentlatch",
    pty: "Pathiya",
    pua: "Western Highland Purepecha",
    pub: "Purum",
    puc: "Punan Merap",
    pud: "Punan Aput",
    pue: "Puelche",
    puf: "Punan Merah",
    pug: "Phuie",
    pui: "Puinave",
    puj: "Punan Tubu",
    pum: "Puma",
    puo: "Puoc",
    pup: "Pulabu",
    puq: "Puquina",
    pur: "Purubor\xE1",
    pus: "Pushto",
    put: "Putoh",
    puu: "Punu",
    puw: "Puluwatese",
    pux: "Puare",
    puy: "Purisime\xF1o",
    pwa: "Pawaia",
    pwb: "Panawa",
    pwg: "Gapapaiwa",
    pwi: "Patwin",
    pwm: "Molbog",
    pwn: "Paiwan",
    pwo: "Pwo Western Karen",
    pwr: "Powari",
    pww: "Pwo Northern Karen",
    pxm: "Quetzaltepec Mixe",
    pye: "Pye Krumen",
    pym: "Fyam",
    pyn: "Poyan\xE1wa",
    pys: "Paraguayan Sign Language",
    pyu: "Puyuma",
    pyx: "Pyu (Myanmar)",
    pyy: "Pyen",
    pzn: "Para Naga",
    qaa: "Original audio",
    qad: "Audio Description",
    qua: "Quapaw",
    qub: "Huallaga Hu\xE1nuco Quechua",
    quc: "K'iche'",
    qud: "Calder\xF3n Highland Quichua",
    que: "Quechua",
    quf: "Lambayeque Quechua",
    qug: "Chimborazo Highland Quichua",
    quh: "South Bolivian Quechua",
    qui: "Quileute",
    quk: "Chachapoyas Quechua",
    qul: "North Bolivian Quechua",
    qum: "Sipacapense",
    qun: "Quinault",
    qup: "Southern Pastaza Quechua",
    quq: "Quinqui",
    qur: "Yanahuanca Pasco Quechua",
    qus: "Santiago del Estero Quichua",
    quv: "Sacapulteco",
    quw: "Tena Lowland Quichua",
    qux: "Yauyos Quechua",
    quy: "Ayacucho Quechua",
    quz: "Cusco Quechua",
    qva: "Ambo-Pasco Quechua",
    qvc: "Cajamarca Quechua",
    qve: "Eastern Apur\xEDmac Quechua",
    qvh: "Huamal\xEDes-Dos de Mayo Hu\xE1nuco Quechua",
    qvi: "Imbabura Highland Quichua",
    qvj: "Loja Highland Quichua",
    qvl: "Cajatambo North Lima Quechua",
    qvm: "Margos-Yarowilca-Lauricocha Quechua",
    qvn: "North Jun\xEDn Quechua",
    qvo: "Napo Lowland Quechua",
    qvp: "Pacaraos Quechua",
    qvs: "San Mart\xEDn Quechua",
    qvw: "Huaylla Wanca Quechua",
    qvy: "Queyu",
    qvz: "Northern Pastaza Quichua",
    qwa: "Corongo Ancash Quechua",
    qwc: "Classical Quechua",
    qwh: "Huaylas Ancash Quechua",
    qwm: "Kuman (Russia)",
    qws: "Sihuas Ancash Quechua",
    qwt: "Kwalhioqua-Tlatskanai",
    qxa: "Chiqui\xE1n Ancash Quechua",
    qxc: "Chincha Quechua",
    qxh: "Panao Hu\xE1nuco Quechua",
    qxl: "Salasaca Highland Quichua",
    qxn: "Northern Conchucos Ancash Quechua",
    qxo: "Southern Conchucos Ancash Quechua",
    qxp: "Puno Quechua",
    qxq: "Qashqa'i",
    qxr: "Ca\xF1ar Highland Quichua",
    qxs: "Southern Qiang",
    qxt: "Santa Ana de Tusi Pasco Quechua",
    qxu: "Arequipa-La Uni\xF3n Quechua",
    qxw: "Jauja Wanca Quechua",
    qya: "Quenya",
    qyp: "Quiripi",
    raa: "Dungmali",
    rab: "Camling",
    rac: "Rasawa",
    rad: "Rade",
    raf: "Western Meohang",
    rag: "Logooli",
    rah: "Rabha",
    rai: "Ramoaaina",
    raj: "Rajasthani",
    rak: "Tulu-Bohuai",
    ral: "Ralte",
    ram: "Canela",
    ran: "Riantana",
    rao: "Rao",
    rap: "Rapanui",
    raq: "Saam",
    rar: "Rarotongan",
    ras: "Tegali",
    rat: "Razajerdi",
    rau: "Raute",
    rav: "Sampang",
    raw: "Rawang",
    rax: "Rang",
    ray: "Rapa",
    raz: "Rahambuu",
    rbb: "Rumai Palaung",
    rbk: "Northern Bontok",
    rbl: "Miraya Bikol",
    rbp: "Barababaraba",
    rcf: "R\xE9union Creole French",
    rdb: "Rudbari",
    rea: "Rerau",
    reb: "Rembong",
    ree: "Rejang Kayan",
    reg: "Kara (Tanzania)",
    rei: "Reli",
    rej: "Rejang",
    rel: "Rendille",
    rem: "Remo",
    ren: "Rengao",
    rer: "Rer Bare",
    res: "Reshe",
    ret: "Retta",
    rey: "Reyesano",
    rga: "Roria",
    rge: "Romano-Greek",
    rgk: "Rangkas",
    rgn: "Romagnol",
    rgr: "Res\xEDgaro",
    rgs: "Southern Roglai",
    rgu: "Ringgou",
    rhg: "Rohingya",
    rhp: "Yahang",
    ria: "Riang (India)",
    rif: "Tarifit",
    ril: "Riang (Myanmar)",
    rim: "Nyaturu",
    rin: "Nungu",
    rir: "Ribun",
    rit: "Ritarungo",
    riu: "Riung",
    rjg: "Rajong",
    rji: "Raji",
    rjs: "Rajbanshi",
    rka: "Kraol",
    rkb: "Rikbaktsa",
    rkh: "Rakahanga-Manihiki",
    rki: "Rakhine",
    rkm: "Marka",
    rkt: "Rangpuri",
    rkw: "Arakwal",
    rma: "Rama",
    rmb: "Rembarunga",
    rmc: "Carpathian Romani",
    rmd: "Traveller Danish",
    rme: "Angloromani",
    rmf: "Kalo Finnish Romani",
    rmg: "Traveller Norwegian",
    rmh: "Murkim",
    rmi: "Lomavren",
    rmk: "Romkun",
    rml: "Baltic Romani",
    rmm: "Roma",
    rmn: "Balkan Romani",
    rmo: "Sinte Romani",
    rmp: "Rempi",
    rmq: "Cal\xF3",
    rms: "Romanian Sign Language",
    rmt: "Domari",
    rmu: "Tavringer Romani",
    rmv: "Romanova",
    rmw: "Welsh Romani",
    rmx: "Romam",
    rmy: "Vlax Romani",
    rmz: "Marma",
    rnd: "Ruund",
    rng: "Ronga",
    rnl: "Ranglong",
    rnn: "Roon",
    rnp: "Rongpo",
    rnr: "Nari Nari",
    rnw: "Rungwa",
    rob: "Tae'",
    roc: "Cacgia Roglai",
    rod: "Rogo",
    roe: "Ronji",
    rof: "Rombo",
    rog: "Northern Roglai",
    roh: "Romansh",
    rol: "Romblomanon",
    rom: "Romany",
    ron: "Romanian",
    roo: "Rotokas",
    rop: "Kriol",
    ror: "Rongga",
    rou: "Runga",
    row: "Dela-Oenale",
    rpn: "Repanbitip",
    rpt: "Rapting",
    rri: "Ririo",
    rro: "Waima",
    rrt: "Arritinngithigh",
    rsb: "Romano-Serbian",
    rsl: "Russian Sign Language",
    rsm: "Miriwoong Sign Language",
    rtc: "Rungtu Chin",
    rth: "Ratahan",
    rtm: "Rotuman",
    rts: "Yurats",
    rtw: "Rathawi",
    rub: "Gungu",
    ruc: "Ruuli",
    rue: "Rusyn",
    ruf: "Luguru",
    rug: "Roviana",
    ruh: "Ruga",
    rui: "Rufiji",
    ruk: "Che",
    run: "Rundi",
    ruo: "Istro Romanian",
    rup: "Macedo-Romanian",
    ruq: "Megleno Romanian",
    rus: "Russian",
    rut: "Rutul",
    ruu: "Lanas Lobu",
    ruy: "Mala (Nigeria)",
    ruz: "Ruma",
    rwa: "Rawo",
    rwk: "Rwa",
    rwm: "Amba (Uganda)",
    rwo: "Rawa",
    rwr: "Marwari (India)",
    rxd: "Ngardi",
    rxw: "Karuwali",
    ryn: "Northern Amami-Oshima",
    rys: "Yaeyama",
    ryu: "Central Okinawan",
    rzh: "R\u0101zi\u1E25\u012B",
    saa: "Saba",
    sab: "Buglere",
    sac: "Meskwaki",
    sad: "Sandawe",
    sae: "Saban\xEA",
    saf: "Safaliba",
    sag: "Sango",
    sah: "Yakut",
    saj: "Sahu",
    sak: "Sake",
    sam: "Samaritan Aramaic",
    san: "Sanskrit",
    sao: "Sause",
    saq: "Samburu",
    sar: "Saraveca",
    sas: "Sasak",
    sat: "Santali",
    sau: "Saleman",
    sav: "Saafi-Saafi",
    saw: "Sawi",
    sax: "Sa",
    say: "Saya",
    saz: "Saurashtra",
    sba: "Ngambay",
    sbb: "Simbo",
    sbc: "Kele (Papua New Guinea)",
    sbd: "Southern Samo",
    sbe: "Saliba",
    sbf: "Chabu",
    sbg: "Seget",
    sbh: "Sori-Harengan",
    sbi: "Seti",
    sbj: "Surbakhal",
    sbk: "Safwa",
    sbl: "Botolan Sambal",
    sbm: "Sagala",
    sbn: "Sindhi Bhil",
    sbo: "Sab\xFCm",
    sbp: "Sangu (Tanzania)",
    sbq: "Sileibi",
    sbr: "Sembakung Murut",
    sbs: "Subiya",
    sbt: "Kimki",
    sbu: "Stod Bhoti",
    sbv: "Sabine",
    sbw: "Simba",
    sbx: "Seberuang",
    sby: "Soli",
    sbz: "Sara Kaba",
    scb: "Chut",
    sce: "Dongxiang",
    scf: "San Miguel Creole French",
    scg: "Sanggau",
    sch: "Sakachep",
    sci: "Sri Lankan Creole Malay",
    sck: "Sadri",
    scl: "Shina",
    scn: "Sicilian",
    sco: "Scots",
    scp: "Helambu Sherpa",
    scq: "Sa'och",
    scs: "North Slavey",
    sct: "Southern Katang",
    scu: "Shumcho",
    scv: "Sheni",
    scw: "Sha",
    scx: "Sicel",
    sda: "Toraja-Sa'dan",
    sdb: "Shabak",
    sdc: "Sassarese Sardinian",
    sde: "Surubu",
    sdf: "Sarli",
    sdg: "Savi",
    sdh: "Southern Kurdish",
    sdj: "Suundi",
    sdk: "Sos Kundi",
    sdl: "Saudi Arabian Sign Language",
    sdm: "Semandang",
    sdn: "Gallurese Sardinian",
    sdo: "Bukar-Sadung Bidayuh",
    sdp: "Sherdukpen",
    sdr: "Oraon Sadri",
    sds: "Sened",
    sdt: "Shuadit",
    sdu: "Sarudu",
    sdx: "Sibu Melanau",
    sdz: "Sallands",
    sea: "Semai",
    seb: "Shempire Senoufo",
    sec: "Sechelt",
    sed: "Sedang",
    see: "Seneca",
    sef: "Cebaara Senoufo",
    seg: "Segeju",
    seh: "Sena",
    sei: "Seri",
    sej: "Sene",
    sek: "Sekani",
    sel: "Selkup",
    sen: "Nanerig\xE9 S\xE9noufo",
    seo: "Suarmin",
    sep: "S\xECc\xECt\xE9 S\xE9noufo",
    seq: "Senara S\xE9noufo",
    ser: "Serrano",
    ses: "Koyraboro Senni Songhai",
    set: "Sentani",
    seu: "Serui-Laut",
    sev: "Nyarafolo Senoufo",
    sew: "Sewa Bay",
    sey: "Secoya",
    sez: "Senthang Chin",
    sfb: "Langue des signes de Belgique Francophone",
    sfe: "Eastern Subanen",
    sfm: "Small Flowery Miao",
    sfs: "South African Sign Language",
    sfw: "Sehwi",
    sga: "Old Irish (to 900)",
    sgb: "Mag-antsi Ayta",
    sgc: "Kipsigis",
    sgd: "Surigaonon",
    sge: "Segai",
    sgg: "Swiss-German Sign Language",
    sgh: "Shughni",
    sgi: "Suga",
    sgj: "Surgujia",
    sgk: "Sangkong",
    sgm: "Singa",
    sgp: "Singpho",
    sgr: "Sangisari",
    sgs: "Samogitian",
    sgt: "Brokpake",
    sgu: "Salas",
    sgw: "Sebat Bet Gurage",
    sgx: "Sierra Leone Sign Language",
    sgy: "Sanglechi",
    sgz: "Sursurunga",
    sha: "Shall-Zwall",
    shb: "Ninam",
    shc: "Sonde",
    shd: "Kundal Shahi",
    she: "Sheko",
    shg: "Shua",
    shh: "Shoshoni",
    shi: "Tachelhit",
    shj: "Shatt",
    shk: "Shilluk",
    shl: "Shendu",
    shm: "Shahrudi",
    shn: "Shan",
    sho: "Shanga",
    shp: "Shipibo-Conibo",
    shq: "Sala",
    shr: "Shi",
    shs: "Shuswap",
    sht: "Shasta",
    shu: "Chadian Arabic",
    shv: "Shehri",
    shw: "Shwai",
    shx: "She",
    shy: "Tachawit",
    shz: "Syenara Senoufo",
    sia: "Akkala Sami",
    sib: "Sebop",
    sid: "Sidamo",
    sie: "Simaa",
    sif: "Siamou",
    sig: "Paasaal",
    sih: "Zire",
    sii: "Shom Peng",
    sij: "Numbami",
    sik: "Sikiana",
    sil: "Tumulung Sisaala",
    sim: "Mende (Papua New Guinea)",
    sin: "Sinhala",
    sip: "Sikkimese",
    siq: "Sonia",
    sir: "Siri",
    sis: "Siuslaw",
    siu: "Sinagen",
    siv: "Sumariup",
    siw: "Siwai",
    six: "Sumau",
    siy: "Sivandi",
    siz: "Siwi",
    sja: "Epena",
    sjb: "Sajau Basap",
    sjd: "Kildin Sami",
    sje: "Pite Sami",
    sjg: "Assangori",
    sjk: "Kemi Sami",
    sjl: "Sajalong",
    sjm: "Mapun",
    sjn: "Sindarin",
    sjo: "Xibe",
    sjp: "Surjapuri",
    sjr: "Siar-Lak",
    sjs: "Senhaja De Srair",
    sjt: "Ter Sami",
    sju: "Ume Sami",
    sjw: "Shawnee",
    ska: "Skagit",
    skb: "Saek",
    skc: "Ma Manda",
    skd: "Southern Sierra Miwok",
    ske: "Seke (Vanuatu)",
    skf: "Sakirabi\xE1",
    skg: "Sakalava Malagasy",
    skh: "Sikule",
    ski: "Sika",
    skj: "Seke (Nepal)",
    skm: "Kutong",
    skn: "Kolibugan Subanon",
    sko: "Seko Tengah",
    skp: "Sekapan",
    skq: "Sininkere",
    skr: "Saraiki",
    sks: "Maia",
    skt: "Sakata",
    sku: "Sakao",
    skv: "Skou",
    skw: "Skepi Creole Dutch",
    skx: "Seko Padang",
    sky: "Sikaiana",
    skz: "Sekar",
    slc: "S\xE1liba",
    sld: "Sissala",
    sle: "Sholaga",
    slf: "Swiss-Italian Sign Language",
    slg: "Selungai Murut",
    slh: "Southern Puget Sound Salish",
    sli: "Lower Silesian",
    slj: "Salum\xE1",
    slk: "Slovak",
    sll: "Salt-Yui",
    slm: "Pangutaran Sama",
    sln: "Salinan",
    slp: "Lamaholot",
    slq: "Salchuq",
    slr: "Salar",
    sls: "Singapore Sign Language",
    slt: "Sila",
    slu: "Selaru",
    slv: "Slovenian",
    slw: "Sialum",
    slx: "Salampasu",
    sly: "Selayar",
    slz: "Ma'ya",
    sma: "Southern Sami",
    smb: "Simbari",
    smc: "Som",
    smd: "Sama",
    sme: "Northern Sami",
    smf: "Auwe",
    smg: "Simbali",
    smh: "Samei",
    smj: "Lule Sami",
    smk: "Bolinao",
    sml: "Central Sama",
    smm: "Musasa",
    smn: "Inari Sami",
    smo: "Samoan",
    smp: "Samaritan",
    smq: "Samo",
    smr: "Simeulue",
    sms: "Skolt Sami",
    smt: "Simte",
    smu: "Somray",
    smv: "Samvedi",
    smw: "Sumbawa",
    smx: "Samba",
    smy: "Semnani",
    smz: "Simeku",
    sna: "Shona",
    snb: "Sebuyau",
    snc: "Sinaugoro",
    snd: "Sindhi",
    sne: "Bau Bidayuh",
    snf: "Noon",
    sng: "Sanga (Democratic Republic of Congo)",
    sni: "Sensi",
    snj: "Riverain Sango",
    snk: "Soninke",
    snl: "Sangil",
    snm: "Southern Ma'di",
    snn: "Siona",
    sno: "Snohomish",
    snp: "Siane",
    snq: "Sangu (Gabon)",
    snr: "Sihan",
    sns: "South West Bay",
    snu: "Senggi",
    snv: "Sa'ban",
    snw: "Selee",
    snx: "Sam",
    sny: "Saniyo-Hiyewe",
    snz: "Sinsauru",
    soa: "Thai Song",
    sob: "Sobei",
    soc: "So (Democratic Republic of Congo)",
    sod: "Songoora",
    soe: "Songomeno",
    sog: "Sogdian",
    soh: "Aka",
    soi: "Sonha",
    soj: "Soi",
    sok: "Sokoro",
    sol: "Solos",
    som: "Somali",
    soo: "Songo",
    sop: "Songe",
    soq: "Kanasi",
    sor: "Somrai",
    sos: "Seeku",
    sot: "Southern Sotho",
    sou: "Southern Thai",
    sov: "Sonsorol",
    sow: "Sowanda",
    sox: "Swo",
    soy: "Miyobe",
    soz: "Temi",
    spa: "Spanish",
    spb: "Sepa (Indonesia)",
    spc: "Sap\xE9",
    spd: "Saep",
    spe: "Sepa (Papua New Guinea)",
    spg: "Sian",
    spi: "Saponi",
    spk: "Sengo",
    spl: "Selepet",
    spm: "Akukem",
    spn: "Sanapan\xE1",
    spo: "Spokane",
    spp: "Supyire Senoufo",
    spq: "Loreto-Ucayali Spanish",
    spr: "Saparua",
    sps: "Saposa",
    spt: "Spiti Bhoti",
    spu: "Sapuan",
    spv: "Sambalpuri",
    spx: "South Picene",
    spy: "Sabaot",
    sqa: "Shama-Sambuga",
    sqh: "Shau",
    sqi: "Albanian",
    sqk: "Albanian Sign Language",
    sqm: "Suma",
    sqn: "Susquehannock",
    sqo: "Sorkhei",
    sqq: "Sou",
    sqr: "Siculo Arabic",
    sqs: "Sri Lankan Sign Language",
    sqt: "Soqotri",
    squ: "Squamish",
    sra: "Saruga",
    srb: "Sora",
    src: "Logudorese Sardinian",
    srd: "Sardinian",
    sre: "Sara",
    srf: "Nafi",
    srg: "Sulod",
    srh: "Sarikoli",
    sri: "Siriano",
    srk: "Serudung Murut",
    srl: "Isirawa",
    srm: "Saramaccan",
    srn: "Sranan Tongo",
    sro: "Campidanese Sardinian",
    srp: "Serbian",
    srq: "Sirion\xF3",
    srr: "Serer",
    srs: "Sarsi",
    srt: "Sauri",
    sru: "Suru\xED",
    srv: "Southern Sorsoganon",
    srw: "Serua",
    srx: "Sirmauri",
    sry: "Sera",
    srz: "Shahmirzadi",
    ssb: "Southern Sama",
    ssc: "Suba-Simbiti",
    ssd: "Siroi",
    sse: "Balangingi",
    ssf: "Thao",
    ssg: "Seimat",
    ssh: "Shihhi Arabic",
    ssi: "Sansi",
    ssj: "Sausi",
    ssk: "Sunam",
    ssl: "Western Sisaala",
    ssm: "Semnam",
    ssn: "Waata",
    sso: "Sissano",
    ssp: "Spanish Sign Language",
    ssq: "So'a",
    ssr: "Swiss-French Sign Language",
    sss: "S\xF4",
    sst: "Sinasina",
    ssu: "Susuami",
    ssv: "Shark Bay",
    ssw: "Swati",
    ssx: "Samberigi",
    ssy: "Saho",
    ssz: "Sengseng",
    sta: "Settla",
    stb: "Northern Subanen",
    std: "Sentinel",
    ste: "Liana-Seti",
    stf: "Seta",
    stg: "Trieng",
    sth: "Shelta",
    sti: "Bulo Stieng",
    stj: "Matya Samo",
    stk: "Arammba",
    stl: "Stellingwerfs",
    stm: "Setaman",
    stn: "Owa",
    sto: "Stoney",
    stp: "Southeastern Tepehuan",
    stq: "Saterfriesisch",
    str: "Straits Salish",
    sts: "Shumashti",
    stt: "Budeh Stieng",
    stu: "Samtao",
    stv: "Silt'e",
    stw: "Satawalese",
    sty: "Siberian Tatar",
    sua: "Sulka",
    sub: "Suku",
    suc: "Western Subanon",
    sue: "Suena",
    sug: "Suganga",
    sui: "Suki",
    suj: "Shubi",
    suk: "Sukuma",
    sun: "Sundanese",
    suq: "Suri",
    sur: "Mwaghavul",
    sus: "Susu",
    sut: "Subtiaba",
    suv: "Puroik",
    suw: "Sumbwa",
    sux: "Sumerian",
    suy: "Suy\xE1",
    suz: "Sunwar",
    sva: "Svan",
    svb: "Ulau-Suain",
    svc: "Vincentian Creole English",
    sve: "Serili",
    svk: "Slovakian Sign Language",
    svm: "Slavomolisano",
    svs: "Savosavo",
    svx: "Skalvian",
    swa: "Swahili (macrolanguage)",
    swb: "Maore Comorian",
    swc: "Congo Swahili",
    swe: "Swedish",
    swf: "Sere",
    swg: "Swabian",
    swh: "Swahili (individual language)",
    swi: "Sui",
    swj: "Sira",
    swk: "Malawi Sena",
    swl: "Swedish Sign Language",
    swm: "Samosa",
    swn: "Sawknah",
    swo: "Shanenawa",
    swp: "Suau",
    swq: "Sharwa",
    swr: "Saweru",
    sws: "Seluwasan",
    swt: "Sawila",
    swu: "Suwawa",
    swv: "Shekhawati",
    sww: "Sowa",
    swx: "Suruah\xE1",
    swy: "Sarua",
    sxb: "Suba",
    sxc: "Sicanian",
    sxe: "Sighu",
    sxg: "Shixing",
    sxk: "Southern Kalapuya",
    sxl: "Selian",
    sxm: "Samre",
    sxn: "Sangir",
    sxo: "Sorothaptic",
    sxr: "Saaroa",
    sxs: "Sasaru",
    sxu: "Upper Saxon",
    sxw: "Saxwe Gbe",
    sya: "Siang",
    syb: "Central Subanen",
    syc: "Classical Syriac",
    syi: "Seki",
    syk: "Sukur",
    syl: "Sylheti",
    sym: "Maya Samo",
    syn: "Senaya",
    syo: "Suoy",
    syr: "Syriac",
    sys: "Sinyar",
    syw: "Kagate",
    syx: "Samay",
    syy: "Al-Sayyid Bedouin Sign Language",
    sza: "Semelai",
    szb: "Ngalum",
    szc: "Semaq Beri",
    szd: "Seru",
    sze: "Seze",
    szg: "Sengele",
    szl: "Silesian",
    szn: "Sula",
    szp: "Suabo",
    szs: "Solomon Islands Sign Language",
    szv: "Isu (Fako Division)",
    szw: "Sawai",
    taa: "Lower Tanana",
    tab: "Tabassaran",
    tac: "Lowland Tarahumara",
    tad: "Tause",
    tae: "Tariana",
    taf: "Tapirap\xE9",
    tag: "Tagoi",
    tah: "Tahitian",
    taj: "Eastern Tamang",
    tak: "Tala",
    tal: "Tal",
    tam: "Tamil",
    tan: "Tangale",
    tao: "Yami",
    tap: "Taabwa",
    taq: "Tamasheq",
    tar: "Central Tarahumara",
    tas: "Tay Boi",
    tat: "Tatar",
    tau: "Upper Tanana",
    tav: "Tatuyo",
    taw: "Tai",
    tax: "Tamki",
    tay: "Atayal",
    taz: "Tocho",
    tba: "Aikan\xE3",
    tbb: "Tapeba",
    tbc: "Takia",
    tbd: "Kaki Ae",
    tbe: "Tanimbili",
    tbf: "Mandara",
    tbg: "North Tairora",
    tbh: "Thurawal",
    tbi: "Gaam",
    tbj: "Tiang",
    tbk: "Calamian Tagbanwa",
    tbl: "Tboli",
    tbm: "Tagbu",
    tbn: "Barro Negro Tunebo",
    tbo: "Tawala",
    tbp: "Taworta",
    tbr: "Tumtum",
    tbs: "Tanguat",
    tbt: "Tembo (Kitembo)",
    tbu: "Tubar",
    tbv: "Tobo",
    tbw: "Tagbanwa",
    tbx: "Kapin",
    tby: "Tabaru",
    tbz: "Ditammari",
    tca: "Ticuna",
    tcb: "Tanacross",
    tcc: "Datooga",
    tcd: "Tafi",
    tce: "Southern Tutchone",
    tcf: "Malinaltepec Me'phaa",
    tcg: "Tamagario",
    tch: "Turks And Caicos Creole English",
    tci: "W\xE1ra",
    tck: "Tchitchege",
    tcl: "Taman (Myanmar)",
    tcm: "Tanahmerah",
    tcn: "Tichurong",
    tco: "Taungyo",
    tcp: "Tawr Chin",
    tcq: "Kaiy",
    tcs: "Torres Strait Creole",
    tct: "T'en",
    tcu: "Southeastern Tarahumara",
    tcw: "Tecpatl\xE1n Totonac",
    tcx: "Toda",
    tcy: "Tulu",
    tcz: "Thado Chin",
    tda: "Tagdal",
    tdb: "Panchpargania",
    tdc: "Ember\xE1-Tad\xF3",
    tdd: "Tai N\xFCa",
    tde: "Tiranige Diga Dogon",
    tdf: "Talieng",
    tdg: "Western Tamang",
    tdh: "Thulung",
    tdi: "Tomadino",
    tdj: "Tajio",
    tdk: "Tambas",
    tdl: "Sur",
    tdm: "Taruma",
    tdn: "Tondano",
    tdo: "Teme",
    tdq: "Tita",
    tdr: "Todrah",
    tds: "Doutai",
    tdt: "Tetun Dili",
    tdv: "Toro",
    tdx: "Tandroy-Mahafaly Malagasy",
    tdy: "Tadyawan",
    tea: "Temiar",
    teb: "Tetete",
    tec: "Terik",
    ted: "Tepo Krumen",
    tee: "Huehuetla Tepehua",
    tef: "Teressa",
    teg: "Teke-Tege",
    teh: "Tehuelche",
    tei: "Torricelli",
    tek: "Ibali Teke",
    tel: "Telugu",
    tem: "Timne",
    ten: "Tama (Colombia)",
    teo: "Teso",
    tep: "Tepecano",
    teq: "Temein",
    ter: "Tereno",
    tes: "Tengger",
    tet: "Tetum",
    teu: "Soo",
    tev: "Teor",
    tew: "Tewa (USA)",
    tex: "Tennet",
    tey: "Tulishi",
    tfi: "Tofin Gbe",
    tfn: "Tanaina",
    tfo: "Tefaro",
    tfr: "Teribe",
    tft: "Ternate",
    tga: "Sagalla",
    tgb: "Tobilung",
    tgc: "Tigak",
    tgd: "Ciwogai",
    tge: "Eastern Gorkha Tamang",
    tgf: "Chalikha",
    tgh: "Tobagonian Creole English",
    tgi: "Lawunuia",
    tgj: "Tagin",
    tgk: "Tajik",
    tgl: "Tagalog",
    tgn: "Tandaganon",
    tgo: "Sudest",
    tgp: "Tangoa",
    tgq: "Tring",
    tgr: "Tareng",
    tgs: "Nume",
    tgt: "Central Tagbanwa",
    tgu: "Tanggu",
    tgv: "Tingui-Boto",
    tgw: "Tagwana Senoufo",
    tgx: "Tagish",
    tgy: "Togoyo",
    tgz: "Tagalaka",
    tha: "Thai",
    thd: "Thayore",
    the: "Chitwania Tharu",
    thf: "Thangmi",
    thh: "Northern Tarahumara",
    thi: "Tai Long",
    thk: "Tharaka",
    thl: "Dangaura Tharu",
    thm: "Aheu",
    thn: "Thachanadan",
    thp: "Thompson",
    thq: "Kochila Tharu",
    thr: "Rana Tharu",
    ths: "Thakali",
    tht: "Tahltan",
    thu: "Thuri",
    thv: "Tahaggart Tamahaq",
    thw: "Thudam",
    thy: "Tha",
    thz: "Tayart Tamajeq",
    tia: "Tidikelt Tamazight",
    tic: "Tira",
    tif: "Tifal",
    tig: "Tigre",
    tih: "Timugon Murut",
    tii: "Tiene",
    tij: "Tilung",
    tik: "Tikar",
    til: "Tillamook",
    tim: "Timbe",
    tin: "Tindi",
    tio: "Teop",
    tip: "Trimuris",
    tiq: "Ti\xE9fo",
    tir: "Tigrinya",
    tis: "Masadiit Itneg",
    tit: "Tinigua",
    tiu: "Adasen",
    tiv: "Tiv",
    tiw: "Tiwi",
    tix: "Southern Tiwa",
    tiy: "Tiruray",
    tiz: "Tai Hongjin",
    tja: "Tajuasohn",
    tjg: "Tunjung",
    tji: "Northern Tujia",
    tjl: "Tai Laing",
    tjm: "Timucua",
    tjn: "Tonjon",
    tjo: "Temacine Tamazight",
    tjs: "Southern Tujia",
    tju: "Tjurruru",
    tjw: "Djabwurrung",
    tka: "Truk\xE1",
    tkb: "Buksa",
    tkd: "Tukudede",
    tke: "Takwane",
    tkf: "Tukumanf\xE9d",
    tkg: "Tesaka Malagasy",
    tkl: "Tokelau",
    tkm: "Takelma",
    tkn: "Toku-No-Shima",
    tkp: "Tikopia",
    tkq: "Tee",
    tkr: "Tsakhur",
    tks: "Takestani",
    tkt: "Kathoriya Tharu",
    tku: "Upper Necaxa Totonac",
    tkv: "Mur Pano",
    tkw: "Teanu",
    tkx: "Tangko",
    tkz: "Takua",
    tla: "Southwestern Tepehuan",
    tlb: "Tobelo",
    tlc: "Yecuatla Totonac",
    tld: "Talaud",
    tlf: "Telefol",
    tlg: "Tofanma",
    tlh: "Klingon",
    tli: "Tlingit",
    tlj: "Talinga-Bwisi",
    tlk: "Taloki",
    tll: "Tetela",
    tlm: "Tolomako",
    tln: "Talondo'",
    tlo: "Talodi",
    tlp: "Filomena Mata-Coahuitl\xE1n Totonac",
    tlq: "Tai Loi",
    tlr: "Talise",
    tls: "Tambotalo",
    tlt: "Sou Nama",
    tlu: "Tulehu",
    tlv: "Taliabu",
    tlx: "Khehek",
    tly: "Talysh",
    tma: "Tama (Chad)",
    tmb: "Katbol",
    tmc: "Tumak",
    tmd: "Haruai",
    tme: "Trememb\xE9",
    tmf: "Toba-Maskoy",
    tmg: "Ternate\xF1o",
    tmh: "Tamashek",
    tmi: "Tutuba",
    tmj: "Samarokena",
    tmk: "Northwestern Tamang",
    tml: "Tamnim Citak",
    tmm: "Tai Thanh",
    tmn: "Taman (Indonesia)",
    tmo: "Temoq",
    tmq: "Tumleo",
    tmr: "Jewish Babylonian Aramaic (ca. 200-1200 CE)",
    tms: "Tima",
    tmt: "Tasmate",
    tmu: "Iau",
    tmv: "Tembo (Motembo)",
    tmw: "Temuan",
    tmy: "Tami",
    tmz: "Tamanaku",
    tna: "Tacana",
    tnb: "Western Tunebo",
    tnc: "Tanimuca-Retuar\xE3",
    tnd: "Angosturas Tunebo",
    tng: "Tobanga",
    tnh: "Maiani",
    tni: "Tandia",
    tnk: "Kwamera",
    tnl: "Lenakel",
    tnm: "Tabla",
    tnn: "North Tanna",
    tno: "Toromono",
    tnp: "Whitesands",
    tnq: "Taino",
    tnr: "M\xE9nik",
    tns: "Tenis",
    tnt: "Tontemboan",
    tnu: "Tay Khang",
    tnv: "Tangchangya",
    tnw: "Tonsawang",
    tnx: "Tanema",
    tny: "Tongwe",
    tnz: "Ten'edn",
    tob: "Toba",
    toc: "Coyutla Totonac",
    tod: "Toma",
    tof: "Gizrra",
    tog: "Tonga (Nyasa)",
    toh: "Gitonga",
    toi: "Tonga (Zambia)",
    toj: "Tojolabal",
    tol: "Tolowa",
    tom: "Tombulu",
    ton: "Tonga (Tonga Islands)",
    too: "Xicotepec De Ju\xE1rez Totonac",
    top: "Papantla Totonac",
    toq: "Toposa",
    tor: "Togbo-Vara Banda",
    tos: "Highland Totonac",
    tou: "Tho",
    tov: "Upper Taromi",
    tow: "Jemez",
    tox: "Tobian",
    toy: "Topoiyo",
    toz: "To",
    tpa: "Taupota",
    tpc: "Azoy\xFA Me'phaa",
    tpe: "Tippera",
    tpf: "Tarpia",
    tpg: "Kula",
    tpi: "Tok Pisin",
    tpj: "Tapiet\xE9",
    tpk: "Tupinikin",
    tpl: "Tlacoapa Me'phaa",
    tpm: "Tampulma",
    tpn: "Tupinamb\xE1",
    tpo: "Tai Pao",
    tpp: "Pisaflores Tepehua",
    tpq: "Tukpa",
    tpr: "Tupar\xED",
    tpt: "Tlachichilco Tepehua",
    tpu: "Tampuan",
    tpv: "Tanapag",
    tpw: "Tup\xED",
    tpx: "Acatepec Me'phaa",
    tpy: "Trumai",
    tpz: "Tinputz",
    tqb: "Temb\xE9",
    tql: "Lehali",
    tqm: "Turumsa",
    tqn: "Tenino",
    tqo: "Toaripi",
    tqp: "Tomoip",
    tqq: "Tunni",
    tqr: "Torona",
    tqt: "Western Totonac",
    tqu: "Touo",
    tqw: "Tonkawa",
    tra: "Tirahi",
    trb: "Terebu",
    trc: "Copala Triqui",
    trd: "Turi",
    tre: "East Tarangan",
    trf: "Trinidadian Creole English",
    trg: "Lish\xE1n Did\xE1n",
    trh: "Turaka",
    tri: "Tri\xF3",
    trj: "Toram",
    trl: "Traveller Scottish",
    trm: "Tregami",
    trn: "Trinitario",
    tro: "Tarao Naga",
    trp: "Kok Borok",
    trq: "San Mart\xEDn Itunyoso Triqui",
    trr: "Taushiro",
    trs: "Chicahuaxtla Triqui",
    trt: "Tunggare",
    tru: "Turoyo",
    trv: "Taroko",
    trw: "Torwali",
    trx: "Tringgus-Sembaan Bidayuh",
    try: "Turung",
    trz: "Tor\xE1",
    tsa: "Tsaangi",
    tsb: "Tsamai",
    tsc: "Tswa",
    tsd: "Tsakonian",
    tse: "Tunisian Sign Language",
    tsg: "Tausug",
    tsh: "Tsuvan",
    tsi: "Tsimshian",
    tsj: "Tshangla",
    tsk: "Tseku",
    tsl: "Ts'\xFCn-Lao",
    tsm: "Turkish Sign Language",
    tsn: "Tswana",
    tso: "Tsonga",
    tsp: "Northern Toussian",
    tsq: "Thai Sign Language",
    tsr: "Akei",
    tss: "Taiwan Sign Language",
    tst: "Tondi Songway Kiini",
    tsu: "Tsou",
    tsv: "Tsogo",
    tsw: "Tsishingini",
    tsx: "Mubami",
    tsy: "Tebul Sign Language",
    tsz: "Purepecha",
    tta: "Tutelo",
    ttb: "Gaa",
    ttc: "Tektiteko",
    ttd: "Tauade",
    tte: "Bwanabwana",
    ttf: "Tuotomb",
    ttg: "Tutong",
    tth: "Upper Ta'oih",
    tti: "Tobati",
    ttj: "Tooro",
    ttk: "Totoro",
    ttl: "Totela",
    ttm: "Northern Tutchone",
    ttn: "Towei",
    tto: "Lower Ta'oih",
    ttp: "Tombelala",
    ttq: "Tawallammat Tamajaq",
    ttr: "Tera",
    tts: "Northeastern Thai",
    ttt: "Muslim Tat",
    ttu: "Torau",
    ttv: "Titan",
    ttw: "Long Wat",
    tty: "Sikaritai",
    ttz: "Tsum",
    tua: "Wiarumus",
    tub: "T\xFCbatulabal",
    tuc: "Mutu",
    tud: "Tux\xE1",
    tue: "Tuyuca",
    tuf: "Central Tunebo",
    tug: "Tunia",
    tuh: "Taulil",
    tui: "Tupuri",
    tuj: "Tugutil",
    tuk: "Turkmen",
    tul: "Tula",
    tum: "Tumbuka",
    tun: "Tunica",
    tuo: "Tucano",
    tuq: "Tedaga",
    tur: "Turkish",
    tus: "Tuscarora",
    tuu: "Tututni",
    tuv: "Turkana",
    tux: "Tuxin\xE1wa",
    tuy: "Tugen",
    tuz: "Turka",
    tva: "Vaghua",
    tvd: "Tsuvadi",
    tve: "Te'un",
    tvk: "Southeast Ambrym",
    tvl: "Tuvalu",
    tvm: "Tela-Masbuar",
    tvn: "Tavoyan",
    tvo: "Tidore",
    tvs: "Taveta",
    tvt: "Tutsa Naga",
    tvu: "Tunen",
    tvw: "Sedoa",
    tvy: "Timor Pidgin",
    twa: "Twana",
    twb: "Western Tawbuid",
    twc: "Teshenawa",
    twd: "Twents",
    twe: "Tewa (Indonesia)",
    twf: "Northern Tiwa",
    twg: "Tereweng",
    twh: "Tai D\xF3n",
    twi: "Twi",
    twl: "Tawara",
    twm: "Tawang Monpa",
    twn: "Twendi",
    two: "Tswapong",
    twp: "Ere",
    twq: "Tasawaq",
    twr: "Southwestern Tarahumara",
    twt: "Turiw\xE1ra",
    twu: "Termanu",
    tww: "Tuwari",
    twx: "Tewe",
    twy: "Tawoyan",
    txa: "Tombonuo",
    txb: "Tokharian B",
    txc: "Tsetsaut",
    txe: "Totoli",
    txg: "Tangut",
    txh: "Thracian",
    txi: "Ikpeng",
    txj: "Tarjumo",
    txm: "Tomini",
    txn: "West Tarangan",
    txo: "Toto",
    txq: "Tii",
    txr: "Tartessian",
    txs: "Tonsea",
    txt: "Citak",
    txu: "Kayap\xF3",
    txx: "Tatana",
    txy: "Tanosy Malagasy",
    tya: "Tauya",
    tye: "Kyanga",
    tyh: "O'du",
    tyi: "Teke-Tsaayi",
    tyj: "Tai Do",
    tyl: "Thu Lao",
    tyn: "Kombai",
    typ: "Thaypan",
    tyr: "Tai Daeng",
    tys: "T\xE0y Sa Pa",
    tyt: "T\xE0y Tac",
    tyu: "Kua",
    tyv: "Tuvinian",
    tyx: "Teke-Tyee",
    tyz: "T\xE0y",
    tza: "Tanzanian Sign Language",
    tzh: "Tzeltal",
    tzj: "Tz'utujil",
    tzl: "Talossan",
    tzm: "Central Atlas Tamazight",
    tzn: "Tugun",
    tzo: "Tzotzil",
    tzx: "Tabriak",
    uam: "Uamu\xE9",
    uan: "Kuan",
    uar: "Tairuma",
    uba: "Ubang",
    ubi: "Ubi",
    ubl: "Buhi'non Bikol",
    ubr: "Ubir",
    ubu: "Umbu-Ungu",
    uby: "Ubykh",
    uda: "Uda",
    ude: "Udihe",
    udg: "Muduga",
    udi: "Udi",
    udj: "Ujir",
    udl: "Wuzlam",
    udm: "Udmurt",
    udu: "Uduk",
    ues: "Kioko",
    ufi: "Ufim",
    uga: "Ugaritic",
    ugb: "Kuku-Ugbanh",
    uge: "Ughele",
    ugn: "Ugandan Sign Language",
    ugo: "Ugong",
    ugy: "Uruguayan Sign Language",
    uha: "Uhami",
    uhn: "Damal",
    uig: "Uighur",
    uis: "Uisai",
    uiv: "Iyive",
    uji: "Tanjijili",
    uka: "Kaburi",
    ukg: "Ukuriguma",
    ukh: "Ukhwejo",
    ukk: "Muak Sa-aak",
    ukl: "Ukrainian Sign Language",
    ukp: "Ukpe-Bayobiri",
    ukq: "Ukwa",
    ukr: "Ukrainian",
    uks: "Urub\xFA-Kaapor Sign Language",
    uku: "Ukue",
    ukw: "Ukwuani-Aboh-Ndoni",
    uky: "Kuuk-Yak",
    ula: "Fungwa",
    ulb: "Ulukwumi",
    ulc: "Ulch",
    ule: "Lule",
    ulf: "Usku",
    uli: "Ulithian",
    ulk: "Meriam",
    ull: "Ullatan",
    ulm: "Ulumanda'",
    uln: "Unserdeutsch",
    ulu: "Uma' Lung",
    ulw: "Ulwa",
    uma: "Umatilla",
    umb: "Umbundu",
    umc: "Marrucinian",
    umd: "Umbindhamu",
    umg: "Umbuygamu",
    umi: "Ukit",
    umm: "Umon",
    umn: "Makyan Naga",
    umo: "Umot\xEDna",
    ump: "Umpila",
    umr: "Umbugarla",
    ums: "Pendau",
    umu: "Munsee",
    una: "North Watut",
    und: "Undetermined",
    une: "Uneme",
    ung: "Ngarinyin",
    unk: "Enawen\xE9-Naw\xE9",
    unm: "Unami",
    unn: "Kurnai",
    unr: "Mundari",
    unu: "Unubahe",
    unx: "Munda",
    unz: "Unde Kaili",
    upi: "Umeda",
    upv: "Uripiv-Wala-Rano-Atchin",
    ura: "Urarina",
    urb: "Urub\xFA-Kaapor",
    urc: "Urningangg",
    urd: "Urdu",
    ure: "Uru",
    urf: "Uradhi",
    urg: "Urigina",
    urh: "Urhobo",
    uri: "Urim",
    urk: "Urak Lawoi'",
    url: "Urali",
    urm: "Urapmin",
    urn: "Uruangnirin",
    uro: "Ura (Papua New Guinea)",
    urp: "Uru-Pa-In",
    urr: "Lehalurup",
    urt: "Urat",
    uru: "Urumi",
    urv: "Uruava",
    urw: "Sop",
    urx: "Urimo",
    ury: "Orya",
    urz: "Uru-Eu-Wau-Wau",
    usa: "Usarufa",
    ush: "Ushojo",
    usi: "Usui",
    usk: "Usaghade",
    usp: "Uspanteco",
    usu: "Uya",
    uta: "Otank",
    ute: "Ute-Southern Paiute",
    utp: "Amba (Solomon Islands)",
    utr: "Etulo",
    utu: "Utu",
    uum: "Urum",
    uun: "Kulon-Pazeh",
    uur: "Ura (Vanuatu)",
    uuu: "U",
    uve: "West Uvean",
    uvh: "Uri",
    uvl: "Lote",
    uwa: "Kuku-Uwanh",
    uya: "Doko-Uyanga",
    uzb: "Uzbek",
    uzn: "Northern Uzbek",
    uzs: "Southern Uzbek",
    vaa: "Vaagri Booli",
    vae: "Vale",
    vaf: "Vafsi",
    vag: "Vagla",
    vah: "Varhadi-Nagpuri",
    vai: "Vai",
    vaj: "Sekele",
    val: "Vehes",
    vam: "Vanimo",
    van: "Valman",
    vao: "Vao",
    vap: "Vaiphei",
    var: "Huarijio",
    vas: "Vasavi",
    vau: "Vanuma",
    vav: "Varli",
    vay: "Wayu",
    vbb: "Southeast Babar",
    vbk: "Southwestern Bontok",
    vec: "Venetian",
    ved: "Veddah",
    vel: "Veluws",
    vem: "Vemgo-Mabas",
    ven: "Venda",
    veo: "Venture\xF1o",
    vep: "Veps",
    ver: "Mom Jango",
    vgr: "Vaghri",
    vgt: "Vlaamse Gebarentaal",
    vic: "Virgin Islands Creole English",
    vid: "Vidunda",
    vie: "Vietnamese",
    vif: "Vili",
    vig: "Viemo",
    vil: "Vilela",
    vin: "Vinza",
    vis: "Vishavan",
    vit: "Viti",
    viv: "Iduna",
    vka: "Kariyarra",
    vki: "Ija-Zuba",
    vkj: "Kujarge",
    vkk: "Kaur",
    vkl: "Kulisusu",
    vkm: "Kamakan",
    vko: "Kodeoha",
    vkp: "Korlai Creole Portuguese",
    vkt: "Tenggarong Kutai Malay",
    vku: "Kurrama",
    vlp: "Valpei",
    vls: "Vlaams",
    vma: "Martuyhunira",
    vmb: "Barbaram",
    vmc: "Juxtlahuaca Mixtec",
    vmd: "Mudu Koraga",
    vme: "East Masela",
    vmf: "Mainfr\xE4nkisch",
    vmg: "Lungalunga",
    vmh: "Maraghei",
    vmi: "Miwa",
    vmj: "Ixtayutla Mixtec",
    vmk: "Makhuwa-Shirima",
    vml: "Malgana",
    vmm: "Mitlatongo Mixtec",
    vmp: "Soyaltepec Mazatec",
    vmq: "Soyaltepec Mixtec",
    vmr: "Marenje",
    vms: "Moksela",
    vmu: "Muluridyi",
    vmv: "Valley Maidu",
    vmw: "Makhuwa",
    vmx: "Tamazola Mixtec",
    vmy: "Ayautla Mazatec",
    vmz: "Mazatl\xE1n Mazatec",
    vnk: "Vano",
    vnm: "Vinmavis",
    vnp: "Vunapu",
    vol: "Volap\xFCk",
    vor: "Voro",
    vot: "Votic",
    vra: "Vera'a",
    vro: "V\xF5ro",
    vrs: "Varisi",
    vrt: "Burmbar",
    vsi: "Moldova Sign Language",
    vsl: "Venezuelan Sign Language",
    vsv: "Valencian Sign Language",
    vto: "Vitou",
    vum: "Vumbu",
    vun: "Vunjo",
    vut: "Vute",
    vwa: "Awa (China)",
    waa: "Walla Walla",
    wab: "Wab",
    wac: "Wasco-Wishram",
    wad: "Wandamen",
    wae: "Walser",
    waf: "Wakon\xE1",
    wag: "Wa'ema",
    wah: "Watubela",
    wai: "Wares",
    waj: "Waffa",
    wal: "Wolaytta",
    wam: "Wampanoag",
    wan: "Wan",
    wao: "Wappo",
    wap: "Wapishana",
    waq: "Wageman",
    war: "Waray (Philippines)",
    was: "Washo",
    wat: "Kaninuwa",
    wau: "Waur\xE1",
    wav: "Waka",
    waw: "Waiwai",
    wax: "Watam",
    way: "Wayana",
    waz: "Wampur",
    wba: "Warao",
    wbb: "Wabo",
    wbe: "Waritai",
    wbf: "Wara",
    wbh: "Wanda",
    wbi: "Vwanji",
    wbj: "Alagwa",
    wbk: "Waigali",
    wbl: "Wakhi",
    wbm: "Wa",
    wbp: "Warlpiri",
    wbq: "Waddar",
    wbr: "Wagdi",
    wbs: "West Bengal Sign Language",
    wbt: "Wanman",
    wbv: "Wajarri",
    wbw: "Woi",
    wca: "Yanom\xE1mi",
    wci: "Waci Gbe",
    wdd: "Wandji",
    wdg: "Wadaginam",
    wdj: "Wadjiginy",
    wdk: "Wadikali",
    wdu: "Wadjigu",
    wdy: "Wadjabangayi",
    wea: "Wewaw",
    wec: "W\xE8 Western",
    wed: "Wedau",
    weg: "Wergaia",
    weh: "Weh",
    wei: "Kiunum",
    wem: "Weme Gbe",
    weo: "Wemale",
    wep: "Westphalien",
    wer: "Weri",
    wes: "Cameroon Pidgin",
    wet: "Perai",
    weu: "Rawngtu Chin",
    wew: "Wejewa",
    wfg: "Yafi",
    wga: "Wagaya",
    wgb: "Wagawaga",
    wgg: "Wangganguru",
    wgi: "Wahgi",
    wgo: "Waigeo",
    wgu: "Wirangu",
    wgy: "Warrgamay",
    wha: "Sou Upaa",
    whg: "North Wahgi",
    whk: "Wahau Kenyah",
    whu: "Wahau Kayan",
    wib: "Southern Toussian",
    wic: "Wichita",
    wie: "Wik-Epa",
    wif: "Wik-Keyangan",
    wig: "Wik-Ngathana",
    wih: "Wik-Me'anha",
    wii: "Minidien",
    wij: "Wik-Iiyanh",
    wik: "Wikalkan",
    wil: "Wilawila",
    wim: "Wik-Mungkan",
    win: "Ho-Chunk",
    wir: "Wiraf\xE9d",
    wiu: "Wiru",
    wiv: "Vitu",
    wiy: "Wiyot",
    wja: "Waja",
    wji: "Warji",
    wka: "Kw'adza",
    wkb: "Kumbaran",
    wkd: "Wakde",
    wkl: "Kalanadi",
    wku: "Kunduvadi",
    wkw: "Wakawaka",
    wky: "Wangkayutyuru",
    wla: "Walio",
    wlc: "Mwali Comorian",
    wle: "Wolane",
    wlg: "Kunbarlang",
    wli: "Waioli",
    wlk: "Wailaki",
    wll: "Wali (Sudan)",
    wlm: "Middle Welsh",
    wln: "Walloon",
    wlo: "Wolio",
    wlr: "Wailapa",
    wls: "Wallisian",
    wlu: "Wuliwuli",
    wlv: "Wich\xED Lhamt\xE9s Vejoz",
    wlw: "Walak",
    wlx: "Wali (Ghana)",
    wly: "Waling",
    wma: "Mawa (Nigeria)",
    wmb: "Wambaya",
    wmc: "Wamas",
    wmd: "Mamaind\xE9",
    wme: "Wambule",
    wmh: "Waima'a",
    wmi: "Wamin",
    wmm: "Maiwa (Indonesia)",
    wmn: "Waamwang",
    wmo: "Wom (Papua New Guinea)",
    wms: "Wambon",
    wmt: "Walmajarri",
    wmw: "Mwani",
    wmx: "Womo",
    wnb: "Wanambre",
    wnc: "Wantoat",
    wnd: "Wandarang",
    wne: "Waneci",
    wng: "Wanggom",
    wni: "Ndzwani Comorian",
    wnk: "Wanukaka",
    wnm: "Wanggamala",
    wnn: "Wunumara",
    wno: "Wano",
    wnp: "Wanap",
    wnu: "Usan",
    wnw: "Wintu",
    wny: "Wanyi",
    woa: "Tyaraity",
    wob: "W\xE8 Northern",
    woc: "Wogeo",
    wod: "Wolani",
    woe: "Woleaian",
    wof: "Gambian Wolof",
    wog: "Wogamusin",
    woi: "Kamang",
    wok: "Longto",
    wol: "Wolof",
    wom: "Wom (Nigeria)",
    won: "Wongo",
    woo: "Manombai",
    wor: "Woria",
    wos: "Hanga Hundi",
    wow: "Wawonii",
    woy: "Weyto",
    wpc: "Maco",
    wra: "Warapu",
    wrb: "Warluwara",
    wrd: "Warduji",
    wrg: "Warungu",
    wrh: "Wiradhuri",
    wri: "Wariyangga",
    wrk: "Garrwa",
    wrl: "Warlmanpa",
    wrm: "Warumungu",
    wrn: "Warnang",
    wro: "Worrorra",
    wrp: "Waropen",
    wrr: "Wardaman",
    wrs: "Waris",
    wru: "Waru",
    wrv: "Waruna",
    wrw: "Gugu Warra",
    wrx: "Wae Rana",
    wry: "Merwari",
    wrz: "Waray (Australia)",
    wsa: "Warembori",
    wsg: "Adilabad Gondi",
    wsi: "Wusi",
    wsk: "Waskia",
    wsr: "Owenia",
    wss: "Wasa",
    wsu: "Wasu",
    wsv: "Wotapuri-Katarqalai",
    wtf: "Watiwa",
    wth: "Wathawurrung",
    wti: "Berta",
    wtk: "Watakataui",
    wtm: "Mewati",
    wtw: "Wotu",
    wua: "Wikngenchera",
    wub: "Wunambal",
    wud: "Wudu",
    wuh: "Wutunhua",
    wul: "Silimo",
    wum: "Wumbvu",
    wun: "Bungu",
    wur: "Wurrugu",
    wut: "Wutung",
    wuu: "Wu Chinese",
    wuv: "Wuvulu-Aua",
    wux: "Wulna",
    wuy: "Wauyai",
    wwa: "Waama",
    wwb: "Wakabunga",
    wwo: "Wetamut",
    wwr: "Warrwa",
    www: "Wawa",
    wxa: "Waxianghua",
    wxw: "Wardandi",
    wya: "Wyandot",
    wyb: "Wangaaybuwan-Ngiyambaa",
    wyi: "Woiwurrung",
    wym: "Wymysorys",
    wyr: "Wayor\xF3",
    wyy: "Western Fijian",
    xaa: "Andalusian Arabic",
    xab: "Sambe",
    xac: "Kachari",
    xad: "Adai",
    xae: "Aequian",
    xag: "Aghwan",
    xai: "Kaimb\xE9",
    xaj: "Ararandew\xE1ra",
    xak: "M\xE1ku",
    xal: "Kalmyk",
    xam: "/Xam",
    xan: "Xamtanga",
    xao: "Khao",
    xap: "Apalachee",
    xaq: "Aquitanian",
    xar: "Karami",
    xas: "Kamas",
    xat: "Katawixi",
    xau: "Kauwera",
    xav: "Xav\xE1nte",
    xaw: "Kawaiisu",
    xay: "Kayan Mahakam",
    xbb: "Lower Burdekin",
    xbc: "Bactrian",
    xbd: "Bindal",
    xbe: "Bigambal",
    xbg: "Bunganditj",
    xbi: "Kombio",
    xbj: "Birrpayi",
    xbm: "Middle Breton",
    xbn: "Kenaboi",
    xbo: "Bolgarian",
    xbp: "Bibbulman",
    xbr: "Kambera",
    xbw: "Kambiw\xE1",
    xby: "Batyala",
    xcb: "Cumbric",
    xcc: "Camunic",
    xce: "Celtiberian",
    xcg: "Cisalpine Gaulish",
    xch: "Chemakum",
    xcl: "Classical Armenian",
    xcm: "Comecrudo",
    xcn: "Cotoname",
    xco: "Chorasmian",
    xcr: "Carian",
    xct: "Classical Tibetan",
    xcu: "Curonian",
    xcv: "Chuvantsy",
    xcw: "Coahuilteco",
    xcy: "Cayuse",
    xda: "Darkinyung",
    xdc: "Dacian",
    xdk: "Dharuk",
    xdm: "Edomite",
    xdo: "Kwandu",
    xdy: "Malayic Dayak",
    xeb: "Eblan",
    xed: "Hdi",
    xeg: "//Xegwi",
    xel: "Kelo",
    xem: "Kembayan",
    xep: "Epi-Olmec",
    xer: "Xer\xE9nte",
    xes: "Kesawai",
    xet: "Xet\xE1",
    xeu: "Keoru-Ahia",
    xfa: "Faliscan",
    xga: "Galatian",
    xgb: "Gbin",
    xgd: "Gudang",
    xgf: "Gabrielino-Fernande\xF1o",
    xgg: "Goreng",
    xgi: "Garingbal",
    xgl: "Galindan",
    xgm: "Dharumbal",
    xgr: "Garza",
    xgu: "Unggumi",
    xgw: "Guwa",
    xha: "Harami",
    xhc: "Hunnic",
    xhd: "Hadrami",
    xhe: "Khetrani",
    xho: "Xhosa",
    xhr: "Hernican",
    xht: "Hattic",
    xhu: "Hurrian",
    xhv: "Khua",
    xib: "Iberian",
    xii: "Xiri",
    xil: "Illyrian",
    xin: "Xinca",
    xir: "Xiri\xE2na",
    xis: "Kisan",
    xiv: "Indus Valley Language",
    xiy: "Xipaya",
    xjb: "Minjungbal",
    xjt: "Jaitmatang",
    xka: "Kalkoti",
    xkb: "Northern Nago",
    xkc: "Kho'ini",
    xkd: "Mendalam Kayan",
    xke: "Kereho",
    xkf: "Khengkha",
    xkg: "Kagoro",
    xki: "Kenyan Sign Language",
    xkj: "Kajali",
    xkk: "Kaco'",
    xkl: "Mainstream Kenyah",
    xkn: "Kayan River Kayan",
    xko: "Kiorr",
    xkp: "Kabatei",
    xkq: "Koroni",
    xkr: "Xakriab\xE1",
    xks: "Kumbewaha",
    xkt: "Kantosi",
    xku: "Kaamba",
    xkv: "Kgalagadi",
    xkw: "Kembra",
    xkx: "Karore",
    xky: "Uma' Lasan",
    xkz: "Kurtokha",
    xla: "Kamula",
    xlb: "Loup B",
    xlc: "Lycian",
    xld: "Lydian",
    xle: "Lemnian",
    xlg: "Ligurian (Ancient)",
    xli: "Liburnian",
    xln: "Alanic",
    xlo: "Loup A",
    xlp: "Lepontic",
    xls: "Lusitanian",
    xlu: "Cuneiform Luwian",
    xly: "Elymian",
    xma: "Mushungulu",
    xmb: "Mbonga",
    xmc: "Makhuwa-Marrevone",
    xmd: "Mbudum",
    xme: "Median",
    xmf: "Mingrelian",
    xmg: "Mengaka",
    xmh: "Kuku-Muminh",
    xmj: "Majera",
    xmk: "Ancient Macedonian",
    xml: "Malaysian Sign Language",
    xmm: "Manado Malay",
    xmn: "Manichaean Middle Persian",
    xmo: "Morerebi",
    xmp: "Kuku-Mu'inh",
    xmq: "Kuku-Mangk",
    xmr: "Meroitic",
    xms: "Moroccan Sign Language",
    xmt: "Matbat",
    xmu: "Kamu",
    xmv: "Antankarana Malagasy",
    xmw: "Tsimihety Malagasy",
    xmx: "Maden",
    xmy: "Mayaguduna",
    xmz: "Mori Bawah",
    xna: "Ancient North Arabian",
    xnb: "Kanakanabu",
    xng: "Middle Mongolian",
    xnh: "Kuanhua",
    xni: "Ngarigu",
    xnk: "Nganakarti",
    xnn: "Northern Kankanay",
    xno: "Anglo-Norman",
    xnr: "Kangri",
    xns: "Kanashi",
    xnt: "Narragansett",
    xnu: "Nukunul",
    xny: "Nyiyaparli",
    xnz: "Kenzi",
    xoc: "O'chi'chi'",
    xod: "Kokoda",
    xog: "Soga",
    xoi: "Kominimung",
    xok: "Xokleng",
    xom: "Komo (Sudan)",
    xon: "Konkomba",
    xoo: "Xukur\xFA",
    xop: "Kopar",
    xor: "Korubo",
    xow: "Kowaki",
    xpa: "Pirriya",
    xpc: "Pecheneg",
    xpe: "Liberia Kpelle",
    xpg: "Phrygian",
    xpi: "Pictish",
    xpj: "Mpalitjanh",
    xpk: "Kulina Pano",
    xpm: "Pumpokol",
    xpn: "Kapinaw\xE1",
    xpo: "Pochutec",
    xpp: "Puyo-Paekche",
    xpq: "Mohegan-Pequot",
    xpr: "Parthian",
    xps: "Pisidian",
    xpt: "Punthamara",
    xpu: "Punic",
    xpy: "Puyo",
    xqa: "Karakhanid",
    xqt: "Qatabanian",
    xra: "Krah\xF4",
    xrb: "Eastern Karaboro",
    xrd: "Gundungurra",
    xre: "Kreye",
    xrg: "Minang",
    xri: "Krikati-Timbira",
    xrm: "Armazic",
    xrn: "Arin",
    xrq: "Karranga",
    xrr: "Raetic",
    xrt: "Aranama-Tamique",
    xru: "Marriammu",
    xrw: "Karawa",
    xsa: "Sabaean",
    xsb: "Sambal",
    xsc: "Scythian",
    xsd: "Sidetic",
    xse: "Sempan",
    xsh: "Shamang",
    xsi: "Sio",
    xsl: "South Slavey",
    xsm: "Kasem",
    xsn: "Sanga (Nigeria)",
    xso: "Solano",
    xsp: "Silopi",
    xsq: "Makhuwa-Saka",
    xsr: "Sherpa",
    xss: "Assan",
    xsu: "Sanum\xE1",
    xsv: "Sudovian",
    xsy: "Saisiyat",
    xta: "Alcozauca Mixtec",
    xtb: "Chazumba Mixtec",
    xtc: "Katcha-Kadugli-Miri",
    xtd: "Diuxi-Tilantongo Mixtec",
    xte: "Ketengban",
    xtg: "Transalpine Gaulish",
    xth: "Yitha Yitha",
    xti: "Sinicahua Mixtec",
    xtj: "San Juan Teita Mixtec",
    xtl: "Tijaltepec Mixtec",
    xtm: "Magdalena Pe\xF1asco Mixtec",
    xtn: "Northern Tlaxiaco Mixtec",
    xto: "Tokharian A",
    xtp: "San Miguel Piedras Mixtec",
    xtq: "Tumshuqese",
    xtr: "Early Tripuri",
    xts: "Sindihui Mixtec",
    xtt: "Tacahua Mixtec",
    xtu: "Cuyamecalco Mixtec",
    xtv: "Thawa",
    xtw: "Tawand\xEA",
    xty: "Yoloxochitl Mixtec",
    xtz: "Tasmanian",
    xua: "Alu Kurumba",
    xub: "Betta Kurumba",
    xud: "Umiida",
    xug: "Kunigami",
    xuj: "Jennu Kurumba",
    xul: "Ngunawal",
    xum: "Umbrian",
    xun: "Unggaranggu",
    xuo: "Kuo",
    xup: "Upper Umpqua",
    xur: "Urartian",
    xut: "Kuthant",
    xuu: "Kxoe",
    xve: "Venetic",
    xvi: "Kamviri",
    xvn: "Vandalic",
    xvo: "Volscian",
    xvs: "Vestinian",
    xwa: "Kwaza",
    xwc: "Woccon",
    xwd: "Wadi Wadi",
    xwe: "Xwela Gbe",
    xwg: "Kwegu",
    xwj: "Wajuk",
    xwk: "Wangkumara",
    xwl: "Western Xwla Gbe",
    xwo: "Written Oirat",
    xwr: "Kwerba Mamberamo",
    xwt: "Wotjobaluk",
    xww: "Wemba Wemba",
    xxb: "Boro (Ghana)",
    xxk: "Ke'o",
    xxm: "Minkin",
    xxr: "Korop\xF3",
    xxt: "Tambora",
    xya: "Yaygir",
    xyb: "Yandjibara",
    xyj: "Mayi-Yapi",
    xyk: "Mayi-Kulan",
    xyl: "Yalakalore",
    xyt: "Mayi-Thakurti",
    xyy: "Yorta Yorta",
    xzh: "Zhang-Zhung",
    xzm: "Zemgalian",
    xzp: "Ancient Zapotec",
    yaa: "Yaminahua",
    yab: "Yuhup",
    yac: "Pass Valley Yali",
    yad: "Yagua",
    yae: "Pum\xE9",
    yaf: "Yaka (Democratic Republic of Congo)",
    yag: "Y\xE1mana",
    yah: "Yazgulyam",
    yai: "Yagnobi",
    yaj: "Banda-Yangere",
    yak: "Yakama",
    yal: "Yalunka",
    yam: "Yamba",
    yan: "Mayangna",
    yao: "Yao",
    yap: "Yapese",
    yaq: "Yaqui",
    yar: "Yabarana",
    yas: "Nugunu (Cameroon)",
    yat: "Yambeta",
    yau: "Yuwana",
    yav: "Yangben",
    yaw: "Yawalapit\xED",
    yax: "Yauma",
    yay: "Agwagwune",
    yaz: "Lokaa",
    yba: "Yala",
    ybb: "Yemba",
    ybe: "West Yugur",
    ybh: "Yakha",
    ybi: "Yamphu",
    ybj: "Hasha",
    ybk: "Bokha",
    ybl: "Yukuben",
    ybm: "Yaben",
    ybn: "Yaba\xE2na",
    ybo: "Yabong",
    ybx: "Yawiyo",
    yby: "Yaweyuha",
    ych: "Chesu",
    ycl: "Lolopo",
    ycn: "Yucuna",
    ycp: "Chepya",
    yda: "Yanda",
    ydd: "Eastern Yiddish",
    yde: "Yangum Dey",
    ydg: "Yidgha",
    ydk: "Yoidik",
    yea: "Ravula",
    yec: "Yeniche",
    yee: "Yimas",
    yei: "Yeni",
    yej: "Yevanic",
    yel: "Yela",
    yer: "Tarok",
    yes: "Nyankpa",
    yet: "Yetfa",
    yeu: "Yerukula",
    yev: "Yapunda",
    yey: "Yeyi",
    yga: "Malyangapa",
    ygi: "Yiningayi",
    ygl: "Yangum Gel",
    ygm: "Yagomi",
    ygp: "Gepo",
    ygr: "Yagaria",
    ygs: "Yol\u014Bu Sign Language",
    ygu: "Yugul",
    ygw: "Yagwoia",
    yha: "Baha Buyang",
    yhd: "Judeo-Iraqi Arabic",
    yhl: "Hlepho Phowa",
    yhs: "Yan-nha\u014Bu Sign Language",
    yia: "Yinggarda",
    yid: "Yiddish",
    yif: "Ache",
    yig: "Wusa Nasu",
    yih: "Western Yiddish",
    yii: "Yidiny",
    yij: "Yindjibarndi",
    yik: "Dongshanba Lalo",
    yil: "Yindjilandji",
    yim: "Yimchungru Naga",
    yin: "Yinchia",
    yip: "Pholo",
    yiq: "Miqie",
    yir: "North Awyu",
    yis: "Yis",
    yit: "Eastern Lalu",
    yiu: "Awu",
    yiv: "Northern Nisu",
    yix: "Axi Yi",
    yiz: "Azhe",
    yka: "Yakan",
    ykg: "Northern Yukaghir",
    yki: "Yoke",
    ykk: "Yakaikeke",
    ykl: "Khlula",
    ykm: "Kap",
    ykn: "Kua-nsi",
    yko: "Yasa",
    ykr: "Yekora",
    ykt: "Kathu",
    yku: "Kuamasi",
    yky: "Yakoma",
    yla: "Yaul",
    ylb: "Yaleba",
    yle: "Yele",
    ylg: "Yelogu",
    yli: "Angguruk Yali",
    yll: "Yil",
    ylm: "Limi",
    yln: "Langnian Buyang",
    ylo: "Naluo Yi",
    ylr: "Yalarnnga",
    ylu: "Aribwaung",
    yly: "Ny\xE2layu",
    ymb: "Yambes",
    ymc: "Southern Muji",
    ymd: "Muda",
    yme: "Yameo",
    ymg: "Yamongeri",
    ymh: "Mili",
    ymi: "Moji",
    ymk: "Makwe",
    yml: "Iamalele",
    ymm: "Maay",
    ymn: "Yamna",
    ymo: "Yangum Mon",
    ymp: "Yamap",
    ymq: "Qila Muji",
    ymr: "Malasar",
    yms: "Mysian",
    ymx: "Northern Muji",
    ymz: "Muzi",
    yna: "Aluo",
    ynd: "Yandruwandha",
    yne: "Lang'e",
    yng: "Yango",
    ynk: "Naukan Yupik",
    ynl: "Yangulam",
    ynn: "Yana",
    yno: "Yong",
    ynq: "Yendang",
    yns: "Yansi",
    ynu: "Yahuna",
    yob: "Yoba",
    yog: "Yogad",
    yoi: "Yonaguni",
    yok: "Yokuts",
    yol: "Yola",
    yom: "Yombe",
    yon: "Yongkom",
    yor: "Yoruba",
    yot: "Yotti",
    yox: "Yoron",
    yoy: "Yoy",
    ypa: "Phala",
    ypb: "Labo Phowa",
    ypg: "Phola",
    yph: "Phupha",
    ypm: "Phuma",
    ypn: "Ani Phowa",
    ypo: "Alo Phola",
    ypp: "Phupa",
    ypz: "Phuza",
    yra: "Yerakai",
    yrb: "Yareba",
    yre: "Yaour\xE9",
    yrk: "Nenets",
    yrl: "Nhengatu",
    yrm: "Yirrk-Mel",
    yrn: "Yerong",
    yro: "Yaroam\xEB",
    yrs: "Yarsun",
    yrw: "Yarawata",
    yry: "Yarluyandi",
    ysc: "Yassic",
    ysd: "Samatao",
    ysg: "Sonaga",
    ysl: "Yugoslavian Sign Language",
    ysn: "Sani",
    yso: "Nisi (China)",
    ysp: "Southern Lolopo",
    ysr: "Sirenik Yupik",
    yss: "Yessan-Mayo",
    ysy: "Sanie",
    yta: "Talu",
    ytl: "Tanglang",
    ytp: "Thopho",
    ytw: "Yout Wam",
    yty: "Yatay",
    yua: "Yucateco",
    yub: "Yugambal",
    yuc: "Yuchi",
    yud: "Judeo-Tripolitanian Arabic",
    yue: "Yue Chinese",
    yuf: "Havasupai-Walapai-Yavapai",
    yug: "Yug",
    yui: "Yurut\xED",
    yuj: "Karkar-Yuri",
    yuk: "Yuki",
    yul: "Yulu",
    yum: "Quechan",
    yun: "Bena (Nigeria)",
    yup: "Yukpa",
    yuq: "Yuqui",
    yur: "Yurok",
    yut: "Yopno",
    yuw: "Yau (Morobe Province)",
    yux: "Southern Yukaghir",
    yuy: "East Yugur",
    yuz: "Yuracare",
    yva: "Yawa",
    yvt: "Yavitero",
    ywa: "Kalou",
    ywg: "Yinhawangka",
    ywl: "Western Lalu",
    ywn: "Yawanawa",
    ywq: "Wuding-Luquan Yi",
    ywr: "Yawuru",
    ywt: "Xishanba Lalo",
    ywu: "Wumeng Nasu",
    yww: "Yawarawarga",
    yxa: "Mayawali",
    yxg: "Yagara",
    yxl: "Yardliyawarra",
    yxm: "Yinwum",
    yxu: "Yuyu",
    yxy: "Yabula Yabula",
    yyr: "Yir Yoront",
    yyu: "Yau (Sandaun Province)",
    yyz: "Ayizi",
    yzg: "E'ma Buyang",
    yzk: "Zokhuo",
    zaa: "Sierra de Ju\xE1rez Zapotec",
    zab: "Western Tlacolula Valley Zapotec",
    zac: "Ocotl\xE1n Zapotec",
    zad: "Cajonos Zapotec",
    zae: "Yareni Zapotec",
    zaf: "Ayoquesco Zapotec",
    zag: "Zaghawa",
    zah: "Zangwal",
    zai: "Isthmus Zapotec",
    zaj: "Zaramo",
    zak: "Zanaki",
    zal: "Zauzou",
    zam: "Miahuatl\xE1n Zapotec",
    zao: "Ozolotepec Zapotec",
    zap: "Zapotec",
    zaq: "Alo\xE1pam Zapotec",
    zar: "Rinc\xF3n Zapotec",
    zas: "Santo Domingo Albarradas Zapotec",
    zat: "Tabaa Zapotec",
    zau: "Zangskari",
    zav: "Yatzachi Zapotec",
    zaw: "Mitla Zapotec",
    zax: "Xadani Zapotec",
    zay: "Zayse-Zergulla",
    zaz: "Zari",
    zbc: "Central Berawan",
    zbe: "East Berawan",
    zbl: "Blissymbols",
    zbt: "Batui",
    zbw: "West Berawan",
    zca: "Coatecas Altas Zapotec",
    zch: "Central Hongshuihe Zhuang",
    zdj: "Ngazidja Comorian",
    zea: "Zeeuws",
    zeg: "Zenag",
    zeh: "Eastern Hongshuihe Zhuang",
    zen: "Zenaga",
    zga: "Kinga",
    zgb: "Guibei Zhuang",
    zgh: "Standard Moroccan Tamazight",
    zgm: "Minz Zhuang",
    zgn: "Guibian Zhuang",
    zgr: "Magori",
    zha: "Zhuang",
    zhb: "Zhaba",
    zhd: "Dai Zhuang",
    zhi: "Zhire",
    zhn: "Nong Zhuang",
    zho: "Chinese",
    zhw: "Zhoa",
    zia: "Zia",
    zib: "Zimbabwe Sign Language",
    zik: "Zimakani",
    zil: "Zialo",
    zim: "Mesme",
    zin: "Zinza",
    zir: "Ziriya",
    ziw: "Zigula",
    ziz: "Zizilivakan",
    zka: "Kaimbulawa",
    zkb: "Koibal",
    zkd: "Kadu",
    zkg: "Koguryo",
    zkh: "Khorezmian",
    zkk: "Karankawa",
    zkn: "Kanan",
    zko: "Kott",
    zkp: "S\xE3o Paulo Kaing\xE1ng",
    zkr: "Zakhring",
    zkt: "Kitan",
    zku: "Kaurna",
    zkv: "Krevinian",
    zkz: "Khazar",
    zlj: "Liujiang Zhuang",
    zlm: "Malay (individual language)",
    zln: "Lianshan Zhuang",
    zlq: "Liuqian Zhuang",
    zma: "Manda (Australia)",
    zmb: "Zimba",
    zmc: "Margany",
    zmd: "Maridan",
    zme: "Mangerr",
    zmf: "Mfinu",
    zmg: "Marti Ke",
    zmh: "Makolkol",
    zmi: "Negeri Sembilan Malay",
    zmj: "Maridjabin",
    zmk: "Mandandanyi",
    zml: "Madngele",
    zmm: "Marimanindji",
    zmn: "Mbangwe",
    zmo: "Molo",
    zmp: "Mpuono",
    zmq: "Mituku",
    zmr: "Maranunggu",
    zms: "Mbesa",
    zmt: "Maringarr",
    zmu: "Muruwari",
    zmv: "Mbariman-Gudhinma",
    zmw: "Mbo (Democratic Republic of Congo)",
    zmx: "Bomitaba",
    zmy: "Mariyedi",
    zmz: "Mbandja",
    zna: "Zan Gula",
    zne: "Zande (individual language)",
    zng: "Mang",
    znk: "Manangkari",
    zns: "Mangas",
    zoc: "Copainal\xE1 Zoque",
    zoh: "Chimalapa Zoque",
    zom: "Zou",
    zoo: "Asunci\xF3n Mixtepec Zapotec",
    zoq: "Tabasco Zoque",
    zor: "Ray\xF3n Zoque",
    zos: "Francisco Le\xF3n Zoque",
    zpa: "Lachiguiri Zapotec",
    zpb: "Yautepec Zapotec",
    zpc: "Choapan Zapotec",
    zpd: "Southeastern Ixtl\xE1n Zapotec",
    zpe: "Petapa Zapotec",
    zpf: "San Pedro Quiatoni Zapotec",
    zpg: "Guevea De Humboldt Zapotec",
    zph: "Totomachapan Zapotec",
    zpi: "Santa Mar\xEDa Quiegolani Zapotec",
    zpj: "Quiavicuzas Zapotec",
    zpk: "Tlacolulita Zapotec",
    zpl: "Lachix\xEDo Zapotec",
    zpm: "Mixtepec Zapotec",
    zpn: "Santa In\xE9s Yatzechi Zapotec",
    zpo: "Amatl\xE1n Zapotec",
    zpp: "El Alto Zapotec",
    zpq: "Zoogocho Zapotec",
    zpr: "Santiago Xanica Zapotec",
    zps: "Coatl\xE1n Zapotec",
    zpt: "San Vicente Coatl\xE1n Zapotec",
    zpu: "Yal\xE1lag Zapotec",
    zpv: "Chichicapan Zapotec",
    zpw: "Zaniza Zapotec",
    zpx: "San Baltazar Loxicha Zapotec",
    zpy: "Mazaltepec Zapotec",
    zpz: "Texmelucan Zapotec",
    zqe: "Qiubei Zhuang",
    zra: "Kara (Korea)",
    zrg: "Mirgan",
    zrn: "Zerenkel",
    zro: "Z\xE1paro",
    zrp: "Zarphatic",
    zrs: "Mairasi",
    zsa: "Sarasira",
    zsk: "Kaskean",
    zsl: "Zambian Sign Language",
    zsm: "Standard Malay",
    zsr: "Southern Rincon Zapotec",
    zsu: "Sukurum",
    zte: "Elotepec Zapotec",
    ztg: "Xanagu\xEDa Zapotec",
    ztl: "Lapagu\xEDa-Guivini Zapotec",
    ztm: "San Agust\xEDn Mixtepec Zapotec",
    ztn: "Santa Catarina Albarradas Zapotec",
    ztp: "Loxicha Zapotec",
    ztq: "Quioquitani-Quier\xED Zapotec",
    zts: "Tilquiapan Zapotec",
    ztt: "Tejalapan Zapotec",
    ztu: "G\xFCil\xE1 Zapotec",
    ztx: "Zaachila Zapotec",
    zty: "Yatee Zapotec",
    zua: "Zeem",
    zuh: "Tokano",
    zul: "Zulu",
    zum: "Kumzari",
    zun: "Zuni",
    zuy: "Zumaya",
    zwa: "Zay",
    zxx: "No linguistic content",
    zyb: "Yongbei Zhuang",
    zyg: "Yang Zhuang",
    zyj: "Youjiang Zhuang",
    zyn: "Yongnan Zhuang",
    zyp: "Zyphe Chin",
    zza: "Zaza",
    zzj: "Zuojiang Zhuang"
  };

  // demo/full/scripts/lib/translateLanguageCode.js
  function translateLanguageCode(langCode) {
    if (!langCode) {
      return "unknown";
    }
    return languages_default2[langCode.toLowerCase()] || langCode;
  }

  // demo/full/scripts/controllers/knobs/AudioTrack.jsx
  var AUDIO_DESCRIPTION_ICON = "(AD)";
  var findLanguageIndex = (language, languages) => {
    return languages.findIndex((ln) => ln.id === language.id);
  };
  var AudioTrackKnobBase = ({
    player,
    className,
    currentLanguage,
    availableLanguages = []
  }) => {
    let options = [];
    let selectedIndex;
    if (!availableLanguages.length) {
      options = ["Not available"];
      selectedIndex = 0;
    } else {
      options = availableLanguages.map((language) => {
        return translateLanguageCode(language.normalized) + (language.audioDescription ? " " + AUDIO_DESCRIPTION_ICON : "");
      });
      selectedIndex = currentLanguage ? Math.max(findLanguageIndex(currentLanguage, availableLanguages), 0) : 0;
    }
    const onLanguageChange = ({ index }) => {
      const track = availableLanguages[index];
      player.dispatch("SET_AUDIO_TRACK", track);
    };
    return /* @__PURE__ */ import_react40.default.createElement(Knob_default, {
      name: "Audio Language",
      ariaLabel: "Update the audio track",
      className,
      disabled: availableLanguages.length < 2,
      onChange: onLanguageChange,
      options,
      selected: { index: selectedIndex }
    });
  };
  var AudioTrack_default = import_react40.default.memo(withModulesState_default({
    player: {
      language: "currentLanguage",
      availableLanguages: "availableLanguages"
    }
  })(AudioTrackKnobBase));

  // demo/full/scripts/controllers/knobs/Subtitles.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react41 = __toESM(require_react());
  var CLOSED_CAPTION_ICON = "(CC)";
  var findLanguageIndex2 = (currentSubtitle, languages) => {
    return languages.findIndex((ln) => ln.id === currentSubtitle.id);
  };
  var SubtitlesKnobBase = ({
    player,
    className,
    currentSubtitle,
    availableSubtitles = []
  }) => {
    const options = [
      "no subtitles",
      ...availableSubtitles.map((subtitle) => {
        return translateLanguageCode(subtitle.normalized) + (subtitle.closedCaption ? " " + CLOSED_CAPTION_ICON : "");
      })
    ];
    const currentLanguageIndex = currentSubtitle ? findLanguageIndex2(currentSubtitle, availableSubtitles) + 1 : 0;
    const onLanguageChange = ({ index }) => {
      if (index > 0) {
        const sub = availableSubtitles[index - 1];
        player.dispatch("SET_SUBTITLES_TRACK", sub);
      } else {
        player.dispatch("DISABLE_SUBTITLES_TRACK");
      }
    };
    return /* @__PURE__ */ import_react41.default.createElement(Knob_default, {
      name: "Subtitles Track",
      ariaLabel: "Update the current subtitles",
      className,
      disabled: options.length <= 1,
      onChange: onLanguageChange,
      options,
      selected: { index: currentLanguageIndex }
    });
  };
  var Subtitles_default = import_react41.default.memo(withModulesState_default({
    player: {
      subtitle: "currentSubtitle",
      availableSubtitles: "availableSubtitles"
    }
  })(SubtitlesKnobBase));

  // demo/full/scripts/controllers/knobs/VideoTrack.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react42 = __toESM(require_react());
  var findVideoTrackIndex = (track, tracks) => {
    return tracks.findIndex((ln) => ln.id === track.id);
  };
  var VideoTrackKnobBase = ({
    player,
    className,
    availableVideoTracks = [],
    currentVideoTrack
  }) => {
    let options = [];
    let selectedIndex = 0;
    if (!availableVideoTracks.length) {
      options = ["Not available"];
    } else {
      options = ["no video track"].concat(availableVideoTracks.map((track, i) => `track ${i}: ${track.id}`));
      if (currentVideoTrack) {
        selectedIndex = 1 + findVideoTrackIndex(currentVideoTrack, availableVideoTracks);
      }
    }
    const onTrackChange = ({ index }) => {
      if (index === 0) {
        player.dispatch("DISABLE_VIDEO_TRACK");
      } else {
        const track = availableVideoTracks[index - 1];
        player.dispatch("SET_VIDEO_TRACK", track);
      }
    };
    return /* @__PURE__ */ import_react42.default.createElement(Knob_default, {
      name: "Video Track",
      ariaLabel: "Update the video track",
      className,
      disabled: options.length <= 1,
      onChange: onTrackChange,
      options,
      selected: { index: selectedIndex }
    });
  };
  var VideoTrack_default = import_react42.default.memo(withModulesState_default({
    player: {
      videoTrack: "currentVideoTrack",
      availableVideoTracks: "availableVideoTracks"
    }
  })(VideoTrackKnobBase));

  // demo/full/scripts/controllers/knobs/SpeedKnob.jsx
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  var import_react43 = __toESM(require_react());
  var AVAILABLE_RATES = [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.5, 3];
  var PlaybackRateKnob = ({
    player,
    className,
    playbackRate
  }) => {
    const aliases = { 1: "Normal" };
    const options = AVAILABLE_RATES.map((rate) => {
      return aliases[rate] || rate;
    });
    let selectedIndex = AVAILABLE_RATES.findIndex((rate) => playbackRate === rate);
    const onPlaybackRateChange = ({ index }) => {
      if (index > -1) {
        selectedIndex = index;
        const rate = AVAILABLE_RATES[index];
        player.dispatch("SET_PLAYBACK_RATE", rate);
      }
    };
    return /* @__PURE__ */ import_react43.default.createElement(Knob_default, {
      className,
      ariaLabel: "Update the current playback speed",
      name: "Playback Rate",
      disabled: options.length < 2,
      onChange: onPlaybackRateChange,
      options,
      selected: { index: selectedIndex }
    });
  };
  var SpeedKnob_default = import_react43.default.memo(withModulesState_default({
    player: {
      playbackRate: "playbackRate"
    }
  })(PlaybackRateKnob));

  // demo/full/scripts/controllers/PlayerKnobsSettings.jsx
  function PlayerKnobsSettings({
    shouldDisplay,
    close,
    player,
    lowLatencyMode,
    isContentLoaded
  }) {
    if (!isContentLoaded) {
      return null;
    }
    const className = "player-knobs settings" + (shouldDisplay ? " fade-in-out" : "");
    return /* @__PURE__ */ import_react44.default.createElement("div", {
      className
    }, /* @__PURE__ */ import_react44.default.createElement("div", {
      className: "player-knobs-header"
    }, /* @__PURE__ */ import_react44.default.createElement("span", {
      className: "player-knobs-title"
    }, "Settings"), /* @__PURE__ */ import_react44.default.createElement("span", {
      className: "player-knobs-close",
      onClick: () => {
        close();
      }
    }, String.fromCharCode(61453))), /* @__PURE__ */ import_react44.default.createElement("div", {
      className: "player-knobs-content"
    }, lowLatencyMode ? null : /* @__PURE__ */ import_react44.default.createElement(SpeedKnob_default, {
      className: "black-knob",
      player
    }), /* @__PURE__ */ import_react44.default.createElement(AudioBitrate_default, {
      className: "black-knob",
      player
    }), /* @__PURE__ */ import_react44.default.createElement(VideoBitrate_default, {
      className: "black-knob",
      player
    }), /* @__PURE__ */ import_react44.default.createElement(AudioTrack_default, {
      className: "black-knob",
      player
    }), /* @__PURE__ */ import_react44.default.createElement(Subtitles_default, {
      className: "black-knob",
      player
    }), /* @__PURE__ */ import_react44.default.createElement(VideoTrack_default, {
      className: "black-knob",
      player
    })));
  }
  var PlayerKnobsSettings_default = import_react44.default.memo(withModulesState_default({
    player: {
      lowLatencyMode: "lowLatencyMode",
      isStopped: "isStopped",
      isContentLoaded: "isContentLoaded"
    }
  })(PlayerKnobsSettings));

  // demo/full/scripts/lib/isEqual.js
  init_define_ENVIRONMENT();
  init_define_FEATURES();
  init_define_LOGGER_LEVEL();
  function isEqual(obj1, obj2) {
    if (obj1 === obj2) {
      return true;
    }
    for (const prop in obj1) {
      if (!Object.prototype.hasOwnProperty.call(obj2, prop)) {
        return false;
      }
      if (obj1[prop] !== obj2[prop]) {
        return false;
      }
    }
    return true;
  }
  var isEqual_default = isEqual;

  // demo/full/scripts/controllers/Player.jsx
  var SPINNER_TIMEOUT = 300;
  function Player2() {
    const [player, setPlayer] = (0, import_react45.useState)(null);
    const [autoPlayBlocked, setAutoPlayBlocked] = (0, import_react45.useState)(false);
    const [displaySpinner, setDisplaySpinner] = (0, import_react45.useState)(false);
    const [displaySettings, setDisplaySettings] = (0, import_react45.useState)(false);
    const [isStopped, setIsStopped] = (0, import_react45.useState)(false);
    const [enableVideoThumbnails, setEnableVideoThumbnails] = (0, import_react45.useState)(false);
    const [showOptions, setShowOptions] = (0, import_react45.useState)(false);
    const initOptsRef = (0, import_react45.useRef)(null);
    const $destroySubjectRef = (0, import_react45.useRef)(null);
    const displaySpinnerTimeoutRef = (0, import_react45.useRef)(0);
    const videoElementRef = (0, import_react45.useRef)(null);
    const textTrackElement = (0, import_react45.useRef)(null);
    const playerWrapperElement = (0, import_react45.useRef)(null);
    const optionsComp = (0, import_react45.useRef)(null);
    const onOptionToggle = () => setShowOptions((prevState) => !prevState);
    const createNewPlayerModule = (videoContent) => {
      const { initOpts } = optionsComp.current.getOptions();
      const playerMod = createModule(player_default, __spreadValues({
        videoElement: videoElementRef.current,
        textTrackElement: textTrackElement.current
      }, initOpts));
      initOptsRef.current = initOpts;
      $destroySubjectRef.current = new Subject();
      $destroySubjectRef.current.subscribe(() => playerMod.destroy());
      playerMod.$get("autoPlayBlocked", "isSeeking", "isBuffering", "isLoading", "isReloading", "isStopped", "videoTrackHasTrickMode", "videoElement").pipe(takeUntil($destroySubjectRef.current)).subscribe(([
        newAutoPlayBlocked,
        isSeeking,
        isBuffering,
        isLoading,
        isReloading,
        newIsStopped,
        videoTrackHasTrickMode
      ]) => {
        setAutoPlayBlocked(newAutoPlayBlocked);
        setIsStopped(newIsStopped);
        if (isLoading || isReloading) {
          setDisplaySpinner(true);
        } else if (isSeeking || isBuffering) {
          if (displaySpinnerTimeoutRef.current) {
            clearTimeout(displaySpinnerTimeoutRef.current);
          }
          displaySpinnerTimeoutRef.current = setTimeout(() => {
            setDisplaySpinner(true);
          }, SPINNER_TIMEOUT);
        } else {
          if (displaySpinnerTimeoutRef.current) {
            clearTimeout(displaySpinnerTimeoutRef.current);
            displaySpinnerTimeoutRef.current = 0;
          }
          setDisplaySpinner(false);
        }
        if (enableVideoThumbnails !== videoTrackHasTrickMode) {
          setEnableVideoThumbnails(videoTrackHasTrickMode);
        }
      });
      if (videoContent) {
        const { loadVideoOpts } = optionsComp.current.getOptions();
        if (videoContent.lowLatencyMode) {
          playerMod.dispatch("ENABLE_LIVE_CATCH_UP");
        } else {
          playerMod.dispatch("DISABLE_LIVE_CATCH_UP");
        }
        playerMod.dispatch("SET_PLAYBACK_RATE", 1);
        playerMod.dispatch("LOAD", __spreadValues(__spreadValues({}, videoContent), loadVideoOpts));
      }
      setPlayer(playerMod);
    };
    const cleanCurrentPlayer = () => {
      if ($destroySubjectRef.current) {
        $destroySubjectRef.current.next();
        $destroySubjectRef.current.complete();
      }
      if (displaySpinnerTimeoutRef.current) {
        clearTimeout(displaySpinnerTimeoutRef.current);
      }
      setPlayer(null);
    };
    (0, import_react45.useEffect)(() => {
      createNewPlayerModule();
      return () => {
        cleanCurrentPlayer();
      };
    }, []);
    const onVideoClick = (0, import_react45.useCallback)(() => {
      const { isPaused, isContentLoaded } = player.get();
      if (!isContentLoaded) {
        return;
      }
      if (isPaused) {
        player.dispatch("PLAY");
      } else {
        player.dispatch("DISABLE_LIVE_CATCH_UP");
        player.dispatch("PAUSE");
      }
    }, [player]);
    const loadVideo = (0, import_react45.useCallback)((video) => {
      const { initOpts: newInitOpts, loadVideoOpts } = optionsComp.current.getOptions();
      if (!isEqual_default(initOptsRef.current, newInitOpts)) {
        initOptsRef.current = newInitOpts;
        cleanCurrentPlayer();
        createNewPlayerModule(video);
      } else {
        if (video.lowLatencyMode) {
          player.dispatch("ENABLE_LIVE_CATCH_UP");
        } else {
          player.dispatch("DISABLE_LIVE_CATCH_UP");
        }
        player.dispatch("SET_PLAYBACK_RATE", 1);
        player.dispatch("LOAD", __spreadValues(__spreadValues({}, video), loadVideoOpts));
      }
    }, [player]);
    const stopVideo = (0, import_react45.useCallback)(() => player.dispatch("STOP"), [player]);
    const closeSettings = (0, import_react45.useCallback)(() => {
      setDisplaySettings(false);
    }, []);
    const toggleSettings = (0, import_react45.useCallback)(() => {
      setDisplaySettings(!displaySettings);
    }, [displaySettings]);
    return /* @__PURE__ */ import_react45.default.createElement("section", {
      className: "video-player-section"
    }, /* @__PURE__ */ import_react45.default.createElement("div", {
      className: "video-player-content"
    }, /* @__PURE__ */ import_react45.default.createElement(ContentList_default, {
      loadVideo,
      isStopped,
      showOptions,
      onOptionToggle
    }), /* @__PURE__ */ import_react45.default.createElement(Settings_default, {
      showOptions,
      ref: optionsComp
    }), /* @__PURE__ */ import_react45.default.createElement("div", {
      className: "video-player-wrapper",
      ref: playerWrapperElement
    }, /* @__PURE__ */ import_react45.default.createElement("div", {
      className: "video-screen-parent"
    }, /* @__PURE__ */ import_react45.default.createElement("div", {
      className: "video-screen",
      onClick: () => onVideoClick()
    }, player ? /* @__PURE__ */ import_react45.default.createElement(ErrorDisplayer_default, {
      player
    }) : null, autoPlayBlocked ? /* @__PURE__ */ import_react45.default.createElement("div", {
      className: "video-player-manual-play-container"
    }, /* @__PURE__ */ import_react45.default.createElement("img", {
      className: "video-player-manual-play",
      alt: "Play",
      src: "./assets/play.svg"
    })) : null, !autoPlayBlocked && displaySpinner ? /* @__PURE__ */ import_react45.default.createElement("img", {
      src: "./assets/spinner.gif",
      className: "video-player-spinner"
    }) : null, /* @__PURE__ */ import_react45.default.createElement("div", {
      className: "text-track",
      ref: textTrackElement
    }), /* @__PURE__ */ import_react45.default.createElement("video", {
      ref: videoElementRef
    })), player ? /* @__PURE__ */ import_react45.default.createElement(PlayerKnobsSettings_default, {
      close: closeSettings,
      shouldDisplay: displaySettings,
      player
    }) : null), player ? /* @__PURE__ */ import_react45.default.createElement(ControlBar_default, {
      player,
      videoElement: playerWrapperElement.current,
      toggleSettings,
      stopVideo,
      enableVideoThumbnails
    }) : null), /* @__PURE__ */ import_react45.default.createElement(charts_default, {
      player
    }), player ? /* @__PURE__ */ import_react45.default.createElement(LogDisplayer_default, {
      player
    }) : null));
  }
  var Player_default = Player2;

  // demo/full/scripts/controllers/Main.jsx
  function MainComponent() {
    return /* @__PURE__ */ import_react46.default.createElement("div", null, /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "nav-header"
    }, /* @__PURE__ */ import_react46.default.createElement("section", {
      className: "title-wrapper"
    }, /* @__PURE__ */ import_react46.default.createElement("h1", {
      className: "title"
    }, /* @__PURE__ */ import_react46.default.createElement("a", {
      href: "https://github.com/canalplus/rx-player"
    }, /* @__PURE__ */ import_react46.default.createElement("img", {
      className: "rxplayer-logo",
      alt: "RxPlayer",
      src: "./assets/logo_white.png"
    })), /* @__PURE__ */ import_react46.default.createElement("a", {
      href: "https://github.com/canalplus/rx-player/releases"
    }, /* @__PURE__ */ import_react46.default.createElement("span", {
      className: "version"
    }, " v" + src_default.version)))), /* @__PURE__ */ import_react46.default.createElement("div", {
      className: "header-links-buttons"
    }, /* @__PURE__ */ import_react46.default.createElement("a", {
      "aria-label": "Go to Canal+ website",
      href: "https://canalplus.com"
    }, /* @__PURE__ */ import_react46.default.createElement("img", {
      className: "title-logo",
      alt: "CANAL+",
      src: "./assets/canalp.svg"
    })), /* @__PURE__ */ import_react46.default.createElement("span", {
      className: "button-gh"
    }, /* @__PURE__ */ import_react46.default.createElement("a", {
      className: "github-button",
      href: "https://github.com/canalplus/rx-player",
      "data-size": "large",
      "data-icon": "octicon-star",
      "data-show-count": "true",
      "aria-label": "Star the RxPlayer on GitHub"
    }, "Star")), /* @__PURE__ */ import_react46.default.createElement("span", {
      className: "button-gh"
    }, /* @__PURE__ */ import_react46.default.createElement("a", {
      className: "github-button",
      href: "https://github.com/canalplus/rx-player/fork",
      "data-size": "large",
      "aria-label": "Fork the RxPlayer on GitHub"
    }, "Fork")))), /* @__PURE__ */ import_react46.default.createElement(Player_default, null));
  }
  var Main_default = MainComponent;

  // demo/full/scripts/index.jsx
  window.onload = function() {
    import_react_dom.default.render(/* @__PURE__ */ import_react47.default.createElement(Main_default, null), document.getElementById("player-container"));
  };
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
